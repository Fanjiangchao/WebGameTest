System.register("chunks:///_virtual/AchimedeanSpiral.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, math, v3, Vec3, Quat, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      math = module.math;
      v3 = module.v3;
      Vec3 = module.Vec3;
      Quat = module.Quat;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "aadd23CTGxBnY7bznOnEOcs", "AchimedeanSpiral", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AchimedeanSpiral = exports('AchimedeanSpiral', (_dec = ccclass('AchimedeanSpiral'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AchimedeanSpiral, _Component);

        function AchimedeanSpiral() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.addSpeed = 100;
          _this.t = 1;
          _this.distance = 1;
          _this.r = 0;
          _this.isStart = false;
          _this._center = v3(0, 0, 0);
          _this._angle = 6;
          _this.target = v3(0.7, 0.7, 0.7);
          _this.call = null;
          return _this;
        }

        var _proto = AchimedeanSpiral.prototype;

        _proto.update = function update(deltaTime) {
          if (this.isStart) {
            this.t -= this.addSpeed * deltaTime * 0.01;
            this.addSpeed -= 0.1;
            var dis = math.lerp(0, this.r, this.t);
            var scale = v3();

            if (dis <= 0) {
              dis = 0;
              this.isStart = false;
              this.call();
            }

            Vec3.lerp(scale, this.target, Vec3.ONE, dis / this.distance);
            var mquat = new Quat(0, 0.01745, 0, 0.99985);
            Quat.fromEuler(mquat, 0, this._angle, 0);
            var dir = v3();
            Vec3.normalize(dir, this.node.worldPosition.subtract(this._center));
            var rota = v3();
            Vec3.transformQuat(rota, dir, mquat);
            this.node.worldPosition = rota.multiplyScalar(dis).add(this._center);
            this.node.setScale(scale);
          }
        } //开始绕
        ;

        _proto.startSprial = function startSprial(startPos, endPos, call) {
          var _this2 = this;

          this.call = call;
          this.r = Vec3.distance(startPos, endPos);
          this.distance = this.r;
          this._center = endPos;
          var delay = this.r;
          this.t = 1;
          this._angle = 6;
          this.isStart = false;
          this.scheduleOnce(function () {
            _this2.isStart = true;
          }, delay * 0.2);
        };

        return AchimedeanSpiral;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnimalCfg.ts", ['cc'], function () {
  'use strict';

  var cclegacy, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1fdb0bwac1Ft7nDyDngmMDD", "AnimalCfg", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnimalFarm.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './DataManager.ts', './GameManager.ts', './TimeTools.ts', './Panel_Main.ts', './UIManager.ts', './NpcManager.ts', './HomeManager.ts', './PlayerFench.ts', './GameResponces.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, CCInteger, Node, director, randomRangeInt, Component, DataManager, GameFinishState, TimeTools, Panel_Main, UIManager, NpcManager, HomeManager, PlayerFench, GameResponces;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCInteger = module.CCInteger;
      Node = module.Node;
      director = module.director;
      randomRangeInt = module.randomRangeInt;
      Component = module.Component;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      GameFinishState = module.GameFinishState;
    }, function (module) {
      TimeTools = module.TimeTools;
    }, function (module) {
      Panel_Main = module.Panel_Main;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      NpcManager = module.NpcManager;
    }, function (module) {
      HomeManager = module.HomeManager;
    }, function (module) {
      PlayerFench = module.PlayerFench;
    }, function (module) {
      GameResponces = module.GameResponces;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _class3;

      cclegacy._RF.push({}, "4fbbccKJc9GbqLMKK65gUtk", "AnimalFarm", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var HomeAnimalInfo = exports('HomeAnimalInfo', function HomeAnimalInfo() {
        this.AnimalTy = void 0;
        this.Cnt = void 0;
      });
      var AnimalFarm = exports('AnimalFarm', (_dec = ccclass('AnimalFarm'), _dec2 = property({
        type: [CCInteger],
        visible: true,
        displayName: "动物"
      }), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AnimalFarm, _Component);

        function AnimalFarm() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.curtime = void 0;
          _this.lastCurTime = void 0;

          _initializerDefineProperty(_this, "_lisAnimals", _descriptor, _assertThisInitialized(_this));

          _this._listAnimalMap = new Map();
          _this.animalCfg = void 0;
          _this.homeCfg = void 0;
          _this.isInit = false;
          _this.totallrote = 0;
          _this.waitime = 0;
          _this.runAwayime = 0;
          _this.puaseBuildAnimal = false;
          _this.puaseRunAnimal = false;
          return _this;
        }

        AnimalFarm.getInstance = function getInstance() {
          if (!this._instance) {
            var framNode = new Node("AnimalFarm");
            this._instance = framNode.addComponent(AnimalFarm);
            director.getScene().addChild(framNode);
            director.addPersistRootNode(this._instance.node);
          }

          return this._instance;
        };

        var _proto = AnimalFarm.prototype;

        _proto.init = function init(homeCfg, homeManager) {
          var _this2 = this;

          if (!this.isInit) {
            this.isInit = true;
            this.homeCfg = homeCfg;
            this.animalCfg = this.homeCfg.animal;
            this.lastCurTime = DataManager.getInstance().playerData.lastBuildAnimalfram;

            DataManager.getInstance().playerData._listAnimals.forEach(function (element) {
              _this2.pushAnimals(element);
            });

            this.curtime = TimeTools.getCurTime();
            this.waitime = this.animalCfg[0].CreatTime;
            this.getTotallrote();
            var cnt = Math.floor((this.curtime - this.lastCurTime) / 1000 / this.waitime);
            this.buildAnimal(cnt);
            this.startBuildAnimal();
            this.runAwayAnimal();
          }
        };

        _proto.getTotallrote = function getTotallrote() {
          var _this3 = this; //总概率


          var totallPb = 0;
          this.animalCfg.forEach(function (element) {
            if (_this3.isUnlockAnimalType(element.Id)) {
              totallPb += element.CreatProbability;
            }
          });
          this.totallrote = totallPb;
        } //用于处理超过动物上线的添加
        ;

        _proto.checkOverLimit = function checkOverLimit(backCnt, gameState, watchAd) {
          if (watchAd === void 0) {
            watchAd = false;
          }

          var curNpc = NpcManager.getInstance().curNpc;
          var cnt = 0;

          if (gameState == GameFinishState.Win) {
            cnt = backCnt;

            if (curNpc) {
              if (watchAd) cnt += curNpc.residualAnimalCount * 2;else cnt += curNpc.residualAnimalCount;
            }
          } else if (gameState == GameFinishState.Lose) {
            cnt = backCnt;
          } else if (gameState == GameFinishState.RunAway) {
            cnt = Math.floor(backCnt * 0.5);
          } else if (gameState == GameFinishState.Other) {
            cnt = backCnt;
          } //超出上限的动物列表


          var randomAnimalList = new Array();
          var houselv = DataManager.getInstance().playerData.homeLv;
          var limit = this.homeCfg.house[houselv].LimitStorage; //超出的动物数

          var limitcnt = this._lisAnimals.length + cnt - limit;

          if (limitcnt > 0) {
            cnt = limit - this._lisAnimals.length;

            while (limitcnt > 0) {
              var prob = 0;
              var rangdomIndex = randomRangeInt(0, this.totallrote);

              for (var index = 0; index < this.animalCfg.length; index++) {
                var element = this.animalCfg[index];
                if (!this.isUnlockAnimalType(element.Id)) continue;
                prob += element.CreatProbability;

                if (prob > rangdomIndex && rangdomIndex >= prob - element.CreatProbability) {
                  limitcnt--;
                  randomAnimalList.push(element.Id);
                  break;
                }
              }
            }

            UIManager.getInstance().getPanel(Panel_Main).showPopexceed(randomAnimalList);
          }

          this.buildAnimal(cnt);
          HomeManager.getInstance().initAnimals();
          this.updateView();
          return randomAnimalList.length > 0;
        };

        _proto.runAwayAnimal = /*#__PURE__*/function () {
          var _runAwayAnimal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var houselv;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (!this.node.active) {
                    _context.next = 8;
                    break;
                  }

                  houselv = DataManager.getInstance().playerData.homeLv;
                  this.runAwayime = this.homeCfg.house[houselv].EscapeTime;
                  _context.next = 5;
                  return this.delay(this.runAwayime);

                case 5:
                  if (this._lisAnimals.length > 0) {
                    if (!PlayerFench.getInstance().isfullHp() && !this.puaseRunAnimal) {
                      this.popAnimal();
                    }
                  }

                  _context.next = 0;
                  break;

                case 8:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function runAwayAnimal() {
            return _runAwayAnimal.apply(this, arguments);
          }

          return runAwayAnimal;
        }();

        _proto.startBuildAnimal = /*#__PURE__*/function () {
          var _startBuildAnimal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var animalType, houselv, limit, prob, rangdomIndex, index, element;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  animalType = -1;

                case 1:
                  if (this.puaseBuildAnimal) {
                    _context2.next = 32;
                    break;
                  }

                  houselv = DataManager.getInstance().playerData.homeLv;
                  limit = this.homeCfg.house[houselv].LimitStorage;
                  this.updateView();
                  _context2.next = 8;
                  return this.delay(this.waitime);

                case 8:
                  if (!(this._lisAnimals.length < limit)) {
                    _context2.next = 30;
                    break;
                  }

                  prob = 0;
                  rangdomIndex = randomRangeInt(0, this.totallrote);
                  index = 0;

                case 12:
                  if (!(index < this.animalCfg.length)) {
                    _context2.next = 30;
                    break;
                  }

                  element = this.animalCfg[index];

                  if (this.isUnlockAnimalType(element.Id)) {
                    _context2.next = 16;
                    break;
                  }

                  return _context2.abrupt("continue", 27);

                case 16:
                  prob += element.CreatProbability;

                  if (!(prob > rangdomIndex && rangdomIndex >= prob - element.CreatProbability)) {
                    _context2.next = 27;
                    break;
                  }

                  animalType = element.Id;

                  if (!this.isAnimalLimit(limit, animalType)) {
                    _context2.next = 21;
                    break;
                  }

                  return _context2.abrupt("break", 30);

                case 21:
                  this.pushAnimal(animalType);

                  GameResponces._event.emit(GameResponces.createBronAnimal, animalType);

                  DataManager.getInstance().playerData._listAnimals = this._lisAnimals;
                  DataManager.getInstance().playerData.lastBuildAnimalfram = TimeTools.getCurTime();
                  DataManager.getInstance().savePlayData();
                  return _context2.abrupt("break", 30);

                case 27:
                  index++;
                  _context2.next = 12;
                  break;

                case 30:
                  _context2.next = 34;
                  break;

                case 32:
                  _context2.next = 34;
                  return this.delay(0.02);

                case 34:
                  _context2.next = 1;
                  break;

                case 36:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));

          function startBuildAnimal() {
            return _startBuildAnimal.apply(this, arguments);
          }

          return startBuildAnimal;
        }() //按概率生成动物列表
        ;

        _proto.buildNpcAnimals = function buildNpcAnimals(npc, cnt) {
          var list = []; //动物类型

          var animalType = -1;
          var houselv = npc.lv;
          var limit = this.homeCfg.house[houselv].LimitStorage;

          while (cnt > 0) {
            var prob = 0;
            var rangdomIndex = randomRangeInt(0, this.totallrote);

            for (var index = 0; index < this.animalCfg.length; index++) {
              var element = this.animalCfg[index];
              if (!this.isUnlockAnimalType(element.Id)) continue;
              prob += element.CreatProbability;

              if (prob > rangdomIndex && rangdomIndex >= prob - element.CreatProbability) {
                animalType = element.Id;
                if (this.isAnimalLimit(limit, animalType)) break;
                cnt--;
                list.push(animalType);
                break;
              }
            }
          }

          return list;
        };

        _proto.buildAnimal = function buildAnimal(n) {
          var cnt = n; //动物类型

          var animalType = -1;
          var houselv = DataManager.getInstance().playerData.homeLv;
          var limit = this.homeCfg.house[houselv].LimitStorage;

          while (cnt > 0) {
            if (this._lisAnimals.length < limit) {
              var prob = 0;
              var rangdomIndex = randomRangeInt(0, this.totallrote);

              for (var index = 0; index < this.animalCfg.length; index++) {
                var element = this.animalCfg[index];
                if (!this.isUnlockAnimalType(element.Id)) continue;
                prob += element.CreatProbability;

                if (prob > rangdomIndex && rangdomIndex >= prob - element.CreatProbability) {
                  animalType = element.Id;
                  if (this.isAnimalLimit(limit, animalType)) break;
                  cnt--;
                  this.pushAnimal(animalType);
                  break;
                }
              }
            } else {
              cnt = -1;
            }
          }

          DataManager.getInstance().playerData._listAnimals = this._lisAnimals;
          DataManager.getInstance().playerData.lastBuildAnimalfram = TimeTools.getCurTime();
          DataManager.getInstance().savePlayData();
          this.updateView();
        };

        _proto.updateView = function updateView() {
          var panel_main = UIManager.getInstance().getPanel(Panel_Main);

          if (panel_main) {
            var waitime = this.animalCfg[0].CreatTime;
            panel_main.updatehouse(this._lisAnimals.length, waitime);
          }
        };

        _proto.clearAnimals = function clearAnimals(cnt) {
          var deleAniamls = this._lisAnimals.splice(0, cnt); //删除一下map里的元素


          for (var index = 0; index < deleAniamls.length; index++) {
            var animal = deleAniamls[index];
            if (this._listAnimalMap.get(animal)) this._listAnimalMap.get(animal).Cnt--;
          }

          DataManager.getInstance().playerData._listAnimals = this._lisAnimals;
          DataManager.getInstance().playerData.lastBuildAnimalfram = TimeTools.getCurTime();
          DataManager.getInstance().savePlayData();
          this.updateView();
        };

        _proto.onGameStart = function onGameStart() {};

        _proto.isUnlockAnimalType = function isUnlockAnimalType(animalType) {
          return DataManager.getInstance().playerData.unlockAnimals.indexOf(animalType) >= 0;
        };

        _proto.isAnimalLimit = function isAnimalLimit(limit, animalType) {
          var l = Math.floor(this.animalCfg[animalType].SpecialAnimalLimit * limit); //   console.log("动物类型:"+animalType+"------动物上线："+l+"-----limit:"+limit);

          return this.getAnimalCnt(animalType) >= l;
        };

        _proto.popAnimal = function popAnimal() {
          var animalType = 0;

          if (this._lisAnimals.length > 0) {
            animalType = this._lisAnimals.pop();

            var animal = this._listAnimalMap.get(animalType);

            if (animal) {
              if (this._listAnimalMap.has(animalType)) {
                var a = this._listAnimalMap.get(animalType);

                if (a.Cnt > 0) a.Cnt--;
              }
            }
          }

          this.updateView();
          return animalType;
        };

        _proto.pushAnimal = function pushAnimal(animalType) {
          if (animalType == null || animalType == undefined) {
            console.error("随机了一个错误值：" + animalType);
            return;
          }

          this.pushAnimals(animalType);
        };

        _proto.pushAnimals = function pushAnimals(animalType) {
          if (animalType != null) {
            var houselv = DataManager.getInstance().playerData.homeLv;
            var limit = this.homeCfg.house[houselv].LimitStorage;

            if (this._lisAnimals.length < limit) {
              this._lisAnimals.push(animalType);

              var animal = this._listAnimalMap.get(animalType);

              if (!animal) {
                var am = new HomeAnimalInfo();
                am.AnimalTy = animalType;
                am.Cnt = 1;

                this._listAnimalMap.set(animalType, am);
              } else {
                animal.Cnt++;
              }
            }
          } else {
            console.error("错误的值：" + animalType);
          }
        };

        _proto.getTotallCoin = function getTotallCoin() {
          var _this4 = this;

          var totall = 0;

          this._listAnimalMap.forEach(function (element) {
            totall += element.Cnt * _this4.animalCfg[element.AnimalTy].Price;
          });

          return totall;
        };

        _proto.getCoin = function getCoin(list) {
          var _this5 = this;

          var totall = 0;
          list.forEach(function (animalType) {
            totall += _this5.animalCfg[animalType].Price;
          });
          return totall;
        };

        _proto.getAnimalCnt = function getAnimalCnt(n) {
          var cnt = 0;

          for (var index = 0; index < this._lisAnimals.length; index++) {
            var element = this._lisAnimals[index];
            if (element == n) cnt++;
          }

          return cnt;
        };

        _proto.delay = function delay(time) {
          var _this6 = this;

          return new Promise(function (reslove, reject) {
            _this6.scheduleOnce(function () {
              reslove(true);
            }, time);
          });
        };

        return AnimalFarm;
      }(Component), _class3._instance = void 0, _class3), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_lisAnimals", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Array();
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnimationExtend.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCBoolean, Animation;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCBoolean = module.CCBoolean;
      Animation = module.Animation;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "b4ff1R/kCpPkqfacfonbOIM", "AnimationExtend", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AnimationExtend = exports('AnimationExtend', (_dec = ccclass('AnimationExtend'), _dec2 = property({
        type: CCBoolean,
        visible: true,
        displayName: "是否在激活是重新播放动画"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Animation) {
        _inheritsLoose(AnimationExtend, _Animation);

        function AnimationExtend() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Animation.call.apply(_Animation, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "isRePlay", _descriptor, _assertThisInitialized(_this));

          _this.anima = void 0;
          return _this;
        }

        var _proto = AnimationExtend.prototype;

        _proto.onEnable = function onEnable() {
          if (this.isRePlay) {
            var _this$anima, _this$anima2;

            this.anima = this.node.getComponent(Animation);
            (_this$anima = this.anima) == null ? void 0 : _this$anima.stop();
            (_this$anima2 = this.anima) == null ? void 0 : _this$anima2.play();
          }
        };

        _proto.playDefultAnima = function playDefultAnima() {
          var _this$anima3, _this$anima4;

          this.anima = this.node.getComponent(Animation);
          (_this$anima3 = this.anima) == null ? void 0 : _this$anima3.stop();
          (_this$anima4 = this.anima) == null ? void 0 : _this$anima4.play();
        };

        _proto.stopdefultAnima = function stopdefultAnima() {
          var _this$anima5;

          this.anima = this.node.getComponent(Animation);
          (_this$anima5 = this.anima) == null ? void 0 : _this$anima5.stop();
        };

        return AnimationExtend;
      }(Animation), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "isRePlay", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AntiAddictionKit.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AntiKit.ts'], function (exports) {
  'use strict';

  var _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, sys, director, AntiKit;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
      director = module.director;
    }, function (module) {
      AntiKit = module.AntiKit;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "0d0e1gSY31NoJNjEI9WNwSf", "AntiAddictionKit", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AuthInfo = exports('AuthInfo', function AuthInfo() {
        this.isAuth = void 0;
        this.age = void 0;
      });
      var AntiBady = exports('AntiBady', function AntiBady() {
        this.idname = void 0;
        this.idcard = void 0;
        this.user_id = void 0;
        this.game_id = void 0;
        this.game_secret = void 0;
      });
      var AntiAddictionKit = exports('AntiAddictionKit', (_dec = ccclass('AntiAddictionKit'), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function AntiAddictionKit() {
          this.antikitUI = void 0;
          this.idName = "";
          this.idNumber = "";
          this.game_id = "kqbmds";
          this.game_secret = "5dce29d2b2799f3f627a43eeaa890a0b";
          this.openId = "";
          this.authInfo = void 0;
          this.debug = false;
        }

        AntiAddictionKit.getIntance = function getIntance() {
          if (!this._instance) this._instance = new AntiAddictionKit();
          return this._instance;
        };

        var _proto = AntiAddictionKit.prototype;

        _proto.init = function init() {
          // if(this.debug)
          // sys.localStorage.clear();
          this.openId = sys.localStorage.getItem("AntiAddiction_openId");

          if (!this.openId) {
            this.openId = this.randomString(20);
            sys.localStorage.setItem("AntiAddiction_openId", this.openId);
            console.log("新生成的唯一id：" + this.openId);
          }

          this.idName = sys.localStorage.getItem("AntiAddiction_idName");
          this.idNumber = sys.localStorage.getItem("AntiAddiction_idNumber");
          if (sys.localStorage.getItem("AntiAddiction_AuthInfo")) this.authInfo = JSON.parse(sys.localStorage.getItem("AntiAddiction_AuthInfo"));else this.authInfo = new AuthInfo();
          if (!this.authInfo) this.authInfo = new AuthInfo();
          this.antikitUI = director.getScene().getComponentInChildren(AntiKit);
        };

        _proto.hideAntikit = function hideAntikit() {
          this.antikitUI.node.active = false;
        };

        _proto.showAntikitView = function showAntikitView(callBack) {
          var _this = this;

          if (this.authInfo.isAuth && this.authInfo.age >= 18) {
            callBack();
          } else if (this.authInfo.isAuth && this.authInfo.age < 18) {
            var bady = new AntiBady();
            bady.game_id = this.game_id;
            bady.game_secret = this.game_secret;
            bady.idname = this.idName;
            bady.idcard = this.idNumber;
            bady.user_id = this.openId;
            var data = JSON.stringify(bady);
            this.checkChildStaus(data, function (bl) {
              if (bl) {
                callBack();
              } else {
                _this.antikitUI.showChildView();
              }
            });
          } else if (!this.authInfo.isAuth) {
            this.antikitUI.showAntiView(callBack);
          }
        };

        _proto.realNameAuth = function realNameAuth(idname, idnumber, callBack) {
          this.idName = idname;
          this.idNumber = idnumber;

          if (this.authInfo.isAuth) {
            if (this.authInfo.age >= 18) {
              callBack(true);
            } else {
              this.isRealname(callBack);
            }
          } else {
            this.isRealname(callBack);
          }
        };

        _proto.isRealname = function isRealname(callBack) {
          var _this2 = this;

          var bady = new AntiBady();
          bady.game_id = this.game_id;
          bady.game_secret = this.game_secret;
          bady.idname = this.idName;
          bady.idcard = this.idNumber;
          bady.user_id = this.openId;
          var data = JSON.stringify(bady);
          this.Post("https://maple.icesimba.cn/maple/notoken/realname/auth", data, function (res) {
            _this2.getRealNameInfo(data, callBack);
          });
        };

        _proto.getRealNameInfo = function getRealNameInfo(data, callBack) {
          var _this3 = this;

          this.Post("https://maple.icesimba.cn/maple/notoken/realname/auth/status", data, function (res) {
            _this3.authInfo.age = res.obj.age;
            _this3.authInfo.isAuth = true;

            if (res.obj.age >= 18) {
              callBack(true);
            } else {
              _this3.checkChildStaus(data, function (bl) {
                if (bl) {
                  console.log("----------是节假日");
                  callBack(true);
                } else {
                  console.log("----------不是节假日");

                  _this3.antikitUI.showChildView();
                }
              });
            }

            try {
              var str = JSON.stringify(_this3.authInfo);
              sys.localStorage.setItem("AntiAddiction_AuthInfo", str);
              sys.localStorage.setItem("AntiAddiction_idName", _this3.idName);
              sys.localStorage.setItem("AntiAddiction_idNumber", _this3.idNumber);
            } catch (e) {
              console.log("防沉迷保存失败");
            }
          });
        };

        _proto.isHoliday = function isHoliday(data, callBack) {
          this.Post("https://maple.icesimba.cn/maple/notoken/realname/holiday/check", data, function (res) {
            var islegal = res.is_legal;
            callBack(islegal);
          });
        } //设置小孩状态
        ;

        _proto.checkChildStaus = function checkChildStaus(holidayStr, callBack) {
          var _this4 = this;

          var bady = new AntiBady();
          bady.game_id = this.game_id;
          bady.game_secret = this.game_secret;
          var data = JSON.stringify(bady);
          this.Get("https://simbasdk.icesimba.com/simba-sdk/api/v1/time", data, function (res) {
            var timer = new Date(res.time);

            if (_this4.debug) {
              timer = new Date();
            }

            var isWeek = timer.getDay() % 6 == 0 || timer.getDay() % 5 == 0;
            console.log("是否是周末:" + isWeek);
            var ishour = timer.getHours() == 20;

            _this4.isHoliday(holidayStr, function (res) {
              var isHoliday = res;

              if ((isWeek || isHoliday) && ishour) {
                var Minute = 59 - timer.getMinutes();

                _this4.childTimer(Minute);

                callBack(true);
              } else {
                callBack(false);
              }
            });
          });
        };

        _proto.getNetTime = /*#__PURE__*/function () {
          var _getNetTime = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  this.Get("https://simbasdk.icesimba.com/simba-sdk/api/v1/time", "", function (res) {});

                case 1:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function getNetTime() {
            return _getNetTime.apply(this, arguments);
          }

          return getNetTime;
        }();

        _proto.childTimer = /*#__PURE__*/function () {
          var _childTimer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(minute) {
            var _this5 = this;

            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return setTimeout(function () {
                    _this5.antikitUI.showChildView();
                  }, minute * 60 * 1000);

                case 2:
                case "end":
                  return _context2.stop();
              }
            }, _callee2);
          }));

          function childTimer(_x) {
            return _childTimer.apply(this, arguments);
          }

          return childTimer;
        }();

        _proto.Post = function Post(url, data, callBack) {
          var _this6 = this;

          var request = new XMLHttpRequest();
          request.timeout = 10000;
          request.open("POST", url, true);

          request.onerror = function (res) {
            console.info(res);
          };

          request.onreadystatechange = function () {
            if (request.readyState == 4 && request.status == 200) {
              try {
                _this6.NetLog(data + "-----------------" + request.responseText);

                var rsp = JSON.parse(request.responseText);

                if (rsp.code == 0) {
                  callBack(rsp);
                } else {
                  _this6.antikitUI.showTip("验证失败！");
                }
              } catch (error) {
                _this6.NetLog("request:" + error);

                _this6.antikitUI.showTip("网络请求失败！");
              }
            }
          };

          request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=utf-8');
          request.send(data);
        };

        _proto.Get = function Get(url, data, callBack) {
          var _this7 = this;

          var request = new XMLHttpRequest();
          request.timeout = 10000;
          request.open("GET", url, true);

          request.onerror = function (res) {
            console.info(res);
          };

          request.onreadystatechange = function () {
            if (request.readyState == 4 && request.status == 200) {
              try {
                _this7.NetLog(data + "-----------------" + request.responseText);

                var rsp = JSON.parse(request.responseText);
                callBack(rsp);
              } catch (error) {
                _this7.NetLog("request:" + error);

                _this7.antikitUI.showTip("网络请求失败！");
              }
            }
          };

          request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=utf-8');
          request.send(data);
        };

        _proto.NetLog = function NetLog(str) {
          if (this.debug) console.log("网络log：" + str);
        };

        _proto.randomString = function randomString(len) {
          len = len || 32;
          var $chars = 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz12345678';
          /****默认去掉了容易混淆的字符oOLl,9gq,Vv,Uu,I1****/

          var maxPos = $chars.length;
          var pwd = '';

          for (var i = 0; i < len; i++) {
            pwd += $chars.charAt(Math.floor(Math.random() * maxPos));

            if (i % 2 == 1 && i != len - 1) {
              pwd += "-";
            }
          }

          return pwd;
        };

        _createClass(AntiAddictionKit, [{
          key: "Antikit",
          get: function get() {
            return this.antikitUI;
          }
        }, {
          key: "AuthInfo",
          get: function get() {
            return this.authInfo;
          }
        }]);

        return AntiAddictionKit;
      }(), _class2._instance = void 0, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AntiKit.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Panel_Antikit.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, Button, director, sys, Component, Panel_Antikit;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Button = module.Button;
      director = module.director;
      sys = module.sys;
      Component = module.Component;
    }, function (module) {
      Panel_Antikit = module.Panel_Antikit;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "c61bfjO1+FIgaYyVkO4Ws1j", "AntiKit", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AntiKit = exports('AntiKit', (_dec = ccclass('AntiKit'), _dec2 = property({
        type: Node,
        visible: true,
        displayName: "隐私界面"
      }), _dec3 = property({
        type: Node,
        visible: true,
        displayName: "实名界面"
      }), _dec4 = property({
        type: Node,
        visible: true,
        displayName: "未成年界面"
      }), _dec5 = property({
        type: Node,
        visible: true,
        displayName: "tip"
      }), _dec6 = property({
        type: Label,
        visible: true,
        displayName: "tipStr"
      }), _dec7 = property({
        type: Button,
        visible: true,
        displayName: "不同意按钮"
      }), _dec8 = property({
        type: Button,
        visible: true,
        displayName: "同意按钮"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AntiKit, _Component);

        function AntiKit() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "panel_private", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "panel_antikit", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "panel_AntikitChild", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tip", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "text_tip", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btn_disAgree", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btn_Agree", _descriptor7, _assertThisInitialized(_this));

          _this.antikitView = void 0;
          _this.tempPrivate = false;
          _this.privateViewCall = void 0;
          _this.antikitViewCall = void 0;
          return _this;
        }

        var _proto = AntiKit.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          director.addPersistRootNode(this.node);
          this.tempPrivate = Boolean(sys.localStorage.getItem("tempPrivate"));
          this.antikitView = this.panel_antikit.getComponent(Panel_Antikit);
          this.btn_disAgree.node.on(Button.EventType.CLICK, function () {
            _this2.showTip("你需要同意隐私协议");
          }, this);
          this.btn_Agree.node.on(Button.EventType.CLICK, function () {
            _this2.panel_private.active = false;
            _this2.privateViewCall == null ? void 0 : _this2.privateViewCall();
            _this2.tempPrivate = true;
            sys.localStorage.setItem("tempPrivate", String(_this2.tempPrivate));
          }, this);
        };

        _proto.showAntiView = function showAntiView(callBack) {
          var _this3 = this;

          this.antikitView.addEvent(function (res) {
            if (res) {
              callBack();
              _this3.panel_antikit.active = false;
            } else {
              _this3.showTip("验证失败");
            }
          });
          this.panel_antikit.active = true;
        };

        _proto.showChildView = function showChildView() {
          this.node.active = true;
          this.panel_antikit.active = false;
          this.panel_AntikitChild.active = true;
        };

        _proto.showPrivate = function showPrivate(callBack) {
          if (!this.tempPrivate) {
            this.privateViewCall = callBack;
            this.panel_private.active = true;
          } else {
            callBack();
          }
        };

        _proto.showTip = function showTip(str) {
          var _this4 = this;

          if (this.tip.active) return;
          this.tip.active = true;
          this.text_tip.string = str;
          this.scheduleOnce(function () {
            _this4.tip.active = false;
          }, 1);
        };

        return AntiKit;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "panel_private", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "panel_antikit", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "panel_AntikitChild", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "tip", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "text_tip", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "btn_disAgree", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "btn_Agree", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AssetsAnimal.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AssetSys.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Prefab, Component, instantiate, director, AssetSys;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Component = module.Component;
      instantiate = module.instantiate;
      director = module.director;
    }, function (module) {
      AssetSys = module.AssetSys;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _class3;

      cclegacy._RF.push({}, "43581eLtaFEeoIlPeQt7XdD", "AssetsAnimal", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AssetsAnimal = exports('AssetsAnimal', (_dec = ccclass('AssetsAnimal'), _dec2 = property({
        type: [Prefab],
        displayName: "home动物"
      }), _dec3 = property({
        type: [Prefab],
        displayName: "game动物"
      }), _dec4 = property({
        type: [Prefab],
        displayName: "草"
      }), _dec5 = property({
        type: Prefab,
        displayName: "石头"
      }), _dec6 = property({
        type: Prefab,
        displayName: "树桩"
      }), _dec7 = property({
        type: Prefab,
        displayName: "树"
      }), _dec8 = property({
        type: Prefab,
        visible: true,
        displayName: "game草"
      }), _dec9 = property({
        type: Prefab,
        visible: true,
        displayName: "game石头"
      }), _dec10 = property({
        type: Prefab,
        visible: true,
        displayName: "game竖栅栏"
      }), _dec11 = property({
        type: Prefab,
        visible: true,
        displayName: "game横栅栏"
      }), _dec12 = property({
        type: Prefab,
        visible: true,
        displayName: "game宝箱"
      }), _dec13 = property({
        type: Prefab,
        visible: true,
        displayName: "game胜利旗帜"
      }), _dec14 = property({
        type: Prefab,
        visible: true,
        displayName: "game失败旗帜"
      }), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AssetsAnimal, _Component);

        function AssetsAnimal() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "homeAnimals", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gameAnimals", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "grassPrefabs", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "stonePrefab", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "stumpPrefab", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "treePrefab", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_tempGrass", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_tempStone", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_tempFence_v", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_tempFence_h", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_tempBox", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_winflag", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_loseflag", _descriptor13, _assertThisInitialized(_this));

          return _this;
        }

        AssetsAnimal.init = /*#__PURE__*/function () {
          var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(call) {
            var animal;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  animal = AssetSys.getInstance().bundlenName[1];
                  AssetSys.getInstance().loadAssets(animal, "AssetsAnimal", function (data) {
                    var animalData = data;
                    var assetAnimal = instantiate(animalData).getComponent(AssetsAnimal);
                    AssetsAnimal.instance = assetAnimal;
                    director.getScene().addChild(assetAnimal.node);
                    director.addPersistRootNode(assetAnimal.node);
                    call();
                  });

                case 2:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          }));

          function init(_x) {
            return _init.apply(this, arguments);
          }

          return init;
        }();

        return AssetsAnimal;
      }(Component), _class3.instance = void 0, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "homeAnimals", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Array();
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "gameAnimals", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Array();
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "grassPrefabs", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "stonePrefab", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "stumpPrefab", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "treePrefab", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "_tempGrass", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "_tempStone", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "_tempFence_v", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "_tempFence_h", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "_tempBox", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "_winflag", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "_loseflag", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AssetsMapItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AssetSys.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Prefab, Component, instantiate, director, AssetSys;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Component = module.Component;
      instantiate = module.instantiate;
      director = module.director;
    }, function (module) {
      AssetSys = module.AssetSys;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _class3;

      cclegacy._RF.push({}, "eeeefTVZjdDRbr/mw6i4aR+", "AssetsMapItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AssetsMapItem = exports('AssetsMapItem', (_dec = ccclass('AssetsMapItem'), _dec2 = property({
        type: Prefab,
        displayName: "房子样式"
      }), _dec3 = property({
        type: Prefab,
        displayName: "栅栏样式"
      }), _dec4 = property({
        type: Prefab,
        visible: true,
        displayName: "修理工"
      }), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AssetsMapItem, _Component);

        function AssetsMapItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "houseViewPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fenceViewPrefab", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_sleeper", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        AssetsMapItem.init = /*#__PURE__*/function () {
          var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(call) {
            var animal;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  animal = AssetSys.getInstance().bundlenName[2];
                  AssetSys.getInstance().loadAssets(animal, "AssetsMapItem", function (data) {
                    var animalData = data;
                    var assetAnimal = instantiate(animalData).getComponent(AssetsMapItem);
                    AssetsMapItem.instance = assetAnimal;
                    director.getScene().addChild(assetAnimal.node);
                    director.addPersistRootNode(assetAnimal.node);
                    call();
                  });

                case 2:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          }));

          function init(_x) {
            return _init.apply(this, arguments);
          }

          return init;
        }();

        return AssetsMapItem;
      }(Component), _class3.instance = void 0, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "houseViewPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "fenceViewPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_sleeper", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AssetSys.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, assetManager, director;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      assetManager = module.assetManager;
      director = module.director;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "d90fed86h5Oo4tHN33FJvTy", "AssetSys", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AssetSys = exports('AssetSys', (_dec = ccclass('AssetSys'), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function AssetSys() {
          this.assbundle = void 0;
          this.bundlenName = ["Game", "PrefabAssets/Animal", "PrefabAssets/MapItem"];
          this.bundles = void 0;
          this.curScene = "nono";
        }

        AssetSys.getInstance = function getInstance() {
          if (this._assetsys == null) {
            this._assetsys = new AssetSys();
          }

          return this._assetsys;
        };

        var _proto = AssetSys.prototype;

        _proto.init = function init(callback) {
          var _this = this;

          if (callback === void 0) {
            callback = null;
          }

          this.bundles = new Map();
          var index = 0; //清理一下缓存
          // assetManager.cacheManager.clearCache();

          this.bundlenName.forEach(function (element) {
            assetManager.loadBundle(element, function (err, bundle) {
              if (err) {
                console.error("加载bundle失败：" + err);
                callback(false);
              } else {
                _this.bundles.set(element, bundle);

                index++;
                if (index >= _this.bundlenName.length) callback(true);
              }
            });
          });
        };

        _proto.loadScene = function loadScene(bundleName, sceneName, onProgress, runSceneCall) {
          var _this2 = this;

          if (onProgress === void 0) {
            onProgress = null;
          }

          if (runSceneCall === void 0) {
            runSceneCall = null;
          }

          if (!this.bundles) {
            this.init(function (re) {
              _this2.loadScene(bundleName, sceneName, onProgress, runSceneCall);
            });
            return;
          }

          if (this.bundles.has(bundleName)) {
            this.assbundle = this.bundles.get(bundleName);
            this.assbundle.loadScene(sceneName, function (finished, total) {
              onProgress == null ? void 0 : onProgress(finished / total);
            }, function (err, scene) {
              if (!err) director.runScene(scene, null, runSceneCall);else {
                console.error(err);
              }
            });
          } else {
            console.error("没有这个bundle：" + bundleName + "检查LevelCfg配置！！！");
          }
        };

        _proto.loadGameScene = function loadGameScene(onProgress, runSceneCall) {
          if (onProgress === void 0) {
            onProgress = null;
          }

          if (runSceneCall === void 0) {
            runSceneCall = null;
          } // director.loadScene("Game", runSceneCall);


          this.curScene = "Game";
          this.loadScene(this.bundlenName[0], "Game", onProgress, runSceneCall);
        };

        _proto.loadHomeScene = function loadHomeScene(onProgress, runSceneCall) {
          if (onProgress === void 0) {
            onProgress = null;
          }

          if (runSceneCall === void 0) {
            runSceneCall = null;
          } //  director.loadScene("HomeScene", runSceneCall);


          this.curScene = "HomeScene";
          this.loadScene(this.bundlenName[0], "HomeScene", onProgress, runSceneCall);
        };

        _proto.loadAssets = /*#__PURE__*/function () {
          var _loadAssets = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(bundleName, asstsName, call, onProgress) {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (onProgress === void 0) {
                    onProgress = null;
                  }

                  if (this.bundles.has(bundleName)) {
                    this.assbundle = this.bundles.get(bundleName);
                    this.assbundle.load(asstsName, function (finished, total) {
                      onProgress == null ? void 0 : onProgress(finished / total);
                    }, function (err, data) {
                      if (!err) {
                        call(data);
                      } else {
                        console.error(err);
                      }
                    });
                  } else {
                    console.error("没有这个bundle：" + bundleName);
                  }

                case 2:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function loadAssets(_x, _x2, _x3, _x4) {
            return _loadAssets.apply(this, arguments);
          }

          return loadAssets;
        }();

        _proto.releaseAsset = function releaseAsset() {
          var _this3 = this;

          this.bundles.forEach(function (element) {
            _this3.assbundle = element;

            if (_this3.assbundle) {
              _this3.assbundle.releaseAll();

              assetManager.removeBundle(_this3.assbundle);
            }
          });
        };

        return AssetSys;
      }(), _class2._assetsys = void 0, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AStar.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './MapData.ts'], function (exports) {
  'use strict';

  var _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, v2, tableData;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v2 = module.v2;
    }, function (module) {
      tableData = module.tableData;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "7244dsbx1JAFKwpGe5J6r5l", "AStar", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DirectionType = {
        FOURTH_DIR: 0,
        EIGHT_DIR: 1
      };
      var AStartStep = exports('AStartStep', /*#__PURE__*/function () {
        function AStartStep(MapPos) {
          this.g = 0;
          this.h = 0;
          this._f = void 0;
          this.pos = v2();
          this.last = null;
          this.pos = MapPos;
        }

        var _proto = AStartStep.prototype;

        _proto.equalTo = function equalTo(other) {
          if (other instanceof AStartStep) {
            return this.pos.x === other.pos.x && this.pos.y === other.pos.y;
          }
        };

        _createClass(AStartStep, [{
          key: "f",
          get: function get() {
            return this.g + this.h;
          },
          set: function set(n) {
            this._f = n;
          }
        }]);

        return AStartStep;
      }());
      var AStar = exports('AStar', (_dec = ccclass('AStar'), _dec(_class = /*#__PURE__*/function () {
        function AStar() {
          this._moveDirection = DirectionType.EIGHT_DIR;
          this._isShowProcess = false;
          this._openList = void 0;
          this._closeList = void 0;

          this.findeIndexOfStepList = function (v, stepList) {
            for (var i = 0; i < stepList.length; i++) {
              if (v.x === stepList[i].pos.x && v.y === stepList[i].pos.y) return i;
            }

            return -1;
          };

          this._openList = [];
          this._closeList = [];
        }

        var _proto2 = AStar.prototype;

        _proto2.insetStepToOpen = function insetStepToOpen(step) {
          var i = 0;

          for (; i < this._openList.length; ++i) {
            if (step.f <= this._openList[i].f) {
              break;
            }
          }

          this._openList.splice(i, 0, step);
        };

        _proto2.setIsShowProcess = function setIsShowProcess(_isShowProcess) {
          this._isShowProcess = _isShowProcess;
        };

        _proto2.changeDeriction = function changeDeriction() {
          this._moveDirection = this._moveDirection === DirectionType.EIGHT_DIR ? DirectionType.FOURTH_DIR : DirectionType.EIGHT_DIR;
        } //每个砖块的消耗
        ;

        _proto2._costToMoveStep = function _costToMoveStep(left, right) {
          // 不是直走
          return left.x !== right.x && left.y !== right.y ? 14 : 10;
        };

        _proto2._getH = function _getH(current, finish) {
          return (Math.abs(current.x - finish.x) + Math.abs(current.y - finish.y)) * 10;
        };

        _proto2._getNextCanMovePos = function _getNextCanMovePos(currentPos) {
          var funPushPos = function funPushPos(pos, list) {
            if (tableData[pos.y][pos.x] === 0) {
              list.push(pos);
            }
          };

          var results = [];
          var left = v2(currentPos.x - 1, currentPos.y);

          if (left.x >= 0) {
            // 左三
            funPushPos(left, results);

            if (this._moveDirection === DirectionType.EIGHT_DIR) {
              var leftTop = v2(currentPos.x - 1, currentPos.y + 1);

              if (leftTop.y < tableData.length) {
                funPushPos(leftTop, results);
              }

              var leftBottom = v2(currentPos.x - 1, currentPos.y - 1);

              if (leftBottom.y >= 0) {
                funPushPos(leftBottom, results);
              }
            }
          } // 右三


          var right = v2(currentPos.x + 1, currentPos.y);

          if (right.x < tableData[0].length) {
            // 左三
            funPushPos(right, results);

            if (this._moveDirection === DirectionType.EIGHT_DIR) {
              var rightTop = v2(currentPos.x + 1, currentPos.y + 1);

              if (rightTop.y < tableData.length) {
                funPushPos(rightTop, results);
              }

              var rightBottom = v2(currentPos.x + 1, currentPos.y - 1);

              if (rightBottom.y >= 0) {
                funPushPos(rightBottom, results);
              }
            }
          } // 上下


          var top = v2(currentPos.x, currentPos.y + 1);

          if (top.y < tableData.length) {
            funPushPos(top, results);
          }

          var bottom = v2(currentPos.x, currentPos.y - 1);

          if (bottom.y >= 0) {
            funPushPos(bottom, results);
          }

          return results;
        };

        _proto2.findePaths = /*#__PURE__*/function () {
          var _findePaths = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(start, finish) {
            var tempOpenPos, paths, pathFound, currentStep, canMoveList, i, pos1, step, costMove, openIndex, stepOp;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  this._openList = [];
                  this._closeList = [];
                  tempOpenPos = [];
                  paths = [];

                  this._openList.push(new AStartStep(start));

                  pathFound = false;

                case 6:
                  currentStep = this._openList.shift();

                  this._closeList.push(currentStep);

                  if (!this._isShowProcess) {
                    _context.next = 12;
                    break;
                  }

                  _context.next = 11;
                  return this.sleep(100);

                case 11:
                  this.findPos(currentStep.pos);

                case 12:
                  if (!(currentStep.pos.x === finish.x && currentStep.pos.y === finish.y)) {
                    _context.next = 16;
                    break;
                  }

                  pathFound = true;

                  do {
                    // to do 测试效率
                    paths.unshift(currentStep.pos);
                    currentStep = currentStep.last;
                  } while (currentStep !== null); // this._closeList=[]
                  // this._openList=[]


                  return _context.abrupt("break", 32);

                case 16:
                  // 根据当前点，找到下一个点
                  canMoveList = this._getNextCanMovePos(currentStep.pos); // 找到需要加列表的点加入后比较

                  i = 0;

                case 18:
                  if (!(i < canMoveList.length)) {
                    _context.next = 31;
                    break;
                  }

                  pos1 = canMoveList[i];

                  if (!(this.findeIndexOfStepList(pos1, this._closeList) != -1)) {
                    _context.next = 24;
                    break;
                  }

                  canMoveList.splice(i, 1);
                  i--;
                  return _context.abrupt("continue", 28);

                case 24:
                  // 不在的话，判断是否放入开放列表中
                  step = new AStartStep(pos1);
                  costMove = this._costToMoveStep(pos1, currentStep.pos);
                  openIndex = this.findeIndexOfStepList(pos1, this._openList);

                  if (openIndex === -1) {
                    step.last = currentStep;
                    step.g = currentStep.g + costMove;
                    step.h = this._getH(pos1, finish);
                    this.insetStepToOpen(step);
                    tempOpenPos.push([currentStep.pos.x, currentStep.pos.y]);
                  } else {
                    // 如果open列表中有的，直接用、
                    stepOp = this._openList[openIndex]; // 也可以用f 

                    if (currentStep.g + costMove < stepOp.g) {
                      stepOp.g = currentStep.g + costMove;
                      stepOp.last = currentStep; // 先删除 再插入，因为插入事可以排序

                      this._openList.splice(openIndex, 1);

                      this.insetStepToOpen(stepOp);
                    }
                  }

                case 28:
                  ++i;
                  _context.next = 18;
                  break;

                case 31:
                  if (this._openList.length > 0) {
                    _context.next = 6;
                    break;
                  }

                case 32:
                  return _context.abrupt("return", [pathFound, paths, tempOpenPos, this._closeList]);

                case 33:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function findePaths(_x, _x2) {
            return _findePaths.apply(this, arguments);
          }

          return findePaths;
        }();

        _proto2.findPos = function findPos(pos) {// cc.log('--findPos---',pos)
        };

        _proto2.sleep = /*#__PURE__*/function () {
          var _sleep = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(time) {
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", new Promise(function (resolve) {
                    setTimeout(resolve, time);
                  }));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }, _callee2);
          }));

          function sleep(_x3) {
            return _sleep.apply(this, arguments);
          }

          return sleep;
        }();

        return AStar;
      }()) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ATAndroidBannerTS.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "be029J/ZbBCMJ8HN5+nAOBr", "ATAndroidBannerTS", undefined);

      var classJavaName = "com/anythink/cocosjs/ATBannerJSBridge";
      var ATAndroidBannerTS = exports('ATAndroidBannerTS', {
        loadBanner: function loadBanner(placementId, settings) {
          cc.log("Android-loadBanner:" + settings);
          jsb.reflection.callStaticMethod(classJavaName, "load", "(Ljava/lang/String;Ljava/lang/String;)V", placementId, settings);
        },
        setAdListener: function setAdListener(listener) {
          cc.log("Android-setAdListener");
          jsb.reflection.callStaticMethod(classJavaName, "setAdListener", "(Ljava/lang/String;)V", listener);
        },
        hasAdReady: function hasAdReady(placementId) {
          cc.log("Android-hasAdReady");
          return jsb.reflection.callStaticMethod(classJavaName, "isAdReady", "(Ljava/lang/String;)Z", placementId);
        },
        checkAdStatus: function checkAdStatus(placementId) {
          cc.log("Android-checkAdStatus:" + placementId);
          return jsb.reflection.callStaticMethod(classJavaName, "checkAdStatus", "(Ljava/lang/String;)Ljava/lang/String;", placementId);
        },
        showAdInPosition: function showAdInPosition(placementId, position) {
          cc.log("Android-showAdInPosistion");
          jsb.reflection.callStaticMethod(classJavaName, "showWithPosition", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", placementId, position, "");
        },
        showAdInPositionAndScenario: function showAdInPositionAndScenario(placementId, position, scenario) {
          cc.log("Android-showAdInPositionAndScenario");
          jsb.reflection.callStaticMethod(classJavaName, "showWithPosition", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", placementId, position, scenario);
        },
        showAdInRectangle: function showAdInRectangle(placementId, showAdRect) {
          cc.log("Android-showAdInRectangle");
          jsb.reflection.callStaticMethod(classJavaName, "showWithRect", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", placementId, showAdRect, "");
        },
        showAdInRectangleAndScenario: function showAdInRectangleAndScenario(placementId, showAdRect, scenario) {
          cc.log("Android-showAdInRectangleAndScenario");
          jsb.reflection.callStaticMethod(classJavaName, "showWithRect", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", placementId, showAdRect, scenario);
        },
        removeAd: function removeAd(placementId) {
          cc.log("Android-removeAd");
          jsb.reflection.callStaticMethod(classJavaName, "remove", "(Ljava/lang/String;)V", placementId);
        },
        reShowAd: function reShowAd(placementId) {
          cc.log("Android-reShowAd");
          jsb.reflection.callStaticMethod(classJavaName, "reshow", "(Ljava/lang/String;)V", placementId);
        },
        hideAd: function hideAd(placementId) {
          cc.log("Android-hideAd");
          jsb.reflection.callStaticMethod(classJavaName, "hide", "(Ljava/lang/String;)V", placementId);
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ATAndroidIntersitialAutoTS.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "3660adddVZJ4ZsnedIwR2YA", "ATAndroidIntersitialAutoTS", undefined);

      var classJavaName = "com/anythink/cocosjs/ATInterstitialAutoAdJSBridge";
      var ATAndroidInterstitialAutoAdTS = exports('ATAndroidInterstitialAutoAdTS', {
        setAdListener: function setAdListener(listener) {
          cc.log("Android-setAdListener");
          jsb.reflection.callStaticMethod(classJavaName, "setAdListener", "(Ljava/lang/String;)V", listener);
        },
        addPlacementIds: function addPlacementIds(placementIds) {
          cc.log("Android-addPlacementIds");
          jsb.reflection.callStaticMethod(classJavaName, "addPlacementIds", "(Ljava/lang/String;)V", placementIds);
        },
        removePlacementId: function removePlacementId(placementId) {
          cc.log("Android-removePlacementId");
          jsb.reflection.callStaticMethod(classJavaName, "removePlacementId", "(Ljava/lang/String;)V", placementId);
        },
        setAdExtraData: function setAdExtraData(placementId, settings) {
          cc.log("Android-setAdExtraData");
          jsb.reflection.callStaticMethod(classJavaName, "setAdExtraData", "(Ljava/lang/String;Ljava/lang/String;)V", placementId, settings);
        },
        hasAdReady: function hasAdReady(placementId) {
          cc.log("Android-hasAdReady");
          return jsb.reflection.callStaticMethod(classJavaName, "isAdReady", "(Ljava/lang/String;)Z", placementId);
        },
        checkAdStatus: function checkAdStatus(placementId) {
          cc.log("Android-checkAdStatus:" + placementId);
          return jsb.reflection.callStaticMethod(classJavaName, "checkAdStatus", "(Ljava/lang/String;)Ljava/lang/String;", placementId);
        },
        showAd: function showAd(placementId) {
          cc.log("Android-ivautoad_showAd:" + placementId);
          jsb.reflection.callStaticMethod(classJavaName, "show", "(Ljava/lang/String;)V", placementId);
        },
        showAdInScenario: function showAdInScenario(placementId, scenario) {
          cc.log("Android-ivautoad_showAdInScenario:" + placementId + "---" + scenario);
          jsb.reflection.callStaticMethod(classJavaName, "show", "(Ljava/lang/String;Ljava/lang/String;)V", placementId, scenario);
        },
        entryAdScenario: function entryAdScenario(placementId, scenario) {
          cc.log("Android-entryAdScenario:" + placementId + "---" + scenario);
          jsb.reflection.callStaticMethod(classJavaName, "entryAdScenario", "(Ljava/lang/String;Ljava/lang/String;)V", placementId, scenario);
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ATAndroidIntersitialTS.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c5a37MIfn1Ks6+PgYn8KNeg", "ATAndroidIntersitialTS", undefined);

      var classJavaName = "com/anythink/cocosjs/ATInterstitialJSBridge";
      var ATAndroidInterstitialJS = exports('ATAndroidInterstitialJS', {
        loadInterstitial: function loadInterstitial(placementId, settings) {
          cc.log("Android-loadInterstitial");
          jsb.reflection.callStaticMethod(classJavaName, "load", "(Ljava/lang/String;Ljava/lang/String;)V", placementId, settings);
        },
        setAdListener: function setAdListener(listener) {
          cc.log("Android-setAdListener");
          jsb.reflection.callStaticMethod(classJavaName, "setAdListener", "(Ljava/lang/String;)V", listener);
        },
        hasAdReady: function hasAdReady(placementId) {
          cc.log("Android-hasAdReady");
          return jsb.reflection.callStaticMethod(classJavaName, "isAdReady", "(Ljava/lang/String;)Z", placementId);
        },
        checkAdStatus: function checkAdStatus(placementId) {
          cc.log("Android-checkAdStatus:" + placementId);
          return jsb.reflection.callStaticMethod(classJavaName, "checkAdStatus", "(Ljava/lang/String;)Ljava/lang/String;", placementId);
        },
        showAd: function showAd(placementId) {
          cc.log("Android-showAd:" + placementId);
          jsb.reflection.callStaticMethod(classJavaName, "show", "(Ljava/lang/String;)V", placementId);
        },
        showAdInScenario: function showAdInScenario(placementId, scenario) {
          cc.log("Android-showAdInScenario:" + placementId + "---" + scenario);
          jsb.reflection.callStaticMethod(classJavaName, "show", "(Ljava/lang/String;Ljava/lang/String;)V", placementId, scenario);
        },
        entryAdScenario: function entryAdScenario(placementId, scenario) {
          cc.log("Android-entryAdScenario:" + placementId + "---" + scenario);
          jsb.reflection.callStaticMethod(classJavaName, "entryAdScenario", "(Ljava/lang/String;Ljava/lang/String;)V", placementId, scenario);
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ATAndroidJS.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6c9d4axjJ5JTYsWNaAQwowt", "ATAndroidJS", undefined);

      var classJavaName = "com/anythink/cocosjs/ATJSBridge";
      var ATAndroidJS = exports('ATAndroidJS', {
        printJsLog: function printJsLog(msg) {
          if (undefined != msg && msg != null) {
            jsb.reflection.callStaticMethod("android/util/Log", "i", "(Ljava/lang/String;Ljava/lang/String;)I", "AT-Cocos-JS", msg);
          }
        },
        initSDK: function initSDK(appid, appkey) {
          jsb.reflection.callStaticMethod(classJavaName, "initSDK", "(Ljava/lang/String;Ljava/lang/String;)V", appid, appkey);
        },
        initCustomMap: function initCustomMap(customMap) {
          jsb.reflection.callStaticMethod(classJavaName, "initCustomMap", "(Ljava/lang/String;)V", customMap);
        },
        setPlacementCustomMap: function setPlacementCustomMap(placmentId, customMap) {
          jsb.reflection.callStaticMethod(classJavaName, "setPlacementCustomMap", "(Ljava/lang/String;Ljava/lang/String;)V", placmentId, customMap);
        },
        setGDPRLevel: function setGDPRLevel(level) {
          jsb.reflection.callStaticMethod(classJavaName, "setGDPRLevel", "(I)V", level);
        },
        getGDPRLevel: function getGDPRLevel() {
          return jsb.reflection.callStaticMethod(classJavaName, "getGDPRLevel", "()I");
        },
        getUserLocation: function getUserLocation(callbackMethod) {
          jsb.reflection.callStaticMethod(classJavaName, "getUserLocation", "(Ljava/lang/String;)V", callbackMethod);
        },
        showGDPRAuth: function showGDPRAuth() {
          jsb.reflection.callStaticMethod(classJavaName, "showGDPRAuth", "()V");
        },
        setLogDebug: function setLogDebug(debug) {
          jsb.reflection.callStaticMethod(classJavaName, "setLogDebug", "(Z)V", debug);
        },
        deniedUploadDeviceInfo: function deniedUploadDeviceInfo(deniedInfo) {
          jsb.reflection.callStaticMethod(classJavaName, "deniedUploadDeviceInfo", "(Ljava/lang/String;)V", deniedInfo);
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ATAndroidNativeTS.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "65f82vT6Z1FOYqgJXZydj+8", "ATAndroidNativeTS", undefined);

      var classJavaName = "com/anythink/cocosjs/ATNativeJSBridge";
      var ATAndroidNativeTS = exports('ATAndroidNativeTS', {
        loadNative: function loadNative(placementId, settings) {
          cc.log("Android-loadNative");
          jsb.reflection.callStaticMethod(classJavaName, "load", "(Ljava/lang/String;Ljava/lang/String;)V", placementId, settings);
        },
        setAdListener: function setAdListener(listener) {
          cc.log("Android-setAdListener");
          jsb.reflection.callStaticMethod(classJavaName, "setAdListener", "(Ljava/lang/String;)V", listener);
        },
        hasAdReady: function hasAdReady(placementId) {
          cc.log("Android-hasAdReady");
          return jsb.reflection.callStaticMethod(classJavaName, "isAdReady", "(Ljava/lang/String;)Z", placementId);
        },
        checkAdStatus: function checkAdStatus(placementId) {
          cc.log("Android-checkAdStatus:" + placementId);
          return jsb.reflection.callStaticMethod(classJavaName, "checkAdStatus", "(Ljava/lang/String;)Ljava/lang/String;", placementId);
        },
        showAd: function showAd(placementId, adViewProperty) {
          cc.log("Android-showAd");
          jsb.reflection.callStaticMethod(classJavaName, "show", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", placementId, adViewProperty, "");
        },
        showAdInScenario: function showAdInScenario(placementId, adViewProperty, scenario) {
          cc.log("Android-showAdInScenario");
          jsb.reflection.callStaticMethod(classJavaName, "show", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", placementId, adViewProperty, scenario);
        },
        removeAd: function removeAd(placementId) {
          cc.log("Android-removeAd");
          jsb.reflection.callStaticMethod(classJavaName, "remove", "(Ljava/lang/String;)V", placementId);
        },
        entryAdScenario: function entryAdScenario(placementId, scenario) {
          cc.log("Android-entryAdScenario:" + placementId + "---" + scenario);
          jsb.reflection.callStaticMethod(classJavaName, "entryAdScenario", "(Ljava/lang/String;Ljava/lang/String;)V", placementId, scenario);
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ATAndroidRewardedVideoAutoTS.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ab630BTzPtHDbXqJoc7nfbi", "ATAndroidRewardedVideoAutoTS", undefined);

      var classJavaName = "com/anythink/cocosjs/ATRewardedVideoAutoAdJSBridge";
      var ATAndroidRewardedVideoAutoAdTS = exports('ATAndroidRewardedVideoAutoAdTS', {
        setAdListener: function setAdListener(listener) {
          cc.log("Android-setAdListener");
          jsb.reflection.callStaticMethod(classJavaName, "setAdListener", "(Ljava/lang/String;)V", listener);
        },
        addPlacementIds: function addPlacementIds(placementIds) {
          cc.log("Android-addPlacementIds");
          jsb.reflection.callStaticMethod(classJavaName, "addPlacementIds", "(Ljava/lang/String;)V", placementIds);
        },
        removePlacementId: function removePlacementId(placementId) {
          cc.log("Android-removePlacementId");
          jsb.reflection.callStaticMethod(classJavaName, "removePlacementId", "(Ljava/lang/String;)V", placementId);
        },
        setAdExtraData: function setAdExtraData(placementId, settings) {
          cc.log("Android-setAdExtraData");
          jsb.reflection.callStaticMethod(classJavaName, "setAdExtraData", "(Ljava/lang/String;Ljava/lang/String;)V", placementId, settings);
        },
        hasAdReady: function hasAdReady(placementId) {
          cc.log("Android-hasAdReady");
          return jsb.reflection.callStaticMethod(classJavaName, "isAdReady", "(Ljava/lang/String;)Z", placementId);
        },
        checkAdStatus: function checkAdStatus(placementId) {
          cc.log("Android-checkAdStatus:" + placementId);
          return jsb.reflection.callStaticMethod(classJavaName, "checkAdStatus", "(Ljava/lang/String;)Ljava/lang/String;", placementId);
        },
        showAd: function showAd(placementId) {
          cc.log("Android-rvautoad_showAd:" + placementId);
          jsb.reflection.callStaticMethod(classJavaName, "show", "(Ljava/lang/String;)V", placementId);
        },
        showAdInScenario: function showAdInScenario(placementId, scenario) {
          cc.log("Android-rvautoad_showAdInScenario:" + placementId + "---" + scenario);
          jsb.reflection.callStaticMethod(classJavaName, "show", "(Ljava/lang/String;Ljava/lang/String;)V", placementId, scenario);
        },
        entryAdScenario: function entryAdScenario(placementId, scenario) {
          cc.log("Android-entryAdScenario:" + placementId + "---" + scenario);
          jsb.reflection.callStaticMethod(classJavaName, "entryAdScenario", "(Ljava/lang/String;Ljava/lang/String;)V", placementId, scenario);
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ATAndroidRewardedVideoTS.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1c759n0oEJIY65KqX5VS8Q3", "ATAndroidRewardedVideoTS", undefined);

      var classJavaName = "com/anythink/cocosjs/ATRewardedVideoJSBridge";
      var ATAndroidRewardedVideoJS = exports('ATAndroidRewardedVideoJS', {
        loadRewardedVideo: function loadRewardedVideo(placementId, settings) {
          cc.log("Android-loadRewardedVideo");
          jsb.reflection.callStaticMethod(classJavaName, "load", "(Ljava/lang/String;Ljava/lang/String;)V", placementId, settings);
        },
        setAdListener: function setAdListener(listener) {
          cc.log("Android-setAdListener");
          jsb.reflection.callStaticMethod(classJavaName, "setAdListener", "(Ljava/lang/String;)V", listener);
        },
        hasAdReady: function hasAdReady(placementId) {
          cc.log("Android-hasAdReady");
          return jsb.reflection.callStaticMethod(classJavaName, "isAdReady", "(Ljava/lang/String;)Z", placementId);
        },
        checkAdStatus: function checkAdStatus(placementId) {
          cc.log("Android-checkAdStatus:" + placementId);
          return jsb.reflection.callStaticMethod(classJavaName, "checkAdStatus", "(Ljava/lang/String;)Ljava/lang/String;", placementId);
        },
        showAd: function showAd(placementId) {
          cc.log("Android-rv_showAd:" + placementId);
          jsb.reflection.callStaticMethod(classJavaName, "show", "(Ljava/lang/String;)V", placementId);
        },
        showAdInScenario: function showAdInScenario(placementId, scenario) {
          cc.log("Android-rv_showAdInScenario:" + placementId + "---" + scenario);
          jsb.reflection.callStaticMethod(classJavaName, "show", "(Ljava/lang/String;Ljava/lang/String;)V", placementId, scenario);
        },
        entryAdScenario: function entryAdScenario(placementId, scenario) {
          cc.log("Android-entryAdScenario:" + placementId + "---" + scenario);
          jsb.reflection.callStaticMethod(classJavaName, "entryAdScenario", "(Ljava/lang/String;Ljava/lang/String;)V", placementId, scenario);
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ATBannerTSSDK.ts", ['cc', './ATAndroidBannerTS.ts', './ATiOSBannerTS.ts'], function (exports) {
  'use strict';

  var cclegacy, ATAndroidBannerTS, ATiOSBannerJS;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      ATAndroidBannerTS = module.ATAndroidBannerTS;
    }, function (module) {
      ATiOSBannerJS = module.ATiOSBannerJS;
    }],
    execute: function () {
      cclegacy._RF.push({}, "22ea4DnLyRNl44XbykLwR6x", "ATBannerTSSDK", undefined);

      var initPlatformBridge = function initPlatformBridge() {
        if (cc.sys.os === cc.sys.OS.IOS) {
          return ATiOSBannerJS;
        } else if (cc.sys.os === cc.sys.OS.ANDROID) {
          return ATAndroidBannerTS;
        }
      };

      var platformBridge = initPlatformBridge();
      var ATBannerSDK = exports('ATBannerSDK', {
        kATBannerAdLoadingExtraBannerAdSizeStruct: "banner_ad_size_struct",
        kATBannerAdShowingPositionTop: "top",
        kATBannerAdShowingPositionBottom: "bottom",
        kATBannerAdInlineAdaptiveWidth: "inline_adaptive_width",
        kATBannerAdInlineAdaptiveOrientation: "inline_adaptive_orientation",
        kATBannerAdInlineAdaptiveOrientationCurrent: 0,
        kATBannerAdInlineAdaptiveOrientationPortrait: 1,
        kATBannerAdInlineAdaptiveOrientationLandscape: 2,
        kATBannerAdAdaptiveWidth: "adaptive_width",
        kATBannerAdAdaptiveOrientation: "adaptive_orientation",
        kATBannerAdAdaptiveOrientationCurrent: 0,
        kATBannerAdAdaptiveOrientationPortrait: 1,
        kATBannerAdAdaptiveOrientationLandscape: 2,
        ATBannerListener: {
          developerCallback: null,
          onBannerAdLoaded: function onBannerAdLoaded(placementId) {
            if (this.developerCallback != null && this.developerCallback.onBannerAdLoaded != null && undefined != this.developerCallback.onBannerAdLoaded) {
              this.developerCallback.onBannerAdLoaded(placementId);
            }
          },
          onBannerAdLoadFail: function onBannerAdLoadFail(placementId, errorInfo) {
            if (this.developerCallback != null && this.developerCallback.onBannerAdLoadFail != null && undefined != this.developerCallback.onBannerAdLoadFail) {
              this.developerCallback.onBannerAdLoadFail(placementId, errorInfo);
            }
          },
          onBannerAdShow: function onBannerAdShow(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onBannerAdShow != null && undefined != this.developerCallback.onBannerAdShow) {
              this.developerCallback.onBannerAdShow(placementId, callbackInfo);
            }
          },
          onBannerAdClick: function onBannerAdClick(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onBannerAdClick != null && undefined != this.developerCallback.onBannerAdClick) {
              this.developerCallback.onBannerAdClick(placementId, callbackInfo);
            }
          },
          onBannerAdAutoRefresh: function onBannerAdAutoRefresh(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onBannerAdAutoRefresh != null && undefined != this.developerCallback.onBannerAdAutoRefresh) {
              this.developerCallback.onBannerAdAutoRefresh(placementId, callbackInfo);
            }
          },
          onBannerAdAutoRefreshFail: function onBannerAdAutoRefreshFail(placementId, errorInfo) {
            if (this.developerCallback != null && this.developerCallback.onBannerAdAutoRefreshFail != null && undefined != this.developerCallback.onBannerAdAutoRefreshFail) {
              this.developerCallback.onBannerAdAutoRefreshFail(placementId, errorInfo);
            }
          },
          onBannerAdCloseButtonTapped: function onBannerAdCloseButtonTapped(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onBannerAdCloseButtonTapped != null && undefined != this.developerCallback.onBannerAdCloseButtonTapped) {
              this.developerCallback.onBannerAdCloseButtonTapped(placementId, callbackInfo);
            }
          },
          //added v5.8.10
          onAdSourceBiddingAttempt: function onAdSourceBiddingAttempt(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onAdSourceBiddingAttempt != null && undefined != this.developerCallback.onAdSourceBiddingAttempt) {
              this.developerCallback.onAdSourceBiddingAttempt(placementId, callbackInfo);
            }
          },
          onAdSourceBiddingFilled: function onAdSourceBiddingFilled(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onAdSourceBiddingFilled != null && undefined != this.developerCallback.onAdSourceBiddingFilled) {
              this.developerCallback.onAdSourceBiddingFilled(placementId, callbackInfo);
            }
          },
          onAdSourceBiddingFail: function onAdSourceBiddingFail(placementId, errorInfo, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onAdSourceBiddingFail != null && undefined != this.developerCallback.onAdSourceBiddingFail) {
              this.developerCallback.onAdSourceBiddingFail(placementId, errorInfo, callbackInfo);
            }
          },
          onAdSourceAttemp: function onAdSourceAttemp(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onAdSourceAttemp != null && undefined != this.developerCallback.onAdSourceAttemp) {
              this.developerCallback.onAdSourceAttemp(placementId, callbackInfo);
            }
          },
          onAdSourceLoadFilled: function onAdSourceLoadFilled(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onAdSourceLoadFilled != null && undefined != this.developerCallback.onAdSourceLoadFilled) {
              this.developerCallback.onAdSourceLoadFilled(placementId, callbackInfo);
            }
          },
          onAdSourceLoadFail: function onAdSourceLoadFail(placementId, errorInfo, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onAdSourceLoadFail != null && undefined != this.developerCallback.onAdSourceLoadFail) {
              this.developerCallback.onAdSourceLoadFail(placementId, errorInfo, callbackInfo);
            }
          }
        },
        loadBanner: function loadBanner(placementId, settings) {
          if (settings === void 0) {
            settings = {};
          }

          if (undefined != platformBridge && platformBridge != null) {
            if (settings.hasOwnProperty(ATBannerSDK.kATBannerAdLoadingExtraBannerAdSizeStruct)) {
              var loadAdSize = settings[ATBannerSDK.kATBannerAdLoadingExtraBannerAdSizeStruct];
              settings["width"] = loadAdSize["width"];
              settings["height"] = loadAdSize["height"];
            }

            platformBridge.loadBanner(placementId, JSON.stringify(settings));
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        setAdListener: function setAdListener(listener) {
          var eventJSON = {};
          eventJSON[LoadedCallbackKey] = "ATBannerSDK.ATBannerListener.onBannerAdLoaded", eventJSON[LoadFailCallbackKey] = "ATBannerSDK.ATBannerListener.onBannerAdLoadFail", eventJSON[CloseCallbackKey] = "ATBannerSDK.ATBannerListener.onBannerAdCloseButtonTapped", eventJSON[ClickCallbackKey] = "ATBannerSDK.ATBannerListener.onBannerAdClick", eventJSON[ShowCallbackKey] = "ATBannerSDK.ATBannerListener.onBannerAdShow", eventJSON[RefreshCallbackKey] = "ATBannerSDK.ATBannerListener.onBannerAdAutoRefresh", eventJSON[RefreshFailCallbackKey] = "ATBannerSDK.ATBannerListener.onBannerAdAutoRefreshFail", //added v5.8.10
          eventJSON[BiddingAttempt] = "ATBannerSDK.ATBannerListener.onAdSourceBiddingAttempt", eventJSON[BiddingFilled] = "ATBannerSDK.ATBannerListener.onAdSourceBiddingFilled", eventJSON[BiddingFail] = "ATBannerSDK.ATBannerListener.onAdSourceBiddingFail", eventJSON[Attemp] = "ATBannerSDK.ATBannerListener.onAdSourceAttemp", eventJSON[LoadFilled] = "ATBannerSDK.ATBannerListener.onAdSourceLoadFilled", eventJSON[LoadFail] = "ATBannerSDK.ATBannerListener.onAdSourceLoadFail";

          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.setAdListener(JSON.stringify(eventJSON));
          } else {
            cc.log("You must run on Android or iOS.");
          }

          this.ATBannerListener.developerCallback = listener;
        },
        hasAdReady: function hasAdReady(placementId) {
          if (undefined != platformBridge && platformBridge != null) {
            return platformBridge.hasAdReady(placementId);
          } else {
            cc.log("You must run on Android or iOS.");
          }

          return false;
        },
        checkAdStatus: function checkAdStatus(placementId) {
          if (undefined != platformBridge && platformBridge != null) {
            return platformBridge.checkAdStatus(placementId);
          } else {
            cc.log("You must run on Android or iOS.");
          }

          return "";
        },
        showAdInPosition: function showAdInPosition(placementId, position) {
          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.showAdInPosition(placementId, position);
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        showAdInPositionAndScenario: function showAdInPositionAndScenario(placementId, position, scenario) {
          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.showAdInPosition(placementId, position, scenario);
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        showAdInRectangle: function showAdInRectangle(placementId, showAdRect) {
          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.showAdInRectangle(placementId, JSON.stringify(showAdRect));
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        showAdInRectangleAndScenario: function showAdInRectangleAndScenario(placementId, showAdRect, scenario) {
          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.showAdInRectangle(placementId, JSON.stringify(showAdRect), scenario);
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        removeAd: function removeAd(placementId) {
          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.removeAd(placementId);
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        reShowAd: function reShowAd(placementId) {
          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.reShowAd(placementId);
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        hideAd: function hideAd(placementId) {
          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.hideAd(placementId);
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        createLoadAdSize: function createLoadAdSize(width, height) {
          var loadAdSize = {};
          loadAdSize["width"] = width;
          loadAdSize["height"] = height;
          return loadAdSize;
        },
        createShowAdRect: function createShowAdRect(x, y, width, height) {
          var adRect = {};
          adRect["x"] = x;
          adRect["y"] = y;
          adRect["width"] = width;
          adRect["height"] = height;
          return adRect;
        }
      });
      var LoadedCallbackKey = "BannerLoaded";
      var LoadFailCallbackKey = "BannerLoadFail";
      var CloseCallbackKey = "BannerCloseButtonTapped";
      var ClickCallbackKey = "BannerClick";
      var ShowCallbackKey = "BannerShow";
      var RefreshCallbackKey = "BannerRefresh";
      var RefreshFailCallbackKey = "BannerRefreshFail";
      var BiddingAttempt = "BannerBiddingAttempt";
      var BiddingFilled = "BannerBiddingFilled";
      var BiddingFail = "BannerBiddingFail";
      var Attemp = "BannerAttemp";
      var LoadFilled = "BannerLoadFilled";
      var LoadFail = "BannerLoadFail";
      window["ATBannerSDK"] = ATBannerSDK;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ATIntersitialAutoTSSDK.ts", ['cc', './ATAndroidIntersitialAutoTS.ts', './ATiOSIntersitiaAutolTS.ts'], function (exports) {
  'use strict';

  var cclegacy, ATAndroidInterstitialAutoAdTS, ATiOSInterstitialAutoAdTS;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      ATAndroidInterstitialAutoAdTS = module.ATAndroidInterstitialAutoAdTS;
    }, function (module) {
      ATiOSInterstitialAutoAdTS = module.ATiOSInterstitialAutoAdTS;
    }],
    execute: function () {
      cclegacy._RF.push({}, "dc1eclA4bFDgaC4GG0292qg", "ATIntersitialAutoTSSDK", undefined);

      var initPlatformBridge = function initPlatformBridge() {
        if (cc.sys.os === cc.sys.OS.IOS) {
          return ATiOSInterstitialAutoAdTS;
        } else if (cc.sys.os === cc.sys.OS.ANDROID) {
          return ATAndroidInterstitialAutoAdTS;
        }
      };

      var platformBridge = initPlatformBridge();
      var ATInterstitialAutoAdSDK = exports('ATInterstitialAutoAdSDK', {
        UseInterstitialAsInterstitial: "UseInterstitialAsInterstitial",
        UseRewardedVideoAsInterstitial: "UseRewardedVideoAsInterstitial",
        ATInterstitialListener: {
          developerCallback: null,
          onInterstitialAdLoaded: function onInterstitialAdLoaded(placementId) {
            if (this.developerCallback != null && this.developerCallback.onInterstitialAdLoaded != null && undefined != this.developerCallback.onInterstitialAdLoaded) {
              this.developerCallback.onInterstitialAdLoaded(placementId);
            }
          },
          onInterstitialAdLoadFail: function onInterstitialAdLoadFail(placementId, errorInfo) {
            if (this.developerCallback != null && this.developerCallback.onInterstitialAdLoadFail != null && undefined != this.developerCallback.onInterstitialAdLoadFail) {
              this.developerCallback.onInterstitialAdLoadFail(placementId, errorInfo);
            }
          },
          onInterstitialAdShow: function onInterstitialAdShow(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onInterstitialAdShow != null && undefined != this.developerCallback.onInterstitialAdShow) {
              this.developerCallback.onInterstitialAdShow(placementId, callbackInfo);
            }
          },
          onInterstitialAdStartPlayingVideo: function onInterstitialAdStartPlayingVideo(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onInterstitialAdStartPlayingVideo != null && undefined != this.developerCallback.onInterstitialAdStartPlayingVideo) {
              this.developerCallback.onInterstitialAdStartPlayingVideo(placementId, callbackInfo);
            }
          },
          onInterstitialAdEndPlayingVideo: function onInterstitialAdEndPlayingVideo(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onInterstitialAdEndPlayingVideo != null && undefined != this.developerCallback.onInterstitialAdEndPlayingVideo) {
              this.developerCallback.onInterstitialAdEndPlayingVideo(placementId, callbackInfo);
            }
          },
          onInterstitialAdFailedToPlayVideo: function onInterstitialAdFailedToPlayVideo(placementId, errorInfo) {
            if (this.developerCallback != null && this.developerCallback.onInterstitialAdFailedToPlayVideo != null && undefined != this.developerCallback.onInterstitialAdFailedToPlayVideo) {
              this.developerCallback.onInterstitialAdFailedToPlayVideo(placementId, errorInfo);
            }
          },
          onInterstitialAdFailedToShow: function onInterstitialAdFailedToShow(placementId, errorInfo, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onInterstitialAdFailedToShow != null && undefined != this.developerCallback.onInterstitialAdFailedToShow) {
              this.developerCallback.onInterstitialAdFailedToShow(placementId, errorInfo, callbackInfo);
            }
          },
          onInterstitialAdClose: function onInterstitialAdClose(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onInterstitialAdClose != null && undefined != this.developerCallback.onInterstitialAdClose) {
              this.developerCallback.onInterstitialAdClose(placementId, callbackInfo);
            }
          },
          onInterstitialAdClick: function onInterstitialAdClick(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onInterstitialAdClick != null && undefined != this.developerCallback.onInterstitialAdClick) {
              this.developerCallback.onInterstitialAdClick(placementId, callbackInfo);
            }
          }
        },
        setAdExtraData: function setAdExtraData(placementId, settings) {
          if (settings === void 0) {
            settings = {};
          }

          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.setAdExtraData(placementId, JSON.stringify(settings));
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        addPlacementIds: function addPlacementIds(placementIds) {
          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.addPlacementIds(JSON.stringify(placementIds));
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        removePlacementId: function removePlacementId(placementIds) {
          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.removePlacementId(JSON.stringify(placementIds));
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        setAdListener: function setAdListener(listener) {
          var eventJSON = {};
          eventJSON[LoadedCallbackKey] = "ATInterstitialAutoAdSDK.ATInterstitialListener.onInterstitialAdLoaded", eventJSON[LoadFailCallbackKey] = "ATInterstitialAutoAdSDK.ATInterstitialListener.onInterstitialAdLoadFail", eventJSON[PlayStartCallbackKey] = "ATInterstitialAutoAdSDK.ATInterstitialListener.onInterstitialAdStartPlayingVideo", eventJSON[PlayEndCallbackKey] = "ATInterstitialAutoAdSDK.ATInterstitialListener.onInterstitialAdEndPlayingVideo", eventJSON[PlayFailCallbackKey] = "ATInterstitialAutoAdSDK.ATInterstitialListener.onInterstitialAdFailedToPlayVideo", eventJSON[CloseCallbackKey] = "ATInterstitialAutoAdSDK.ATInterstitialListener.onInterstitialAdClose", eventJSON[ClickCallbackKey] = "ATInterstitialAutoAdSDK.ATInterstitialListener.onInterstitialAdClick", eventJSON[ShowCallbackKey] = "ATInterstitialAutoAdSDK.ATInterstitialListener.onInterstitialAdShow";
          eventJSON[ShowFailCallbackKey] = "ATInterstitialAutoAdSDK.ATInterstitialListener.onInterstitialAdFailedToShow";

          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.setAdListener(JSON.stringify(eventJSON));
          } else {
            cc.log("You must run on Android or iOS.");
          }

          this.ATInterstitialListener.developerCallback = listener;
        },
        hasAdReady: function hasAdReady(placementId) {
          if (undefined != platformBridge && platformBridge != null) {
            return platformBridge.hasAdReady(placementId);
          } else {
            cc.log("You must run on Android or iOS.");
          }

          return false;
        },
        checkAdStatus: function checkAdStatus(placementId) {
          if (undefined != platformBridge && platformBridge != null) {
            return platformBridge.checkAdStatus(placementId);
          } else {
            cc.log("You must run on Android or iOS.");
          }

          return "";
        },
        showAd: function showAd(placementId) {
          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.showAd(placementId);
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        showAdInScenario: function showAdInScenario(placementId, scenario) {
          if (scenario === void 0) {
            scenario = "";
          }

          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.showAdInScenario(placementId, scenario);
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        entryAdScenario: function entryAdScenario(placementId, scenario) {
          if (scenario === void 0) {
            scenario = "";
          }

          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.entryAdScenario(placementId, scenario);
          } else {
            cc.log("You must run on Android or iOS.");
          }
        }
      });
      var LoadedCallbackKey = "InterstitialAutoAdLoaded";
      var LoadFailCallbackKey = "InterstitialAutoAdLoadFail";
      var PlayStartCallbackKey = "InterstitialAutoAdPlayStart";
      var PlayEndCallbackKey = "InterstitialAutoAdPlayEnd";
      var PlayFailCallbackKey = "InterstitialAutoAdPlayFail";
      var CloseCallbackKey = "InterstitialAutoAdClose";
      var ClickCallbackKey = "InterstitialAutoAdClick";
      var ShowCallbackKey = "InterstitialAutoAdAdShow";
      var ShowFailCallbackKey = "InterstitialAutoAdShowFail";
      window["ATInterstitialAutoAdSDK"] = ATInterstitialAutoAdSDK;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ATIntersitialTSSDK.ts", ['cc', './ATAndroidIntersitialTS.ts', './ATiOSIntersitialTS.ts'], function (exports) {
  'use strict';

  var cclegacy, ATAndroidInterstitialJS, ATiOSInterstitialJS;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      ATAndroidInterstitialJS = module.ATAndroidInterstitialJS;
    }, function (module) {
      ATiOSInterstitialJS = module.ATiOSInterstitialJS;
    }],
    execute: function () {
      cclegacy._RF.push({}, "62979+Y2JlKqJo/3Azw3Fvt", "ATIntersitialTSSDK", undefined);

      var initPlatformBridge = function initPlatformBridge() {
        if (cc.sys.os === cc.sys.OS.IOS) {
          return ATiOSInterstitialJS;
        } else if (cc.sys.os === cc.sys.OS.ANDROID) {
          return ATAndroidInterstitialJS;
        }
      };

      var platformBridge = initPlatformBridge();
      var ATInterstitialSDK = exports('ATInterstitialSDK', {
        UseInterstitialAsInterstitial: "UseInterstitialAsInterstitial",
        ATInterstitialListener: {
          developerCallback: null,
          onInterstitialAdLoaded: function onInterstitialAdLoaded(placementId) {
            if (this.developerCallback != null && this.developerCallback.onInterstitialAdLoaded != null && undefined != this.developerCallback.onInterstitialAdLoaded) {
              this.developerCallback.onInterstitialAdLoaded(placementId);
            }
          },
          onInterstitialAdLoadFail: function onInterstitialAdLoadFail(placementId, errorInfo) {
            if (this.developerCallback != null && this.developerCallback.onInterstitialAdLoadFail != null && undefined != this.developerCallback.onInterstitialAdLoadFail) {
              this.developerCallback.onInterstitialAdLoadFail(placementId, errorInfo);
            }
          },
          onInterstitialAdShow: function onInterstitialAdShow(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onInterstitialAdShow != null && undefined != this.developerCallback.onInterstitialAdShow) {
              this.developerCallback.onInterstitialAdShow(placementId, callbackInfo);
            }
          },
          onInterstitialAdStartPlayingVideo: function onInterstitialAdStartPlayingVideo(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onInterstitialAdStartPlayingVideo != null && undefined != this.developerCallback.onInterstitialAdStartPlayingVideo) {
              this.developerCallback.onInterstitialAdStartPlayingVideo(placementId, callbackInfo);
            }
          },
          onInterstitialAdEndPlayingVideo: function onInterstitialAdEndPlayingVideo(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onInterstitialAdEndPlayingVideo != null && undefined != this.developerCallback.onInterstitialAdEndPlayingVideo) {
              this.developerCallback.onInterstitialAdEndPlayingVideo(placementId, callbackInfo);
            }
          },
          onInterstitialAdFailedToPlayVideo: function onInterstitialAdFailedToPlayVideo(placementId, errorInfo) {
            if (this.developerCallback != null && this.developerCallback.onInterstitialAdFailedToPlayVideo != null && undefined != this.developerCallback.onInterstitialAdFailedToPlayVideo) {
              this.developerCallback.onInterstitialAdFailedToPlayVideo(placementId, errorInfo);
            }
          },
          onInterstitialAdFailedToShow: function onInterstitialAdFailedToShow(placementId, errorInfo, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onInterstitialAdFailedToShow != null && undefined != this.developerCallback.onInterstitialAdFailedToShow) {
              this.developerCallback.onInterstitialAdFailedToShow(placementId, errorInfo, callbackInfo);
            }
          },
          onInterstitialAdClose: function onInterstitialAdClose(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onInterstitialAdClose != null && undefined != this.developerCallback.onInterstitialAdClose) {
              this.developerCallback.onInterstitialAdClose(placementId, callbackInfo);
            }
          },
          onInterstitialAdClick: function onInterstitialAdClick(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onInterstitialAdClick != null && undefined != this.developerCallback.onInterstitialAdClick) {
              this.developerCallback.onInterstitialAdClick(placementId, callbackInfo);
            }
          },
          //added v5.8.10
          onAdSourceBiddingAttempt: function onAdSourceBiddingAttempt(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onAdSourceBiddingAttempt != null && undefined != this.developerCallback.onAdSourceBiddingAttempt) {
              this.developerCallback.onAdSourceBiddingAttempt(placementId, callbackInfo);
            }
          },
          onAdSourceBiddingFilled: function onAdSourceBiddingFilled(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onAdSourceBiddingFilled != null && undefined != this.developerCallback.onAdSourceBiddingFilled) {
              this.developerCallback.onAdSourceBiddingFilled(placementId, callbackInfo);
            }
          },
          onAdSourceBiddingFail: function onAdSourceBiddingFail(placementId, errorInfo, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onAdSourceBiddingFail != null && undefined != this.developerCallback.onAdSourceBiddingFail) {
              this.developerCallback.onAdSourceBiddingFail(placementId, errorInfo, callbackInfo);
            }
          },
          onAdSourceAttemp: function onAdSourceAttemp(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onAdSourceAttemp != null && undefined != this.developerCallback.onAdSourceAttemp) {
              this.developerCallback.onAdSourceAttemp(placementId, callbackInfo);
            }
          },
          onAdSourceLoadFilled: function onAdSourceLoadFilled(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onAdSourceLoadFilled != null && undefined != this.developerCallback.onAdSourceLoadFilled) {
              this.developerCallback.onAdSourceLoadFilled(placementId, callbackInfo);
            }
          },
          onAdSourceLoadFail: function onAdSourceLoadFail(placementId, errorInfo, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onAdSourceLoadFail != null && undefined != this.developerCallback.onAdSourceLoadFail) {
              this.developerCallback.onAdSourceLoadFail(placementId, errorInfo, callbackInfo);
            }
          }
        },
        loadInterstitial: function loadInterstitial(placementId, settings) {
          if (settings === void 0) {
            settings = {};
          }

          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.loadInterstitial(placementId, JSON.stringify(settings));
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        setAdListener: function setAdListener(listener) {
          var eventJSON = {};
          eventJSON[LoadedCallbackKey] = " ATInterstitialSDK.ATInterstitialListener.onInterstitialAdLoaded", eventJSON[LoadFailCallbackKey] = " ATInterstitialSDK.ATInterstitialListener.onInterstitialAdLoadFail", eventJSON[PlayStartCallbackKey] = " ATInterstitialSDK.ATInterstitialListener.onInterstitialAdStartPlayingVideo", eventJSON[PlayEndCallbackKey] = " ATInterstitialSDK.ATInterstitialListener.onInterstitialAdEndPlayingVideo", eventJSON[PlayFailCallbackKey] = " ATInterstitialSDK.ATInterstitialListener.onInterstitialAdFailedToPlayVideo", eventJSON[CloseCallbackKey] = " ATInterstitialSDK.ATInterstitialListener.onInterstitialAdClose", eventJSON[ClickCallbackKey] = " ATInterstitialSDK.ATInterstitialListener.onInterstitialAdClick", eventJSON[ShowCallbackKey] = " ATInterstitialSDK.ATInterstitialListener.onInterstitialAdShow", eventJSON[ShowFailCallbackKey] = " ATInterstitialSDK.ATInterstitialListener.onInterstitialAdFailedToShow", //added v5.8.10
          eventJSON[BiddingAttempt] = " ATInterstitialSDK.ATInterstitialListener.onAdSourceBiddingAttempt", eventJSON[BiddingFilled] = " ATInterstitialSDK.ATInterstitialListener.onAdSourceBiddingFilled", eventJSON[BiddingFail] = " ATInterstitialSDK.ATInterstitialListener.onAdSourceBiddingFail", eventJSON[Attemp] = " ATInterstitialSDK.ATInterstitialListener.onAdSourceAttemp", eventJSON[LoadFilled] = " ATInterstitialSDK.ATInterstitialListener.onAdSourceLoadFilled", eventJSON[LoadFail] = " ATInterstitialSDK.ATInterstitialListener.onAdSourceLoadFail";

          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.setAdListener(JSON.stringify(eventJSON));
          } else {
            cc.log("You must run on Android or iOS.");
          }

          this.ATInterstitialListener.developerCallback = listener;
        },
        hasAdReady: function hasAdReady(placementId) {
          if (undefined != platformBridge && platformBridge != null) {
            return platformBridge.hasAdReady(placementId);
          } else {
            cc.log("You must run on Android or iOS.");
          }

          return false;
        },
        checkAdStatus: function checkAdStatus(placementId) {
          if (undefined != platformBridge && platformBridge != null) {
            return platformBridge.checkAdStatus(placementId);
          } else {
            cc.log("You must run on Android or iOS.");
          }

          return "";
        },
        showAd: function showAd(placementId) {
          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.showAd(placementId);
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        showAdInScenario: function showAdInScenario(placementId, scenario) {
          if (scenario === void 0) {
            scenario = "";
          }

          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.showAdInScenario(placementId, scenario);
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        entryAdScenario: function entryAdScenario(placementId, scenario) {
          if (scenario === void 0) {
            scenario = "";
          }

          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.entryAdScenario(placementId, scenario);
          } else {
            cc.log("You must run on Android or iOS.");
          }
        }
      });
      var LoadedCallbackKey = "InterstitialLoaded";
      var LoadFailCallbackKey = "InterstitialLoadFail";
      var PlayStartCallbackKey = "InterstitialPlayStart";
      var PlayEndCallbackKey = "InterstitialPlayEnd";
      var PlayFailCallbackKey = "InterstitialPlayFail";
      var CloseCallbackKey = "InterstitialClose";
      var ClickCallbackKey = "InterstitialClick";
      var ShowCallbackKey = "InterstitialAdShow";
      var ShowFailCallbackKey = "InterstitialAdShowFail";
      var BiddingAttempt = "InterstitialBiddingAttempt";
      var BiddingFilled = "InterstitialBiddingFilled";
      var BiddingFail = "InterstitialBiddingFail";
      var Attemp = "InterstitialAttemp";
      var LoadFilled = "InterstitialLoadFilled";
      var LoadFail = "InterstitialLoadFail";
      window["ATInterstitialSDK"] = ATInterstitialSDK;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ATiOSBannerTS.ts", ['cc', './ATiOSJS.ts'], function (exports) {
  'use strict';

  var cclegacy, native, ATiOSJS;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      native = module.native;
    }, function (module) {
      ATiOSJS = module.ATiOSJS;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e3e59GeoPFOHrSlOaA2ded2", "ATiOSBannerTS", undefined);

      var OC_WRAPPER_CLASS = "ATBannerAdWrapper";
      var ATiOSBannerJS = exports('ATiOSBannerJS', {
        loadBanner: function loadBanner(placementId, extra) {
          ATiOSJS.printJsLog("ATiOSBannerJS::loadBanner(" + placementId + ", " + extra + ")");
          native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "loadBannerWithPlacementID:extra:", placementId, extra);
        },
        setAdListener: function setAdListener(listener) {
          ATiOSJS.printJsLog("ATiOSBannerJS::setAdListener(" + listener + ")");
          native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "setDelegates:", listener);
        },
        hasAdReady: function hasAdReady(placementId) {
          ATiOSJS.printJsLog("ATiOSBannerJS::hasAdReady(" + placementId + ")");
          return native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "bannerReadyForPlacementID:", placementId);
        },
        checkAdStatus: function checkAdStatus(placementId) {
          ATiOSJS.printJsLog("ATiOSBannerJS::checkAdStatus(" + placementId + ")");
          return native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "bannerCheckAdStatusForPlacementID:", placementId);
        },
        showAdInPosition: function showAdInPosition(placementId, position) {
          ATiOSJS.printJsLog("ATiOSBannerJS::showAdInPosition(" + placementId + ", " + position + ")");
          native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "showBannerWithPlacementID:scene:position:", placementId, null, position);
        },
        showAdInPositionAndScenario: function showAdInPositionAndScenario(placementId, position, scenario) {
          ATiOSJS.printJsLog("ATiOSBannerJS::showAdInPositionAndScenario(" + placementId + ", " + position + ", " + scenario + ")");
          native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "showBannerWithPlacementID:scene:position:", placementId, scenario, position);
        },
        showAdInRectangle: function showAdInRectangle(placementId, showAdRect) {
          ATiOSJS.printJsLog("ATiOSBannerJS::showAdInRectangle(" + placementId + ", " + showAdRect + ")");
          native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "showBannerWithPlacementID:scene:rect:", placementId, null, showAdRect);
        },
        showAdInRectangleAndScenario: function showAdInRectangleAndScenario(placementId, showAdRect, scenario) {
          ATiOSJS.printJsLog("ATiOSBannerJS::showAdInRectangleAndScenario(" + placementId + ", " + showAdRect + ", " + scenario + ")");
          native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "showBannerWithPlacementID:scene:rect:", placementId, scenario, showAdRect);
        },
        removeAd: function removeAd(placementId) {
          ATiOSJS.printJsLog("ATiOSBannerJS::removeAd(" + placementId + ")");
          native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "removeAd:", placementId);
        },
        reShowAd: function reShowAd(placementId) {
          ATiOSJS.printJsLog("ATiOSBannerJS::reShowAd(" + placementId + ")");
          native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "reShowAd:", placementId);
        },
        hideAd: function hideAd(placementId) {
          ATiOSJS.printJsLog("ATiOSBannerJS::hideAd(" + placementId + ")");
          native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "hideAd:", placementId);
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ATiOSIntersitiaAutolTS.ts", ['cc', './ATiOSJS.ts'], function (exports) {
  'use strict';

  var cclegacy, native, ATiOSJS;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      native = module.native;
    }, function (module) {
      ATiOSJS = module.ATiOSJS;
    }],
    execute: function () {
      cclegacy._RF.push({}, "693bajhnj1EfI3v63cogosf", "ATiOSIntersitiaAutolTS", undefined);

      var OC_WRAPPER_CLASS = "ATInterstitialAutoAdWrapper";
      var ATiOSInterstitialAutoAdTS = exports('ATiOSInterstitialAutoAdTS', {
        setAdListener: function setAdListener(listener) {
          ATiOSJS.printJsLog("ATiOSInterstitialAutoAdJS::setAdListener(" + listener + ")");
          native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "setDelegates:", listener);
        },
        setAdExtraData: function setAdExtraData(placementId, extra) {
          ATiOSJS.printJsLog("ATiOSInterstitialAutoAdJS::setAdExtraData(" + placementId + ", " + extra + ")");
          native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "setAutoLocalExtra:customDataJSONString:", placementId, extra);
        },
        addPlacementIds: function addPlacementIds(placementId) {
          ATiOSJS.printJsLog("ATiOSInterstitialAutoAdJS::addPlacementIds(" + placementId + ")");
          native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "addAutoLoadAdPlacementID:", placementId);
        },
        removePlacementId: function removePlacementId(placementId) {
          ATiOSJS.printJsLog("ATiOSInterstitialAutoAdJS::removePlacementId(" + placementId + ")");
          native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "removeAutoLoadAdPlacementID:", placementId);
        },
        hasAdReady: function hasAdReady(placementId) {
          ATiOSJS.printJsLog("ATiOSInterstitialAutoAdJS::hasAdReady(" + placementId + ")");
          return native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "autoLoadInterstitialAdReadyForPlacementID:", placementId);
        },
        checkAdStatus: function checkAdStatus(placementId) {
          ATiOSJS.printJsLog("ATiOSInterstitialAutoAdJS::hasAdReady(" + placementId + ")");
          return native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "checkAutoAdStatus:", placementId);
        },
        entryAdScenario: function entryAdScenario(placementId, scenario) {
          ATiOSJS.printJsLog("ATiOSInterstitialAutoAdJS::entryAdScenario(" + placementId + ", " + scenario + ")");
          native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "entryAutoAdScenarioWithPlacementID:scenarioID:", placementId, scenario);
        },
        showAd: function showAd(placementId) {
          ATiOSJS.printJsLog("ATiOSInterstitialAutoAdJS::showAd(" + placementId + ")");
          native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "showAutoInterstitialAdWithPlacementID:scenarioID:", placementId, null);
        },
        showAdInScenario: function showAdInScenario(placementId, scenario) {
          ATiOSJS.printJsLog("ATiOSInterstitialAutoAdJS::showAdInScenario(" + placementId + ", " + scenario + ")");
          native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "showAutoInterstitialAdWithPlacementID:scenarioID:", placementId, scenario);
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ATiOSIntersitialTS.ts", ['cc', './ATiOSJS.ts'], function (exports) {
  'use strict';

  var cclegacy, native, ATiOSJS;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      native = module.native;
    }, function (module) {
      ATiOSJS = module.ATiOSJS;
    }],
    execute: function () {
      cclegacy._RF.push({}, "830c9/b6a1D95d6IQrIZPR4", "ATiOSIntersitialTS", undefined);

      var OC_WRAPPER_CLASS = "ATInterstitialAdWrapper";
      var ATiOSInterstitialJS = exports('ATiOSInterstitialJS', {
        loadInterstitial: function loadInterstitial(placementId, extra) {
          ATiOSJS.printJsLog("ATiOSInterstitialJS::loadInterstitial(" + placementId + ", " + extra + ")");
          native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "loadInterstitialWithPlacementID:extra:", placementId, extra);
        },
        setAdListener: function setAdListener(listener) {
          ATiOSJS.printJsLog("ATiOSInterstitialJS::setAdListener(" + listener + ")");
          native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "setDelegates:", listener);
        },
        hasAdReady: function hasAdReady(placementId) {
          ATiOSJS.printJsLog("ATiOSInterstitialJS::hasAdReady(" + placementId + ")");
          return native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "interstitialReadyForPlacementID:", placementId);
        },
        checkAdStatus: function checkAdStatus(placementId) {
          ATiOSJS.printJsLog("ATiOSInterstitialJS::checkAdStatus(" + placementId + ")");
          return native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "checkAdStatus:", placementId);
        },
        setUserData: function setUserData(placementId, userId, userData) {
          console.log("Android-setUserData");
        },
        showAd: function showAd(placementId) {
          ATiOSJS.printJsLog("ATiOSInterstitialJS::showAd(" + placementId + ")");
          return native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "showInterstitialWithPlacementID:scene:", placementId, null);
        },
        showAdInScenario: function showAdInScenario(placementId, scenario) {
          ATiOSJS.printJsLog("ATiOSInterstitialJS::showAd(" + placementId + ", " + scenario + ")");
          return native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "showInterstitialWithPlacementID:scene:", placementId, scenario);
        },
        entryAdScenario: function entryAdScenario(placementId, scenario) {
          ATiOSJS.printJsLog("ATiOSInterstitialJS::entryAdScenario(" + placementId + ", " + scenario + ")");
          return native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "entryAdScenarioWithPlacementID:scene:", placementId, scenario);
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ATiOSJS.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, native;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      native = module.native;
    }],
    execute: function () {
      cclegacy._RF.push({}, "dec7csgkTRAvop0e7U8HcpD", "ATiOSJS", undefined);

      var OC_ATSDK_MANAGER_CLASS = "ATSDKManager";
      var ATiOSJS = exports('ATiOSJS', {
        initSDK: function initSDK(appid, appkey) {
          this.printJsLog("ATiOSJS::initSDK(" + appid + "," + appkey + ")");
          native.reflection.callStaticMethod(OC_ATSDK_MANAGER_CLASS, "startWithAppID:appKey:", appid, appkey);
        },
        initCustomMap: function initCustomMap(customMap) {
          this.printJsLog("ATiOSJS::initCustomMap(" + customMap + ")");
          native.reflection.callStaticMethod(OC_ATSDK_MANAGER_CLASS, "setCustomData:", customMap);
        },
        setPlacementCustomMap: function setPlacementCustomMap(placmentId, customMap) {
          this.printJsLog("ATiOSJS::setPlacementCustomMap(" + placmentId + ", " + customMap + ")");
          native.reflection.callStaticMethod(OC_ATSDK_MANAGER_CLASS, "setCustomData:forPlacementID:", customMap, placmentId);
        },
        setGDPRLevel: function setGDPRLevel(level) {
          this.printJsLog("ATiOSJS::setGDPRLevel(" + level + ")");
          native.reflection.callStaticMethod(OC_ATSDK_MANAGER_CLASS, "setDataConsent:", level);
        },
        getGDPRLevel: function getGDPRLevel() {
          this.printJsLog("ATiOSJS::getGDPRLevel()");
          return native.reflection.callStaticMethod(OC_ATSDK_MANAGER_CLASS, "dataConsent");
        },
        getUserLocation: function getUserLocation(callbackMethod) {
          this.printJsLog("ATiOSJS::getUserLocation(" + callbackMethod + ")");
          native.reflection.callStaticMethod(OC_ATSDK_MANAGER_CLASS, "getUserLocationWithCallback:", callbackMethod);
        },
        showGDPRAuth: function showGDPRAuth() {
          this.printJsLog("ATiOSJS::showGDPRAuth()");
          native.reflection.callStaticMethod(OC_ATSDK_MANAGER_CLASS, "presentDataConsentDialog");
        },
        setLogDebug: function setLogDebug(debug) {
          this.printJsLog("ATiOSJS::setLogDebug(" + debug + ")");
          native.reflection.callStaticMethod(OC_ATSDK_MANAGER_CLASS, "setDebugLog:", debug);
        },
        printJsLog: function printJsLog(msg) {},
        deniedUploadDeviceInfo: function deniedUploadDeviceInfo(deniedInfo) {
          this.printJsLog("ATiOSJS::deniedUploadDeviceInfo(" + deniedInfo + ")");
          native.reflection.callStaticMethod(OC_ATSDK_MANAGER_CLASS, "deniedUploadDeviceInfo:", deniedInfo);
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ATiOSNativeTS.ts", ['cc', './ATiOSJS.ts'], function (exports) {
  'use strict';

  var cclegacy, native, ATiOSJS;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      native = module.native;
    }, function (module) {
      ATiOSJS = module.ATiOSJS;
    }],
    execute: function () {
      cclegacy._RF.push({}, "75ca1JULGNNd6kvfsdgNNy1", "ATiOSNativeTS", undefined);

      var OC_WRAPPER_CLASS = "ATNativeAdWrapper";
      var ATiOSNativeTS = exports('ATiOSNativeTS', {
        loadNative: function loadNative(placementId, settings) {
          ATiOSJS.printJsLog("ATiOSBannerJS::loadNative(" + placementId + ", " + settings + ")");
          native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "loadNativeWithPlacementID:extra:", placementId, settings);
        },
        setAdListener: function setAdListener(listener) {
          ATiOSJS.printJsLog("ATiOSNativeJS::setAdListener(" + listener + ")");
          native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "setDelegates:", listener);
        },
        hasAdReady: function hasAdReady(placementId) {
          ATiOSJS.printJsLog("ATiOSNativeJS::hasAdReady(" + placementId + ")");
          return native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "nativeReadyForPlacementID:", placementId);
        },
        checkAdStatus: function checkAdStatus(placementId) {
          ATiOSJS.printJsLog("ATiOSNativeJS::checkAdStatus(" + placementId + ")");
          return native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "nativeCheckAdStatusForPlacementID:", placementId);
        },
        showAd: function showAd(placementId, adViewProperty) {
          ATiOSJS.printJsLog("ATiOSNativeJS::showAd(" + placementId + ", " + adViewProperty + ")");
          native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "showNativeWithPlacementID:scene:metrics:", placementId, null, adViewProperty);
        },
        showAdInScenario: function showAdInScenario(placementId, adViewProperty, scenario) {
          ATiOSJS.printJsLog("ATiOSNativeJS::showAdInScenario(" + placementId + ", " + adViewProperty + ", " + scenario + ")");
          native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "showNativeWithPlacementID:scene:metrics:", placementId, scenario, adViewProperty);
        },
        removeAd: function removeAd(placementId) {
          ATiOSJS.printJsLog("ATiOSNativeJS::removeAd(" + placementId + ")");
          native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "removeNativeWithPlacementID:", placementId);
        },
        entryAdScenario: function entryAdScenario(placementId, scenario) {
          ATiOSJS.printJsLog("ATiOSInterstitialJS::entryAdScenario(" + placementId + ", " + scenario + ")");
          return native.reflection.callStaticMethod(OC_WRAPPER_CLASS, "entryAdScenarioWithPlacementID:scene:", placementId, scenario);
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ATiOSRewardedAutoVideoTS.ts", ['cc', './ATiOSJS.ts'], function (exports) {
  'use strict';

  var cclegacy, native, ATiOSJS;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      native = module.native;
    }, function (module) {
      ATiOSJS = module.ATiOSJS;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a53397J75ZCO6VDBNkhF3Em", "ATiOSRewardedAutoVideoTS", undefined);

      var OC_RV_WRAPPER_CLASS = "ATRewardedVideoAutoAdWrapper";
      var ATiOSRewardedVideoAutoAdJS = exports('ATiOSRewardedVideoAutoAdJS', {
        setAdListener: function setAdListener(listener) {
          ATiOSJS.printJsLog("ATiOSRewardedVideoAutoAdJS::setAdListener(" + listener + ")");
          native.reflection.callStaticMethod(OC_RV_WRAPPER_CLASS, "setDelegates:", listener);
        },
        setAdExtraData: function setAdExtraData(placementId, extra) {
          ATiOSJS.printJsLog("ATiOSRewardedVideoAutoAdJS::setAdExtraData(" + placementId + ", " + extra + ")");
          native.reflection.callStaticMethod(OC_RV_WRAPPER_CLASS, "setAutoLocalExtra:customDataJSONString:", placementId, extra);
        },
        addPlacementIds: function addPlacementIds(placementId) {
          ATiOSJS.printJsLog("ATiOSRewardedVideoAutoAdJS::addPlacementIds(" + placementId + ")");
          native.reflection.callStaticMethod(OC_RV_WRAPPER_CLASS, "addAutoLoadAdPlacementID:", placementId);
        },
        removePlacementId: function removePlacementId(placementId) {
          ATiOSJS.printJsLog("ATiOSRewardedVideoAutoAdJS::removePlacementId(" + placementId + ")");
          native.reflection.callStaticMethod(OC_RV_WRAPPER_CLASS, "removeAutoLoadAdPlacementID:", placementId);
        },
        hasAdReady: function hasAdReady(placementId) {
          ATiOSJS.printJsLog("ATiOSRewardedVideoAutoAdJS::hasAdReady(" + placementId + ")");
          return native.reflection.callStaticMethod(OC_RV_WRAPPER_CLASS, "autoLoadRewardedVideoReadyForPlacementID:", placementId);
        },
        checkAdStatus: function checkAdStatus(placementId) {
          ATiOSJS.printJsLog("ATiOSRewardedVideoAutoAdJS::hasAdReady(" + placementId + ")");
          return native.reflection.callStaticMethod(OC_RV_WRAPPER_CLASS, "checkAutoAdStatus:", placementId);
        },
        entryAdScenario: function entryAdScenario(placementId, scenario) {
          ATiOSJS.printJsLog("ATiOSInterstitialAutoAdJS::entryAdScenario(" + placementId + ", " + scenario + ")");
          native.reflection.callStaticMethod(OC_RV_WRAPPER_CLASS, "entryAutoAdScenarioWithPlacementID:scenarioID:", placementId, scenario);
        },
        showAd: function showAd(placementId) {
          ATiOSJS.printJsLog("ATiOSRewardedVideoAutoAdJS::showAd(" + placementId + ")");
          native.reflection.callStaticMethod(OC_RV_WRAPPER_CLASS, "showAutoRewardedVideoWithPlacementID:scenarioID:", placementId, null);
        },
        showAdInScenario: function showAdInScenario(placementId, scenario) {
          ATiOSJS.printJsLog("ATiOSRewardedVideoAutoAdJS::showAdInScenario(" + placementId + ", " + scenario + ")");
          native.reflection.callStaticMethod(OC_RV_WRAPPER_CLASS, "showAutoRewardedVideoWithPlacementID:scenarioID:", placementId, scenario);
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ATiOSRewardedVideoTS.ts", ['cc', './ATiOSJS.ts'], function (exports) {
  'use strict';

  var cclegacy, native, log, ATiOSJS;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      native = module.native;
      log = module.log;
    }, function (module) {
      ATiOSJS = module.ATiOSJS;
    }],
    execute: function () {
      cclegacy._RF.push({}, "86ebfk38uBHTosgcJ+Q/sz2", "ATiOSRewardedVideoTS", undefined);

      var OC_RV_WRAPPER_CLASS = "ATRewardedVideoWrapper";
      var ATiOSRewardedVideoTS = exports('ATiOSRewardedVideoTS', {
        loadRewardedVideo: function loadRewardedVideo(placementId, extra) {
          ATiOSJS.printJsLog("ATiOSRewardedVideoJS::loadRewardedVideo(" + placementId + ", " + extra + ")");
          native.reflection.callStaticMethod(OC_RV_WRAPPER_CLASS, "loadRewardedVideoWithPlacementID:extra:", placementId, extra);
        },
        setAdListener: function setAdListener(listener) {
          ATiOSJS.printJsLog("ATiOSRewardedVideoJS::setAdListener(" + listener + ")");
          native.reflection.callStaticMethod(OC_RV_WRAPPER_CLASS, "setDelegates:", listener);
        },
        hasAdReady: function hasAdReady(placementId) {
          ATiOSJS.printJsLog("ATiOSRewardedVideoJS::hasAdReady(" + placementId + ")");
          return native.reflection.callStaticMethod(OC_RV_WRAPPER_CLASS, "rewardedVideoReadyForPlacementID:", placementId);
        },
        checkAdStatus: function checkAdStatus(placementId) {
          ATiOSJS.printJsLog("ATiOSRewardedVideoJS::checkAdStatus(" + placementId + ")");
          return native.reflection.callStaticMethod(OC_RV_WRAPPER_CLASS, "checkAdStatus:", placementId);
        },
        setUserData: function setUserData(placementId, userId, userData) {
          log("Android-setUserData");
        },
        showAd: function showAd(placementId) {
          ATiOSJS.printJsLog("ATiOSRewardedVideoJS::showAd(" + placementId + ")");
          return native.reflection.callStaticMethod(OC_RV_WRAPPER_CLASS, "showRewardedVideoWithPlacementID:scene:", placementId, null);
        },
        showAdInScenario: function showAdInScenario(placementId, scenario) {
          ATiOSJS.printJsLog("ATiOSRewardedVideoJS::showAdInScenario(" + placementId + ", " + scenario + ")");
          return native.reflection.callStaticMethod(OC_RV_WRAPPER_CLASS, "showRewardedVideoWithPlacementID:scene:", placementId, scenario);
        },
        entryAdScenario: function entryAdScenario(placementId, scenario) {
          ATiOSJS.printJsLog("ATiOSInterstitialJS::entryAdScenario(" + placementId + ", " + scenario + ")");
          return native.reflection.callStaticMethod(OC_RV_WRAPPER_CLASS, "entryAdScenarioWithPlacementID:scene:", placementId, scenario);
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ATJSSDK.ts", ['cc', './ATAndroidJS.ts', './ATiOSJS.ts'], function (exports) {
  'use strict';

  var cclegacy, _decorator, ATAndroidJS, ATiOSJS;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      ATAndroidJS = module.ATAndroidJS;
    }, function (module) {
      ATiOSJS = module.ATiOSJS;
    }],
    execute: function () {
      cclegacy._RF.push({}, "7af9cgdhvBGc6TIPShGymic", "ATJSSDK", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var isDebugLog = false;

      var initPlatformBridge = function initPlatformBridge() {
        if (cc.sys.os === cc.sys.OS.IOS) {
          return ATiOSJS;
        } else if (cc.sys.os === cc.sys.OS.ANDROID) {
          return ATAndroidJS;
        }
      };

      var platformBridge = initPlatformBridge();
      var ATJSSDK = exports('ATJSSDK', {
        kATUserLocationUnknown: 0,
        kATUserLocationInEU: 1,
        kATUserLocationOutOfEU: 2,
        PERSONALIZED: 0,
        NONPERSONALIZED: 1,
        UNKNOWN: 2,
        //for android and ios
        OS_VERSION_NAME: "os_vn",
        OS_VERSION_CODE: "os_vc",
        APP_PACKAGE_NAME: "package_name",
        APP_VERSION_NAME: "app_vn",
        APP_VERSION_CODE: "app_vc",
        BRAND: "brand",
        MODEL: "model",
        DEVICE_SCREEN_SIZE: "screen",
        MNC: "mnc",
        MCC: "mcc",
        LANGUAGE: "language",
        TIMEZONE: "timezone",
        USER_AGENT: "ua",
        ORIENTATION: "orient",
        NETWORK_TYPE: "network_type",
        //for android
        INSTALLER: "it_src",
        ANDROID_ID: "android_id",
        GAID: "gaid",
        MAC: "mac",
        IMEI: "imei",
        OAID: "oaid",
        //for ios
        IDFA: "idfa",
        IDFV: "idfv",
        ATSDKListener: {
          userLocationCallback: null,
          getUserLocationCallback: function getUserLocationCallback(userLocation) {
            if (undefined != this.userLocationCallback && this.userLocationCallback != null) {
              this.userLocationCallback(userLocation);
            }
          }
        },
        initSDK: function initSDK(appId, appKey) {
          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.initSDK(appId, appKey);
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        initCustomMap: function initCustomMap(customMap) {
          if (undefined != platformBridge && platformBridge != null) {
            if (undefined != customMap && customMap != null) {
              platformBridge.initCustomMap(JSON.stringify(customMap));
            }
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        setPlacementCustomMap: function setPlacementCustomMap(placmentId, customMap) {
          if (undefined != platformBridge && platformBridge != null) {
            if (undefined != customMap && customMap != null) {
              platformBridge.setPlacementCustomMap(placmentId, JSON.stringify(customMap));
            }
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        setGDPRLevel: function setGDPRLevel(level) {
          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.setGDPRLevel(level);
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        getGDPRLevel: function getGDPRLevel() {
          if (undefined != platformBridge && platformBridge != null) {
            return platformBridge.getGDPRLevel();
          } else {
            cc.log("You must run on Android or iOS.");
          }

          return this.UNKNOWN;
        },
        getUserLocation: function getUserLocation(userLocationCallback) {
          this.ATSDKListener.userLocationCallback = userLocationCallback;

          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.getUserLocation(GetUserLocationJsCallback);
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        showGDPRAuth: function showGDPRAuth() {
          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.showGDPRAuth();
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        setLogDebug: function setLogDebug(debug) {
          isDebugLog = debug;

          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.setLogDebug(debug);
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        printLog: function printLog(msg) {
          if (undefined != msg && null != msg && isDebugLog && platformBridge != null) {
            if (undefined != platformBridge && platformBridge != null) {
              platformBridge.printJsLog(msg);
            } else {
              cc.log("You must run on Android or iOS.");
            }
          }
        },
        printLogWithParams: function printLogWithParams(tag, methodName, placementId, callbackInfo, errorInfo) {
          this.printLog(tag + "::" + methodName + "()" + "\nplacementId=" + placementId + "\ncallbackInfo=" + callbackInfo + "\nerrorInfo=" + errorInfo);
        },
        deniedUploadDeviceInfo: function deniedUploadDeviceInfo(deniedInfo) {
          if (undefined != platformBridge && platformBridge != null) {
            if (deniedInfo != null) {
              var length = deniedInfo.length;
              var deniedInfoString = "";

              for (var i = 0; i < length; i++) {
                var info = deniedInfo[i];

                if (i == 0) {
                  deniedInfoString = info;
                } else {
                  deniedInfoString = deniedInfoString + "," + info;
                }
              }

              cc.log("test__" + deniedInfoString);
              platformBridge.deniedUploadDeviceInfo(deniedInfoString);
            }
          } else {
            cc.log("You must run on Android or iOS.");
          }
        }
      });
      var GetUserLocationJsCallback = " ATJSSDK.ATSDKListener.getUserLocationCallback";
      window["ATJSSDK"] = ATJSSDK;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ATNativeTSSDK.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ATiOSNativeTS.ts', './ATAndroidNativeTS.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, Component, ATiOSNativeTS, ATAndroidNativeTS;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
    }, function (module) {
      ATiOSNativeTS = module.ATiOSNativeTS;
    }, function (module) {
      ATAndroidNativeTS = module.ATAndroidNativeTS;
    }],
    execute: function () {
      cclegacy._RF.push({}, "510ccUDJ51LBpXHOm7e/3/a", "ATNativeTSSDK", undefined);

      var initPlatformBridge = function initPlatformBridge() {
        if (cc.sys.os === cc.sys.OS.IOS) {
          return ATiOSNativeTS;
        } else if (cc.sys.os === cc.sys.OS.ANDROID) {
          return ATAndroidNativeTS;
        }
      };

      var platformBridge = initPlatformBridge();
      var ATNativeTSSDK = exports('ATNativeTSSDK', {
        ATNativeListener: {
          developerCallback: null,
          onNativeAdLoaded: function onNativeAdLoaded(placementId) {
            if (this.developerCallback != null && this.developerCallback.onNativeAdLoaded != null && undefined != this.developerCallback.onNativeAdLoaded) {
              this.developerCallback.onNativeAdLoaded(placementId);
            }
          },
          onNativeAdLoadFail: function onNativeAdLoadFail(placementId, errorInfo) {
            if (this.developerCallback != null && this.developerCallback.onNativeAdLoadFail != null && undefined != this.developerCallback.onNativeAdLoadFail) {
              this.developerCallback.onNativeAdLoadFail(placementId, errorInfo);
            }
          },
          onNativeAdShow: function onNativeAdShow(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onNativeAdShow != null && undefined != this.developerCallback.onNativeAdShow) {
              this.developerCallback.onNativeAdShow(placementId, callbackInfo);
            }
          },
          onNativeAdClick: function onNativeAdClick(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onNativeAdClick != null && undefined != this.developerCallback.onNativeAdClick) {
              this.developerCallback.onNativeAdClick(placementId, callbackInfo);
            }
          },
          onNativeAdVideoStart: function onNativeAdVideoStart(placementId) {
            if (this.developerCallback != null && this.developerCallback.onNativeAdVideoStart != null && undefined != this.developerCallback.onNativeAdVideoStart) {
              this.developerCallback.onNativeAdVideoStart(placementId);
            }
          },
          onNativeAdVideoEnd: function onNativeAdVideoEnd(placementId) {
            if (this.developerCallback != null && this.developerCallback.onNativeAdVideoEnd != null && undefined != this.developerCallback.onNativeAdVideoEnd) {
              this.developerCallback.onNativeAdVideoEnd(placementId);
            }
          },
          onNativeAdCloseButtonTapped: function onNativeAdCloseButtonTapped(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onNativeAdCloseButtonTapped != null && undefined != this.developerCallback.onNativeAdCloseButtonTapped) {
              this.developerCallback.onNativeAdCloseButtonTapped(placementId, callbackInfo);
            }
          },
          //added v5.8.10
          onAdSourceBiddingAttempt: function onAdSourceBiddingAttempt(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onAdSourceBiddingAttempt != null && undefined != this.developerCallback.onAdSourceBiddingAttempt) {
              this.developerCallback.onAdSourceBiddingAttempt(placementId, callbackInfo);
            }
          },
          onAdSourceBiddingFilled: function onAdSourceBiddingFilled(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onAdSourceBiddingFilled != null && undefined != this.developerCallback.onAdSourceBiddingFilled) {
              this.developerCallback.onAdSourceBiddingFilled(placementId, callbackInfo);
            }
          },
          onAdSourceBiddingFail: function onAdSourceBiddingFail(placementId, errorInfo, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onAdSourceBiddingFail != null && undefined != this.developerCallback.onAdSourceBiddingFail) {
              this.developerCallback.onAdSourceBiddingFail(placementId, errorInfo, callbackInfo);
            }
          },
          onAdSourceAttemp: function onAdSourceAttemp(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onAdSourceAttemp != null && undefined != this.developerCallback.onAdSourceAttemp) {
              this.developerCallback.onAdSourceAttemp(placementId, callbackInfo);
            }
          },
          onAdSourceLoadFilled: function onAdSourceLoadFilled(placementId, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onAdSourceLoadFilled != null && undefined != this.developerCallback.onAdSourceLoadFilled) {
              this.developerCallback.onAdSourceLoadFilled(placementId, callbackInfo);
            }
          },
          onAdSourceLoadFail: function onAdSourceLoadFail(placementId, errorInfo, callbackInfo) {
            if (this.developerCallback != null && this.developerCallback.onAdSourceLoadFail != null && undefined != this.developerCallback.onAdSourceLoadFail) {
              this.developerCallback.onAdSourceLoadFail(placementId, errorInfo, callbackInfo);
            }
          }
        },
        loadNative: function loadNative(placementId, settings) {
          if (settings === void 0) {
            settings = {};
          }

          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.loadNative(placementId, JSON.stringify(settings));
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        setAdListener: function setAdListener(listener) {
          var eventJSON = {};
          eventJSON[LoadedCallbackKey] = "ATNativeTSSDK.ATNativeListener.onNativeAdLoaded", eventJSON[LoadFailCallbackKey] = "ATNativeTSSDK.ATNativeListener.onNativeAdLoadFail", eventJSON[CloseCallbackKey] = "ATNativeTSSDK.ATNativeListener.onNativeAdCloseButtonTapped", eventJSON[ClickCallbackKey] = "ATNativeTSSDK.ATNativeListener.onNativeAdClick", eventJSON[ShowCallbackKey] = "ATNativeTSSDK.ATNativeListener.onNativeAdShow", eventJSON[VideoStartKey] = "ATNativeTSSDK.ATNativeListener.onNativeAdVideoStart", eventJSON[VideoEndKey] = "ATNativeTSSDK.ATNativeListener.onNativeAdVideoEnd", //added v5.8.10
          eventJSON[BiddingAttempt] = "ATNativeTSSDK.ATNativeListener.onAdSourceBiddingAttempt", eventJSON[BiddingFilled] = "ATNativeTSSDK.ATNativeListener.onAdSourceBiddingFilled", eventJSON[BiddingFail] = "ATNativeTSSDK.ATNativeListener.onAdSourceBiddingFail", eventJSON[Attemp] = "ATNativeTSSDK.ATNativeListener.onAdSourceAttemp", eventJSON[LoadFilled] = "ATNativeTSSDK.ATNativeListener.onAdSourceLoadFilled", eventJSON[LoadFail] = "ATNativeTSSDK.ATNativeListener.onAdSourceLoadFail";

          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.setAdListener(JSON.stringify(eventJSON));
          } else {
            cc.log("You must run on Android or iOS.");
          }

          this.ATNativeListener.developerCallback = listener;
        },
        hasAdReady: function hasAdReady(placementId) {
          if (undefined != platformBridge && platformBridge != null) {
            return platformBridge.hasAdReady(placementId);
          } else {
            cc.log("You must run on Android or iOS.");
          }

          return false;
        },
        checkAdStatus: function checkAdStatus(placementId) {
          if (undefined != platformBridge && platformBridge != null) {
            return platformBridge.checkAdStatus(placementId);
          } else {
            cc.log("You must run on Android or iOS.");
          }

          return "";
        },
        showAd: function showAd(placementId, adViewProperty) {
          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.showAd(placementId, JSON.stringify(adViewProperty.getAdViewProperty()));
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        showAdInScenario: function showAdInScenario(placementId, adViewProperty, scenario) {
          if (scenario === void 0) {
            scenario = "";
          }

          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.showAdInScenario(placementId, JSON.stringify(adViewProperty.getAdViewProperty()), scenario);
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        entryAdScenario: function entryAdScenario(placementId, scenario) {
          if (scenario === void 0) {
            scenario = "";
          }

          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.entryAdScenario(placementId, scenario);
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        removeAd: function removeAd(placementId) {
          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.removeAd(placementId);
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        createLoadAdSize: function createLoadAdSize(width, height) {
          var loadAdSize = {};
          loadAdSize["width"] = width;
          loadAdSize["height"] = height;
          return loadAdSize;
        }
      });
      var AdViewProperty = exports('AdViewProperty', /*#__PURE__*/function (_Component) {
        _inheritsLoose(AdViewProperty, _Component);

        function AdViewProperty() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.parent = null;
          _this.appIcon = null;
          _this.mainImage = null;
          _this.title = null;
          _this.desc = null;
          _this.adLogo = null;
          _this.cta = null;
          _this.rating = null;
          _this.dislike = null;
          return _this;
        }

        var _proto = AdViewProperty.prototype;

        _proto.createItemViewProperty = function createItemViewProperty(x, y, width, height, backgroundColor, textColor, textSize, isCustomClick) {
          if (isCustomClick === void 0) {
            isCustomClick = false;
          }

          var itemProperty = {};
          itemProperty["x"] = x;
          itemProperty["y"] = y;
          itemProperty["width"] = width;
          itemProperty["height"] = height;
          itemProperty["backgroundColor"] = backgroundColor;
          itemProperty["textColor"] = textColor;
          itemProperty["textSize"] = textSize;
          itemProperty["isCustomClick"] = isCustomClick;
          return itemProperty;
        };

        _proto.getAdViewProperty = function getAdViewProperty() {
          var nativeViewProperty = {};

          if (this.parent != null) {
            nativeViewProperty["parent"] = this.parent;
          }

          if (this.appIcon != null) {
            nativeViewProperty["icon"] = this.appIcon;
          }

          if (this.mainImage != null) {
            nativeViewProperty["mainImage"] = this.mainImage;
          }

          if (this.title != null) {
            nativeViewProperty["title"] = this.title;
          }

          if (this.desc != null) {
            nativeViewProperty["desc"] = this.desc;
          }

          if (this.adLogo != null) {
            nativeViewProperty["adLogo"] = this.adLogo;
          }

          if (this.cta != null) {
            nativeViewProperty["cta"] = this.cta;
          }

          if (this.rating != null) {
            nativeViewProperty["rating"] = this.rating;
          }

          if (this.dislike != null) {
            nativeViewProperty["dislike"] = this.dislike;
          }

          return nativeViewProperty;
        };

        return AdViewProperty;
      }(Component));
      var LoadedCallbackKey = "NativeLoaded";
      var LoadFailCallbackKey = "NativeLoadFail";
      var CloseCallbackKey = "NativeCloseButtonTapped";
      var ClickCallbackKey = "NativeClick";
      var ShowCallbackKey = "NativeShow";
      var VideoStartKey = "NativeVideoStart";
      var VideoEndKey = "NativeVideoEnd";
      var BiddingAttempt = "NativeBiddingAttempt";
      var BiddingFilled = "NativeBiddingFilled";
      var BiddingFail = "NativeBiddingFail";
      var Attemp = "NativeAttemp";
      var LoadFilled = "NativeLoadFilled";
      var LoadFail = "NativeLoadFail";
      window["ATNativeTSSDK"] = ATNativeTSSDK;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ATRewardedAutoVideoTSSDK.ts", ['cc', './ATAndroidRewardedVideoAutoTS.ts', './ATiOSRewardedAutoVideoTS.ts', './ATJSSDK.ts'], function (exports) {
  'use strict';

  var cclegacy, ATAndroidRewardedVideoAutoAdTS, ATiOSRewardedVideoAutoAdJS, ATJSSDK;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      ATAndroidRewardedVideoAutoAdTS = module.ATAndroidRewardedVideoAutoAdTS;
    }, function (module) {
      ATiOSRewardedVideoAutoAdJS = module.ATiOSRewardedVideoAutoAdJS;
    }, function (module) {
      ATJSSDK = module.ATJSSDK;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ab709XrailM5YArh0Hl+Ggq", "ATRewardedAutoVideoTSSDK", undefined);

      var initPlatformBridge = function initPlatformBridge() {
        if (cc.sys.os === cc.sys.OS.IOS) {
          return ATiOSRewardedVideoAutoAdJS;
        } else if (cc.sys.os === cc.sys.OS.ANDROID) {
          return ATAndroidRewardedVideoAutoAdTS;
        }
      };

      var platformBridge = initPlatformBridge();
      var ATRewardedVideoAutoAdSDK = exports('ATRewardedVideoAutoAdSDK', {
        userIdKey: "userID",
        userDataKey: "media_ext",
        ATRewardedVideoListener: {
          developerCallback: null,
          onRewardedVideoAdLoaded: function onRewardedVideoAdLoaded(placementId) {
            ATJSSDK.printLog("ATRewardedVideoAutoAdSDK.ATRewardedVideoListener.onRewardedVideoAdLoaded(" + placementId + ")");

            if (this.developerCallback != null && this.developerCallback.onRewardedVideoAdLoaded != null && undefined != this.developerCallback.onRewardedVideoAdLoaded) {
              this.developerCallback.onRewardedVideoAdLoaded(placementId);
            }
          },
          onRewardedVideoAdFailed: function onRewardedVideoAdFailed(placementId, errorInfo) {
            ATJSSDK.printLog("ATRewardedVideoAutoAdSDK.ATRewardedVideoListener.onRewardedVideoAdFailed(" + placementId + ", " + errorInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onRewardedVideoAdFailed != null && undefined != this.developerCallback.onRewardedVideoAdFailed) {
              this.developerCallback.onRewardedVideoAdFailed(placementId, errorInfo);
            }
          },
          onRewardedVideoAdPlayStart: function onRewardedVideoAdPlayStart(placementId, callbackInfo) {
            ATJSSDK.printLog("ATRewardedVideoAutoAdSDK.ATRewardedVideoListener.onRewardedVideoAdPlayStart(" + placementId + ", " + callbackInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onRewardedVideoAdPlayStart != null && undefined != this.developerCallback.onRewardedVideoAdPlayStart) {
              this.developerCallback.onRewardedVideoAdPlayStart(placementId, callbackInfo);
            }
          },
          onRewardedVideoAdPlayEnd: function onRewardedVideoAdPlayEnd(placementId, callbackInfo) {
            ATJSSDK.printLog("ATRewardedVideoAutoAdSDK.ATRewardedVideoListener.onRewardedVideoAdPlayEnd(" + placementId + ", " + callbackInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onRewardedVideoAdPlayEnd != null && undefined != this.developerCallback.onRewardedVideoAdPlayEnd) {
              this.developerCallback.onRewardedVideoAdPlayEnd(placementId, callbackInfo);
            }
          },
          onRewardedVideoAdPlayFailed: function onRewardedVideoAdPlayFailed(placementId, errorInfo, callbackInfo) {
            ATJSSDK.printLog("ATRewardedVideoAutoAdSDK.ATRewardedVideoListener.onRewardedVideoAdPlayFailed(" + placementId + ", " + errorInfo + ", " + callbackInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onRewardedVideoAdPlayFailed != null && undefined != this.developerCallback.onRewardedVideoAdPlayFailed) {
              this.developerCallback.onRewardedVideoAdPlayFailed(placementId, errorInfo, callbackInfo);
            }
          },
          onRewardedVideoAdClosed: function onRewardedVideoAdClosed(placementId, callbackInfo) {
            ATJSSDK.printLog("ATRewardedVideoAutoAdSDK.ATRewardedVideoListener.onRewardedVideoAdClosed(" + placementId + ", " + callbackInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onRewardedVideoAdClosed != null && undefined != this.developerCallback.onRewardedVideoAdClosed) {
              this.developerCallback.onRewardedVideoAdClosed(placementId, callbackInfo);
            }
          },
          onRewardedVideoAdPlayClicked: function onRewardedVideoAdPlayClicked(placementId, callbackInfo) {
            ATJSSDK.printLog("ATRewardedVideoAutoAdSDK.ATRewardedVideoListener.onRewardedVideoAdPlayClicked(" + placementId + ", " + callbackInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onRewardedVideoAdPlayClicked != null && undefined != this.developerCallback.onRewardedVideoAdPlayClicked) {
              this.developerCallback.onRewardedVideoAdPlayClicked(placementId, callbackInfo);
            }
          },
          onReward: function onReward(placementId, callbackInfo) {
            ATJSSDK.printLog("ATRewardedVideoAutoAdSDK.ATRewardedVideoListener.onReward(" + placementId + ", " + callbackInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onReward != null && undefined != this.developerCallback.onReward) {
              this.developerCallback.onReward(placementId, callbackInfo);
            }
          },
          onRewardedVideoAdAgainPlayStart: function onRewardedVideoAdAgainPlayStart(placementId, callbackInfo) {
            ATJSSDK.printLog("ATRewardedVideoAutoAdSDK.ATRewardedVideoListener.onRewardedVideoAdAgainPlayStart(" + placementId + ", " + callbackInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onRewardedVideoAdAgainPlayStart != null && undefined != this.developerCallback.onRewardedVideoAdAgainPlayStart) {
              this.developerCallback.onRewardedVideoAdAgainPlayStart(placementId, callbackInfo);
            }
          },
          onRewardedVideoAdAgainPlayEnd: function onRewardedVideoAdAgainPlayEnd(placementId, callbackInfo) {
            ATJSSDK.printLog("ATRewardedVideoAutoAdSDK.ATRewardedVideoListener.onRewardedVideoAdAgainPlayEnd(" + placementId + ", " + callbackInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onRewardedVideoAdAgainPlayEnd != null && undefined != this.developerCallback.onRewardedVideoAdAgainPlayEnd) {
              this.developerCallback.onRewardedVideoAdAgainPlayEnd(placementId, callbackInfo);
            }
          },
          onRewardedVideoAdAgainPlayFailed: function onRewardedVideoAdAgainPlayFailed(placementId, errorInfo, callbackInfo) {
            ATJSSDK.printLog("ATRewardedVideoAutoAdSDK.ATRewardedVideoListener.onRewardedVideoAdAgainPlayFailed(" + placementId + ", " + errorInfo + ", " + callbackInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onRewardedVideoAdAgainPlayFailed != null && undefined != this.developerCallback.onRewardedVideoAdAgainPlayFailed) {
              this.developerCallback.onRewardedVideoAdAgainPlayFailed(placementId, errorInfo, callbackInfo);
            }
          },
          onRewardedVideoAdAgainPlayClicked: function onRewardedVideoAdAgainPlayClicked(placementId, callbackInfo) {
            ATJSSDK.printLog("ATRewardedVideoAutoAdSDK.ATRewardedVideoListener.onRewardedVideoAdAgainPlayClicked(" + placementId + ", " + callbackInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onRewardedVideoAdAgainPlayClicked != null && undefined != this.developerCallback.onRewardedVideoAdAgainPlayClicked) {
              this.developerCallback.onRewardedVideoAdAgainPlayClicked(placementId, callbackInfo);
            }
          },
          onAgainReward: function onAgainReward(placementId, callbackInfo) {
            ATJSSDK.printLog("ATRewardedVideoAutoAdSDK.ATRewardedVideoListener.onAgainReward(" + placementId + ", " + callbackInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onAgainReward != null && undefined != this.developerCallback.onAgainReward) {
              this.developerCallback.onAgainReward(placementId, callbackInfo);
            }
          }
        },
        setAdExtraData: function setAdExtraData(placementId, settings) {
          if (settings === void 0) {
            settings = {};
          }

          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.setAdExtraData(placementId, JSON.stringify(settings));
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        addPlacementIds: function addPlacementIds(placementIds) {
          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.addPlacementIds(JSON.stringify(placementIds));
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        removePlacementId: function removePlacementId(placementIds) {
          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.removePlacementId(JSON.stringify(placementIds));
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        setAdListener: function setAdListener(listener) {
          var eventJSON = {};
          eventJSON[LoadedCallbackKey] = "ATRewardedVideoAutoAdSDK.ATRewardedVideoListener.onRewardedVideoAdLoaded", eventJSON[LoadFailCallbackKey] = "ATRewardedVideoAutoAdSDK.ATRewardedVideoListener.onRewardedVideoAdFailed", eventJSON[PlayStartCallbackKey] = "ATRewardedVideoAutoAdSDK.ATRewardedVideoListener.onRewardedVideoAdPlayStart", eventJSON[PlayEndCallbackKey] = "ATRewardedVideoAutoAdSDK.ATRewardedVideoListener.onRewardedVideoAdPlayEnd", eventJSON[PlayFailCallbackKey] = "ATRewardedVideoAutoAdSDK.ATRewardedVideoListener.onRewardedVideoAdPlayFailed", eventJSON[CloseCallbackKey] = "ATRewardedVideoAutoAdSDK.ATRewardedVideoListener.onRewardedVideoAdClosed", eventJSON[ClickCallbackKey] = "ATRewardedVideoAutoAdSDK.ATRewardedVideoListener.onRewardedVideoAdPlayClicked", eventJSON[RewardCallbackKey] = "ATRewardedVideoAutoAdSDK.ATRewardedVideoListener.onReward", //playAgain listener
          eventJSON[AgainPlayStartCallbackKey] = "ATRewardedVideoAutoAdSDK.ATRewardedVideoListener.onRewardedVideoAdAgainPlayStart", eventJSON[AgainPlayEndCallbackKey] = "ATRewardedVideoAutoAdSDK.ATRewardedVideoListener.onRewardedVideoAdAgainPlayEnd", eventJSON[AgainPlayFailCallbackKey] = "ATRewardedVideoAutoAdSDK.ATRewardedVideoListener.onRewardedVideoAdAgainPlayFailed", eventJSON[AgainClickCallbackKey] = "ATRewardedVideoAutoAdSDK.ATRewardedVideoListener.onRewardedVideoAdAgainPlayClicked", eventJSON[AgainRewardCallbackKey] = "ATRewardedVideoAutoAdSDK.ATRewardedVideoListener.onAgainReward";

          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.setAdListener(JSON.stringify(eventJSON));
            platformBridge.set;
          } else {
            cc.log("You must run on Android or iOS.");
          }

          this.ATRewardedVideoListener.developerCallback = listener;
        },
        hasAdReady: function hasAdReady(placementId) {
          if (undefined != platformBridge && platformBridge != null) {
            return platformBridge.hasAdReady(placementId);
          } else {
            cc.log("You must run on Android or iOS.");
          }

          return false;
        },
        checkAdStatus: function checkAdStatus(placementId) {
          if (undefined != platformBridge && platformBridge != null) {
            return platformBridge.checkAdStatus(placementId);
          } else {
            cc.log("You must run on Android or iOS.");
          }

          return "";
        },
        showAd: function showAd(placementId) {
          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.showAd(placementId);
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        showAdInScenario: function showAdInScenario(placementId, scenario) {
          if (scenario === void 0) {
            scenario = "";
          }

          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.showAdInScenario(placementId, scenario);
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        entryAdScenario: function entryAdScenario(placementId, scenario) {
          if (scenario === void 0) {
            scenario = "";
          }

          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.entryAdScenario(placementId, scenario);
          } else {
            cc.log("You must run on Android or iOS.");
          }
        }
      });
      var LoadedCallbackKey = "RewardedVideoAutoAdLoaded";
      var LoadFailCallbackKey = "RewardedVideoAutoAdLoadFail";
      var PlayStartCallbackKey = "RewardedVideoAutoAdPlayStart";
      var PlayEndCallbackKey = "RewardedVideoAutoAdPlayEnd";
      var PlayFailCallbackKey = "RewardedVideoAutoAdPlayFail";
      var CloseCallbackKey = "RewardedVideoAutoAdClose";
      var ClickCallbackKey = "RewardedVideoAutoAdClick";
      var RewardCallbackKey = "RewardedVideoAutoAdReward";
      var AgainPlayStartCallbackKey = "RewardedVideoAutoAdAgainPlayStart";
      var AgainPlayEndCallbackKey = "RewardedVideoAutoAdAgainPlayEnd";
      var AgainPlayFailCallbackKey = "RewardedVideoAutoAdAgainPlayFail";
      var AgainClickCallbackKey = "RewardedVideoAutoAdAgainClick";
      var AgainRewardCallbackKey = "RewardedVideoAutoAdAgainReward";
      window["ATRewardedVideoAutoAdSDK"] = ATRewardedVideoAutoAdSDK;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ATRewardedVideoTSSDK.ts", ['cc', './ATAndroidRewardedVideoTS.ts', './ATiOSRewardedVideoTS.ts', './ATJSSDK.ts'], function (exports) {
  'use strict';

  var cclegacy, ATAndroidRewardedVideoJS, ATiOSRewardedVideoTS, ATJSSDK;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      ATAndroidRewardedVideoJS = module.ATAndroidRewardedVideoJS;
    }, function (module) {
      ATiOSRewardedVideoTS = module.ATiOSRewardedVideoTS;
    }, function (module) {
      ATJSSDK = module.ATJSSDK;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9a2c3CFb/hM7bjaKAI54UW1", "ATRewardedVideoTSSDK", undefined);

      var initPlatformBridge = function initPlatformBridge() {
        if (cc.sys.os === cc.sys.OS.IOS) {
          return ATiOSRewardedVideoTS;
        } else if (cc.sys.os === cc.sys.OS.ANDROID) {
          return ATAndroidRewardedVideoJS;
        }
      };

      var platformBridge = initPlatformBridge();
      var ATRewardedVideoSDK = exports('ATRewardedVideoSDK', {
        userIdKey: "userID",
        userDataKey: "media_ext",
        ATRewardedVideoListener: {
          developerCallback: null,
          onRewardedVideoAdLoaded: function onRewardedVideoAdLoaded(placementId) {
            ATJSSDK.printLog("ATRewardedVideoSDK.ATRewardedVideoListener.onRewardedVideoAdLoaded(" + placementId + ")");

            if (this.developerCallback != null && this.developerCallback.onRewardedVideoAdLoaded != null && undefined != this.developerCallback.onRewardedVideoAdLoaded) {
              this.developerCallback.onRewardedVideoAdLoaded(placementId);
            }
          },
          onRewardedVideoAdFailed: function onRewardedVideoAdFailed(placementId, errorInfo) {
            ATJSSDK.printLog("ATRewardedVideoSDK.ATRewardedVideoListener.onRewardedVideoAdFailed(" + placementId + ", " + errorInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onRewardedVideoAdFailed != null && undefined != this.developerCallback.onRewardedVideoAdFailed) {
              this.developerCallback.onRewardedVideoAdFailed(placementId, errorInfo);
            }
          },
          onRewardedVideoAdPlayStart: function onRewardedVideoAdPlayStart(placementId, callbackInfo) {
            ATJSSDK.printLog("ATRewardedVideoSDK.ATRewardedVideoListener.onRewardedVideoAdPlayStart(" + placementId + ", " + callbackInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onRewardedVideoAdPlayStart != null && undefined != this.developerCallback.onRewardedVideoAdPlayStart) {
              this.developerCallback.onRewardedVideoAdPlayStart(placementId, callbackInfo);
            }
          },
          onRewardedVideoAdPlayEnd: function onRewardedVideoAdPlayEnd(placementId, callbackInfo) {
            ATJSSDK.printLog("ATRewardedVideoSDK.ATRewardedVideoListener.onRewardedVideoAdPlayEnd(" + placementId + ", " + callbackInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onRewardedVideoAdPlayEnd != null && undefined != this.developerCallback.onRewardedVideoAdPlayEnd) {
              this.developerCallback.onRewardedVideoAdPlayEnd(placementId, callbackInfo);
            }
          },
          onRewardedVideoAdPlayFailed: function onRewardedVideoAdPlayFailed(placementId, errorInfo, callbackInfo) {
            ATJSSDK.printLog("ATRewardedVideoSDK.ATRewardedVideoListener.onRewardedVideoAdPlayFailed(" + placementId + ", " + errorInfo + ", " + callbackInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onRewardedVideoAdPlayFailed != null && undefined != this.developerCallback.onRewardedVideoAdPlayFailed) {
              this.developerCallback.onRewardedVideoAdPlayFailed(placementId, errorInfo, callbackInfo);
            }
          },
          onRewardedVideoAdClosed: function onRewardedVideoAdClosed(placementId, callbackInfo) {
            ATJSSDK.printLog("ATRewardedVideoSDK.ATRewardedVideoListener.onRewardedVideoAdClosed(" + placementId + ", " + callbackInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onRewardedVideoAdClosed != null && undefined != this.developerCallback.onRewardedVideoAdClosed) {
              this.developerCallback.onRewardedVideoAdClosed(placementId, callbackInfo);
            }
          },
          onRewardedVideoAdPlayClicked: function onRewardedVideoAdPlayClicked(placementId, callbackInfo) {
            ATJSSDK.printLog("ATRewardedVideoSDK.ATRewardedVideoListener.onRewardedVideoAdPlayClicked(" + placementId + ", " + callbackInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onRewardedVideoAdPlayClicked != null && undefined != this.developerCallback.onRewardedVideoAdPlayClicked) {
              this.developerCallback.onRewardedVideoAdPlayClicked(placementId, callbackInfo);
            }
          },
          onReward: function onReward(placementId, callbackInfo) {
            ATJSSDK.printLog("ATRewardedVideoSDK.ATRewardedVideoListener.onReward(" + placementId + ", " + callbackInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onReward != null && undefined != this.developerCallback.onReward) {
              this.developerCallback.onReward(placementId, callbackInfo);
            }
          },
          //added v5.8.10
          onAdSourceBiddingAttempt: function onAdSourceBiddingAttempt(placementId, callbackInfo) {
            ATJSSDK.printLog("ATRewardedVideoSDK.ATRewardedVideoListener.onAdSourceBiddingAttempt(" + placementId + ", " + callbackInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onAdSourceBiddingAttempt != null && undefined != this.developerCallback.onAdSourceBiddingAttempt) {
              this.developerCallback.onAdSourceBiddingAttempt(placementId, callbackInfo);
            }
          },
          onAdSourceBiddingFilled: function onAdSourceBiddingFilled(placementId, callbackInfo) {
            ATJSSDK.printLog("ATRewardedVideoSDK.ATRewardedVideoListener.onAdSourceBiddingFilled(" + placementId + ", " + callbackInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onAdSourceBiddingFilled != null && undefined != this.developerCallback.onAdSourceBiddingFilled) {
              this.developerCallback.onAdSourceBiddingFilled(placementId, callbackInfo);
            }
          },
          onAdSourceBiddingFail: function onAdSourceBiddingFail(placementId, errorInfo, callbackInfo) {
            ATJSSDK.printLog("ATRewardedVideoSDK.ATRewardedVideoListener.onAdSourceBiddingFail(" + placementId + ", " + errorInfo + ", " + callbackInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onAdSourceBiddingFail != null && undefined != this.developerCallback.onAdSourceBiddingFail) {
              this.developerCallback.onAdSourceBiddingFail(placementId, errorInfo, callbackInfo);
            }
          },
          onAdSourceAttemp: function onAdSourceAttemp(placementId, callbackInfo) {
            ATJSSDK.printLog("ATRewardedVideoSDK.ATRewardedVideoListener.onAdSourceAttemp(" + placementId + ", " + callbackInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onAdSourceAttemp != null && undefined != this.developerCallback.onAdSourceAttemp) {
              this.developerCallback.onAdSourceAttemp(placementId, callbackInfo);
            }
          },
          onAdSourceLoadFilled: function onAdSourceLoadFilled(placementId, callbackInfo) {
            ATJSSDK.printLog("ATRewardedVideoSDK.ATRewardedVideoListener.onAdSourceLoadFilled(" + placementId + ", " + callbackInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onAdSourceLoadFilled != null && undefined != this.developerCallback.onAdSourceLoadFilled) {
              this.developerCallback.onAdSourceLoadFilled(placementId, callbackInfo);
            }
          },
          onAdSourceLoadFail: function onAdSourceLoadFail(placementId, errorInfo, callbackInfo) {
            ATJSSDK.printLog("ATRewardedVideoSDK.ATRewardedVideoListener.onAdSourceLoadFail(" + placementId + ", " + errorInfo + ", " + callbackInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onAdSourceLoadFail != null && undefined != this.developerCallback.onAdSourceLoadFail) {
              this.developerCallback.onAdSourceLoadFail(placementId, errorInfo, callbackInfo);
            }
          },
          onRewardedVideoAdAgainPlayStart: function onRewardedVideoAdAgainPlayStart(placementId, callbackInfo) {
            ATJSSDK.printLog("ATRewardedVideoSDK.ATRewardedVideoListener.onRewardedVideoAdAgainPlayStart(" + placementId + ", " + callbackInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onRewardedVideoAdAgainPlayStart != null && undefined != this.developerCallback.onRewardedVideoAdAgainPlayStart) {
              this.developerCallback.onRewardedVideoAdAgainPlayStart(placementId, callbackInfo);
            }
          },
          onRewardedVideoAdAgainPlayEnd: function onRewardedVideoAdAgainPlayEnd(placementId, callbackInfo) {
            ATJSSDK.printLog("ATRewardedVideoSDK.ATRewardedVideoListener.onRewardedVideoAdAgainPlayEnd(" + placementId + ", " + callbackInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onRewardedVideoAdAgainPlayEnd != null && undefined != this.developerCallback.onRewardedVideoAdAgainPlayEnd) {
              this.developerCallback.onRewardedVideoAdAgainPlayEnd(placementId, callbackInfo);
            }
          },
          onRewardedVideoAdAgainPlayFailed: function onRewardedVideoAdAgainPlayFailed(placementId, errorInfo, callbackInfo) {
            ATJSSDK.printLog("ATRewardedVideoSDK.ATRewardedVideoListener.onRewardedVideoAdAgainPlayFailed(" + placementId + ", " + errorInfo + ", " + callbackInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onRewardedVideoAdAgainPlayFailed != null && undefined != this.developerCallback.onRewardedVideoAdAgainPlayFailed) {
              this.developerCallback.onRewardedVideoAdAgainPlayFailed(placementId, errorInfo, callbackInfo);
            }
          },
          onRewardedVideoAdAgainPlayClicked: function onRewardedVideoAdAgainPlayClicked(placementId, callbackInfo) {
            ATJSSDK.printLog("ATRewardedVideoSDK.ATRewardedVideoListener.onRewardedVideoAdAgainPlayClicked(" + placementId + ", " + callbackInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onRewardedVideoAdAgainPlayClicked != null && undefined != this.developerCallback.onRewardedVideoAdAgainPlayClicked) {
              this.developerCallback.onRewardedVideoAdAgainPlayClicked(placementId, callbackInfo);
            }
          },
          onAgainReward: function onAgainReward(placementId, callbackInfo) {
            ATJSSDK.printLog("ATRewardedVideoSDK.ATRewardedVideoListener.onAgainReward(" + placementId + ", " + callbackInfo + ")");

            if (this.developerCallback != null && this.developerCallback.onAgainReward != null && undefined != this.developerCallback.onAgainReward) {
              this.developerCallback.onAgainReward(placementId, callbackInfo);
            }
          }
        },
        loadRewardedVideo: function loadRewardedVideo(placementId, settings) {
          if (settings === void 0) {
            settings = {};
          }

          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.loadRewardedVideo(placementId, JSON.stringify(settings));
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        setAdListener: function setAdListener(listener) {
          var eventJSON = {};
          eventJSON[LoadedCallbackKey] = "ATRewardedVideoSDK.ATRewardedVideoListener.onRewardedVideoAdLoaded", eventJSON[LoadFailCallbackKey] = "ATRewardedVideoSDK.ATRewardedVideoListener.onRewardedVideoAdFailed", eventJSON[PlayStartCallbackKey] = "ATRewardedVideoSDK.ATRewardedVideoListener.onRewardedVideoAdPlayStart", eventJSON[PlayEndCallbackKey] = "ATRewardedVideoSDK.ATRewardedVideoListener.onRewardedVideoAdPlayEnd", eventJSON[PlayFailCallbackKey] = "ATRewardedVideoSDK.ATRewardedVideoListener.onRewardedVideoAdPlayFailed", eventJSON[CloseCallbackKey] = "ATRewardedVideoSDK.ATRewardedVideoListener.onRewardedVideoAdClosed", eventJSON[ClickCallbackKey] = "ATRewardedVideoSDK.ATRewardedVideoListener.onRewardedVideoAdPlayClicked", eventJSON[RewardCallbackKey] = "ATRewardedVideoSDK.ATRewardedVideoListener.onReward", //added v5.8.10
          eventJSON[BiddingAttempt] = "ATRewardedVideoSDK.ATRewardedVideoListener.onAdSourceBiddingAttempt", eventJSON[BiddingFilled] = "ATRewardedVideoSDK.ATRewardedVideoListener.onAdSourceBiddingFilled", eventJSON[BiddingFail] = "ATRewardedVideoSDK.ATRewardedVideoListener.onAdSourceBiddingFail", eventJSON[Attemp] = "ATRewardedVideoSDK.ATRewardedVideoListener.onAdSourceAttemp", eventJSON[LoadFilled] = "ATRewardedVideoSDK.ATRewardedVideoListener.onAdSourceLoadFilled", eventJSON[LoadFail] = "ATRewardedVideoSDK.ATRewardedVideoListener.onAdSourceLoadFail", //added v5.8.10 playAgain listener
          eventJSON[AgainPlayStartCallbackKey] = "ATRewardedVideoSDK.ATRewardedVideoListener.onRewardedVideoAdAgainPlayStart", eventJSON[AgainPlayEndCallbackKey] = "ATRewardedVideoSDK.ATRewardedVideoListener.onRewardedVideoAdAgainPlayEnd", eventJSON[AgainPlayFailCallbackKey] = "ATRewardedVideoSDK.ATRewardedVideoListener.onRewardedVideoAdAgainPlayFailed", eventJSON[AgainClickCallbackKey] = "ATRewardedVideoSDK.ATRewardedVideoListener.onRewardedVideoAdAgainPlayClicked", eventJSON[AgainRewardCallbackKey] = "ATRewardedVideoSDK.ATRewardedVideoListener.onAgainReward";

          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.setAdListener(JSON.stringify(eventJSON));
          } else {
            cc.log("You must run on Android or iOS.");
          }

          this.ATRewardedVideoListener.developerCallback = listener;
        },
        hasAdReady: function hasAdReady(placementId) {
          if (undefined != platformBridge && platformBridge != null) {
            return platformBridge.hasAdReady(placementId);
          } else {
            cc.log("You must run on Android or iOS.");
          }

          return false;
        },
        checkAdStatus: function checkAdStatus(placementId) {
          if (undefined != platformBridge && platformBridge != null) {
            return platformBridge.checkAdStatus(placementId);
          } else {
            cc.log("You must run on Android or iOS.");
          }

          return "";
        },
        showAd: function showAd(placementId) {
          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.showAd(placementId);
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        showAdInScenario: function showAdInScenario(placementId, scenario) {
          if (scenario === void 0) {
            scenario = "";
          }

          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.showAdInScenario(placementId, scenario);
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        entryAdScenario: function entryAdScenario(placementId, scenario) {
          if (scenario === void 0) {
            scenario = "";
          }

          if (undefined != platformBridge && platformBridge != null) {
            platformBridge.entryAdScenario(placementId, scenario);
          } else {
            cc.log("You must run on Android or iOS.");
          }
        },
        testMethod: function testMethod() {
          cc.log("testing You must run on Android or iOS.");
        }
      });
      var LoadedCallbackKey = "RewardedVideoLoaded";
      var LoadFailCallbackKey = "RewardedVideoLoadFail";
      var PlayStartCallbackKey = "RewardedVideoPlayStart";
      var PlayEndCallbackKey = "RewardedVideoPlayEnd";
      var PlayFailCallbackKey = "RewardedVideoPlayFail";
      var CloseCallbackKey = "RewardedVideoClose";
      var ClickCallbackKey = "RewardedVideoClick";
      var RewardCallbackKey = "RewardedVideoReward";
      var BiddingAttempt = "RewardedVideoBiddingAttempt";
      var BiddingFilled = "RewardedVideoBiddingFilled";
      var BiddingFail = "RewardedVideoBiddingFail";
      var Attemp = "RewardedVideoAttemp";
      var LoadFilled = "RewardedVideoLoadFilled";
      var LoadFail = "RewardedVideoLoadFail";
      var AgainPlayStartCallbackKey = "RewardedVideoAgainPlayStart";
      var AgainPlayEndCallbackKey = "RewardedVideoAgainPlayEnd";
      var AgainPlayFailCallbackKey = "RewardedVideoAgainPlayFail";
      var AgainClickCallbackKey = "RewardedVideoAgainClick";
      var AgainRewardCallbackKey = "RewardedVideoAgainReward";
      window["ATRewardedVideoSDK"] = ATRewardedVideoSDK;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AudioAnimation.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AudioManager.ts', './SdkManager.ts', './DataManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Component, AudioManager, SdkManager, vibrateType, DataManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Component = module.Component;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      SdkManager = module.SdkManager;
      vibrateType = module.vibrateType;
    }, function (module) {
      DataManager = module.DataManager;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "c3be7rt58BCEJDLPRIBrq3k", "AudioAnimation", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AudioAnimation = exports('AudioAnimation', (_dec = ccclass('AudioAnimation'), _dec2 = property({
        type: [Node],
        visible: true,
        displayName: "特效"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AudioAnimation, _Component);

        function AudioAnimation() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.particle = void 0;

          _initializerDefineProperty(_this, "ps", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = AudioAnimation.prototype;

        _proto.onLoad = function onLoad() {
          this.ps.forEach(function (i) {
            if (i) i.active = false;
          });
        };

        _proto.playAudio = function playAudio(audioName) {
          AudioManager.instance.playSound(audioName);
        };

        _proto.VibrateShort = function VibrateShort() {
          var v = DataManager.getInstance().playerData.vibrateSet;
          SdkManager.getInstance().VibrateShort(v, vibrateType.light);
        };

        _proto.playParticle = function playParticle(partitcleName) {
          this.particle = this.getParticle(partitcleName);
          if (this.particle) this.particle.active = true;
        };

        _proto.getParticle = function getParticle(partitcleName) {
          for (var index = 0; index < this.ps.length; index++) {
            var element = this.ps[index];

            if (element.name == partitcleName) {
              return element;
            }
          }

          console.log("没有对应的特效名字：" + partitcleName);
        };

        return AudioAnimation;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "ps", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AudioManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AudioSys.ts', './Utils.ts', './Player.ts', './DataManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, AudioClip, randomRangeInt, director, Component, AudioSys, Utils, AnimalType, DataManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      AudioClip = module.AudioClip;
      randomRangeInt = module.randomRangeInt;
      director = module.director;
      Component = module.Component;
    }, function (module) {
      AudioSys = module.AudioSys;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      AnimalType = module.AnimalType;
    }, function (module) {
      DataManager = module.DataManager;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _class3;

      cclegacy._RF.push({}, "60f89ONwchHJZhC8dVDDt6K", "AudioManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AudioManager = exports('AudioManager', (_dec = ccclass('AudioManager'), _dec2 = property({
        type: [AudioClip],
        visible: true,
        displayName: "音频资源"
      }), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AudioManager, _Component);

        function AudioManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "clips", _descriptor, _assertThisInitialized(_this));

          _this.audioMap = new Map();
          _this.wxAudioManager = void 0;
          _this.animalAudios = 6;
          return _this;
        }

        var _proto = AudioManager.prototype;

        _proto.init = function init() {
          var _this2 = this;

          this.clips.forEach(function (audio) {
            _this2.audioMap.set(audio.name, audio);
          });
          AudioSys.instance.init(this.clips);
        };

        _proto.initAudioSet = function initAudioSet() {
          var userdata = DataManager.getInstance().playerData;

          if (userdata.audioSet) {
            AudioSys.instance.cancelMuteSound();
          } else {
            AudioSys.instance.muteSound();
          }

          if (userdata.musicSet) {
            AudioSys.instance.cancelMuteMusic();
          } else {
            AudioSys.instance.muteMusic();
          }
        };

        _proto.playSound = function playSound(audioName) {
          var audio = this.audioMap.get(audioName);
          if (audio) AudioSys.instance.playSound(audio);else console.log("没有对应的音频资源：" + audioName);
        };

        _proto.playMusic = function playMusic(audioName, fade) {
          if (fade === void 0) {
            fade = true;
          }

          var audio = this.audioMap.get(audioName);

          if (audio) {
            AudioSys.instance.playMusic(audio, fade);
          } else console.log("没有对应的音频资源：" + audioName);
        };

        _proto.playMusicOnBattle = function playMusicOnBattle() {
          this.playMusic("BattleBGM", false);
        };

        _proto.playMusicOnHome = function playMusicOnHome() {
          this.playMusic("HomeBGM");
        };

        _proto.playMerge = function playMerge(step) {
          step += 1;
          step = Utils.limitNumber(step, 1, 12);
          var audioName = "merge_" + step;
          this.playSound(audioName);
        };

        _proto.playfire = function playfire() {
          var i = randomRangeInt(1, 5);
          var audioName = "penshe" + i;
          this.playSound(audioName);
        };

        _proto.clickAnimal = function clickAnimal(aniamlType) {
          var aniamlName = "sheep";

          switch (aniamlType) {
            case AnimalType.sheep:
              aniamlName = "sheep";
              break;

            case AnimalType.cow:
              aniamlName = "cow";
              break;

            case AnimalType.pig:
              aniamlName = "pig";
              break;

            case AnimalType.elephant:
              aniamlName = "elephant";
              break;

            case AnimalType.zebra:
              aniamlName = "zebra";
              break;
          }

          this.playSound(aniamlName);
        };

        _proto.fenchBeHit = function fenchBeHit(fenchLv) {
          fenchLv++;
          var audioName = "hit" + Utils.limitNumber(fenchLv, 1, 10);
          this.playSound(audioName);
        };

        _createClass(AudioManager, null, [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              var rootNode = director.getScene().getChildByPath("CfgData/AudioManager");
              if (rootNode) this._instance = rootNode.getComponent(AudioManager); //  director.addPersistRootNode(rootNode);
            }

            return this._instance;
          }
        }]);

        return AudioManager;
      }(Component), _class3._instance = void 0, _class3), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "clips", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AudioSys.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, _createClass, cclegacy, _decorator, AudioSource, Node, director, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      AudioSource = module.AudioSource;
      Node = module.Node;
      director = module.director;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "c0ab3zgfFxAS4bLcyUYzzp0", "AudioSys", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;

      AudioSource.prototype.playOneShot = function (clip, volumeScale) {
        var _this = this;

        if (volumeScale === void 0) {
          volumeScale = 1;
        }

        if (!clip._nativeAsset) {
          console.error("Invalid audio clip");
          return;
        }

        var AudioPlayer = clip._nativeAsset.player.constructor; // @ts-ignore

        AudioPlayer.loadOneShotAudio(clip._nativeAsset.url, this._volume * volumeScale, {
          audioLoadMode: clip.loadMode
        }).then(function (oneShotAudio) {
          oneShotAudio.onPlay = function () {
            // 此处加 1 是因为 onPlay 的时候，当前 audio 已经在播放了，只是还没加入队列
            if (_this.lruCache.length() + 1 >= AudioPlayer.maxAudioChannel) {
              // 移除一个音频
              var audio = _this.lruCache.getTail();

              _this.lruCache.remove(audio);

              audio.stop();
            }

            _this.lruCache.put(oneShotAudio);
          };

          oneShotAudio.onEnd = function () {
            _this.lruCache.remove(oneShotAudio);
          }; // 若是微信小游戏上的 audio player，需要关注 audio player stop 回调，将 player 析构掉
          // @ts-ignore


          if (oneShotAudio._audio && oneShotAudio._audio._innerAudioContext) {
            // @ts-ignore
            oneShotAudio._audio._innerAudioContext.onStop(function () {
              // @ts-ignore
              if (oneShotAudio._audio._innerAudioContext) {
                // @ts-ignore
                oneShotAudio._audio._innerAudioContext.destroy();
              } // @ts-expect-error Type 'null' is not assignable to type 'InnerAudioContext'.


              oneShotAudio._audio._innerAudioContext = null;
            });
          }

          oneShotAudio.play();
        })["catch"](function (e) {});
      };

      var AudioSys = exports('AudioSys', (_dec = ccclass('AudioSys'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AudioSys, _Component);

        function AudioSys() {
          var _this2;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this2 = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this2._musicAs = void 0;
          _this2._soundAs = void 0;
          _this2._isSoundMute = void 0;
          _this2._isMusicMute = void 0;
          _this2.isPlayingCount = 1;
          _this2.audioSources = {};
          _this2.auSources = [];
          return _this2;
        }

        var _proto = AudioSys.prototype;

        _proto.onDestroy = function onDestroy() {
          this.myDestroy();
        };

        _proto.init = function init(clips) {
          this._musicAs = this.createAs(AudioSys.MaxMusicVolume, true);
          this._soundAs = this.createAs(AudioSys.MaxSoundVolume, false);
          this._isMusicMute = false;
          this._isSoundMute = false;
        };

        _proto.createAs = function createAs(volume, isLoop) {
          var curAs = this.node.addComponent(AudioSource);
          curAs.clip = null;
          curAs.loop = isLoop;
          curAs.playOnAwake = false;
          curAs.volume = volume;
          return curAs;
        };

        _proto.findIdleAudioSource = function findIdleAudioSource(clip) {
          if (!this.audioSources[clip.name]) {
            this.audioSources[clip.name] = [];
            this.creatAudioSource(clip);
          }

          for (var i = 0; i < this.audioSources[clip.name].length; i++) {
            var audioSource = this.audioSources[clip.name][i];

            if (!audioSource.playing) {
              return audioSource;
            }
          }

          if (this.audioSources[clip.name].length <= AudioSource.maxAudioChannel - 2) {
            return this.creatAudioSource(clip);
          }

          return null;
        };

        _proto.creatAudioSource = function creatAudioSource(clip) {
          var audioSource = this.node.addComponent(AudioSource);
          audioSource.playOnAwake = false;
          audioSource.loop = false;
          audioSource.volume = this._soundAs.volume;
          audioSource.clip = clip;
          this.audioSources[clip.name].push(audioSource);
          this.auSources.push(audioSource);
          return audioSource;
        };

        _proto.myDestroy = function myDestroy() {
          var node = AudioSys.instance.node;
          node.destroy();
          AudioSys._instance = null;
        } // 音乐：静音
        ;

        _proto.muteMusic = function muteMusic() {
          this._musicAs.volume = AudioSys.MinMusicVolume;
          this._isMusicMute = true;
        } // 音效：静音
        ;

        _proto.muteSound = function muteSound() {
          this._soundAs.volume = AudioSys.MinSoundVolume;
          this._isSoundMute = true;
          this.auSources.forEach(function (element) {
            element.volume = AudioSys.MinSoundVolume;
          });
        } // 音乐：取消静音ß
        ;

        _proto.cancelMuteMusic = function cancelMuteMusic() {
          this._musicAs.volume = AudioSys.MaxMusicVolume;
          this._isMusicMute = false;
        } // 音效：取消静音
        ;

        _proto.cancelMuteSound = function cancelMuteSound() {
          this._soundAs.volume = AudioSys.MaxSoundVolume;
          this._isSoundMute = false;
          this.auSources.forEach(function (element) {
            element.volume = AudioSys.MaxSoundVolume;
          });
        } // 播放指定音乐（传入clip， 默认循环，淡入淡出）
        ;

        _proto.playMusic = function playMusic(clip, fade) {
          var _this3 = this;

          if (fade === void 0) {
            fade = true;
          }

          this.unschedule(this.musicFadeIn);
          this.unschedule(this.musicFadeOut);

          if (this.isMusicMute) {
            this._musicAs.stop();

            this._musicAs.clip = clip;

            this._musicAs.play();

            return;
          }

          if (!fade) {
            this._musicAs.stop();

            this._musicAs.clip = clip;

            this._musicAs.play();

            return;
          }

          if (this._musicAs.clip) {
            // 淡出淡入
            this._musicAs.volume = AudioSys.MaxMusicVolume;
            this.schedule(this.musicFadeOut, AudioSys.MusicFadeInterval, AudioSys.MusicFadeDuration / AudioSys.MusicFadeInterval, 0);
            setTimeout(function () {
              _this3._musicAs.stop();

              _this3._musicAs.volume = AudioSys.MinMusicVolume;
              _this3._musicAs.clip = clip;

              _this3._musicAs.play();

              _this3.schedule(_this3.musicFadeIn, AudioSys.MusicFadeInterval, AudioSys.MusicFadeDuration / AudioSys.MusicFadeInterval, 0);
            }, AudioSys.MusicFadeDuration * 1000);
          } else {
            // 直接淡入
            this._musicAs.volume = AudioSys.MinMusicVolume;
            this._musicAs.clip = clip;

            this._musicAs.play();

            this.schedule(this.musicFadeIn, AudioSys.MusicFadeInterval, AudioSys.MusicFadeDuration / AudioSys.MusicFadeInterval, 0);
          }
        };

        _proto.rePlayMusic = function rePlayMusic() {
          if (this._musicAs.clip) this._musicAs.play();
        };

        _proto.musicFadeOut = function musicFadeOut() {
          var volume = this._musicAs.volume - (AudioSys.MaxMusicVolume - AudioSys.MinMusicVolume) / (AudioSys.MusicFadeDuration / AudioSys.MusicFadeInterval);
          volume = volume < 0 ? 0 : volume;
          this._musicAs.volume = volume;
        };

        _proto.musicFadeIn = function musicFadeIn() {
          var volume = this._musicAs.volume + (AudioSys.MaxMusicVolume - AudioSys.MinMusicVolume) / (AudioSys.MusicFadeDuration / AudioSys.MusicFadeInterval);
          volume = volume > AudioSys.MaxMusicVolume ? AudioSys.MaxMusicVolume : volume;
          this._musicAs.volume = volume;
        } // 播放音效（传入clip）
        ;

        _proto.playSound = function playSound(clip) {
          this._soundAs.clip = clip;

          this._soundAs.playOneShot(clip, 1);
        };

        _proto.playSoundbyAudioSource = function playSoundbyAudioSource(clip) {// const audioSource: AudioSource =  this.findIdleAudioSource(clip);
          // let isPlayingCnt=0;
          // this.auSources.forEach(element => {
          //     if(element.playing)
          //     isPlayingCnt++
          // });
          // if(isPlayingCnt>= AudioSource.maxAudioChannel-2)
          // return null;
          // if (audioSource) {
          //     audioSource.play();
          // }
          // this._soundAs.playOneShot(clip, 1);
        };

        _proto.disable = function disable() {
          if (!this._isMusicMute) {
            this._musicAs.volume = AudioSys.MinMusicVolume;
          }

          if (!this._isSoundMute) {
            this._soundAs.volume = AudioSys.MinSoundVolume;
          }
        };

        _proto.enable = function enable() {
          if (!this._isMusicMute) {
            this._musicAs.volume = AudioSys.MaxMusicVolume;
          }

          if (!this._isSoundMute) {
            this._soundAs.volume = AudioSys.MaxSoundVolume;
          }
        };

        _createClass(AudioSys, [{
          key: "isSoundMute",
          get: function get() {
            // return this._soundAs.volume == AudioSys.MinSoundVolume;
            return this._isSoundMute;
          }
        }, {
          key: "isMusicMute",
          get: function get() {
            // return this._musicAs.volume == AudioSys.MinMusicVolume;
            return this._isMusicMute;
          }
        }], [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              var rootNode = new Node('AudioSys');
              director.addPersistRootNode(rootNode);
              this._instance = rootNode.addComponent(AudioSys);
            }

            return this._instance;
          }
        }]);

        return AudioSys;
      }(Component), _class2._instance = void 0, _class2.MinMusicVolume = 0, _class2.MaxMusicVolume = 0.5, _class2.MinSoundVolume = 0, _class2.MaxSoundVolume = 1, _class2.MusicFadeDuration = 1, _class2.MusicFadeInterval = 0.05, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AuthorizeManager.ts", ['cc', './BaseAuthorize.ts', './DYIAuthorize.ts', './DYRank.ts', './WXIAuthorize.ts', './WXRank.ts'], function (exports) {
  'use strict';

  var cclegacy, _decorator, sys, BaseAuthorize, DYIAuthorize, DYRank, WXIAuthorize, WXRank;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
    }, function (module) {
      BaseAuthorize = module.BaseAuthorize;
    }, function (module) {
      DYIAuthorize = module.DYIAuthorize;
    }, function (module) {
      DYRank = module.DYRank;
    }, function (module) {
      WXIAuthorize = module.WXIAuthorize;
    }, function (module) {
      WXRank = module.WXRank;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "4ab97Z8tatCLajahkmJgqEL", "AuthorizeManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AuthorizeManager = exports('AuthorizeManager', (_dec = ccclass('AuthorizeManager'), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function AuthorizeManager() {
          this.baseAuthoriz = null;
          this.wxRank = null;
          this.dyRank = null;
        }

        var _proto = AuthorizeManager.prototype;

        _proto.init = function init() {};

        AuthorizeManager.getInstance = function getInstance() {
          if (AuthorizeManager._instance == null) {
            AuthorizeManager._instance = new AuthorizeManager();

            if (sys.platform == sys.Platform.WECHAT_GAME) {
              AuthorizeManager._instance.baseAuthoriz = new WXIAuthorize();

              AuthorizeManager._instance.baseAuthoriz.Init();

              AuthorizeManager._instance.wxRank = new WXRank();
            } else if (sys.platform == sys.Platform.BYTEDANCE_MINI_GAME) {
              AuthorizeManager._instance.baseAuthoriz = new DYIAuthorize();

              AuthorizeManager._instance.baseAuthoriz.Init();

              AuthorizeManager._instance.dyRank = new DYRank();
            } else {
              AuthorizeManager._instance.baseAuthoriz = new BaseAuthorize();

              AuthorizeManager._instance.baseAuthoriz.Init();
            }
          }

          return AuthorizeManager._instance;
        };

        _proto.getBaseAuthrize = function getBaseAuthrize() {
          return this.baseAuthoriz;
        };

        _proto.Login = function Login(callBack) {
          var _this$baseAuthoriz;

          if (this.baseAuthoriz) (_this$baseAuthoriz = this.baseAuthoriz) == null ? void 0 : _this$baseAuthoriz.Login(callBack);else callBack();
        };

        _proto.GetLocation = function GetLocation(callBack) {
          var _this$baseAuthoriz2;

          if (callBack === void 0) {
            callBack = null;
          }

          if (this.baseAuthoriz) (_this$baseAuthoriz2 = this.baseAuthoriz) == null ? void 0 : _this$baseAuthoriz2.GetLocation(callBack);else callBack();
        };

        _proto.updateWxOrDyRankScore = function updateWxOrDyRankScore(score) {
          if (sys.platform == sys.Platform.WECHAT_GAME) {
            AuthorizeManager._instance.wxRank.UpdateFriendRank(score);
          } else if (sys.platform == sys.Platform.BYTEDANCE_MINI_GAME) {
            AuthorizeManager._instance.dyRank.upLoadRankdata(score);
          } else ;
        } //展示微信或者抖音的排行榜
        ;

        _proto.showWxOrDyRank = function showWxOrDyRank() {
          if (sys.platform == sys.Platform.WECHAT_GAME) {
            AuthorizeManager._instance.wxRank.showRank();
          } else if (sys.platform == sys.Platform.BYTEDANCE_MINI_GAME) {
            AuthorizeManager._instance.dyRank.showRank();
          } else ;
        };

        _proto.UpdateScore = function UpdateScore(score) {
          this.baseAuthoriz.UpdateScore(score);
        };

        _proto.GetUserInfo = function GetUserInfo() {
          return this.baseAuthoriz.GetUserInfo();
        };

        _proto.GetProvinceRank = function GetProvinceRank(callBack) {
          this.baseAuthoriz.GetProvinceRank(callBack);
        };

        _proto.GetProvinceRankDetail = function GetProvinceRankDetail(provinceName, callBack) {
          this.baseAuthoriz.GetProvinceRankDetail(provinceName, callBack);
        };

        _proto.GetNationTop100 = function GetNationTop100(callBack) {
          this.baseAuthoriz.GetNationTop100(callBack);
        };

        _proto.SetSkin = function SetSkin(skinId, callBack) {
          this.baseAuthoriz.SetSkin(skinId, callBack);
        };

        return AuthorizeManager;
      }(), _class2._instance = void 0, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseAuthorize.ts", ['cc', './NetTools.ts', './UserInfo.ts'], function (exports) {
  'use strict';

  var cclegacy, _decorator, sys, NetTools, UserInfo, NationalRanking, NoticeInfo, Province;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
    }, function (module) {
      NetTools = module.NetTools;
    }, function (module) {
      UserInfo = module.UserInfo;
      NationalRanking = module.NationalRanking;
      NoticeInfo = module.NoticeInfo;
      Province = module.Province;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "e29cfKcPRhJ268Z9SPR/uZB", "BaseAuthorize", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AuthorizUserInfo = exports('AuthorizUserInfo', function AuthorizUserInfo() {
        this.nickName = void 0;
        this.avatarUrl = void 0;
      });
      var BaseAuthorize = exports('BaseAuthorize', (_dec = ccclass("BaseAuthorize"), _dec(_class = /*#__PURE__*/function () {
        function BaseAuthorize() {
          this.authorizUserInfo = void 0;
          this.nationalRanking = void 0;
          this.noticeInfo = void 0;
          this.userInfo = void 0;
          this.province = void 0;
          this.rawData = "";
          this.signature = "";
          this.code = "";
          this.token = "";
          this.location = "未知";
          this.city = "";
          this.LoginTss = void 0;
          this.ShareCfg = void 0;
          this.logined = false;
          this.userKey = "";
        }

        var _proto = BaseAuthorize.prototype;

        _proto.Init = function Init() {
          this.token = sys.localStorage.getItem("token");
          this.userKey = sys.localStorage.getItem("userKey");
          this.location = sys.localStorage.getItem("province");
          this.city = sys.localStorage.getItem("city");
          this.userInfo = new UserInfo();
          this.nationalRanking = new NationalRanking();
          this.noticeInfo = new NoticeInfo();
          this.userInfo.province = this.location;
        };

        _proto.onlySetAuthorize = function onlySetAuthorize(callBack) {
          this.authorizUserInfo = new AuthorizUserInfo();
          this.authorizUserInfo.avatarUrl = "";
          this.authorizUserInfo.nickName = "";
          callBack(true);
        };

        _proto.SingUp = function SingUp(callBack) {
          var _this = this; //因为没有授权登陆，所以需要一个注册逻辑


          NetTools.Post("cmd=webSignup", function (responseContent) {
            if (responseContent) {
              _this.userKey = responseContent.userInfo.name;
              sys.localStorage.setItem("userKey", _this.userKey);
              callBack();
            }
          });
        };

        _proto.Login = function Login(callBack) {
          var _this2 = this;

          this.GetServceInfo(function (res) {
            //关服
            if (!res) {
              //  GameTips.instance.showTips("服务器维护中，预计30分钟后开服。");
              return;
            }

            if (_this2.token) {
              _this2.LoginToken(_this2.token, callBack);

              console.log(" token login");
              return;
            }

            if (!_this2.userKey || _this2.userKey == "") {
              _this2.SingUp(function () {
                _this2.login(callBack);
              });
            } else {
              _this2.login(callBack);
            }
          });
        };

        _proto.login = function login(callBack) {
          var _this3 = this;

          var isrelaseUsr = 0;
          if (NetTools.debug) isrelaseUsr = 1;
          NetTools.Post("cmd=webLogin&name=" + this.userKey + "&password=2333&environment=" + isrelaseUsr, function (responseContent) {
            if (responseContent) {
              //@ts-ignore
              if (responseContent.errorCode == 0) {
                //@ts-ignore
                _this3.token = responseContent.token;

                _this3.AssembleUserInfo(responseContent);

                sys.localStorage.setItem("token", _this3.token); //to

                callBack == null ? void 0 : callBack();
              } else {
                console.error("服务器登陆失败:" + responseContent.errorMsg);
              }
            }
          });
        };

        _proto.LoginToken = function LoginToken(token, callBack) {
          var _this4 = this;

          NetTools.Post("cmd=login&token=" + token, function (responseContent) {
            if (responseContent) {
              if (responseContent.errorCode == 0) {
                _this4.AssembleUserInfo(responseContent);

                callBack == null ? void 0 : callBack();
                console.info("LoginToken");
              } else {
                _this4.token = null;

                _this4.Login(callBack);
              }
            }
          });
        };

        _proto.AssembleUserInfo = function AssembleUserInfo(rawData) {
          this.userInfo = rawData.userInfo;
          this.userInfo.name = "咸鱼" + rawData.userInfo.name;
          this.logined = true;
        };

        _proto.SetAuthorize = function SetAuthorize(callBack) {};

        _proto.GetLocation = function GetLocation(callBack) {
          if (callBack === void 0) {
            callBack = null;
          } // if(sys.platform==sys.Platform.ANDROID){
          //     NativeSdkManager.GetInstance().getLocation((res:string)=>{
          //         let strs = res.split("#");
          //         const latitude = strs[1];
          //         const longitude = strs[0];
          //         NetTools.Post(`cmd=joinProvince&token=${this.token}&latitude=${latitude}&longitude=${longitude}`, (responseContent) => {
          //             //@ts-ignore
          //             if (responseContent.errorCode == 0) {
          //                 //@ts-ignore
          //                 this.location = responseContent.provinceName;
          //                 sys.localStorage.setItem("province", this.location);
          //                 this.city = responseContent.city;
          //                 sys.localStorage.setItem("city", this.city);
          //                 this.userInfo.province = responseContent.province;
          //                 this.userInfo.provinceName = this.location;
          //                 this.userInfo.city = this.city;
          //                 callBack?.();
          //             } else {
          //                 callBack?.();
          //                 //@ts-ignore
          //                 console.error("location is error:" + responseContent.errorMsg);
          //             }
          //         });
          //     });
          // return;
          // }


          callBack == null ? void 0 : callBack(); //     console.log("GetLocation");
        };

        _proto.UpdateScore = function UpdateScore(score, callBack) {
          if (callBack === void 0) {
            callBack = null;
          }

          if (!this.token && this.token != "") {
            callBack == null ? void 0 : callBack();
            return;
          }

          NetTools.Post("cmd=updateScore&token=" + this.token + "&score=" + score, function (responseContent) {
            if (responseContent.errorCode == 0) ;
          });
        };

        _proto.GetUserInfo = function GetUserInfo() {
          return this.userInfo;
        };

        _proto.GetProvinces = function GetProvinces() {
          return this.province;
        };

        _proto.GetProvinceRank = function GetProvinceRank(callBack) {
          var _this5 = this;

          if (!this.token) {
            callBack == null ? void 0 : callBack(null);
            return;
          }

          NetTools.Post("cmd=getProvinceRank&token=" + this.token, function (responseContent) {
            if (responseContent.errorCode == 0) {
              var list = responseContent.provinceList;
              _this5.province = new Map();
              list.forEach(function (element) {
                var item = new Province();
                item.name = element.name;
                item.count = 30;
                item.count += element.score;

                _this5.province.set(element.code, item);
              });
              callBack == null ? void 0 : callBack(_this5.province);
            } else {
              callBack == null ? void 0 : callBack(null);
            }
          });
        } //每个省份的信息
        ;

        _proto.GetProvinceRankDetail = function GetProvinceRankDetail(provinceName, callBack) {
          if (!this.token) {
            callBack == null ? void 0 : callBack(null);
            return;
          }

          var item = this.province.get(provinceName);
          NetTools.Post("cmd=getProvinceRankDetail&token=" + this.token + "&code=" + provinceName, function (responseContent) {
            if (responseContent.errorCode == 0) {
              if (item) {
                var list = responseContent.topUserList;

                if (list.length > 0) {
                  item.userInfos = new Array(list.length);

                  for (var index = 0; index < list.length; index++) {
                    var element = list[index]; // let userinfor = new UserInfo();
                    // userinfor.avatar = element.avatar;
                    // userinfor.name = element.name;
                    // userinfor.city = element.city;
                    // userinfor.skinId = element.skinId;

                    item.userInfos[index] = element;
                  }
                } //填充假数据
                // if (item.userInfos.length <= 30) {
                //     let count = 30 - item.userInfos.length;
                //     for (let index = 0; index < count; index++) {
                //         let userInfo = new UserInfo();
                //         userInfo.avatar = this.userInfo.avatar;
                //         userInfo.name = this.userInfo.name;
                //         userInfo.city = this.userInfo.city;
                //         item.userInfos.push(userInfo);
                //     }
                // }

              }

              callBack == null ? void 0 : callBack(item);
            } else {
              callBack == null ? void 0 : callBack(null);
            }
          });
        }
        /**
         * 当前关卡上传用于总排名
         * @param levelId 当前关卡id 
         * @param doneSec 完成花费的时间
         */
        ;

        _proto.SetLevelDone = function SetLevelDone(levelId, doneSec) {
          var _this6 = this;

          if (!this.token && this.token != "") return;
          NetTools.Post("cmd=levelDone&token=" + this.token + "&levelId=" + levelId + "&doneSec=" + doneSec + "&doneTotalSec=" + -1, function (res) {
            if (res.errorCode == 0) {
              var _res$userInfo, _res$userInfo2, _res$userInfo3, _res$userInfo4, _res$userInfo5, _res$userInfo6, _res$userInfo7, _res$userInfo8, _res$userInfo9, _res$userInfo10;

              _this6.userInfo.tLvDoneCntDic = (_res$userInfo = res.userInfo) == null ? void 0 : _res$userInfo.tLvDoneCntDic;
              _this6.userInfo.tLvDoneMinSecDic = (_res$userInfo2 = res.userInfo) == null ? void 0 : _res$userInfo2.tLvDoneMinSecDic;
              _this6.userInfo.lvDoneTotalCntDic = (_res$userInfo3 = res.userInfo) == null ? void 0 : _res$userInfo3.lvDoneTotalCntDic;
              _this6.userInfo.lvDoneMinSecDic = (_res$userInfo4 = res.userInfo) == null ? void 0 : _res$userInfo4.lvDoneMinSecDic;
              _this6.userInfo.tOfferProvinceFlag = (_res$userInfo5 = res.userInfo) == null ? void 0 : _res$userInfo5.tOfferProvinceFlag;
              _this6.userInfo.tPlayedCnt = (_res$userInfo6 = res.userInfo) == null ? void 0 : _res$userInfo6.tPlayedCnt;
              _this6.userInfo.totalPlayedCnt = (_res$userInfo7 = res.userInfo) == null ? void 0 : _res$userInfo7.totalPlayedCnt;
              _this6.userInfo.offerProvinceTotalCnt = (_res$userInfo8 = res.userInfo) == null ? void 0 : _res$userInfo8.offerProvinceTotalCnt;
              _this6.userInfo.nationRankCnt = (_res$userInfo9 = res.userInfo) == null ? void 0 : _res$userInfo9.nationRankCnt;
              _this6.userInfo.nationRankMinSec = (_res$userInfo10 = res.userInfo) == null ? void 0 : _res$userInfo10.nationRankMinSec;
            }
          });
        }
        /**
         * 用于显示100名的排名
         * @param levelId 关卡id
         * @param totallSec 总共花费的时间
         */
        ;

        _proto.Set100LevelDone = function Set100LevelDone(levelId, doneSec, totallSec, callBack) {
          var _this7 = this;

          if (!this.token && this.token != "") return;
          NetTools.Post("cmd=levelDone&token=" + this.token + "&levelId=" + levelId + "&doneSec=" + doneSec + "&doneTotalSec=" + totallSec, function (res) {
            if (res.errorCode == 0) {
              var _res$userInfo11, _res$userInfo12, _res$userInfo13, _res$userInfo14, _res$userInfo15, _res$userInfo16, _res$userInfo17, _res$userInfo18, _res$userInfo19, _res$userInfo20;

              _this7.userInfo.tLvDoneCntDic = (_res$userInfo11 = res.userInfo) == null ? void 0 : _res$userInfo11.tLvDoneCntDic;
              _this7.userInfo.tLvDoneMinSecDic = (_res$userInfo12 = res.userInfo) == null ? void 0 : _res$userInfo12.tLvDoneMinSecDic;
              _this7.userInfo.lvDoneTotalCntDic = (_res$userInfo13 = res.userInfo) == null ? void 0 : _res$userInfo13.lvDoneTotalCntDic;
              _this7.userInfo.lvDoneMinSecDic = (_res$userInfo14 = res.userInfo) == null ? void 0 : _res$userInfo14.lvDoneMinSecDic;
              _this7.userInfo.tOfferProvinceFlag = (_res$userInfo15 = res.userInfo) == null ? void 0 : _res$userInfo15.tOfferProvinceFlag;
              _this7.userInfo.tPlayedCnt = (_res$userInfo16 = res.userInfo) == null ? void 0 : _res$userInfo16.tPlayedCnt;
              _this7.userInfo.totalPlayedCnt = (_res$userInfo17 = res.userInfo) == null ? void 0 : _res$userInfo17.totalPlayedCnt;
              _this7.userInfo.offerProvinceTotalCnt = (_res$userInfo18 = res.userInfo) == null ? void 0 : _res$userInfo18.offerProvinceTotalCnt;
              _this7.userInfo.nationRankCnt = (_res$userInfo19 = res.userInfo) == null ? void 0 : _res$userInfo19.nationRankCnt;
              _this7.userInfo.nationRankMinSec = (_res$userInfo20 = res.userInfo) == null ? void 0 : _res$userInfo20.nationRankMinSec;
              callBack == null ? void 0 : callBack();
            }
          });
        }
        /**
         * 获取全国排名
         * @param callBack  
         */
        ;

        _proto.GetNationalRanking = function GetNationalRanking(callBack) {
          var _this8 = this;

          if (!this.token && this.token != "") {
            callBack == null ? void 0 : callBack(null);
            return;
          }

          NetTools.Post("cmd=getNationRank&token=" + this.token, function (responseContent) {
            if (responseContent.errorCode == 0) {
              _this8.nationalRanking.userList = responseContent.userList;
              callBack == null ? void 0 : callBack(_this8.nationalRanking);
            }
          });
        }
        /**
         * 获取公告
         * @param callBack 
         */
        ;

        _proto.GetNotice = function GetNotice(callBack) {
          var _this9 = this;

          NetTools.Post("cmd=getNotice&token=" + this.token, function (responseContent) {
            if (responseContent.errorCode == 0) {
              _this9.noticeInfo.tOfferProvinceUserCnt = responseContent.tOfferProvinceUserCnt;
              _this9.noticeInfo.tPlayedUserCnt = responseContent.tPlayedUserCnt;
              callBack == null ? void 0 : callBack(_this9.noticeInfo);
            }
          });
        };

        _proto.SetLevelBegin = function SetLevelBegin(levelId, callBack) {
          var _this10 = this;

          if (!this.token && this.token != "") {
            callBack == null ? void 0 : callBack();
            return;
          }

          NetTools.Post("cmd=levelBegin&levelId=" + levelId + "&token=" + this.token, function (responseContent) {
            if (responseContent.errorCode == 0) {
              _this10.userInfo.tPlayedCnt = responseContent.tPlayedCnt;
              _this10.userInfo.totalPlayedCnt = responseContent.totalPlayedCnt;
              callBack == null ? void 0 : callBack();
            } else {
              callBack == null ? void 0 : callBack();
            }
          });
        } //前100排名
        ;

        _proto.GetNationTop100 = function GetNationTop100(callBack) {
          var _this11 = this;

          NetTools.Post("cmd=getNationTop100&token=" + this.token, function (responseContent) {
            if (responseContent && responseContent.errorCode == 0) {
              _this11.nationalRanking.userList = responseContent.userList;
              callBack == null ? void 0 : callBack(_this11.nationalRanking);
            } else {
              callBack == null ? void 0 : callBack(null);
            }
          });
        };

        _proto.GetServceInfo = function GetServceInfo(callBack) {
          NetTools.Post("cmd=getServerStatus", function (responseContent) {
            if (responseContent.status == 0) {
              callBack == null ? void 0 : callBack(true);
            } else {
              callBack == null ? void 0 : callBack(false);
            }
          });
        };

        _proto.SetSkin = function SetSkin(skinId, callBack) {
          var _this12 = this;

          NetTools.Post("cmd=setSkin&token=" + this.token + "&skinId=" + skinId, function (responseContent) {
            if (responseContent.errorCode == 0) {
              console.log(responseContent.message);
              _this12.userInfo.skinId = skinId;
              callBack == null ? void 0 : callBack(true);
            } else {
              callBack == null ? void 0 : callBack(false);
            }
          });
        };

        return BaseAuthorize;
      }()) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BasePanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "a52bdy9tbRNkrz6Ees7hyPm", "BasePanel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BasePanel = exports('BasePanel', (_dec = ccclass('BasePanel'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BasePanel, _Component);

        function BasePanel() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = BasePanel.prototype;

        _proto.start = function start() {};

        _proto.update = function update(deltaTime) {};

        return BasePanel;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ButtonExtend.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AudioManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCString, Button, AudioManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCString = module.CCString;
      Button = module.Button;
    }, function (module) {
      AudioManager = module.AudioManager;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "d99cdgjqLdC3I3bzI3mGIkR", "ButtonExtend", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ButtonExtend = exports('ButtonExtend', (_dec = ccclass('ButtonExtend'), _dec2 = property({
        type: CCString,
        visible: true,
        displayName: "点击的音效名字"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Button) {
        _inheritsLoose(ButtonExtend, _Button);

        function ButtonExtend() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Button.call.apply(_Button, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "audioName", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = ButtonExtend.prototype;

        _proto.start = function start() {
          var _this2 = this;

          var btn = this.node.getComponent(Button);
          btn.node.on(Button.EventType.CLICK, function () {
            AudioManager.instance.playSound(_this2.audioName);
          }, this);
        };

        return ButtonExtend;
      }(Button), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "audioName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "click";
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CameraManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CfgData.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Camera, v3, tween, screen, Component, CfgData;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Camera = module.Camera;
      v3 = module.v3;
      tween = module.tween;
      screen = module.screen;
      Component = module.Component;
    }, function (module) {
      CfgData = module.CfgData;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "61199Tio2FCzpILb7nQLD3J", "CameraManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CameraManager = exports('CameraManager', (_dec = ccclass('CameraManager'), _dec2 = property({
        type: Camera,
        visible: true,
        displayName: "动物层级相机"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CameraManager, _Component);

        function CameraManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "animalCamera", _descriptor, _assertThisInitialized(_this));

          _this.orgPos = void 0;
          return _this;
        }

        var _proto = CameraManager.prototype;

        _proto.init = function init(id, projection) {
          var data = this.adputerCamera(id, projection);
          this.orgPos = v3(this.node.worldPosition);
          return data;
        };

        _proto.move = function move(end, time) {
          tween(this.node).to(time, {
            worldPosition: end
          }).start();
        };

        _proto.adputerCamera = function adputerCamera(id, projection) {
          var cameraCfg = CfgData.getInstance().getHomeCfg().map[id];
          var cam = this.node.getComponent(Camera);
          var ort = cameraCfg.CameraOrthoHeight;
          var z = cameraCfg.CameraZPosition;
          var orthoHeight = 25;
          var maxPhone = screen.windowSize.height / screen.windowSize.width > 16 / 9;
          console.log("screen:" + screen.windowSize);

          if (projection) {
            if (maxPhone) {
              orthoHeight = 1080 * ort * screen.windowSize.height / (1920 * screen.windowSize.width);
              cam.orthoHeight = orthoHeight;
            }
          } else {
            if (maxPhone) {
              orthoHeight = 1080 * ort * screen.windowSize.height / (1920 * screen.windowSize.width);
              cam.orthoHeight = orthoHeight;
              var cons = screen.windowSize.height / screen.windowSize.width - 16 / 9;
              z = z - cons * cameraCfg.CaneraZOffset;
            } else {
              cam.orthoHeight = cameraCfg.CameraOrthoHeight;
            }

            var orgPos = v3(cam.node.worldPosition);
            cam.node.setWorldPosition(v3(orgPos.x, orgPos.y, z));
          } //更新一下


          cam.camera.update();

          if (this.animalCamera) {
            this.animalCamera.node.active = true;
            this.animalCamera.node.setWorldPosition(cam.node.getWorldPosition());
            this.animalCamera.node.setWorldRotation(cam.node.getWorldRotation());
            this.animalCamera.orthoHeight = cam.orthoHeight;
            this.animalCamera.camera.update();
            this.animalCamera.node.active = false;
          }

          return cameraCfg;
        };

        return CameraManager;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "animalCamera", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CauntCfg.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class4, _class5, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "2194aui/hBHPJ5Ttl8bvMYH", "CauntCfg", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TauntInfo = exports('TauntInfo', (_dec = ccclass('TauntInfo'), _dec2 = property({
        type: SpriteFrame,
        displayName: "对应的表情"
      }), _dec3 = property({
        type: [String],
        displayName: "嘲讽的话"
      }), _dec(_class = (_class2 = function TauntInfo() {
        _initializerDefineProperty(this, "emojiId", _descriptor, this);

        _initializerDefineProperty(this, "words", _descriptor2, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "emojiId", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "words", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));
      var CauntCfg = exports('CauntCfg', (_dec4 = ccclass('CauntCfg'), _dec5 = property({
        type: [TauntInfo],
        displayName: "家园成功嘲讽"
      }), _dec6 = property({
        type: [TauntInfo],
        displayName: "家园失败嘲讽"
      }), _dec7 = property({
        type: [TauntInfo],
        displayName: "战斗嘲讽"
      }), _dec8 = property({
        type: [TauntInfo],
        displayName: "失败界面嘲讽"
      }), _dec9 = property({
        type: [TauntInfo],
        displayName: "新手引导嘲讽"
      }), _dec4(_class4 = (_class5 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CauntCfg, _Component);

        function CauntCfg() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "sTaunt", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fTaunt", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gTaunt", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fUITaunt", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nTaunt", _descriptor7, _assertThisInitialized(_this));

          return _this;
        }

        return CauntCfg;
      }(Component), (_descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "sTaunt", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "fTaunt", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class5.prototype, "gTaunt", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class5.prototype, "fUITaunt", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class5.prototype, "nTaunt", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class5)) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CfgData.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts', './EventData.ts', './GuideActions.ts', './CauntCfg.ts', './AssetSys.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, JsonAsset, director, Component, instantiate, Utils, EventData, GuideActions, CauntCfg, AssetSys;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      JsonAsset = module.JsonAsset;
      director = module.director;
      Component = module.Component;
      instantiate = module.instantiate;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      EventData = module.EventData;
    }, function (module) {
      GuideActions = module.GuideActions;
    }, function (module) {
      CauntCfg = module.CauntCfg;
    }, function (module) {
      AssetSys = module.AssetSys;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _class3;

      cclegacy._RF.push({}, "f0f61Ew5IFL6pAdU5QR0Czl", "CfgData", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CfgData = exports('CfgData', (_dec = ccclass('CfgData'), _dec2 = property({
        type: JsonAsset,
        displayName: "微信头像名字"
      }), _dec3 = property({
        type: JsonAsset,
        displayName: "抖音头像名字"
      }), _dec4 = property({
        type: JsonAsset,
        visible: true,
        displayName: "家配置"
      }), _dec5 = property({
        type: EventData,
        visible: true,
        displayName: "事件配置"
      }), _dec6 = property({
        type: GuideActions,
        visible: true,
        displayName: "新手引导配置"
      }), _dec7 = property({
        type: CauntCfg,
        visible: true,
        displayName: "嘲讽配置"
      }), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CfgData, _Component);

        function CfgData() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "wxhead", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "dyhead", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_homeCfg", _descriptor3, _assertThisInitialized(_this));

          _this.homeCfg = void 0;

          _initializerDefineProperty(_this, "eventData", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "guideActions", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tauntCfg", _descriptor6, _assertThisInitialized(_this));

          _this.userItems = void 0;
          return _this;
        }

        CfgData.getInstance = function getInstance() {
          if (!this._instance) {
            this._instance = director.getScene().getComponentInChildren(CfgData);
          }

          return this._instance;
        };

        CfgData.init = /*#__PURE__*/function () {
          var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(call) {
            var animal;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  console.log("初始化配置资源......");
                  animal = AssetSys.getInstance().bundlenName[0];
                  AssetSys.getInstance().loadAssets(animal, "CfgData", function (data) {
                    var animalData = data;
                    var assetAnimal = instantiate(animalData).getComponent(CfgData);
                    director.getScene().addChild(assetAnimal.node);
                    director.addPersistRootNode(assetAnimal.node);
                    call();
                  });

                case 3:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          }));

          function init(_x) {
            return _init.apply(this, arguments);
          }

          return init;
        }();

        var _proto = CfgData.prototype;

        _proto.onLoad = function onLoad() {
          this.homeCfg = this._homeCfg.json;
        };

        _proto.getUserInfo = function getUserInfo() {
          if (Utils.isDyPlatform()) {
            return this.dyhead.json;
          }

          if (Utils.isWxPlatform()) {
            return this.dyhead.json;
          }

          if (Utils.isNativePlatform()) {
            return this.dyhead.json;
          }
        };

        _proto.getHomeCfg = function getHomeCfg() {
          return this.homeCfg;
        };

        _proto.getEventData = function getEventData() {
          return this.eventData;
        };

        _proto.getGuideActions = function getGuideActions() {
          return this.guideActions;
        };

        _proto.getTauntCfg = function getTauntCfg() {
          return this.tauntCfg;
        };

        return CfgData;
      }(Component), _class3._instance = void 0, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "wxhead", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "dyhead", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_homeCfg", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "eventData", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "guideActions", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "tauntCfg", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CoinTools.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AudioManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, randomRange, instantiate, v3, randomRangeInt, tween, Component, AudioManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      randomRange = module.randomRange;
      instantiate = module.instantiate;
      v3 = module.v3;
      randomRangeInt = module.randomRangeInt;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      AudioManager = module.AudioManager;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "ecabbRlgClD1IL3U5zPnyzI", "CoinTools", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CoinTools = exports('CoinTools', (_dec = ccclass('CoinTools'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CoinTools, _Component);

        function CoinTools() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "coinNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "flyTime", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = CoinTools.prototype;

        _proto.flyCoin = function flyCoin(startPos, endPos, cnt) {
          AudioManager.instance.playSound('coin');

          for (var index = 0; index < cnt; index++) {
            var coin = void 0;
            var dl = randomRange(0, 0.2);
            coin = instantiate(this.coinNode);
            this.node.addChild(coin);
            coin.scale = v3(1.5, 1.5, 1.5);
            coin.active = true;
            var x = randomRangeInt(-100, 100);
            var y = randomRangeInt(-100, 100);
            var randomPos = v3(x, y, 0).add(startPos); //创建一个动画

            var coinAnim = tween(coin).delay(dl).to(this.flyTime * 0.2, {
              position: randomPos
            }, {
              easing: "backIn"
            }) // 设置金币的结束位置
            .to(this.flyTime, {
              worldPosition: endPos
            }, {
              easing: "backIn"
            }) //变小
            .to(this.flyTime, {
              scale: v3(0, 0, 0)
            }, {
              easing: "backIn"
            }).hide(); // 设置金币的循环次数

            coinAnim.start();
          }
        };

        return CoinTools;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "coinNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "flyTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Coroutine.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "b24ffYPqMBK7qRgSwPbrwi5", "Coroutine", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Coroutine = exports('Coroutine', (_dec = ccclass('Coroutine'), _dec(_class = /*#__PURE__*/function () {
        function Coroutine(genFunc) {
          this.genFunc = genFunc;
        }

        var _proto = Coroutine.prototype;

        _proto.start = function start() {
          this.gen = this.genFunc.apply(this, arguments);
          this.resume();
        };

        _proto.step = function step(nextValue) {
          var _this = this;

          if (!this.gen) return;

          var _this$gen$next = this.gen.next(nextValue),
              value = _this$gen$next.value,
              done = _this$gen$next.done;

          if (done) {
            return;
          }

          if (value) {
            if (value instanceof Promise) {
              value.then(function (val) {
                _this.step(val);
              });
            } else {
              setTimeout(function (val) {
                return _this.step(val);
              });
            }
          }
        };

        _proto.stop = function stop() {
          this.gen = null;
        };

        _proto.resume = function resume() {
          if (this.gen && !this.gen.next().done) {
            this.step();
          }
        };

        Coroutine.waitForSecond = function waitForSecond(time, com) {
          return new Promise(function (res) {
            return com.scheduleOnce(res, time);
          });
        };

        return Coroutine;
      }()) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Cow.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnclosureChild.ts', './Entity.ts', './Fence.ts', './GameManager.ts', './TreasureBox.ts', './SdkManager.ts', './DataManager.ts', './GameCfg.ts', './AudioManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCFloat, SphereCollider, v3, Vec3, randomRange, EnclosureChild, MapSacle, AtkFactor, TotallAtkFactor, Entity, Fence, GameManager, TreasureBox, SdkManager, vibrateType, DataManager, GameCfg, AudioManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
      SphereCollider = module.SphereCollider;
      v3 = module.v3;
      Vec3 = module.Vec3;
      randomRange = module.randomRange;
    }, function (module) {
      EnclosureChild = module.EnclosureChild;
    }, function (module) {
      MapSacle = module.MapSacle;
      AtkFactor = module.AtkFactor;
      TotallAtkFactor = module.TotallAtkFactor;
      Entity = module.Entity;
    }, function (module) {
      Fence = module.Fence;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      TreasureBox = module.TreasureBox;
    }, function (module) {
      SdkManager = module.SdkManager;
      vibrateType = module.vibrateType;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      GameCfg = module.GameCfg;
    }, function (module) {
      AudioManager = module.AudioManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "0e839cQENpGT6599YJnAD0K", "Cow", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Cow = exports('Cow', (_dec = ccclass('Cow'), _dec2 = property({
        type: CCFloat,
        visible: true,
        displayName: "基础攻击力"
      }), _dec3 = property({
        type: [MapSacle],
        visible: true,
        displayName: "放大系数"
      }), _dec4 = property({
        type: [AtkFactor],
        visible: true,
        displayName: "攻击力个数加成系数"
      }), _dec5 = property({
        type: [TotallAtkFactor],
        visible: true,
        displayName: "总攻击力个数加成系数"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Entity) {
        _inheritsLoose(Cow, _Entity);

        function Cow() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Entity.call.apply(_Entity, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "baseAtk", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scale", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "atkFactor", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "totallAtk", _descriptor4, _assertThisInitialized(_this));

          _this.isAtk = false;
          _this.cfgs = void 0;
          return _this;
        }

        var _proto = Cow.prototype;

        _proto.initCfg = function initCfg() {
          this.scale = new Array();
          this.atkFactor = new Array();
          this.totallAtk = new Array();
          this.cfgs = GameManager.getInstance().animalCfg.Cow;
          this.baseAtk = this.cfgs[0].BaseAtk;

          for (var index = 0; index < this.cfgs.length; index++) {
            var element = this.cfgs[index];
            var sacle = new MapSacle();
            sacle.lv = index;
            sacle.sacle = element.MapSacle;
            this.scale.push(sacle);
            var atkfactor = new AtkFactor();
            atkfactor.lv = index;
            atkfactor.factor = element.AtkFactor;
            this.atkFactor.push(atkfactor);
            var totallatk = new TotallAtkFactor();
            totallatk.lv = index;
            totallatk.factor = element.TotallAtkFactor;
            this.totallAtk.push(totallatk);
          }
        };

        _proto.start = function start() {
          this.node.getComponent(SphereCollider).on('onCollisionEnter', this.onCollsEnter, this);
          this.node.getComponent(SphereCollider).on('onCollisionStay', this.onTriggerStay, this); // this.initCfg();
        };

        _proto.onCollsEnter = function onCollsEnter(collider) {
          var other = collider.otherCollider.node;

          if (other && this.atkState) {
            var point = v3();
            var box = other.getComponent(Fence);

            if (!this.isAtk && !this.isNomalAnimal && box) {
              collider.contacts[0].getWorldPointOnA(point);
              this.skeletal.play("behit");
              SdkManager.getInstance().VibrateShort(DataManager.getInstance().playerData.vibrateSet, vibrateType.light);
              box.onHit(this.getAtkFactor(), point);
              this.isAtk = true;
              this.stopMove();
              var dir = new Vec3(randomRange(-10, 10), randomRange(20, 60), 1).normalize(); //方向

              dir = dir.multiplyScalar(GameCfg.AnimalReboundForce); //长度

              this.rg.useGravity = true;
              this.rg.applyForce(dir);
              this.delayDestroy(800);
              this.isLastAtk();
              return;
            }

            var enc = other.getComponent(EnclosureChild);

            if (!this.isAtk && enc) {
              collider.contacts[0].getWorldPointOnA(point);
              this.skeletal.play("behit");
              SdkManager.getInstance().VibrateShort(DataManager.getInstance().playerData.vibrateSet, vibrateType.light);
              enc.onHit(this.getAtkFactor(), point);
              this.isAtk = true;
              this.stopMove();

              var _dir = new Vec3(randomRange(-10, 10), randomRange(20, 60), 1).normalize(); //方向


              _dir = _dir.multiplyScalar(GameCfg.AnimalReboundForce); //长度

              this.rg.useGravity = true;
              this.rg.applyForce(_dir);
              this.delayDestroy(1500);
              this.isLastAtk();
              return;
            }

            var tr = other.getComponent(TreasureBox);

            if (!this.isAtk && tr) {
              collider.contacts[0].getWorldPointOnA(point);
              this.skeletal.play("behit");
              SdkManager.getInstance().VibrateShort(DataManager.getInstance().playerData.vibrateSet, vibrateType.light);
              tr.onHit(this.getAtkFactor(), point);
              this.isAtk = true;
              this.stopMove();

              var _dir2 = new Vec3(randomRange(-10, 10), randomRange(20, 60), 1).normalize(); //方向


              _dir2 = _dir2.multiplyScalar(GameCfg.AnimalReboundForce); //长度

              this.rg.useGravity = true;
              this.rg.applyForce(_dir2);
              this.delayDestroy(1500);
              this.isLastAtk();
              return;
            }

            if (this.isAtk && other.name == "Dimian") {
              AudioManager.instance.playSound("down");

              var _dir3 = new Vec3(randomRange(-10, 10), randomRange(20, 60), 0).normalize(); //方向


              _dir3 = _dir3.multiplyScalar(GameCfg.AnimalReboundForce); //长度

              this.rg.applyForce(_dir3);
            }
          }
        };

        _proto.onTriggerStay = function onTriggerStay(collider) {
          var other = collider.otherCollider.node;

          if (other) {
            var box = other.getComponent(Fence);

            if (this.isNomalAnimal && box) {
              this.node.setPosition(this.node.position.add3f(0, 0.1, 0));
            }
          }
        };

        _proto.getAtkFactor = function getAtkFactor() {
          var atk;
          var step = this.step >= this.atkFactor.length ? this.atkFactor.length - 1 : this.step;
          atk = this.baseAtk * this.atkFactor[step].factor * this.totallAtk[step].factor;
          GameManager.getInstance().additionalHurt += atk - 1;
          return atk;
        };

        _proto.isLastAtk = function isLastAtk() {
          if (this.step == this.totallStep) ;
        };

        _proto.setBigState = function setBigState(step) {
          step = step >= this.scale.length ? this.scale.length - 1 : step;
          var sacle = this.scale[step].sacle;

          _Entity.prototype.setBigState.call(this, sacle);
        };

        _proto.update = function update(deltaTime) {
          _Entity.prototype.update.call(this, deltaTime);
        };

        return Cow;
      }(Entity), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "baseAtk", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "scale", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "atkFactor", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "totallAtk", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Dailog_tip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './TimeTools.ts', './Utils.ts', './TipInfo.ts', './LabelEx.ts', './HomeManager.ts', './GameManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _inheritsLoose, _assertThisInitialized, _createClass, cclegacy, _decorator, CCString, Node, SpriteFrame, Label, v3, RichText, tween, Input, Component, Sprite, TimeTools, Utils, TipInfo, LabelEx, HomeManager, GameManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCString = module.CCString;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      Label = module.Label;
      v3 = module.v3;
      RichText = module.RichText;
      tween = module.tween;
      Input = module.Input;
      Component = module.Component;
      Sprite = module.Sprite;
    }, function (module) {
      TimeTools = module.TimeTools;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      TipInfo = module.TipInfo;
    }, function (module) {
      LabelEx = module.LabelEx;
    }, function (module) {
      HomeManager = module.HomeManager;
    }, function (module) {
      GameManager = module.GameManager;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _dec3, _dec4, _dec5, _dec6, _dec7, _class4, _class5, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "9cafb2lN81LULLPmbF3Khb+", "Dailog_tip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Dailog = exports('Dailog', (_dec = ccclass('Dailog'), _dec2 = property({
        type: CCString,
        displayName: "推送id"
      }), _dec(_class = (_class2 = function Dailog() {
        _initializerDefineProperty(this, "id", _descriptor, this);

        this.targetTime = 0;
        this.style = 0;
        this.desStr = [];
        this.condition = void 0;
        this.onShowCall = null;
        this.delay = void 0;
        this.isShow = false;
        this.showLv = 0;
      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _class2)) || _class));
      var Dailog_tip = exports('Dailog_tip', (_dec3 = ccclass('Dailog_tip'), _dec4 = property({
        type: [Node],
        displayName: "提示框的样式"
      }), _dec5 = property({
        type: [SpriteFrame],
        displayName: "解锁功能的图片资源"
      }), _dec6 = property({
        type: Node,
        displayName: "mask"
      }), _dec7 = property({
        type: [Dailog],
        displayName: "推送"
      }), _dec3(_class4 = (_class5 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Dailog_tip, _Component);

        function Dailog_tip() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "tips", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "unlockSprites", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "mask", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "dailogList", _descriptor5, _assertThisInitialized(_this));

          _this.lab_tip = void 0;
          _this.isShow = false;
          _this.nowtime = 1;
          _this.guideTip = void 0;
          return _this;
        }

        var _proto = Dailog_tip.prototype;

        _proto.onLoad = function onLoad() {
          this.lab_tip = this.getComponentInChildren(Label);
          this.tips[1].active = true;
        };

        _proto.update = function update(deltaTime) {
          if (this.node.active) {
            if (this.nowtime <= 0) {
              this.nowtime = 1;

              if (!this.isShow) {
                var dialog = this.showTips();
                if (dialog) this.cancelSubscribeTip(dialog.id);
              }
            } else {
              this.nowtime -= deltaTime;
            }
          }
        };

        _proto.showNpcInfoTip = function showNpcInfoTip(str, style, delay) {
          var _this2 = this;

          if (style === void 0) {
            style = 4;
          }

          var tip = this.tips[style];
          var tipinfo = tip.getComponent(TipInfo);
          Utils.urlToSpriteFrame(str[2], function (res) {
            tipinfo.head.spriteFrame = res;
          });
          tipinfo.labeName.orgVlaue = str[3];
          this.scheduleOnce(function () {
            _this2.showNomalTip(str[0], style, 1, 4, v3(0, 400, 0), null);

            for (var index = 0; index < tipinfo.tipsLab.length; index++) {
              var lab = tipinfo.tipsLab[index];
              if (lab) lab.string = str[index];
            }
          }, delay);
        };

        _proto.showGuideTip = function showGuideTip(str, style, moveStyle, showTime, endPos, call) {
          var _this3 = this;

          if (style === void 0) {
            style = 0;
          }

          if (moveStyle === void 0) {
            moveStyle = 0;
          }

          if (showTime === void 0) {
            showTime = 4;
          }

          if (endPos === void 0) {
            endPos = v3(0, 400, 0);
          }

          if (call === void 0) {
            call = null;
          }

          this.node.active = true;
          var tip = this.tips[style];
          this.lab_tip = tip.getComponentInChildren(Label);
          this.setMaskActive(true);
          tip.active = true;
          if (str != "" && this.lab_tip) this.lab_tip.string = str;

          if (style == 0) {
            var rich = tip.getComponentInChildren(RichText);
            rich.string = "";
            rich.string = str;
          }

          if (moveStyle == 1) {
            tip.position = v3(-1200, endPos.y, 0);
            tween(tip).to(0.3, {
              position: endPos
            }, {
              easing: "backOut"
            }).start();
          }

          this.guideTip = function () {
            tip.active = false;

            _this3.setMaskActive(false);

            call == null ? void 0 : call();
          };

          this.scheduleOnce(this.guideTip, showTime);
          return [tip, true];
        };

        _proto.showNomalTip = function showNomalTip(str, style, moveStyle, showTime, endPos, call, onShowCall) {
          var _this4 = this;

          if (style === void 0) {
            style = 0;
          }

          if (moveStyle === void 0) {
            moveStyle = 0;
          }

          if (showTime === void 0) {
            showTime = 4;
          }

          if (endPos === void 0) {
            endPos = v3(0, 400, 0);
          }

          if (call === void 0) {
            call = null;
          }

          if (onShowCall === void 0) {
            onShowCall = null;
          }

          this.node.active = true;
          var tip = this.tips[style];
          this.lab_tip = tip.getComponentInChildren(Label);

          if (!this.isShow) {
            this.setMaskActive(true);
            this.isShow = true;
            tip.active = true;
            onShowCall == null ? void 0 : onShowCall();
            if (str != "" && this.lab_tip) this.lab_tip.string = str;

            if (style == 0) {
              tip.getComponentInChildren(RichText).string = str;
            }

            if (moveStyle == 1) {
              tip.position = v3(-1200, endPos.y, 0);
              tween(tip).to(0.3, {
                position: endPos
              }, {
                easing: "backOut"
              }).start();
            }

            this.scheduleOnce(function () {
              _this4.isShow = false;
              tip.active = false;

              _this4.setMaskActive(false);

              call == null ? void 0 : call();
            }, showTime);
            return [tip, true];
          } else {
            return [tip, false];
          }
        };

        _proto.hideNomalTip = function hideNomalTip() {
          this.isShow = false;
          this.tips.forEach(function (child) {
            child.active = false;
          });
          this.setMaskActive(false);
          this.tips[0].active = false;
        };

        _proto.hideGuideTip = function hideGuideTip() {
          var tip = this.tips[0];
          tip.active = false;
          this.setMaskActive(false);
          if (this.guideTip) this.unschedule(this.guideTip);
        };

        _proto.clearschedule = function clearschedule() {
          this.hideNomalTip();
          this.unscheduleAllCallbacks();
        };

        _proto.showTips = function showTips() {
          var _this5 = this;

          var n = TimeTools.getCurTime();

          var _loop = function _loop() {
            var element = _this5.dailogList[index];

            if (!element.isShow && element.condition() && element.targetTime - n <= 0) {
              //展示成功
              _this5.scheduleOnce(function () {
                var showsc = false;

                if (element.style == 7) {
                  var tip = _this5.tips[7];
                  tip.getComponentInChildren(Sprite).spriteFrame = _this5.unlockSprites[Number.parseInt(element.desStr[1])];
                  showsc = _this5.showNomalTip(element.desStr[0], element.style, 1, 4, v3(0, 400, 0), null, element.onShowCall)[1];
                } else if (element.style == 1) {
                  showsc = _this5.showNomalTip(element.desStr[0], element.style, 1, 3, v3(0, 400, 0), null, element.onShowCall)[1];
                } else if (element.style == 2) {
                  showsc = _this5.showNomalTip("警告！", element.style, 1, 4, v3(0, 400, 0), null, element.onShowCall)[1];
                  var _tip = _this5.tips[element.style];
                  _tip.getChildByPath("Npc/name").getComponent(LabelEx).orgVlaue = element.desStr[0];
                  Utils.urlToSpriteFrame(element.desStr[1], function (res) {
                    _tip.getChildByPath("Npc/head/npc").getComponent(Sprite).spriteFrame = res;
                  });
                } else if (element.style == 3) {
                  showsc = _this5.showNomalTip("提示！", element.style, 1, 4, v3(0, 400, 0), null, element.onShowCall)[1];
                  var _tip2 = _this5.tips[element.style];
                  _tip2.getChildByPath("Npc/name").getComponent(LabelEx).orgVlaue = element.desStr[0];
                  Utils.urlToSpriteFrame(element.desStr[1], function (res) {
                    _tip2.getChildByPath("Npc/head/npc").getComponent(Sprite).spriteFrame = res;
                  });
                } else if (element.style == 6) {
                  showsc = _this5.showNomalTip("躺赢!", element.style, 1, 4, v3(0, 400, 0), null, element.onShowCall)[1];
                  var _tip3 = _this5.tips[element.style];

                  var tipinfo = _tip3.getComponent(TipInfo);

                  Utils.urlToSpriteFrame(element.desStr[3], function (res) {
                    tipinfo.head.spriteFrame = res;
                  });
                  tipinfo.labeName.orgVlaue = element.desStr[2];
                  tipinfo.tipsLab[1].string = element.desStr[1];
                }

                element.isShow = showsc;
              }, element.delay);

              return {
                v: element
              };
            }
          };

          for (var index = 0; index < this.dailogList.length; index++) {
            var _ret = _loop();

            if (typeof _ret === "object") return _ret.v;
          }

          return null;
        } //取消全部订阅
        ;

        _proto.cancelAllSubscribeTip = function cancelAllSubscribeTip() {
          this.dailogList.slice(0, this.dailogList.length);
        } //取消订阅
        ;

        _proto.cancelSubscribeTip = function cancelSubscribeTip(id) {
          this.dailogList = this.dailogList.filter(function (item) {
            return item.id != id;
          });
        } //订阅提示
        ;

        _proto.subscribeTip = function subscribeTip(des, targetTime, style, condition, showLv, onShowCall) {
          if (onShowCall === void 0) {
            onShowCall = null;
          }

          this.node.active = true;
          var d = new Dailog();
          d.desStr = des;
          d.isShow = false;
          d.targetTime = targetTime;
          d.id = Utils.guid();
          d.showLv = showLv;
          d.style = style;
          d.condition = condition;
          d.onShowCall = onShowCall;
          this.dailogList.push(d);
          this.dailogList.sort(function (a, b) {
            return a.showLv - b.showLv;
          });
          return d.id;
        }
        /**
         * @description: 显示连击提示
         * @param {number} cnt 连击数
         * @param {number} hurt 额外伤害数
         * @return {*}
         */
        ;

        _proto.doubleHiTip = function doubleHiTip(cnt, hurt) {
          var tip = this.tips[9];

          if (!tip.active) {
            tip.active = true;
            var labs = tip.getComponentsInChildren(Label);
            labs[2].string = cnt.toString();
            labs[3].string = hurt.toFixed(1);
            this.scheduleOnce(function () {
              tip.active = false;
            }, 2.73);
          }
        } // 新手回到家后显示提示
        ;

        _proto.showNewbieGoBackHomeTips = function showNewbieGoBackHomeTips(str, minShowTime, maxShowTime, pos) {
          var _this6 = this;

          if (minShowTime === void 0) {
            minShowTime = 3;
          }

          if (maxShowTime === void 0) {
            maxShowTime = 5;
          }

          if (pos === void 0) {
            pos = v3(0, 400, 0);
          }

          this.hideNewbieGobackHomeTips();
          var tip = this.newBieGobackHomeTips; // 设置内容

          var richText = tip.getComponentInChildren(RichText);
          richText.string = "";
          richText.string = str; // 等待一段时间后关注mask点击事件

          this.scheduleOnce(function () {
            _this6.setMaskActive(true);

            _this6.mask.on(Input.EventType.TOUCH_START, _this6.onTouchMaskStartWhennewBieGobackHomeTipsActive, _this6);

            _this6.mask.on(Input.EventType.TOUCH_END, _this6.onTouchMaskEndWhennewBieGobackHomeTipsActive, _this6);
          }, minShowTime); // 设置位置

          tip.position = pos; // 显示

          tip.active = true; // 等待一段时间后，如果还没隐藏，则强制隐藏。

          this.scheduleOnce(this.hideNewbieGobackHomeTips, maxShowTime);
          return tip;
        };

        _proto.hideNewbieGobackHomeTips = function hideNewbieGobackHomeTips() {
          var tip = this.newBieGobackHomeTips;

          if (tip.active) {
            // 隐藏
            tip.active = false;
            this.setMaskActive(false);
          }
        };

        _proto.onTouchMaskStartWhennewBieGobackHomeTipsActive = function onTouchMaskStartWhennewBieGobackHomeTipsActive(eventTouch) {
          this.mask.off(Input.EventType.TOUCH_START, this.onTouchMaskStartWhennewBieGobackHomeTipsActive, this);
          eventTouch.preventSwallow = true;
          this.triggerManagerTouchStart(eventTouch);
        };

        _proto.onTouchMaskEndWhennewBieGobackHomeTipsActive = function onTouchMaskEndWhennewBieGobackHomeTipsActive(eventTouch) {
          this.mask.off(Input.EventType.TOUCH_END, this.onTouchMaskEndWhennewBieGobackHomeTipsActive, this);
          eventTouch.preventSwallow = true;
          this.hideNewbieGobackHomeTips();
        };

        _proto.triggerManagerTouchStart = function triggerManagerTouchStart(eventTouch) {
          var homeManager = HomeManager.getInstance();

          if (homeManager != null) {
            homeManager.triggerTouchStart(eventTouch);
          } else {
            var gameManager = GameManager.getInstance();

            if (gameManager != null) {
              gameManager.triggerTouchStart(eventTouch);
            }
          }
        };

        _proto.setMaskActive = function setMaskActive(isActive) {
          // 当要隐藏mask时，如果新手指引此时是激活的，则不可隐藏mask。
          var ret = isActive || !this.newBieGobackHomeTips.active;

          if (ret) {
            this.mask.active = isActive;
          }

          return ret;
        };

        _createClass(Dailog_tip, [{
          key: "newBieGobackHomeTips",
          get: function get() {
            var tipIndex = 10;
            var tip = this.tips[tipIndex];
            return tip;
          }
        }]);

        return Dailog_tip;
      }(Component), (_descriptor2 = _applyDecoratedDescriptor(_class5.prototype, "tips", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Array();
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "unlockSprites", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Array();
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "mask", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class5.prototype, "dailogList", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Array();
        }
      })), _class5)) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DataManager.ts", ['cc', './GameResponces.ts', './PlayerData.ts', './TimeTools.ts', './Panel_Main.ts', './UIManager.ts', './CfgData.ts', './TimeData.ts', './GameCfg.ts', './GuideData.ts'], function (exports) {
  'use strict';

  var cclegacy, _decorator, sys, GameResponces, PlayerData, TimeTools, Panel_Main, UIManager, CfgData, TimeData, GameCfg, GuideData;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
    }, function (module) {
      GameResponces = module.GameResponces;
    }, function (module) {
      PlayerData = module.PlayerData;
    }, function (module) {
      TimeTools = module.TimeTools;
    }, function (module) {
      Panel_Main = module.Panel_Main;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      CfgData = module.CfgData;
    }, function (module) {
      TimeData = module.TimeData;
    }, function (module) {
      GameCfg = module.GameCfg;
    }, function (module) {
      GuideData = module.GuideData;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "82d74lncV5FXKwF6t5nDIZ/", "DataManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DataManager = exports('DataManager', (_dec = ccclass('DataManager'), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function DataManager() {
          this.playerData = void 0;
          this.timeDate = void 0;
          this.guideData = void 0;
        }

        DataManager.getInstance = function getInstance() {
          if (!this._instance) {
            this._instance = new DataManager();
          }

          return this._instance;
        };

        var _proto = DataManager.prototype;

        _proto.init = function init() {
          try {
            var str = sys.localStorage.getItem("PlayerData");

            if (str) {
              this.playerData = JSON.parse(str);

              if (!this.playerData) {
                this.playerInit();
              }
            } else {
              this.playerInit();
            }

            var str2 = sys.localStorage.getItem("TimeData");

            if (str2) {
              this.timeDate = JSON.parse(str2);

              if (!this.timeDate) {
                this.timeDataInit();
              }
            } else {
              this.timeDataInit();
            }

            var str3 = sys.localStorage.getItem("GuideData");

            if (str3) {
              this.guideData = JSON.parse(str3);

              if (!this.guideData) {
                this.guideInit();
              }
            } else {
              this.guideInit();
            }

            console.log("playerDate:" + JSON.stringify(this.playerData));
          } catch (error) {
            console.error(error);
          }

          this.fixUnlockLogic();
        };

        _proto.timeDataInit = function timeDataInit() {
          this.timeDate = new TimeData();
          this.timeDate.salefram = this.timeDate.offLinefram = TimeTools.getCurTime();
          this.saveTimeData();
        };

        _proto.guideInit = function guideInit() {
          this.guideData = new GuideData();
          this.saveGuideData();
        };

        _proto.playerInit = function playerInit() {
          var _this = this;

          this.playerData = new PlayerData();
          var homecfg = CfgData.getInstance().getHomeCfg();
          this.playerData.lastBuildAnimalfram = TimeTools.getCurTime();
          this.playerData.coin = homecfg.player[0].BaseCoin;
          this.playerData.fencHp = homecfg.fence[0].HP;
          this.playerData.playerName = GameCfg.BornName;
          this.playerData.ShareAddAnimal = GameCfg.ShareAddAnimal;
          this.playerData.ShareChange = GameCfg.ShareChange;
          this.playerData.ShareRefresh = GameCfg.ShareRefresh;
          this.playerData.day = TimeTools.getCurTime(); //初始化动物类型 数量

          var strs = homecfg.player[0].BaseAnimal.split(",");
          strs.forEach(function (element) {
            var animal = element.split('_');
            var animalType = Number.parseInt(animal[0]);
            var animalCnt = Number.parseInt(animal[1]);

            _this.playerData.unlockAnimals.push(animalType);

            for (var index = 0; index < animalCnt; index++) {
              _this.playerData._listAnimals.push(animalType);
            }
          });
          this.savePlayData();
        };

        _proto.guidIsOver = function guidIsOver() {
          return this.guideData.storeyIndex >= 10;
        };

        _proto.fixUnlockLogic = function fixUnlockLogic() {
          var homecfg = CfgData.getInstance().getHomeCfg();
          var playerDate = this.playerData;

          for (var index = 0; index < playerDate.homeLv; index++) {
            var lv = index;
            var houseItem = homecfg.house[lv];

            if (houseItem.Unlock != "0_0") {
              var strs = houseItem.Unlock.split('_');
              var unlockType = Number.parseInt(strs[0]);
              var box = Number.parseInt(strs[1]);

              switch (unlockType) {
                //动物
                case 1:
                  if (playerDate.unlockAnimals.indexOf(box) < 0) {
                    playerDate.unlockAnimals.push(box);
                    console.log("解锁动物：" + box);
                  }

                  break;
                //宝箱

                case 2:
                  playerDate.treasureBox = box;
                  console.log("解锁宝箱：" + box);
                  break;
                //地图

                case 3:
                  playerDate.mapSize = homecfg.map[box].LatticeCount;
                  console.log("解锁地图：" + box);
                  break;
                //地图

                case 4:
                  playerDate.friendHelp = 1;
                  console.log("解锁求助好友：" + box);
                  break;
              }
            }
          }
        };

        _proto.updateCoin = function updateCoin(n) {
          var end = this.playerData.coin + n;
          var start = this.playerData.coin;

          if (n > 0) {
            if (UIManager.getInstance()) {
              var panel_main = UIManager.getInstance().getPanel(Panel_Main);

              if (panel_main.node.active) {
                panel_main.flyCoin();

                GameResponces._event.emit(GameResponces.updateCion, start, end, 2);
              }
            }
          } else {
            GameResponces._event.emit(GameResponces.updateCion, start, end, 0);
          }

          this.playerData.coin += n;

          GameResponces._event.emit(GameResponces.cionChange);

          DataManager.getInstance().savePlayData();
        };

        _proto.deleDate = function deleDate() {
          this.timeDataInit();
          this.guideInit();
          this.playerInit();
          console.log("删除成功");
        };

        _proto.savePlayData = function savePlayData() {
          var playhome = JSON.stringify(this.playerData);
          sys.localStorage.setItem("PlayerData", playhome);
        };

        _proto.saveTimeData = function saveTimeData() {
          var timedata = JSON.stringify(this.timeDate);
          sys.localStorage.setItem("TimeData", timedata);
        };

        _proto.saveGuideData = function saveGuideData() {
          var guide = JSON.stringify(this.guideData);
          sys.localStorage.setItem("GuideData", guide);
        };

        return DataManager;
      }(), _class2._instance = void 0, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/debug-view-runtime-control.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Color, Canvas, UITransform, instantiate, Label, RichText, Toggle, Button, director, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Color = module.Color;
      Canvas = module.Canvas;
      UITransform = module.UITransform;
      instantiate = module.instantiate;
      Label = module.Label;
      RichText = module.RichText;
      Toggle = module.Toggle;
      Button = module.Button;
      director = module.director;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "b2bd1+njXxJxaFY3ymm06WU", "debug-view-runtime-control", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DebugViewRuntimeControl = exports('DebugViewRuntimeControl', (_dec = ccclass('internal.DebugViewRuntimeControl'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DebugViewRuntimeControl, _Component);

        function DebugViewRuntimeControl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "compositeModeToggle", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "singleModeToggle", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "EnableAllCompositeModeButton", _descriptor3, _assertThisInitialized(_this));

          _this._single = 0;
          _this.strSingle = ['No Single Debug', 'Vertex Color', 'Vertex Normal', 'Vertex Tangent', 'World Position', 'Vertex Mirror', 'Face Side', 'UV0', 'UV1', 'UV Lightmap', 'Project Depth', 'Linear Depth', 'Fragment Normal', 'Fragment Tangent', 'Fragment Binormal', 'Base Color', 'Diffuse Color', 'Specular Color', 'Transparency', 'Metallic', 'Roughness', 'Specular Intensity', 'IOR', 'Direct Diffuse', 'Direct Specular', 'Direct All', 'Env Diffuse', 'Env Specular', 'Env All', 'Emissive', 'Light Map', 'Shadow', 'AO', 'Fresnel', 'Direct Transmit Diffuse', 'Direct Transmit Specular', 'Env Transmit Diffuse', 'Env Transmit Specular', 'Transmit All', 'Direct TRT', 'Env TRT', 'TRT All', 'Fog'];
          _this.strComposite = ['Direct Diffuse', 'Direct Specular', 'Env Diffuse', 'Env Specular', 'Emissive', 'Light Map', 'Shadow', 'AO', 'Normal Map', 'Fog', 'Tone Mapping', 'Gamma Correction', 'Fresnel', 'Transmit Diffuse', 'Transmit Specular', 'TRT', 'TT'];
          _this.strMisc = ['CSM Layer Coloration', 'Lighting With Albedo'];
          _this.compositeModeToggleList = [];
          _this.singleModeToggleList = [];
          _this.miscModeToggleList = [];
          _this.textComponentList = [];
          _this.labelComponentList = [];
          _this.textContentList = [];
          _this.hideButtonLabel = void 0;
          _this._currentColorIndex = 0;
          _this.strColor = ['<color=#ffffff>', '<color=#000000>', '<color=#ff0000>', '<color=#00ff00>', '<color=#0000ff>'];
          _this.color = [Color.WHITE, Color.BLACK, Color.RED, Color.GREEN, Color.BLUE];
          return _this;
        }

        var _proto = DebugViewRuntimeControl.prototype;

        _proto.start = function start() {
          // get canvas resolution
          var canvas = this.node.parent.getComponent(Canvas);

          if (!canvas) {
            console.error('debug-view-runtime-control should be child of Canvas');
            return;
          }

          var uiTransform = this.node.parent.getComponent(UITransform);
          var halfScreenWidth = uiTransform.width * 0.5;
          var halfScreenHeight = uiTransform.height * 0.5;
          var x = -halfScreenWidth + halfScreenWidth * 0.1,
              y = halfScreenHeight - halfScreenHeight * 0.1;
          var width = 200,
              height = 20; // new nodes

          var miscNode = this.node.getChildByName('MiscMode');
          var buttonNode = instantiate(miscNode);
          buttonNode.parent = this.node;
          buttonNode.name = 'Buttons';
          var titleNode = instantiate(miscNode);
          titleNode.parent = this.node;
          titleNode.name = 'Titles'; // title

          for (var i = 0; i < 2; i++) {
            var newLabel = instantiate(this.EnableAllCompositeModeButton.getChildByName('Label'));
            newLabel.setPosition(x + (i > 0 ? 50 + width * 2 : 150), y, 0.0);
            newLabel.setScale(0.75, 0.75, 0.75);
            newLabel.parent = titleNode;

            var _labelComponent = newLabel.getComponent(Label);

            _labelComponent.string = i ? '----------Composite Mode----------' : '----------Single Mode----------';
            _labelComponent.color = Color.WHITE;
            _labelComponent.overflow = 0;
            this.labelComponentList[this.labelComponentList.length] = _labelComponent;
          }

          y -= height; // single

          var currentRow = 0;

          for (var _i = 0; _i < this.strSingle.length; _i++, currentRow++) {
            if (_i === this.strSingle.length >> 1) {
              x += width;
              currentRow = 0;
            }

            var newNode = _i ? instantiate(this.singleModeToggle) : this.singleModeToggle;
            newNode.setPosition(x, y - height * currentRow, 0.0);
            newNode.setScale(0.5, 0.5, 0.5);
            newNode.parent = this.singleModeToggle.parent;
            var textComponent = newNode.getComponentInChildren(RichText);
            textComponent.string = this.strSingle[_i];
            this.textComponentList[this.textComponentList.length] = textComponent;
            this.textContentList[this.textContentList.length] = textComponent.string;
            newNode.on(Toggle.EventType.TOGGLE, this.toggleSingleMode, this);
            this.singleModeToggleList[_i] = newNode;
          }

          x += width; // buttons

          this.EnableAllCompositeModeButton.setPosition(x + 15, y, 0.0);
          this.EnableAllCompositeModeButton.setScale(0.5, 0.5, 0.5);
          this.EnableAllCompositeModeButton.on(Button.EventType.CLICK, this.enableAllCompositeMode, this);
          this.EnableAllCompositeModeButton.parent = buttonNode;
          var labelComponent = this.EnableAllCompositeModeButton.getComponentInChildren(Label);
          this.labelComponentList[this.labelComponentList.length] = labelComponent;
          var changeColorButton = instantiate(this.EnableAllCompositeModeButton);
          changeColorButton.setPosition(x + 90, y, 0.0);
          changeColorButton.setScale(0.5, 0.5, 0.5);
          changeColorButton.on(Button.EventType.CLICK, this.changeTextColor, this);
          changeColorButton.parent = buttonNode;
          labelComponent = changeColorButton.getComponentInChildren(Label);
          labelComponent.string = 'TextColor';
          this.labelComponentList[this.labelComponentList.length] = labelComponent;
          var HideButton = instantiate(this.EnableAllCompositeModeButton);
          HideButton.setPosition(x + 200, y, 0.0);
          HideButton.setScale(0.5, 0.5, 0.5);
          HideButton.on(Button.EventType.CLICK, this.hideUI, this);
          HideButton.parent = this.node.parent;
          labelComponent = HideButton.getComponentInChildren(Label);
          labelComponent.string = 'Hide UI';
          this.labelComponentList[this.labelComponentList.length] = labelComponent;
          this.hideButtonLabel = labelComponent; // misc

          y -= 40;

          for (var _i2 = 0; _i2 < this.strMisc.length; _i2++) {
            var _newNode = instantiate(this.compositeModeToggle);

            _newNode.setPosition(x, y - height * _i2, 0.0);

            _newNode.setScale(0.5, 0.5, 0.5);

            _newNode.parent = miscNode;

            var _textComponent = _newNode.getComponentInChildren(RichText);

            _textComponent.string = this.strMisc[_i2];
            this.textComponentList[this.textComponentList.length] = _textComponent;
            this.textContentList[this.textContentList.length] = _textComponent.string;

            var toggleComponent = _newNode.getComponent(Toggle);

            toggleComponent.isChecked = _i2 ? true : false;

            _newNode.on(Toggle.EventType.TOGGLE, _i2 ? this.toggleLightingWithAlbedo : this.toggleCSMColoration, this);

            this.miscModeToggleList[_i2] = _newNode;
          } // composite


          y -= 150;

          for (var _i3 = 0; _i3 < this.strComposite.length; _i3++) {
            var _newNode2 = _i3 ? instantiate(this.compositeModeToggle) : this.compositeModeToggle;

            _newNode2.setPosition(x, y - height * _i3, 0.0);

            _newNode2.setScale(0.5, 0.5, 0.5);

            _newNode2.parent = this.compositeModeToggle.parent;

            var _textComponent2 = _newNode2.getComponentInChildren(RichText);

            _textComponent2.string = this.strComposite[_i3];
            this.textComponentList[this.textComponentList.length] = _textComponent2;
            this.textContentList[this.textContentList.length] = _textComponent2.string;

            _newNode2.on(Toggle.EventType.TOGGLE, this.toggleCompositeMode, this);

            this.compositeModeToggleList[_i3] = _newNode2;
          }
        };

        _proto.isTextMatched = function isTextMatched(textUI, textDescription) {
          var tempText = new String(textUI);
          var findIndex = tempText.search('>');

          if (findIndex === -1) {
            return textUI === textDescription;
          } else {
            tempText = tempText.substr(findIndex + 1);
            tempText = tempText.substr(0, tempText.search('<'));
            return tempText === textDescription;
          }
        };

        _proto.toggleSingleMode = function toggleSingleMode(toggle) {
          var debugView = director.root.debugView;
          var textComponent = toggle.getComponentInChildren(RichText);

          for (var i = 0; i < this.strSingle.length; i++) {
            if (this.isTextMatched(textComponent.string, this.strSingle[i])) {
              debugView.singleMode = i;
            }
          }
        };

        _proto.toggleCompositeMode = function toggleCompositeMode(toggle) {
          var debugView = director.root.debugView;
          var textComponent = toggle.getComponentInChildren(RichText);

          for (var i = 0; i < this.strComposite.length; i++) {
            if (this.isTextMatched(textComponent.string, this.strComposite[i])) {
              debugView.enableCompositeMode(i, toggle.isChecked);
            }
          }
        };

        _proto.toggleLightingWithAlbedo = function toggleLightingWithAlbedo(toggle) {
          var debugView = director.root.debugView;
          debugView.lightingWithAlbedo = toggle.isChecked;
        };

        _proto.toggleCSMColoration = function toggleCSMColoration(toggle) {
          var debugView = director.root.debugView;
          debugView.csmLayerColoration = toggle.isChecked;
        };

        _proto.enableAllCompositeMode = function enableAllCompositeMode(button) {
          var debugView = director.root.debugView;
          debugView.enableAllCompositeMode(true);

          for (var i = 0; i < this.compositeModeToggleList.length; i++) {
            var _toggleComponent = this.compositeModeToggleList[i].getComponent(Toggle);

            _toggleComponent.isChecked = true;
          }

          var toggleComponent = this.miscModeToggleList[0].getComponent(Toggle);
          toggleComponent.isChecked = false;
          debugView.csmLayerColoration = false;
          toggleComponent = this.miscModeToggleList[1].getComponent(Toggle);
          toggleComponent.isChecked = true;
          debugView.lightingWithAlbedo = true;
        };

        _proto.hideUI = function hideUI(button) {
          var titleNode = this.node.getChildByName('Titles');
          var activeValue = !titleNode.active;
          this.singleModeToggleList[0].parent.active = activeValue;
          this.miscModeToggleList[0].parent.active = activeValue;
          this.compositeModeToggleList[0].parent.active = activeValue;
          this.EnableAllCompositeModeButton.parent.active = activeValue;
          titleNode.active = activeValue;
          this.hideButtonLabel.string = activeValue ? 'Hide UI' : 'Show UI';
        };

        _proto.changeTextColor = function changeTextColor(button) {
          this._currentColorIndex++;

          if (this._currentColorIndex >= this.strColor.length) {
            this._currentColorIndex = 0;
          }

          for (var i = 0; i < this.textComponentList.length; i++) {
            this.textComponentList[i].string = this.strColor[this._currentColorIndex] + this.textContentList[i] + '</color>';
          }

          for (var _i4 = 0; _i4 < this.labelComponentList.length; _i4++) {
            this.labelComponentList[_i4].color = this.color[this._currentColorIndex];
          }
        };

        _proto.onLoad = function onLoad() {};

        _proto.update = function update(deltaTime) {};

        return DebugViewRuntimeControl;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "compositeModeToggle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "singleModeToggle", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "EnableAllCompositeModeButton", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DifficultyManager.ts", ['cc', './Utils.ts', './GameManager.ts', './TimeTools.ts', './DataManager.ts', './CfgData.ts', './GuideCfg.ts'], function (exports) {
  'use strict';

  var cclegacy, _decorator, randomRangeInt, Utils, GameFinishState, TimeTools, DataManager, CfgData, GuideCfg;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      randomRangeInt = module.randomRangeInt;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      GameFinishState = module.GameFinishState;
    }, function (module) {
      TimeTools = module.TimeTools;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      CfgData = module.CfgData;
    }, function (module) {
      GuideCfg = module.GuideCfg;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "7ea7a60IitPRKoDlIpL5hg8", "DifficultyManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DifficultyManager = exports('DifficultyManager', (_dec = ccclass('DifficultyManager'), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function DifficultyManager() {}

        DifficultyManager.init = function init() {
          if (!GuideCfg.disableDifficult) {
            var playerDate = DataManager.getInstance().playerData;
            var timeData = DataManager.getInstance().timeDate;
            var oftime = TimeTools.getCurTime() - timeData.offLinefram;
            console.log("难度计算的离线时间：" + oftime);

            if (oftime >= 3 * 60 * 60 * 1000) {
              playerDate.difficultyLv = this.difficultyLv = -3;
              DataManager.getInstance().savePlayData();
            } else {
              this.difficultyLv = playerDate.difficultyLv;
            }

            this.isInit = true;
          }
        };

        DifficultyManager.onGameFinish = function onGameFinish(gameState) {
          if (!this.isInit) return;
          var playerdata = DataManager.getInstance().playerData;
          var homeCfg = CfgData.getInstance().getHomeCfg(); //如果游戏次数为8以上，判断一下金币是否够升级房子，提升难度等级不一样

          var needPrice = homeCfg.house[playerdata.homeLv].LevelUpPrice; //新手引导完成后在走难度等级调整逻辑

          if (DataManager.getInstance().guidIsOver()) {
            if (gameState == GameFinishState.Win) {
              if (!Utils.isEmpty(playerdata.gameCWins)) playerdata.gameCWins++;else playerdata.gameCWins = 0;

              if (playerdata.coin >= needPrice) {
                this.difficultyLv += playerdata.gameCWins + 1;
              } else {
                this.difficultyLv += playerdata.gameCWins;
              }
            } else if (gameState == GameFinishState.Lose || gameState == GameFinishState.RunAway) {
              playerdata.gameCWins = 0;
              if (playerdata.coin >= needPrice) ;else {
                if (this.difficultyLv > 1) {
                  this.difficultyLv -= 2;
                } else {
                  this.difficultyLv -= 1;
                }
              }
            }

            playerdata.gameTimes++;
          }

          this.difficultyLv = Utils.limitNumber(this.difficultyLv, -6, 8);
          playerdata.difficultyLv = this.difficultyLv;
          DataManager.getInstance().savePlayData();
          console.log("连赢次数：" + playerdata.gameCWins + "------难度等级：" + this.difficultyLv);
        };

        DifficultyManager.onHomeLvUp = function onHomeLvUp() {
          if (this.difficultyLv > -4 && this.isInit) this.difficultyLv = -4;
        };

        DifficultyManager.onReflashNpc = function onReflashNpc() {
          if (!this.isInit) return;
          this.difficultyLv -= 3;
          this.difficultyLv = Utils.limitNumber(this.difficultyLv, -6, 8);
        };

        DifficultyManager.flashAniamlByDiffculty = function flashAniamlByDiffculty(animalList) {
          //改变动物连续类型
          if (this.difficultyLv == -2) {
            animalList = this.changeContinuousAniaml(1, 6, animalList);
          }

          if (this.difficultyLv == -3) {
            animalList = this.changeContinuousAniaml(2, 6, animalList);
          }

          if (this.difficultyLv == -4) {
            animalList = this.changeContinuousAniaml(3, 7, animalList);
          }

          if (this.difficultyLv == -5) {
            animalList = this.changeContinuousAniaml(3, 8, animalList);
          }

          if (this.difficultyLv == -6) {
            animalList = this.changeContinuousAniaml(3, 9, animalList);
          } //0级不做任何处理
          //排除连续动物类型


          if (this.difficultyLv == 1) {
            animalList = this.excludeContinuousAniaml(6, animalList);
          }

          if (this.difficultyLv >= 2) {
            animalList = this.excludeContinuousAniaml(5, animalList);
          }

          return animalList;
        } //调整动物队列的排列，使它有多个连续的动物类型段，PCnt:多少个段落，CCnt:多少个相同的动物
        ;

        DifficultyManager.changeContinuousAniaml = function changeContinuousAniaml(PCnt, CCnt, animalList) {
          //洗牌
          var atypes = Utils.KnuthDurstenfeldShuffle(this.animalTypes); //相同动物队列

          var aa = new Array();

          for (var index = 0; index < PCnt; index++) {
            var animalType = atypes[index];
            aa.push([]);

            for (var y = 0; y < CCnt; y++) {
              aa[index].push(animalType);
            }
          }

          animalList.splice(0, PCnt * CCnt);
          animalList = this.insert2DArray(animalList, aa);
          return animalList;
        };

        DifficultyManager.insertArray = function insertArray(original, insert, index) {
          if (index > original.length) {
            index = original.length - 1;
          }

          var result = [].concat(original.slice(0, index), insert, original.slice(index));
          return result;
        };

        DifficultyManager.insert2DArray = function insert2DArray(org, insert) {
          var lastIndex = 0;

          for (var index = 0; index < insert.length; index++) {
            var child = insert[index];
            var randomIndex = randomRangeInt(lastIndex, org.length);
            var insertIndex = lastIndex + randomIndex;
            org = this.insertArray(org, child, insertIndex);
            lastIndex = insertIndex;
          }

          return org;
        } //去掉障碍物
        ;

        DifficultyManager.changeObsCnt = function changeObsCnt(cnt) {
          if (this.difficultyLv <= -2 && this.isInit) {
            if (cnt[0] > 0) {
              cnt[0] = 0;
              return cnt;
            } else {
              if (cnt[1] > 0) {
                cnt[1] = 0;
                return cnt;
              } else {
                cnt[2] = 0;
                return cnt;
              }
            }
          } else {
            return cnt;
          }
        } //改变宝箱权重
        ;

        DifficultyManager.changeBoxWeigth = function changeBoxWeigth() {
          var weight = "";

          if (this.difficultyLv <= -1 && this.isInit) {
            weight = "0_6_1";
          }

          return weight;
        } //改变草的位置
        ;

        DifficultyManager.changeGrassPos = function changeGrassPos(npc, homeCfg) {
          var pos = "";

          if (this.difficultyLv >= 3 && this.isInit) {
            pos = homeCfg.npc[npc.lv].GrassHard;
          } else {
            pos = homeCfg.npc[npc.lv].GrassPosition;
          }

          return pos;
        } //改变石头的位置
        ;

        DifficultyManager.changeStonePos = function changeStonePos(npc, homeCfg) {
          var pos = "";

          if (this.difficultyLv >= 3 && this.isInit) {
            pos = homeCfg.npc[npc.lv].StonePositionHard;
          } else {
            pos = homeCfg.npc[npc.lv].StonePosition;
          }

          return pos;
        } //改变栅栏的位置
        ;

        DifficultyManager.changeFenchPos = function changeFenchPos(fenchType, npc, homeCfg) {
          var pos = "";

          if (this.difficultyLv >= 4 && this.isInit) {
            if (fenchType == 0) pos = homeCfg.npc[npc.lv].FencdHHard;else pos = homeCfg.npc[npc.lv].FenceVHard;
          } else {
            if (fenchType == 0) pos = homeCfg.npc[npc.lv].FenceH;else pos = homeCfg.npc[npc.lv].FenceV;
          }

          return pos;
        } //去掉所有的连续动物，在不改变总数的情况下。
        ;

        DifficultyManager.excludeContinuousAniaml = function excludeContinuousAniaml(CCnt, animalList) {
          var indexList = [];
          var numberTemp = animalList[0];

          var _loop = function _loop() {
            var child = animalList[index];

            if (numberTemp == child) {
              indexList.push(index);
            } else {
              if (indexList.length >= CCnt) {
                var allAnimalTypes = [0, 1, 2];
                var insertIndex = Math.floor(indexList.length / 2); //替换一下动物类型

                var animalType = animalList[indexList[insertIndex]];
                var now = allAnimalTypes.filter(function (a) {
                  return a != animalType;
                });
                animalList[indexList[insertIndex]] = now[randomRangeInt(0, now.length)];
              }

              numberTemp = child;
              indexList = [];
            }
          };

          for (var index = 0; index < animalList.length; index++) {
            _loop();
          }

          return animalList;
        } //改变npc等级和npc栅栏等级
        ;

        DifficultyManager.changeNpcLv = function changeNpcLv(lv, fenceLv) {
          var result;

          if (!this.isInit) {
            return [lv, fenceLv];
          }

          if (this.difficultyLv >= 5) {
            lv += Math.random() > 0.5 ? 0 : 1;
          }

          if (this.difficultyLv >= 6) {
            lv += Math.random() > 0.9 ? 0 : 1;
            fenceLv += Math.random() > 0 ? 0 : 1;
          }

          if (this.difficultyLv >= 7) {
            lv += Math.random() > 0.5 ? 0 : 1;
            fenceLv += Math.random() > 0.5 ? 0 : 1;
          }

          if (this.difficultyLv >= 8) {
            lv += Math.random() > 0.9 ? 0 : 1;
            fenceLv += Math.random() > 0.9 ? 0 : 1;
          }

          result = [lv, fenceLv];
          return result;
        };

        var _proto = DifficultyManager.prototype;

        _proto.splitArray = function splitArray(nums) {
          var _loop2 = function _loop2() {
            var cnt = 5;
            var listCnt = 3;
            var result = [];
            var i = 0;

            while (i < nums.length) {
              var j = i + 1;

              while (j < nums.length && nums[j] == nums[i]) {
                j++;
              }

              var temp = [];

              for (var k = i; k < j; k++) {
                temp.push(nums[k]);
              }

              result.push(temp);
              i = j;
            }

            var res = new Array(result.length);

            for (var _k = 0; _k < result.length; _k++) {
              var _temp = result[_k];
              var arr = new Array(_temp.length);

              for (var l = 0; l < _temp.length; l++) {
                arr[l] = _temp[l];
              }

              res[_k] = arr;
            }

            var index = 0;
            res.forEach(function (element) {
              if (element.length >= cnt) index++;
            });

            if (index >= listCnt) {
              console.log("简单");
              return {
                v: nums
              };
            } else {
              console.log("刷新队列");
            }
          };

          for (var index = 0; index < 100; index++) {
            var _ret = _loop2();

            if (typeof _ret === "object") return _ret.v;
          }
        };

        return DifficultyManager;
      }(), _class2.animalTypes = [0, 1, 2], _class2.difficultyLv = -3, _class2.isInit = false, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DrawSectorMesh.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Material, v3, Vec3, MeshRenderer, macro, gfx, utils, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Material = module.Material;
      v3 = module.v3;
      Vec3 = module.Vec3;
      MeshRenderer = module.MeshRenderer;
      macro = module.macro;
      gfx = module.gfx;
      utils = module.utils;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "82bfb8fUURJsrsdKqTQGg/G", "DrawSectorMesh", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DrawSectorMesh = exports('DrawSectorMesh', (_dec = ccclass('DrawSectorMesh'), _dec2 = property({
        type: Material
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DrawSectorMesh, _Component);

        function DrawSectorMesh() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "mat", _descriptor, _assertThisInitialized(_this));

          _this.radius = 3;
          _this.innerRadius = 0.01;
          _this.angledegree = 60;
          _this.model = void 0;
          return _this;
        }

        var _proto = DrawSectorMesh.prototype;

        _proto.start = function start() {
          // this.createMesh()
          this.node.setPosition(v3(0, 0.5, 0)); // this.node.setRotationFromEuler(v3(0, -this.angledegree, 0));
        };

        _proto.creatLine = function creatLine(o, d, degree) {
          if (!this.node.active) return;
          var start = v3(o);
          var end = v3(d);
          this.angledegree = 2;
          this.radius = Vec3.distance(start, end);
          var dir = start.subtract(end).normalize();
          this.node.setRotationFromEuler(0, 270 - degree, 0);

          if (!this.model) {
            this.createMesh();
          }
        };

        _proto.updateLine = function updateLine(dir) {
          this.node.lookAt(v3(dir).add(this.node.getWorldPosition()));
          this.node.setRotationFromEuler(0, this.node.getRotation().y - 90, 0);
        };

        _proto.updateRota = function updateRota(ang) {
          this.node.setWorldRotationFromEuler(ang.x, ang.y + 90, ang.z);
        };

        _proto.createMesh = function createMesh() {
          this.model = this.addComponent(MeshRenderer);
          var segments = Math.floor(this.angledegree / 4) + 1;
          var positions = []; // 组装顶点数据

          var vertices_count = segments * 2 + 2;
          var vertices = new Array(vertices_count);
          var angleRad = this.angledegree * macro.RAD;
          var angleCur = angleRad;
          var angledelta = angleRad / segments;

          for (var i = 0; i < vertices_count; i += 2) {
            var cosA = Math.cos(angleCur);
            var sinA = Math.sin(angleCur);
            vertices[i] = new Vec3(this.radius * cosA, 0, this.radius * sinA);
            vertices[i + 1] = new Vec3(this.innerRadius * cosA, 0, this.innerRadius * sinA);
            angleCur -= angledelta;
            positions.push(vertices[i].x);
            positions.push(vertices[i].y);
            positions.push(vertices[i].z);
            positions.push(vertices[i + 1].x);
            positions.push(vertices[i + 1].y);
            positions.push(vertices[i + 1].z);
          } // 组装三角形数据


          var indice_count = segments * 6;
          var indices = new Array(indice_count);

          for (var i = 0, vi = 0; i < indice_count; i += 6, vi += 2) {
            indices[i] = vi;
            indices[i + 1] = vi + 3;
            indices[i + 2] = vi + 1;
            indices[i + 3] = vi + 2;
            indices[i + 4] = vi + 3;
            indices[i + 5] = vi;
          } // 组装UV数据


          var uvs = [];

          for (var i = 0; i < vertices_count; i++) {
            var u = vertices[i].x / this.radius / 2 + 0.5;
            var v = vertices[i].z / this.radius / 2 + 0.5;
            uvs.push(u, v);
          }

          var primitiveMode = gfx.PrimitiveMode.TRIANGLE_FAN;
          var attributes = [{
            name: gfx.AttributeName.ATTR_NORMAL,
            format: gfx.Format.RGB32F
          }];
          var IGeometry = {
            positions: positions,
            indices: indices,
            uvs: uvs,
            primitiveMode: primitiveMode,
            attributes: attributes
          };
          var mesh = utils.createMesh(IGeometry);
          this.model.mesh = mesh;
          this.model.material = this.mat;
        };

        return DrawSectorMesh;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "mat", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DYIAuthorize.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseAuthorize.ts', './NetTools.ts', './UserInfo.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, sys, AuthorizUserInfo, BaseAuthorize, NetTools, UserInfo, NationalRanking, NoticeInfo, Province;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
    }, function (module) {
      AuthorizUserInfo = module.AuthorizUserInfo;
      BaseAuthorize = module.BaseAuthorize;
    }, function (module) {
      NetTools = module.NetTools;
    }, function (module) {
      UserInfo = module.UserInfo;
      NationalRanking = module.NationalRanking;
      NoticeInfo = module.NoticeInfo;
      Province = module.Province;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "9ad93u+x2pDkphMAJLIIRQ6", "DYIAuthorize", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DYIAuthorize = exports('DYIAuthorize', (_dec = ccclass('DYIAuthorize'), _dec(_class = /*#__PURE__*/function (_BaseAuthorize) {
        _inheritsLoose(DYIAuthorize, _BaseAuthorize);

        function DYIAuthorize() {
          return _BaseAuthorize.apply(this, arguments) || this;
        }

        var _proto = DYIAuthorize.prototype;

        _proto.Init = function Init() {
          this.token = sys.localStorage.getItem("token");
          this.location = sys.localStorage.getItem("province");
          this.city = sys.localStorage.getItem("city");
          this.userInfo = new UserInfo();
          this.nationalRanking = new NationalRanking();
          this.noticeInfo = new NoticeInfo();
          this.userInfo.provinceName = this.location;
        };

        _proto.onlySetAuthorize = function onlySetAuthorize(callBack) {
          var _this = this;

          this.authorizUserInfo = new AuthorizUserInfo();
          this.authorizUserInfo.avatarUrl = "";
          this.authorizUserInfo.nickName = "";
          tt.login({
            success: function success(res) {
              _this.code = res.code;
              console.log("登陆成功：" + res.code);

              _this.SetAuthorize(function (result) {
                if (result) {
                  _this.authorizUserInfo.nickName;
                  _this.authorizUserInfo.avatarUrl;
                  callBack(true);
                } else {
                  console.log("登陆授权失败！");
                  callBack(true);
                }
              });
            },
            fail: function fail(err) {
              console.log("登陆失败！！！");
              callBack(false);
            }
          });
        };

        _proto.Login = function Login(callBack) {
          var _this2 = this;

          this.GetServceInfo(function (res) {
            //关服
            if (!res) {
              //  GameTips.instance.showTips("服务器维护中，预计30分钟后开服。");
              return;
            }

            if (_this2.logined) {
              callBack == null ? void 0 : callBack();
              return;
            }

            if (_this2.token) {
              _this2.LoginToken(_this2.token, callBack);

              return;
            }

            tt.login({
              success: function success(res) {
                _this2.code = res.code;
                console.log("登陆成功：" + res.code);

                _this2.SetAuthorize(function (result) {
                  var nickName = "";
                  var avatarUrl = "";

                  if (result) {
                    nickName = _this2.authorizUserInfo.nickName;
                    avatarUrl = _this2.authorizUserInfo.avatarUrl;
                  } else {
                    console.log("登陆授权失败！");
                  } //正式用户0测试用户1


                  var isrelaseUsr = 0;
                  if (NetTools.debug) isrelaseUsr = 1;
                  NetTools.Post("cmd=dyLogin&code=" + _this2.code + "&nickName=" + nickName + "&avatarUrl=" + avatarUrl + "&environment=" + isrelaseUsr, function (responseContent) {
                    if (responseContent) {
                      //@ts-ignore
                      if (responseContent.errorCode == 0) {
                        //@ts-ignore
                        _this2.token = responseContent.token;
                        sys.localStorage.setItem("token", _this2.token);

                        _this2.AssembleUserInfo(responseContent); //to


                        callBack == null ? void 0 : callBack();
                      }
                    }
                  });
                });
              },
              fail: function fail(err) {
                console.log("登陆失败！！！");
                callBack == null ? void 0 : callBack();
              }
            });
          });
        };

        _proto.SetAuthorize = function SetAuthorize(callBack) {
          var _this3 = this;

          var options = {
            success: function success(obj) {
              _this3.authorizUserInfo = obj.userInfo;
              callBack(true);
            },
            withCredentials: true,
            fail: function fail(errMsg) {
              callBack(false);
            }
          };
          tt.getUserInfo(options);
        };

        _proto.LoginToken = function LoginToken(token, callBack) {
          var _this4 = this;

          NetTools.Post("cmd=login&token=" + token, function (responseContent) {
            if (responseContent) {
              if (responseContent.errorCode == 0) {
                _this4.AssembleUserInfo(responseContent);

                callBack == null ? void 0 : callBack();
              } else {
                _this4.token = null;

                _this4.Login(callBack);
              }
            }
          });
        };

        _proto.AssembleUserInfo = function AssembleUserInfo(responseContent) {
          this.userInfo = responseContent.userInfo;
          this.userInfo.provinceName = this.location;
          this.LoginTss = responseContent.nowTSS;
          this.ShareCfg = responseContent.shareCfg;
          this.logined = true;
        };

        _proto.GetLocation = function GetLocation(callBack) {
          if (!this.token && this.token != "") {
            callBack();
            return;
          }

          this.getLocation(callBack);
        };

        _proto.getLocation = function getLocation(callBack) {
          var _this5 = this;

          if (!this.token && this.token != "") {
            callBack == null ? void 0 : callBack();
            return;
          }

          tt.getLocation({
            type: 'wgs84',
            success: function success(res) {
              var latitude = res.latitude;
              var longitude = res.longitude;
              NetTools.Post("cmd=joinProvince&token=" + _this5.token + "&latitude=" + latitude + "&longitude=" + longitude, function (responseContent) {
                //@ts-ignore
                if (responseContent.errorCode == 0) {
                  //@ts-ignore
                  _this5.location = responseContent.provinceName;
                  sys.localStorage.setItem("province", _this5.location);
                  _this5.city = responseContent.city;
                  sys.localStorage.setItem("city", _this5.city);
                  _this5.userInfo.province = responseContent.province;
                  _this5.userInfo.provinceName = _this5.location;
                  _this5.userInfo.city = _this5.city;
                  callBack == null ? void 0 : callBack();
                } else {
                  callBack == null ? void 0 : callBack(); //@ts-ignore

                  console.error("location is error:" + responseContent.errorMsg);
                }
              });
            },
            fail: function fail(err) {
              callBack == null ? void 0 : callBack();
            }
          });
        };

        _proto.UpdateScore = function UpdateScore(score, callBack) {
          if (!this.token && this.token != "") {
            callBack == null ? void 0 : callBack();
            return;
          }

          NetTools.Post("cmd=updateScore&token=" + this.token + "&score=" + score, function (responseContent) {
            if (responseContent.errorCode == 0) ;
          });
        } //获取省份信息
        ;

        _proto.GetProvinceRank = function GetProvinceRank(callBack) {
          var _this6 = this;

          if (!this.token && this.token != "") {
            callBack == null ? void 0 : callBack(null);
            return;
          }

          NetTools.Post("cmd=getProvinceRank&token=" + this.token, function (responseContent) {
            if (responseContent.errorCode == 0) {
              var list = responseContent.provinceList;
              _this6.province = new Map();
              list.forEach(function (element) {
                var item = new Province();
                item.name = element.name;
                item.count = element.score;

                _this6.province.set(element.code, item);
              });
              callBack == null ? void 0 : callBack(_this6.province);
            } else {
              callBack == null ? void 0 : callBack(null);
            }
          }); //todo
        } //获取省份内用户组信息
        ;

        _proto.GetProvinceRankDetail = function GetProvinceRankDetail(provinceName, callBack) {
          if (!this.token && this.token != "") {
            callBack == null ? void 0 : callBack(null);
            return;
          }

          var item = this.province.get(provinceName);
          NetTools.Post("cmd=getProvinceRankDetail&token=" + this.token + "&code=" + provinceName, function (responseContent) {
            if (responseContent.errorCode == 0) {
              if (item) {
                var list = responseContent.topUserList;

                if (list.length > 0) {
                  item.userInfos = new Array(list.length);

                  for (var index = 0; index < list.length; index++) {
                    var element = list[index]; // let userinfor = new UserInfo();
                    // userinfor.avatar = element.avatar;
                    // userinfor.name = element.name;
                    // userinfor.city = element.city;
                    // userinfor.skinId = element.skinId;

                    item.userInfos[index] = element;
                  }
                }
              }

              callBack == null ? void 0 : callBack(item);
            } else {
              callBack == null ? void 0 : callBack(null);
            }
          });
        };

        _proto.SetLevelDone = function SetLevelDone(levelId, doneSec) {
          _BaseAuthorize.prototype.SetLevelDone.call(this, levelId, doneSec);
        };

        _proto.Set100LevelDone = function Set100LevelDone(levelId, doneSec, totallSec, callBack) {
          _BaseAuthorize.prototype.Set100LevelDone.call(this, levelId, doneSec, totallSec, callBack);
        };

        _proto.GetNationalRanking = function GetNationalRanking(callBack) {
          _BaseAuthorize.prototype.GetNationalRanking.call(this, callBack);
        };

        _proto.GetNotice = function GetNotice(callBack) {
          _BaseAuthorize.prototype.GetNotice.call(this, callBack);
        };

        _proto.SetLevelBegin = function SetLevelBegin(levelId, callBack) {
          _BaseAuthorize.prototype.SetLevelBegin.call(this, levelId, callBack);
        };

        return DYIAuthorize;
      }(BaseAuthorize)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DYRank.ts", ['cc', './Utils.ts', './TimeTools.ts', './AuthorizeManager.ts', './DataManager.ts', './HomeManager.ts'], function (exports) {
  'use strict';

  var cclegacy, _decorator, sys, Utils, TimeTools, AuthorizeManager, DataManager, HomeManager;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      TimeTools = module.TimeTools;
    }, function (module) {
      AuthorizeManager = module.AuthorizeManager;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      HomeManager = module.HomeManager;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "efbfeQWGtBOXKRs/qOJA+bL", "DYRank", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DYRank = exports('DYRank', (_dec = ccclass('DYRank'), _dec(_class = /*#__PURE__*/function () {
        function DYRank() {
          this.nowScore = 0;
          this.nowDay = 0;
          var s = sys.localStorage.getItem("WinScore");
          var day = sys.localStorage.getItem("ScoreDay");

          if (!Utils.isEmpty(s)) {
            this.nowScore = Number.parseInt(s);
          }

          if (!Utils.isEmpty(day)) {
            this.nowDay = Number.parseInt(day);
          }
        }

        var _proto = DYRank.prototype;

        _proto.upLoadRankdata = function upLoadRankdata(score) {
          if (Utils.isNextDay(this.nowDay)) {
            this.nowScore = 0;
          }

          this.nowScore += score;
          console.log("今天的分数：" + this.nowScore);
          this.nowDay = TimeTools.getCurTime();
          sys.localStorage.setItem("WinScore", this.nowScore.toString());
          sys.localStorage.setItem("ScoreDay", this.nowDay.toString());
          tt.setImRankData({
            dataType: 0,
            //成绩为数字类型
            value: this.nowScore.toString(),
            //该用户得了999999分
            success: function success(res) {
              console.log("setImRankData success res: " + res);
            },
            fail: function fail(res) {
              console.log("setImRankData fail res: " + res.errMsg);
            }
          });
        };

        _proto.showRank = function showRank() {
          var _this = this;

          if (sys.platform == sys.Platform.BYTEDANCE_MINI_GAME) {
            var playerdata = DataManager.getInstance().playerData;

            if (playerdata.isAuthorize) {
              this.showrank();
            } else {
              AuthorizeManager.getInstance().getBaseAuthrize().onlySetAuthorize(function (res) {
                if (res) {
                  var userInfo = AuthorizeManager.getInstance().getBaseAuthrize().authorizUserInfo;
                  playerdata.headUrl = userInfo.avatarUrl;
                  playerdata.playerName = userInfo.nickName;
                  playerdata.isAuthorize = true;
                  DataManager.getInstance().savePlayData();
                  HomeManager.getInstance().homeView.updatePlayerAvatar(playerdata);

                  _this.showrank();
                }
              });
            }
          }
        };

        _proto.showrank = function showrank() {
          tt.getImRankList({
            relationType: "default",
            //好友榜、总榜都展示
            dataType: 0,
            //只圈选type为数字类型的数据进行排序
            rankType: "day",
            //每天凌晨0点更新，只对当天0点到现在写入的数据进行排序
            suffix: "只",
            //数据后缀，成绩后续默认带上 “分”
            rankTitle: "今日抓获动物榜",
            //标题
            success: function success(res) {
              console.log("getImRankData success res: " + res);
            },
            fail: function fail(res) {
              console.log("getImRankData fail res: " + res.errMsg);
            }
          });
        };

        return DYRank;
      }()) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EffectManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Prefab, instantiate, director, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      director = module.director;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _class3;

      cclegacy._RF.push({}, "ce07c5aN1xPRrPfPz9Th0eR", "EffectManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EffectManager = exports('EffectManager', (_dec = ccclass('EffectManager'), _dec2 = property({
        type: [Prefab],
        visible: true,
        displayName: "特效"
      }), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EffectManager, _Component);

        function EffectManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "efPrefab", _descriptor, _assertThisInitialized(_this));

          _this.effects = [];
          _this.effectParent = void 0;
          return _this;
        }

        var _proto = EffectManager.prototype;

        _proto.init = function init() {
          this.effectParent = this.node;
        };

        _proto.getParticle = function getParticle(effectName, delay) {
          var ef = this.efPrefab.find(function (a) {
            return a.name == effectName;
          });
          var partic = instantiate(ef);
          partic.active = false;
          partic.setParent(this.effectParent);
          return partic;
        };

        _createClass(EffectManager, null, [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              var rootNode = director.getScene().getChildByPath("CfgData/EffectManager");
              this._instance = rootNode.getComponent(EffectManager); // director.addPersistRootNode(rootNode);
            }

            return this._instance;
          }
        }]);

        return EffectManager;
      }(Component), _class3._instance = void 0, _class3), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "efPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Elephant.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnclosureChild.ts', './Entity.ts', './Fence.ts', './GameManager.ts', './Grass.ts', './Stone.ts', './TreasureBox.ts', './SdkManager.ts', './DataManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCFloat, SphereCollider, v3, physics, Vec3, EnclosureChild, MapSacle, AtkFactor, TotallAtkFactor, Entity, Fence, GameManager, Grass, Stone, TreasureBox, SdkManager, vibrateType, DataManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
      SphereCollider = module.SphereCollider;
      v3 = module.v3;
      physics = module.physics;
      Vec3 = module.Vec3;
    }, function (module) {
      EnclosureChild = module.EnclosureChild;
    }, function (module) {
      MapSacle = module.MapSacle;
      AtkFactor = module.AtkFactor;
      TotallAtkFactor = module.TotallAtkFactor;
      Entity = module.Entity;
    }, function (module) {
      Fence = module.Fence;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      Grass = module.Grass;
    }, function (module) {
      Stone = module.Stone;
    }, function (module) {
      TreasureBox = module.TreasureBox;
    }, function (module) {
      SdkManager = module.SdkManager;
      vibrateType = module.vibrateType;
    }, function (module) {
      DataManager = module.DataManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "9f85fD+r2VNH5j1hr28BwGv", "Elephant", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Elephant = exports('Elephant', (_dec = ccclass('Elephant'), _dec2 = property({
        type: CCFloat,
        visible: true,
        displayName: "基础攻击力"
      }), _dec3 = property({
        type: [MapSacle],
        visible: true,
        displayName: "放大系数"
      }), _dec4 = property({
        type: [AtkFactor],
        visible: true,
        displayName: "攻击力个数加成系数"
      }), _dec5 = property({
        type: [TotallAtkFactor],
        visible: true,
        displayName: "总攻击力个数加成系数"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Entity) {
        _inheritsLoose(Elephant, _Entity);

        function Elephant() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Entity.call.apply(_Entity, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "baseAtk", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scale", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "atkFactor", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "totallAtk", _descriptor4, _assertThisInitialized(_this));

          _this.atkTarget = false;
          _this.cfgs = void 0;
          _this.callAtk = null;
          return _this;
        }

        var _proto = Elephant.prototype;

        _proto.initCfg = function initCfg() {
          this.scale = new Array();
          this.atkFactor = new Array();
          this.totallAtk = new Array();
          this.cfgs = GameManager.getInstance().animalCfg.Elephant;
          this.baseAtk = this.cfgs[0].BaseAtk;

          for (var index = 0; index < this.cfgs.length; index++) {
            var element = this.cfgs[index];
            var sacle = new MapSacle();
            sacle.lv = index;
            sacle.sacle = element.MapSacle;
            this.scale.push(sacle);
            var atkfactor = new AtkFactor();
            atkfactor.lv = index;
            atkfactor.factor = element.AtkFactor;
            this.atkFactor.push(atkfactor);
            var totallatk = new TotallAtkFactor();
            totallatk.lv = index;
            totallatk.factor = element.TotallAtkFactor;
            this.totallAtk.push(totallatk);
          }
        };

        _proto.start = function start() {
          this.node.getComponent(SphereCollider).on('onCollisionEnter', this.onCollsEnter, this);
          this.node.getComponent(SphereCollider).on('onCollisionStay', this.onTriggerStay, this); // this.initCfg();
        };

        _proto.onCollsEnter = function onCollsEnter(collider) {
          var other = collider.otherCollider.node;

          if (other && this.atkState) {
            var point = v3();
            var box = other.getComponent(Fence);

            if (!this.atkTarget && !this.isNomalAnimal && box) {
              SdkManager.getInstance().VibrateShort(DataManager.getInstance().playerData.vibrateSet, vibrateType.light);
              collider.contacts[0].getWorldPointOnA(point);
              box.onHit(this.getAtkFactor(), point);
              this.atkTarget = true;
              this.stopMove();
              this.delayDestroy(400);
              this.isLastAtk();
              return;
            }

            var enc = other.getComponent(EnclosureChild);

            if (!this.atkTarget && enc) {
              SdkManager.getInstance().VibrateShort(DataManager.getInstance().playerData.vibrateSet, vibrateType.light);
              collider.contacts[0].getWorldPointOnA(point);
              enc.onHit(this.getAtkFactor(), point);
              this.atkTarget = true;
              this.stopMove();
              this.delayDestroy(400);
              this.isLastAtk();
              return;
            }

            var tr = other.getComponent(TreasureBox);

            if (!this.atkTarget && tr) {
              SdkManager.getInstance().VibrateShort(DataManager.getInstance().playerData.vibrateSet, vibrateType.light);
              collider.contacts[0].getWorldPointOnA(point);
              tr.onHit(this.getAtkFactor(), point);
              this.atkTarget = true;
              this.stopMove();
              this.delayDestroy(400);
              this.isLastAtk();
              return;
            }

            var grass = other.getComponent(Grass);

            if (this.atkState && grass) {
              SdkManager.getInstance().VibrateShort(DataManager.getInstance().playerData.vibrateSet, vibrateType.light);
              grass.toBroken();
              GameManager.getInstance().mapInfo.destroyBox(grass);
            }

            var stone = other.getComponent(Stone);

            if (this.atkState && stone) {
              SdkManager.getInstance().VibrateShort(DataManager.getInstance().playerData.vibrateSet, vibrateType.light);
              stone.toBroken();
              GameManager.getInstance().mapInfo.destroyBox(stone);
            }
          }
        };

        _proto.onTriggerStay = function onTriggerStay(collider) {
          var other = collider.otherCollider.node;

          if (other) {
            var box = other.getComponent(Fence);

            if (this.isNomalAnimal && box) {
              this.node.setPosition(this.node.position.add3f(0, 0.1, 0));
            }
          }
        };

        _proto.getAtkFactor = function getAtkFactor() {
          var atk;
          var step = this.step >= this.atkFactor.length ? this.atkFactor.length - 1 : this.step;
          atk = this.baseAtk * this.atkFactor[step].factor * this.totallAtk[step].factor;
          return atk;
        };

        _proto.doelephantAtk = function doelephantAtk(totall, step, call) {
          var _this2 = this;

          this.node.active = true;
          this.totallStep = totall;
          this.step = totall;
          this.atkState = true;
          this.isNomalAnimal = false;
          this.rg.type = physics.ERigidBodyType.DYNAMIC;
          this.rg.useGravity = false;
          this.callAtk = call;
          this.move(new Vec3(this.node.worldPosition.x, 0, this.node.worldPosition.z - 50), false, function () {
            _this2.delayDestroy(2000);

            call();
          }, 3);
          this.play('attack');
        };

        _proto.isLastAtk = function isLastAtk() {
          this.callAtk();
          if (this.step == this.totallStep) ;
        };

        _proto.setBigState = function setBigState(step) {
          step = step >= this.scale.length ? this.scale.length - 1 : step;
          var sacle = this.scale[step].sacle;

          _Entity.prototype.setBigState.call(this, sacle);
        };

        _proto.update = function update(deltaTime) {
          _Entity.prototype.update.call(this, deltaTime);
        };

        return Elephant;
      }(Entity), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "baseAtk", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "scale", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "atkFactor", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "totallAtk", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Enclosure.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CfgData.ts', './EnclosureChild.ts', './GameResponces.ts', './Panel_Game.ts', './UIManager.ts', './AudioManager.ts', './GameManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, CCFloat, Node, v3, Label, Component, CfgData, EnclosureChild, GameResponces, Panel_Game, UIManager, AudioManager, GameManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
      Node = module.Node;
      v3 = module.v3;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      CfgData = module.CfgData;
    }, function (module) {
      EnclosureChild = module.EnclosureChild;
    }, function (module) {
      GameResponces = module.GameResponces;
    }, function (module) {
      Panel_Game = module.Panel_Game;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      GameManager = module.GameManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "08d8caUnDBMhoXMUyEs97uq", "Enclosure", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Enclosure = exports('Enclosure', (_dec = ccclass('Enclosure'), _dec2 = property({
        type: CCFloat,
        visible: true,
        displayName: "血量"
      }), _dec3 = property({
        type: [EnclosureChild],
        displayName: "围栏"
      }), _dec4 = property({
        type: Node,
        displayName: '血量条位置'
      }), _dec5 = property({
        type: CCFloat,
        visible: true,
        displayName: "当前血量"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Enclosure, _Component);

        function Enclosure() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "_hp", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "childs", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hpBarNode", _descriptor3, _assertThisInitialized(_this));

          _this.hpBar = void 0;
          _this.labHp = void 0;

          _initializerDefineProperty(_this, "curHp", _descriptor4, _assertThisInitialized(_this));

          _this.maxHp = void 0;
          _this.panel_game = void 0;
          _this.wpos = void 0;
          _this.fenchLv = void 0;
          return _this;
        }

        var _proto = Enclosure.prototype;

        _proto.init = function init(npc) {
          var _this2 = this;

          this.fenchLv = npc.fenceLv;
          var homecfg = CfgData.getInstance().getHomeCfg();
          this.maxHp = homecfg.fence[npc.fenceLv].HP;
          this.curHp = Math.floor(this.maxHp * npc.residualHP);
          if (npc.residualHP > 1) this.maxHp = this.maxHp * npc.residualHP; //修复一下显示血量问题

          this.curHp = Number.parseFloat(this.curHp.toFixed(1));
          this.childs.forEach(function (element) {
            element.init(_this2.maxHp, _this2.curHp, _this2);
          });
          var pos = v3();
          this.wpos = this.hpBarNode.getWorldPosition();
          this.panel_game = UIManager.getInstance().getPanel(Panel_Game);
          pos = this.panel_game.convertTohpNode(this.wpos);
          this.createHpBar(pos);
        };

        _proto.setMaxHp = function setMaxHp(hp) {
          this.maxHp = this.curHp = hp;
        };

        _proto.destroyEnclosure = function destroyEnclosure() {
          this.childs.forEach(function (element) {
            element.toBroken();
          });
        };

        _proto.updateEnclosurePos = function updateEnclosurePos(z) {
          this.childs.forEach(function (element) {
            element.updateColliderPos(z);
          });
        };

        _proto.updateHpBarPos = function updateHpBarPos() {
          this.hpBar.node.setPosition(this.panel_game.convertTohpNode(this.wpos));
        };

        _proto.showlabhp = function showlabhp() {
          this.hpBar.progress = this.curHp / this.maxHp;
          var result = this.curHp.toString().indexOf('.');
          if (result != -1) this.labHp.string = this.curHp.toFixed(1) + "/" + this.maxHp;else this.labHp.string = this.curHp + "/" + this.maxHp;
        };

        _proto.createHpBar = function createHpBar(pos) {
          var _this3 = this;

          GameResponces._event.emit(GameResponces.createHpBar, 0, pos, function (hpbar) {
            _this3.hpBar = hpbar;
            _this3.labHp = _this3.hpBar.getComponentInChildren(Label);

            _this3.showlabhp();
          }, this);
        };

        _proto.onHit = function onHit(hit, wpos) {
          var _this4 = this;

          UIManager.getInstance().getPanel(Panel_Game).showHit(wpos, hit);

          if (this.hpBar) {
            this.curHp -= hit;
            this.curHp = Number.parseFloat(this.curHp.toFixed(1));
            GameManager.getInstance().mapInfo.listHomeAnimals.forEach(function (animal) {
              animal.onBeAtk();
            });
            AudioManager.instance.fenchBeHit(this.fenchLv);
            this.showlabhp();
            this.childs.forEach(function (element) {
              element.hitAnimation.play();
              element.beHit(_this4.curHp);
            });
          }
        };

        _proto.fixFench = /*#__PURE__*/function () {
          var _fixFench = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(n) {
            var _this5 = this;

            var fixhp, index;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (!this.hpBar) {
                    _context.next = 13;
                    break;
                  }

                  fixhp = (this.maxHp - this.curHp) / n;
                  index = 0;

                case 3:
                  if (!(index < n)) {
                    _context.next = 13;
                    break;
                  }

                  this.curHp += fixhp;
                  this.curHp = Number.parseFloat(this.curHp.toFixed(1));
                  this.showlabhp();
                  this.childs.forEach(function (element) {
                    element.beHit(_this5.curHp);
                  });
                  _context.next = 10;
                  return this.delay(0.1);

                case 10:
                  index++;
                  _context.next = 3;
                  break;

                case 13:
                  return _context.abrupt("return", new Promise(function (reslove, reject) {
                    reslove(true);
                  }));

                case 14:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function fixFench(_x) {
            return _fixFench.apply(this, arguments);
          }

          return fixFench;
        }();

        _proto.delay = function delay(time) {
          var _this6 = this;

          return new Promise(function (reslove, reject) {
            _this6.scheduleOnce(function () {
              reslove(true);
            }, time);
          });
        };

        _proto.onDestoryHpBar = function onDestoryHpBar() {
          if (this.hpBar) {
            this.hpBar.progress = 0;
            this.hpBar.node.destroy();
            this.hpBar = null;
          }
        };

        return Enclosure;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_hp", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 100;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "childs", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Array();
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "hpBarNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "curHp", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EnclosureChild.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, CCFloat, Node, Animation, RigidBody, BoxCollider, v3, instantiate, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
      Node = module.Node;
      Animation = module.Animation;
      RigidBody = module.RigidBody;
      BoxCollider = module.BoxCollider;
      v3 = module.v3;
      instantiate = module.instantiate;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _dec4, _dec5, _dec6, _dec7, _class4, _class5, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "5786altGlVMyrA4PdC2+UnI", "EnclosureChild", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Broken = exports('Broken', (_dec = ccclass('Broken'), _dec2 = property({
        type: CCFloat,
        visible: true,
        displayName: "对应的血量"
      }), _dec3 = property({
        type: Node,
        visible: true,
        displayName: "对应的状态"
      }), _dec(_class = (_class2 = function Broken() {
        _initializerDefineProperty(this, "hp", _descriptor, this);

        _initializerDefineProperty(this, "model", _descriptor2, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "hp", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "model", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      var EnclosureChild = exports('EnclosureChild', (_dec4 = ccclass('EnclosureChild'), _dec5 = property({
        type: [Broken],
        displayName: "破碎状态"
      }), _dec6 = property({
        type: Node,
        displayName: "碰撞特效"
      }), _dec7 = property({
        type: Animation,
        displayName: "碰撞动画"
      }), _dec4(_class4 = (_class5 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EnclosureChild, _Component);

        function EnclosureChild() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "brokens", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fx_hit", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hitAnimation", _descriptor5, _assertThisInitialized(_this));

          _this.view = void 0;
          _this.curHp = void 0;
          _this.Hp = void 0;
          _this.ecParent = void 0;
          return _this;
        }

        var _proto = EnclosureChild.prototype;

        _proto.init = function init(maxHp, hp, ec) {
          this.curHp = hp;
          this.Hp = maxHp;
          this.ecParent = ec;
          this.brokens.forEach(function (element) {
            element.model.active = false;
          });
          this.view = this.brokens[0].model;
          this.view.active = true;
          this.selectBrokenView();
          this.hitAnimation.node.active = true;
        };

        _proto.updateColliderPos = function updateColliderPos(z) {
          this.node.getComponent(RigidBody).enabled = false;
          this.node.getComponent(BoxCollider).enabled = false;
          this.node.getComponent(BoxCollider).center.add(v3(0, 0, z));
        };

        _proto.onHit = function onHit(hit, wpos) {
          var _this$ecParent;

          var fx = instantiate(this.fx_hit);
          this.node.addChild(fx);
          fx.active = true;
          (_this$ecParent = this.ecParent) == null ? void 0 : _this$ecParent.onHit(hit, wpos);
        };

        _proto.beHit = function beHit(hp) {
          this.curHp = hp;

          if (this.curHp <= 0.001) {
            this.toBroken();
            this.curHp = 0;
          }

          this.selectBrokenView();
        };

        _proto.selectBrokenView = function selectBrokenView() {
          var p = this.curHp / this.Hp;
          var select = 0;

          if (p < 0.99) {
            for (var index = 0; index < this.brokens.length; index++) {
              var element = this.brokens[index];
              if (index == this.brokens.length - 1) select = index;else {
                var nextelement = this.brokens[index + 1];

                if (p <= element.hp && p > nextelement.hp) {
                  select = index;
                  break;
                }
              }
            }
          }

          this.view.active = false;
          this.view = this.brokens[select].model;
          this.view.active = true;
        };

        _proto.toBroken = function toBroken() {
          var _this$ecParent2;

          (_this$ecParent2 = this.ecParent) == null ? void 0 : _this$ecParent2.onDestoryHpBar();
        };

        return EnclosureChild;
      }(Component), (_descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "brokens", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Array();
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "fx_hit", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class5.prototype, "hitAnimation", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class5)) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Entity.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Player.ts', './AudioManager.ts', './Utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _inheritsLoose, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, CCFloat, Vec2, CCInteger, Node, v3, RigidBody, SkeletalAnimation, Sprite, SphereCollider, Vec3, tween, physics, quat, misc, Quat, Component, AnimalType, AudioManager, Utils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
      Vec2 = module.Vec2;
      CCInteger = module.CCInteger;
      Node = module.Node;
      v3 = module.v3;
      RigidBody = module.RigidBody;
      SkeletalAnimation = module.SkeletalAnimation;
      Sprite = module.Sprite;
      SphereCollider = module.SphereCollider;
      Vec3 = module.Vec3;
      tween = module.tween;
      physics = module.physics;
      quat = module.quat;
      misc = module.misc;
      Quat = module.Quat;
      Component = module.Component;
    }, function (module) {
      AnimalType = module.AnimalType;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _dec4, _dec5, _dec6, _class4, _class5, _descriptor3, _descriptor4, _dec7, _dec8, _dec9, _class7, _class8, _descriptor5, _descriptor6, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _class10, _class11, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13;

      cclegacy._RF.push({}, "d73f72sRVVAHZIcXgmnSyBj", "Entity", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MapSacle = exports('MapSacle', (_dec = ccclass('MapSacle'), _dec2 = property({
        type: CCFloat,
        visible: true,
        displayName: "对应等级"
      }), _dec3 = property({
        type: CCFloat,
        visible: true,
        displayName: "对应缩放"
      }), _dec(_class = (_class2 = function MapSacle() {
        _initializerDefineProperty(this, "lv", _descriptor, this);

        _initializerDefineProperty(this, "sacle", _descriptor2, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lv", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sacle", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class));
      var AtkFactor = exports('AtkFactor', (_dec4 = ccclass('AtkFactor'), _dec5 = property({
        type: CCFloat,
        visible: true,
        displayName: "对应等级"
      }), _dec6 = property({
        type: CCFloat,
        visible: true,
        displayName: "攻击力系数"
      }), _dec4(_class4 = (_class5 = function AtkFactor() {
        _initializerDefineProperty(this, "lv", _descriptor3, this);

        _initializerDefineProperty(this, "factor", _descriptor4, this);
      }, (_descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "lv", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "factor", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class5)) || _class4));
      var TotallAtkFactor = exports('TotallAtkFactor', (_dec7 = ccclass('TotallAtkFactor'), _dec8 = property({
        type: CCFloat,
        visible: true,
        displayName: "对应等级"
      }), _dec9 = property({
        type: CCFloat,
        visible: true,
        displayName: "总攻击力系数"
      }), _dec7(_class7 = (_class8 = function TotallAtkFactor() {
        _initializerDefineProperty(this, "lv", _descriptor5, this);

        _initializerDefineProperty(this, "factor", _descriptor6, this);
      }, (_descriptor5 = _applyDecoratedDescriptor(_class8.prototype, "lv", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class8.prototype, "factor", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class8)) || _class7));
      var Entity = exports('Entity', (_dec10 = ccclass('Entity'), _dec11 = property({
        type: Vec2,
        readonly: true,
        displayName: "当前的坐标"
      }), _dec12 = property({
        type: CCInteger,
        readonly: true,
        visible: true,
        displayName: "当前index"
      }), _dec13 = property({
        type: CCFloat,
        visible: true,
        displayName: "移动速度"
      }), _dec14 = property({
        type: Node,
        visible: true,
        displayName: "动物节点"
      }), _dec15 = property({
        type: Node,
        visible: true,
        displayName: "动物头像节点"
      }), _dec16 = property({
        type: Node,
        visible: true,
        displayName: "拖尾特效"
      }), _dec17 = property({
        type: Node,
        visible: true,
        displayName: "变动物类型特效"
      }), _dec10(_class10 = (_class11 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Entity, _Component);

        function Entity() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "temPos", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "index", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "speed", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rotateNode", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "head", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fx_tial", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fx_Change", _descriptor13, _assertThisInitialized(_this));

          _this.rg = void 0;
          _this.isNomalAnimal = true;
          _this.skeletal = void 0;
          _this.mTween = void 0;
          _this.animalType = AnimalType.none;
          _this.orgPos = void 0;
          _this.curtDeltaTime = 0;
          _this.moveTime = 0;
          _this.step = void 0;
          _this.totallStep = void 0;
          _this.atkState = false;
          _this.orgScale = v3(0, 0, 0);
          _this.startRote = void 0;
          _this.roteTime = void 0;
          _this.curroteTime = void 0;
          _this.myrote = void 0;
          return _this;
        }

        var _proto = Entity.prototype;

        _proto.onLoad = function onLoad() {
          this.rg = this.getComponent(RigidBody);
          this.skeletal = this.node.getComponentInChildren(SkeletalAnimation);
          this.orgPos = this.node.getWorldPosition();
          this.orgScale = this.node.getWorldScale();
        };

        _proto.init = function init(index, pos, animalType, headUrl) {
          if (headUrl === void 0) {
            headUrl = '';
          }

          this.index = index;
          this.temPos = pos;
          this.animalType = animalType;
          this.atkState = false; //初始化npc头像

          if (headUrl != "") {
            var headsp = this.head.getChildByPath("Mask/head").getComponent(Sprite);
            Utils.urlToSpriteFrame(headUrl, function (res) {
              headsp.spriteFrame = res;
            });
          } else {
            this.head.active = false;
          }

          this.initCfg();
        };

        _proto.initCfg = function initCfg() {};

        _proto.setColliderActive = function setColliderActive(active) {
          this.getComponent(SphereCollider).enabled = active;
        };

        _proto.move = function move(pos, ishide, callBack, nowSpeed, isSetIdle, showFx) {
          var _this2 = this;

          if (callBack === void 0) {
            callBack = null;
          }

          if (nowSpeed === void 0) {
            nowSpeed = 0;
          }

          if (isSetIdle === void 0) {
            isSetIdle = false;
          }

          if (showFx === void 0) {
            showFx = false;
          }

          this.orgPos = new Vec3(this.node.position);
          var dis = Math.abs(Vec3.distance(pos, this.node.position));
          var time = 0;
          if (nowSpeed != 0) this.moveTime = time = dis / nowSpeed;else this.moveTime = time = dis / this.speed;
          this.mTween = tween(this.node).to(time, {
            position: pos
          }).call(function () {
            _this2.node.setPosition(pos);

            if (ishide) _this2.node.active = false;
            callBack == null ? void 0 : callBack();

            if (isSetIdle) {
              _this2.setIdleState();

              _this2.node.setWorldScale(_this2.orgScale);
            }

            _this2.showfxTrail(showFx);
          }).start();
          this.stopRotate();
          this.rotateNode.setRotationFromEuler(0, 180, 0);
          this.node.lookAt(pos);
          this.play('run');
        };

        _proto.forceMove = function forceMove(pos) {
          this.rotateNode.setRotationFromEuler(0, 180, 0);
          this.rg.type = physics.ERigidBodyType.DYNAMIC;
          this.rg.useGravity = false;
          var dir = v3(pos); //方向

          dir = dir.multiplyScalar(100); //长度

          this.rg.applyForce(dir);
          this.play('run');
        };

        _proto.rightMove = function rightMove(pos) {
          var _this3 = this;

          this.orgPos = new Vec3(this.node.position);
          var time = 0;
          var dis = Math.abs(Vec3.distance(pos, this.node.position));
          this.moveTime = time = dis / this.speed;
          this.rotateNode.setRotationFromEuler(0, 180, 0);
          this.node.lookAt(pos);
          this.mTween = tween(this.node).to(time, {
            position: pos
          }).call(function () {
            _this3.crossFade('fearidle');

            _this3.rotateNode.setRotationFromEuler(0, -90, 0);

            _this3.node.lookAt(pos);
          }).start();
          this.play('fearback');
        };

        _proto.leftMove = function leftMove(pos) {
          var _this4 = this;

          this.orgPos = new Vec3(this.node.position);
          var time = 0;
          var dis = Math.abs(Vec3.distance(pos, this.node.position));
          this.moveTime = time = dis / this.speed;
          this.rotateNode.setRotationFromEuler(0, 0, 0);
          this.node.lookAt(pos);
          this.mTween = tween(this.node).to(time, {
            position: pos
          }).call(function () {
            _this4.crossFade('fearidle');
          }).start();
          this.play('fearfront');
        } //回退
        ;

        _proto.leftComBack = function leftComBack(callBack) {
          var _this5 = this;

          if (callBack === void 0) {
            callBack = null;
          }

          var pos = this.orgPos;
          var dis = Math.abs(Vec3.distance(this.orgPos, this.node.position));
          var time = 0;
          this.moveTime = time = dis / this.speed;
          this.mTween = tween(this.node).to(time, {
            position: pos
          }).call(function () {
            callBack == null ? void 0 : callBack();

            _this5.setIdleState();
          }).start();
          this.stopRotate();
          this.rotateNode.setRotationFromEuler(0, -90, 0);
          this.node.setRotationFromEuler(0, 0, 0);
          this.play('fearback');
        };

        _proto.rightComBack = function rightComBack(callBack) {
          var _this6 = this;

          if (callBack === void 0) {
            callBack = null;
          }

          var pos = this.orgPos;
          var dis = Math.abs(Vec3.distance(this.orgPos, this.node.position));
          var time = 0;
          this.moveTime = time = dis / this.speed;
          this.mTween = tween(this.node).to(time, {
            position: pos
          }).call(function () {
            callBack == null ? void 0 : callBack();

            _this6.setIdleState();
          }).start();
          this.stopRotate();
          this.rotateNode.setRotationFromEuler(0, 90, 0);
          this.node.setRotationFromEuler(0, 0, 0);
          this.play('fearfront');
        };

        _proto.play = function play(name) {
          var _this$skeletal;

          (_this$skeletal = this.skeletal) == null ? void 0 : _this$skeletal.play(name);
        };

        _proto.crossFade = function crossFade(name) {
          var _this$skeletal2;

          (_this$skeletal2 = this.skeletal) == null ? void 0 : _this$skeletal2.crossFade(name);
        } //返回值为移动时间
        ;

        _proto.delayMove = function delayMove(pos, delay, call) {
          var _this7 = this;

          var dis = Math.abs(Vec3.distance(pos, this.node.position));
          var time = dis / 7;
          this.mTween = tween(this.node).delay(delay).to(time, {
            position: pos
          }).call(function () {
            _this7.setIdleState();

            call == null ? void 0 : call();
          }).start();
          this.stopRotate();
          this.rotateNode.setRotationFromEuler(0, 180, 0);
          this.play('run');
          return time + delay;
        };

        _proto.doAtk = function doAtk(totall, step) {
          var _this8 = this;

          AudioManager.instance.playfire();
          this.atkState = true;
          this.node.active = true;
          this.totallStep = totall;
          this.step = step;
          this.move(new Vec3(this.node.worldPosition.x, 0, this.node.worldPosition.z - 50), false, function () {
            _this8.delayDestroy(2000);
          }, 20);
        };

        _proto.setIdleState = function setIdleState() {
          this.play('idle');
          this.node.setRotationFromEuler(0, 0, 0);
          this.setRotate(45, 0.2);
        };

        _proto.setBigState = function setBigState(sacle) {
          this.setScale(sacle);
          var state = this.skeletal.getState('golex');

          if (state.isPlaying && state.current < state.duration) {
            return;
          }

          this.play("golex");
        };

        _proto.setAtkState = function setAtkState() {
          this.play("rush");
        };

        _proto.setSingeClickState = /*#__PURE__*/function () {
          var _setSingeClickState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  this.play("shake");
                  _context.next = 3;
                  return this.delay(700);

                case 3:
                  this.play("idle");

                case 4:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function setSingeClickState() {
            return _setSingeClickState.apply(this, arguments);
          }

          return setSingeClickState;
        }();

        _proto.setRotate = function setRotate(rote, time) {
          this.myRotate(rote, time);
        };

        _proto.setChildRotate = function setChildRotate(rote) {
          this.rotateNode.setRotationFromEuler(0, rote, 0);
        };

        _proto.stopRotate = function stopRotate() {
          this.startRote = false;
        };

        _proto.myRotate = function myRotate(rote, time) {
          this.myrote = rote;
          this.startRote = true;
          this.roteTime = time;
          this.curroteTime = 0;
        };

        _proto.update = function update(deltaTime) {
          this.curtDeltaTime += deltaTime;

          if (this.curtDeltaTime >= 1) {
            if (this.node.worldPosition.y < -10) {
              var _this$node;

              (_this$node = this.node) == null ? void 0 : _this$node.destroy();
            }
          }

          if (this.startRote && this.curroteTime <= this.roteTime) {
            this.curroteTime += deltaTime;
            var y = this.myrote * this.curroteTime / this.roteTime;
            this.rotateByAxis(this.rotateNode, this.node.up, y);
          } else if (this.startRote && this.curroteTime > this.roteTime) {
            this.startRote = false;
            this.rotateByAxis(this.rotateNode, this.node.up, this.myrote);
          }

          if (this.head && this.head.active) {
            this.head.setWorldRotationFromEuler(0, 0, 0);
          }
        };

        _proto.setScale = function setScale(scale) {
          this.rotateNode.setScale(new Vec3(scale, scale, scale));
        };

        _proto.getScale = function getScale() {
          return this.rotateNode.getScale();
        };

        _proto.stopMove = function stopMove() {
          var _this$mTween;

          (_this$mTween = this.mTween) == null ? void 0 : _this$mTween.stop();
        };

        _proto.rotateByAxis = function rotateByAxis(targetNode, axis, angle) {
          var rotation = quat();
          var rad = misc.degreesToRadians(angle); // 绕世界空间下指定轴旋转四元数: 四元数绕指定轴旋转指定弧度后的四元数

          Quat.rotateAround(rotation, this.node.rotation, axis, rad);
          targetNode.worldRotation = rotation;
        } //展示拖尾特效
        ;

        _proto.showfxTrail = function showfxTrail(active) {
          if (this.fx_tial) this.fx_tial.active = active;
        };

        _proto.delayDestroy = /*#__PURE__*/function () {
          var _delayDestroy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(time) {
            var _this9 = this;

            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return this.delay(time);

                case 2:
                  if (this.node) {
                    tween(this.node).to(0.5, {
                      scale: v3(0.2, 0.2, 0.2)
                    }).call(function () {
                      var _this9$node;

                      (_this9$node = _this9.node) == null ? void 0 : _this9$node.destroy();
                    }).start();
                  }

                case 3:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));

          function delayDestroy(_x) {
            return _delayDestroy.apply(this, arguments);
          }

          return delayDestroy;
        }();

        _proto.destroyEntity = function destroyEntity() {
          var _this$node2;

          (_this$node2 = this.node) == null ? void 0 : _this$node2.destroy();
        };

        _proto.delay = function delay(time) {
          var _this10 = this;

          return new Promise(function (reslove, reject) {
            _this10.scheduleOnce(function () {
              reslove(true);
            }, time / 1000);
          });
        };

        return Entity;
      }(Component), (_descriptor7 = _applyDecoratedDescriptor(_class11.prototype, "temPos", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec2();
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class11.prototype, "index", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor9 = _applyDecoratedDescriptor(_class11.prototype, "speed", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class11.prototype, "rotateNode", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor11 = _applyDecoratedDescriptor(_class11.prototype, "head", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor12 = _applyDecoratedDescriptor(_class11.prototype, "fx_tial", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor13 = _applyDecoratedDescriptor(_class11.prototype, "fx_Change", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class11)) || _class10));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EventData.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _dec5, _dec6, _class4, _class5, _descriptor4;

      cclegacy._RF.push({}, "5bad4tBMohAj7eBRBK58YoD", "EventData", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DotEvent = (_dec = ccclass('DotEvent'), _dec2 = property({
        type: String,
        visible: true,
        displayName: "事件id"
      }), _dec3 = property({
        type: String,
        visible: true,
        displayName: "事件名称"
      }), _dec4 = property({
        type: [String],
        visible: true,
        displayName: "事件参数"
      }), _dec(_class = (_class2 = function DotEvent() {
        _initializerDefineProperty(this, "id", _descriptor, this);

        _initializerDefineProperty(this, "eventName", _descriptor2, this);

        _initializerDefineProperty(this, "attribute", _descriptor3, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "0";
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "eventName", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "事件名称";
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "attribute", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class);
      var EventData = exports('EventData', (_dec5 = ccclass('EventData'), _dec6 = property({
        type: [DotEvent],
        visible: true,
        displayName: "打点事件"
      }), _dec5(_class4 = (_class5 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EventData, _Component);

        function EventData() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "dotEvent", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = EventData.prototype;

        _proto.getDotEvent = function getDotEvent(id) {
          return this.dotEvent[id];
        };

        return EventData;
      }(Component), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "dotEvent", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class5)) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Fence.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnclosureChild.ts', './Entity.ts', './GameResponces.ts', './GameManager.ts', './Panel_Game.ts', './UIManager.ts', './AudioManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCFloat, Node, Vec3, Label, Animation, instantiate, Broken, Entity, GameResponces, GameManager, Panel_Game, UIManager, AudioManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
      Node = module.Node;
      Vec3 = module.Vec3;
      Label = module.Label;
      Animation = module.Animation;
      instantiate = module.instantiate;
    }, function (module) {
      Broken = module.Broken;
    }, function (module) {
      Entity = module.Entity;
    }, function (module) {
      GameResponces = module.GameResponces;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      Panel_Game = module.Panel_Game;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      AudioManager = module.AudioManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "0a8e2jy/GRPr756JE8PLoyE", "Fence", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Fence = exports('Fence', (_dec = ccclass('Fence'), _dec2 = property({
        type: CCFloat,
        visible: true,
        displayName: "血量"
      }), _dec3 = property({
        type: Node,
        visible: true,
        displayName: "hp显示点"
      }), _dec4 = property({
        type: [Broken],
        displayName: "破碎状态"
      }), _dec5 = property({
        type: Node,
        displayName: "碰撞特效"
      }), _dec6 = property({
        type: Node,
        displayName: "碰撞动画"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Entity) {
        _inheritsLoose(Fence, _Entity);

        function Fence() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Entity.call.apply(_Entity, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "maxHp", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hpNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "brokens", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fx_hit", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hitAnimation", _descriptor5, _assertThisInitialized(_this));

          _this.curHp = void 0;
          _this.fenceParent = void 0;
          _this.fenceChild = void 0;
          _this.hpBar = void 0;
          _this.lab = void 0;
          _this.view = void 0;
          return _this;
        }

        var _proto = Fence.prototype;

        _proto.initFence = function initFence(hp) {
          this.curHp = this.maxHp = hp;
        };

        _proto.start = function start() {
          if (this.fenceChild) {
            var pos = new Vec3(0, 0, 0);
            pos = UIManager.getInstance().getPanel(Panel_Game).convertTohpNode(this.hpNode.worldPosition);
            this.createHpBar(pos);
            this.view = this.brokens[0].model;
          }
        };

        _proto.createHpBar = function createHpBar(pos) {
          var _this2 = this;

          GameResponces._event.emit(GameResponces.createHpBar, 1, pos, function (hpbar) {
            _this2.hpBar = hpbar;
            _this2.lab = _this2.hpBar.getComponentInChildren(Label);

            _this2.showlabhp();
          }, this);
        };

        _proto.showlabhp = function showlabhp() {
          this.hpBar.progress = this.curHp / this.maxHp;
          var result = this.curHp.toString().indexOf('.');
          if (result != -1) this.lab.string = this.curHp.toFixed(1) + "/" + this.maxHp;else this.lab.string = this.curHp + "/" + this.maxHp;
        };

        _proto.onHit = function onHit(hit, hitWpos) {
          UIManager.getInstance().getPanel(Panel_Game).showHit(hitWpos, hit);

          if (this.fenceChild) {
            if (this.curHp - hit <= 0.001) {
              GameManager.getInstance().mapInfo.destroyBox(this.fenceChild);
              GameManager.getInstance().mapInfo.destroyBox(this);
              this.fenceChild.node.destroy();
              this.node.destroy();
              this.hpBar.progress = 0;
              this.hpBar.node.destroy();
              this.lab.string = "0/" + this.maxHp;
            } else {
              this.curHp -= hit;
              this.showlabhp();
            }
          }

          if (this.fenceParent) {
            if (this.fenceParent.curHp - hit <= 0.001) {
              GameManager.getInstance().mapInfo.destroyBox(this.fenceParent);
              GameManager.getInstance().mapInfo.destroyBox(this);
              this.fenceParent.node.destroy();
              this.node.destroy();
              this.fenceParent.hpBar.progress = 0;
              this.fenceParent.hpBar.node.destroy();
            } else {
              this.fenceParent.curHp -= hit;
              this.fenceParent.hpBar.progress = this.fenceParent.curHp / this.maxHp;
            }
          }

          AudioManager.instance.fenchBeHit(0);
          this.selectBrokenView();
          this.playAnimation(hitWpos);
        };

        _proto.selectBrokenView = function selectBrokenView() {
          var p = this.curHp / this.maxHp;
          var select = 0;

          for (var index = 0; index < this.brokens.length; index++) {
            var element = this.brokens[index];
            if (index == this.brokens.length - 1) select = index;else {
              var nextelement = this.brokens[index + 1];

              if (p <= element.hp && p > nextelement.hp) {
                select = index;
                break;
              }
            }
          }

          this.view.active = false;
          this.view = this.brokens[select].model;
          this.view.active = true;
        };

        _proto.playAnimation = function playAnimation(wpos) {
          this.hitAnimation.getComponent(Animation).play();
          var fx = instantiate(this.fx_hit);
          this.node.addChild(fx);
          fx.setWorldPosition(wpos);
          fx.active = true;
        };

        return Fence;
      }(Entity), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "maxHp", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 100;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "hpNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "brokens", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Array();
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "fx_hit", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "hitAnimation", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FirstScene.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AssetSys.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, AssetSys;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      AssetSys = module.AssetSys;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "0be26plmSRGh5G4nPag7IK+", "FirstScene", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FirstScene = exports('FirstScene', (_dec = ccclass('FirstScene'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FirstScene, _Component);

        function FirstScene() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = FirstScene.prototype;

        _proto.start = function start() {
          AssetSys.getInstance().loadLauncher();
        };

        _proto.update = function update(deltaTime) {};

        return FirstScene;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Flag.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts', './TimeTools.ts', './GameManager.ts', './UIManager.ts', './Panel_Main.ts', './AudioManager.ts', './GameResponces.ts', './CfgData.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Animation, Sprite, Label, Node, BoxCollider, RigidBody, Component, Utils, parseTimeSix, GameFinishState, UIManager, Panel_Main, AudioManager, GameResponces, CfgData;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      Sprite = module.Sprite;
      Label = module.Label;
      Node = module.Node;
      BoxCollider = module.BoxCollider;
      RigidBody = module.RigidBody;
      Component = module.Component;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      parseTimeSix = module.parseTimeSix;
    }, function (module) {
      GameFinishState = module.GameFinishState;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      Panel_Main = module.Panel_Main;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      GameResponces = module.GameResponces;
    }, function (module) {
      CfgData = module.CfgData;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "33ff0o6pfxG0YtSjdxd3Yh8", "Flag", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Flag = exports('Flag', (_dec = ccclass('Flag'), _dec2 = property({
        type: Animation,
        displayName: "动画"
      }), _dec3 = property({
        type: Sprite,
        displayName: "头像"
      }), _dec4 = property({
        type: Label,
        displayName: "名字"
      }), _dec5 = property({
        type: Label,
        displayName: "等级"
      }), _dec6 = property({
        type: Label,
        displayName: "时间"
      }), _dec7 = property({
        type: Node,
        displayName: "显示info"
      }), _dec8 = property({
        type: [Label],
        displayName: "动物个数"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Flag, _Component);

        function Flag() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "anima", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "head", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "npcName", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lv", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "timelabel", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "showInfoNode", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "aniamlLabels", _descriptor7, _assertThisInitialized(_this));

          _this.npc = void 0;
          _this.des = void 0;
          _this.infoPos = void 0;
          _this.clcikEnabel = false;
          _this.levea = void 0;
          _this.headSp = void 0;
          _this.taunhDir = 0;
          _this.taunhNode = void 0;
          return _this;
        }

        var _proto = Flag.prototype;

        _proto.init = function init(npc, des, infoPos, isClick, taunhNode) {
          var _this2 = this;

          this.infoPos = infoPos;
          this.des = des;
          this.npc = npc;
          this.taunhNode = taunhNode;
          this.clcikEnabel = isClick;
          this.getComponent(BoxCollider).enabled = isClick;
          this.getComponent(RigidBody).enabled = isClick;
          this.npcName.string = npc.npcName + des;
          this.lv.string = "【" + CfgData.getInstance().getHomeCfg().npc[npc.lv].Level + "级】";
          this.timelabel.string = parseTimeSix(npc.atkTimeFrame);
          this.aniamlLabels.forEach(function (element) {
            element.string = "0";
          });

          if (npc.animalCorpseList) {
            npc.animalCorpseList.forEach(function (animalType) {
              var cnt = Number.parseInt(_this2.aniamlLabels[animalType].string);
              cnt++;
              _this2.aniamlLabels[animalType].string = cnt.toString();
            });
          }

          if (npc.isWin) this.play("WINFlag_birth");else this.play("LOSEFlag_birth");
          Utils.urlToSpriteFrame(npc.headUrl, function (res) {
            if (_this2.head) {
              _this2.head.spriteFrame = res;
              _this2.headSp = res;
            }
          });
        };

        _proto.initPlayer = function initPlayer(headUrl, gameState) {
          var _this3 = this;

          this.clcikEnabel = false;

          if (Utils.isEmpty(headUrl)) {
            this.headSp = this.head.spriteFrame;
          } else {
            Utils.urlToSpriteFrame(headUrl, function (res) {
              if (_this3.head) _this3.head.spriteFrame = res;
              _this3.headSp = res;
            });
          }

          if (gameState == GameFinishState.Win) {
            this.levea = "WINFlag_leave";
            this.play("WINFlag_birth");
          } else {
            this.levea = "LOSEFlag_leave";
            this.play("LOSEFlag_birth");
          }
        };

        _proto.clickHead = function clickHead(audioHide) {
          if (!this.clcikEnabel) return;
          if (this.npc.isWin) GameResponces._event.emit(GameResponces.ClickWinHead);
          UIManager.getInstance().getPanel(Panel_Main).showPopNpcInfo(audioHide, this.npc, this.des, this.infoPos);
        } //旗帜嘲讽
        ;

        _proto.taunt = function taunt(str, sp, showtime) {
          var _this4 = this;

          this.head.spriteFrame = sp;
          this.scheduleOnce(function () {
            _this4.head.spriteFrame = _this4.headSp;
          }, showtime);
          this.taunhDir = this.taunhNode.eulerAngles.y > 0 ? 1 : 0;
          UIManager.getInstance().getPanel(Panel_Main).showPopNpcTaunh(this.taunhDir, str, this.taunhNode.worldPosition, showtime);
        };

        _proto.play = function play(animaName) {
          if (this.anima) {
            AudioManager.instance.playSound('insertflag');
            this.anima.play(animaName);
          }
        };

        _proto.leave = function leave() {
          this.play(this.levea);
        };

        return Flag;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "anima", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "head", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "npcName", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lv", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "timelabel", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "showInfoNode", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "aniamlLabels", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FxTools.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCFloat, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "4cb091Xq1xLK5d2NI1aPRdF", "FxTools", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FxTools = exports('FxTools', (_dec = ccclass('FxTools'), _dec2 = property({
        type: CCFloat,
        visible: true,
        displayName: "延迟隐藏的时间"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FxTools, _Component);

        function FxTools() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "delayTime", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = FxTools.prototype;

        _proto.onEnable = function onEnable() {
          var _this2 = this;

          this.scheduleOnce(function () {
            _this2.node.active = false;
          }, this.delayTime);
        };

        return FxTools;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "delayTime", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameCfg.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "3f629eOYA5HubkVV1VQr4MT", "GameCfg", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GameCfg = exports('GameCfg', (_dec = ccclass('GameCfg'), _dec(_class = (_class2 = function GameCfg() {}, _class2.minMerge = 2, _class2.atkRate = 0.11, _class2.bronCnt = [5, 10], _class2.FarmAnimals = 50, _class2.reflashAd = 1, _class2.changeAnimalTypeAd = 1, _class2.addAnimalCntAd = 1, _class2.DiedAnimalModel = 5, _class2.NPClevelInterval = [-1, 2], _class2.BornName = "我的名字", _class2.HouseMaxLevel = 20, _class2.FenceMaxLevel = 10, _class2.SendTime = 2, _class2.SendProbability = 0.7, _class2.SendPAnimalCount = 3, _class2.SendAddProbability = 0.05, _class2.RefuseAddProbability = 0.03, _class2.NPCWinProbability = 0.7, _class2.NPWinGiveBackTime = [3, 5], _class2.HelpTime = [2, 5], _class2.ShareRefresh = 0, _class2.ShareChange = 0, _class2.ShareAddAnimal = 0, _class2.HowManyTimes = 7, _class2.GameTimes = 2, _class2.guideFlagCnt = 5, _class2.AnimalReboundForce = 400, _class2.isgm = false, _class2.skipGuide = false, _class2.logDebug = false, _class2.showGMView = false, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameHelpManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Coroutine.ts', './CfgData.ts', './DataManager.ts', './GameManager.ts', './NpcManager.ts', './UIManager.ts', './GameCfg.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _regeneratorRuntime, cclegacy, _decorator, randomRangeInt, Component, Coroutine, CfgData, DataManager, GameManager, NpcManager, UIManager, GameCfg;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      randomRangeInt = module.randomRangeInt;
      Component = module.Component;
    }, function (module) {
      Coroutine = module.Coroutine;
    }, function (module) {
      CfgData = module.CfgData;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      NpcManager = module.NpcManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      GameCfg = module.GameCfg;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "b51d3EKZqREFazzvu2609M5", "GameHelpManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GameHelpManager = exports('GameHelpManager', (_dec = ccclass('GameHelpManager'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameHelpManager, _Component);

        function GameHelpManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.helpCoroutine = void 0;
          _this.homeCfg = void 0;
          _this.timePoints = [];
          _this.animalCnt = 3;
          _this.playerCnt = 2;
          _this.rote = 0.7;
          _this.totallTime = 2 * 60 * 1000;
          _this.helpTimes = 0;
          _this.headList = [];
          _this.playerData = void 0;
          return _this;
        }

        var _proto = GameHelpManager.prototype;

        _proto.init = function init() {
          this.homeCfg = CfgData.getInstance().getHomeCfg();
          this.playerData = DataManager.getInstance().playerData;
          this.animalCnt = GameCfg.SendPAnimalCount;
          this.rote = GameCfg.SendProbability;
          this.totallTime = GameCfg.SendTime * 60 * 1000;
          var playerdata = DataManager.getInstance().playerData;
          this.playerCnt = this.homeCfg.house[playerdata.homeLv].CallFriends;
          var time = this.totallTime / this.playerCnt;

          for (var index = 0; index < this.playerCnt; index++) {
            this.timePoints.push(index * time + randomRangeInt(10, 25) * 1000);
          }
        };

        _proto.startCorotine = function startCorotine() {
          var _this2 = this;

          this.helpCoroutine = new Coroutine(function () {
            return _this2.doHelp();
          });
          this.helpCoroutine.start();
        };

        _proto.stop = function stop() {
          var _this$helpCoroutine;

          (_this$helpCoroutine = this.helpCoroutine) == null ? void 0 : _this$helpCoroutine.stop();
        };

        _proto.onGameFinish = function onGameFinish(gamefinish) {
          this.stop();
        };

        _proto.doHelp = /*#__PURE__*/_regeneratorRuntime().mark(function doHelp() {
          var index, wait, info, _index;

          return _regeneratorRuntime().wrap(function doHelp$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                this.helpTimes = 0;
                index = 0;

              case 2:
                if (!(index < this.timePoints.length)) {
                  _context.next = 13;
                  break;
                }

                wait = 0;

                if (index == 0) {
                  wait = this.timePoints[index] / 1000;
                } else {
                  wait = (this.timePoints[index] - this.timePoints[index - 1]) / 1000;
                }

                _context.next = 7;
                return Coroutine.waitForSecond(0.01, this);

              case 7:
                _context.next = 9;
                return Coroutine.waitForSecond(wait, this);

              case 9:
                if (Math.random() < this.rote + this.playerData.addGiveProbability) {
                  this.helpTimes++;
                  GameManager.getInstance().prop.addAnimaltoGame(this.animalCnt); //随机一个名字，头像

                  info = NpcManager.getInstance().getNpcNameHeadUrl();

                  for (_index = 0; _index < this.animalCnt; _index++) {
                    this.headList.push(info.avatar);
                  }

                  UIManager.getInstance().tip.showNpcInfoTip(["支援了你" + this.animalCnt + "只动物", this.helpTimes.toString(), info.avatar, info.name], 4, 0);
                } else {
                  console.log("游戏帮助失败!");
                }

              case 10:
                index++;
                _context.next = 2;
                break;

              case 13:
                if (this.helpTimes <= 0) {
                  UIManager.getInstance().tip.showNomalTip("附近没有人回应你的求助", 1, 1, 6);
                }

              case 14:
              case "end":
                return _context.stop();
            }
          }, doHelp, this);
        });

        _proto.onDestroy = function onDestroy() {
          var _this$helpCoroutine2;

          (_this$helpCoroutine2 = this.helpCoroutine) == null ? void 0 : _this$helpCoroutine2.stop();
        };

        return GameHelpManager;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameCfg.ts', './DataManager.ts', './Entity.ts', './Fence.ts', './Elephant.ts', './GameResponces.ts', './MapInfo.ts', './Player.ts', './Prop.ts', './TreasureBox.ts', './Panel_Game.ts', './UIManager.ts', './Flag.ts', './AssetsAnimal.ts', './AudioManager.ts', './Utils.ts', './HomeAnimal.ts', './Sheep.ts', './Cow.ts', './Zebra.ts', './Pig.ts', './GameHelpManager.ts', './DifficultyManager.ts', './WInAnimalAnimation.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, JsonAsset, CCBoolean, Vec2, director, find, Camera, geometry, input, Input, Node, Vec3, randomRangeInt, instantiate, Label, PhysicsSystem, Component, physics, GameCfg, DataManager, Entity, Fence, Elephant, GameResponces, MapInfo, AnimalType, Prop, TreasureBox, Panel_Game, UIManager, Flag, AssetsAnimal, AudioManager, Utils, HomeAnimal, Sheep, Cow, Zebra, Pig, GameHelpManager, DifficultyManager, WInAnimalAnimation;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      JsonAsset = module.JsonAsset;
      CCBoolean = module.CCBoolean;
      Vec2 = module.Vec2;
      director = module.director;
      find = module.find;
      Camera = module.Camera;
      geometry = module.geometry;
      input = module.input;
      Input = module.Input;
      Node = module.Node;
      Vec3 = module.Vec3;
      randomRangeInt = module.randomRangeInt;
      instantiate = module.instantiate;
      Label = module.Label;
      PhysicsSystem = module.PhysicsSystem;
      Component = module.Component;
      physics = module.physics;
    }, function (module) {
      GameCfg = module.GameCfg;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      Entity = module.Entity;
    }, function (module) {
      Fence = module.Fence;
    }, function (module) {
      Elephant = module.Elephant;
    }, function (module) {
      GameResponces = module.GameResponces;
    }, function (module) {
      MapInfo = module.MapInfo;
    }, function (module) {
      AnimalType = module.AnimalType;
    }, function (module) {
      Prop = module.Prop;
    }, function (module) {
      TreasureBox = module.TreasureBox;
    }, function (module) {
      Panel_Game = module.Panel_Game;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      Flag = module.Flag;
    }, function (module) {
      AssetsAnimal = module.AssetsAnimal;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      HomeAnimal = module.HomeAnimal;
    }, function (module) {
      Sheep = module.Sheep;
    }, function (module) {
      Cow = module.Cow;
    }, function (module) {
      Zebra = module.Zebra;
    }, function (module) {
      Pig = module.Pig;
    }, function (module) {
      GameHelpManager = module.GameHelpManager;
    }, function (module) {
      DifficultyManager = module.DifficultyManager;
    }, function (module) {
      WInAnimalAnimation = module.WInAnimalAnimation;
    }],
    execute: function () {
      exports({
        AnimaActionlState: void 0,
        GameFinishState: void 0
      });

      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _class3;

      cclegacy._RF.push({}, "4cf01+6e01KIrXUGzAcbakH", "GameManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AnimaActionlState;

      (function (AnimaActionlState) {
        AnimaActionlState[AnimaActionlState["Atking"] = 0] = "Atking";
        AnimaActionlState[AnimaActionlState["Worship"] = 1] = "Worship";
        AnimaActionlState[AnimaActionlState["ShowAnimalModel"] = 2] = "ShowAnimalModel";
        AnimaActionlState[AnimaActionlState["Other"] = 3] = "Other";
      })(AnimaActionlState || (AnimaActionlState = exports('AnimaActionlState', {})));

      var GameFinishState;

      (function (GameFinishState) {
        GameFinishState[GameFinishState["Win"] = 0] = "Win";
        GameFinishState[GameFinishState["Lose"] = 1] = "Lose";
        GameFinishState[GameFinishState["RunAway"] = 2] = "RunAway";
        GameFinishState[GameFinishState["Other"] = 3] = "Other";
      })(GameFinishState || (GameFinishState = exports('GameFinishState', {})));

      var PHY_GROUP;

      (function (PHY_GROUP) {
        PHY_GROUP[PHY_GROUP["DEFAULT"] = 1] = "DEFAULT";
        PHY_GROUP[PHY_GROUP["Animal"] = 2] = "Animal";
        PHY_GROUP[PHY_GROUP["Box"] = 4] = "Box";
      })(PHY_GROUP || (PHY_GROUP = {}));

      var GameManager = exports('GameManager', (_dec = ccclass('GameManager'), _dec2 = property({
        type: JsonAsset,
        visible: true,
        displayName: "动物配置"
      }), _dec3 = property({
        type: CCBoolean,
        visible: true,
        displayName: "是否在攻击"
      }), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameManager, _Component);

        function GameManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._tempAnimas = [];

          _initializerDefineProperty(_this, "jsonAsset", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_atking", _descriptor2, _assertThisInitialized(_this));

          _this.animalCfg = void 0;
          _this._size = void 0;
          _this._inMapAnimas_map = new Map();
          _this._mergeDesAnimals = new Array();
          _this._allPos = new Array();
          _this._alltmepPos = new Array();
          _this._animalLibrary = void 0;
          _this._animalTypes = void 0;
          _this.gameStartAnimalCnt = 0;
          _this._parentAnima = void 0;
          _this._camera = void 0;
          _this._ray = void 0;
          _this.prop = void 0;
          _this._mapNode = void 0;
          _this._mapTag = void 0;
          _this.mapInfo = void 0;
          _this.gameHelpManager = void 0;
          _this.curAnimalState = AnimaActionlState.Other;
          _this.additionalHurt = 0;
          _this.cile = [new Vec2(0, -1), new Vec2(1, 0), new Vec2(0, 1), new Vec2(-1, 0)];
          return _this;
        }

        GameManager.getInstance = function getInstance() {
          if (!this._instance) this._instance = director.getScene().getComponentInChildren(GameManager);
          return this._instance;
        };

        GameManager.unInstance = function unInstance() {
          this._instance = null;
        };

        var _proto = GameManager.prototype;

        _proto.init = function init(npc, animallist, animalFram, reflashTeam) {
          this._tempAnimas = AssetsAnimal.instance.gameAnimals;
          this._camera = find("map_View/Main Camera").getComponent(Camera);
          this.prop = new Prop();
          this._ray = new geometry.Ray();
          this.animalCfg = this.jsonAsset.json;
          this.mapInfo = find("map_View").getComponent(MapInfo);
          this.gameHelpManager = this.node.addComponent(GameHelpManager);
          this._mapNode = this.mapInfo.buildMap(npc);
          this._animalLibrary = new Array();
          this._animalLibrary = this._animalLibrary.concat(animallist);
          animalFram == null ? void 0 : animalFram.clearAnimals(animalFram._lisAnimals.length);

          if (reflashTeam) {
            this._animalLibrary = Utils.KnuthDurstenfeldShuffle(this._animalLibrary);
            this._animalLibrary = DifficultyManager.flashAniamlByDiffculty(this._animalLibrary);
          }

          this._animalTypes = Array.from(DataManager.getInstance().playerData.unlockAnimals);
          this.initAnimal();
          this.createAnimals();
          this.gameStartAnimalCnt = this._animalLibrary.length;
          this.gameHelpManager.init();
          this.mapInfo.getComponent(WInAnimalAnimation).buildAnimals();
          input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);
        };

        _proto.initAnimal = function initAnimal() {
          this._size = this.mapInfo._size;
          this._parentAnima = new Node("AimaParent");
          director.getScene().addChild(this._parentAnima);
        };

        _proto.createAnimals = function createAnimals() {
          var l = this._size.x * this._size.y;
          var index = 0;
          this._mapTag = new Array();

          for (var x = 0; x < this._size.x; x++) {
            for (var y = 0; y < this._size.y; y++) {
              var pos2 = new Vec2(x, y);
              var pos = new Vec3(this._mapNode[index].worldPosition);
              var box = this.mapInfo._boxEntitys[index];

              if (!box && this._animalLibrary.length > 0) {
                var animaltype = this._animalLibrary.shift();

                var baseAnimal = this.createAnimal(animaltype);
                baseAnimal.init(index, pos2, animaltype);

                this._inMapAnimas_map.set(baseAnimal.uuid, baseAnimal);

                this._parentAnima.addChild(baseAnimal.node);

                baseAnimal.node.setWorldPosition(pos);
              }

              this._alltmepPos.push(pos2);

              this._mapTag.push(true);

              if (!box) this.setMapTag(index, this.hasAnima(this._inMapAnimas_map, pos2));

              this._allPos.push(new Vec2(pos.x, pos.z));

              index++;
            }
          }
        };

        _proto.randomCreateAnimal = function randomCreateAnimal() {
          var index = 0;
          index = randomRangeInt(0, this._animalTypes.length);
          var animalType = this._animalTypes[index];
          return this.createAnimal(animalType);
        };

        _proto.createAnimal = function createAnimal(animalType) {
          if (!this._tempAnimas) {
            return null;
          }

          var anima = instantiate(this._tempAnimas[animalType]);
          var baseAnimal = anima.getComponent(Entity);
          baseAnimal.animalType = animalType;
          return baseAnimal;
        };

        _proto.onMerge = function onMerge(animal) {
          UIManager.getInstance().setUIMaskActive(true);
          this._atking = true;
          AudioManager.instance.clickAnimal(animal.animalType);
          var needMerge = this.getMergeList(animal); //点击合成数不够

          if (needMerge.size <= GameCfg.minMerge - 1) {
            this._atking = false;
            needMerge.forEach(function (animal) {
              animal.setSingeClickState();
            });
            console.log("onMerge---------------:合成数量不够");
            UIManager.getInstance().setUIMaskActive(false);
            return;
          }

          this.getRunPath(needMerge);
        };

        _proto.setMapTag = function setMapTag(index, tag) {
          this._mapTag[index] = tag;
          if (!tag) this._mapNode[index].getComponentInChildren(Label).string = "x";else this._mapNode[index].getComponentInChildren(Label).string = index.toString();
        };

        _proto.nextStep = /*#__PURE__*/function () {
          var _nextStep = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return this.delay(200);

                case 2:
                  GameResponces._event.emit(GameResponces.RundFinish);

                  UIManager.getInstance().setUIMaskActive(false);
                  GameManager.getInstance()._atking = false;
                  this.onCheckGameState();

                case 6:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function nextStep() {
            return _nextStep.apply(this, arguments);
          }

          return nextStep;
        }();

        _proto.onAnimalBorn = /*#__PURE__*/function () {
          var _onAnimalBorn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var maxDelay, index, element, r, anima, baseAnimal, endPos, x, pos, pos2, delayTime, dis, time;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  UIManager.getInstance().setUIMaskActive(true);
                  this._atking = true;
                  maxDelay = 0;

                  for (index = 0; index < this._mapTag.length; index++) {
                    element = this._mapTag[index];

                    if (!element && !this.verticalHaveOps(index)) {
                      if (this._animalLibrary.length > 0) {
                        r = this._animalLibrary.shift();
                        anima = instantiate(this._tempAnimas[r]);
                        baseAnimal = anima.getComponent(Entity);

                        this._parentAnima.addChild(anima);

                        endPos = new Vec3(this._mapNode[index].worldPosition);
                        x = Math.floor(index / this._size.y);
                        pos = new Vec3(this.mapInfo._bornPoints[x].worldPosition);
                        pos2 = new Vec2(x, index % this._size.y);
                        this.setMapTag(index, true);
                        if (this.gameHelpManager.headList.length > 0) baseAnimal.init(index, pos2, r, this.gameHelpManager.headList.shift());else baseAnimal.init(index, pos2, r);
                        anima.setPosition(pos);
                        delayTime = pos2.y * 0.2;
                        dis = Math.abs(Vec3.distance(endPos, anima.getPosition()));
                        time = dis / 7;

                        if (maxDelay < delayTime + time) {
                          maxDelay = delayTime + time;
                          baseAnimal.delayMove(endPos, delayTime, null);
                        } else {
                          baseAnimal.delayMove(endPos, delayTime, null);
                        }

                        this._inMapAnimas_map.set(baseAnimal.uuid, baseAnimal);
                      }
                    }
                  }

                  _context2.next = 7;
                  return this.delay(maxDelay * 1000);

                case 7:
                  this.nextStep();

                case 8:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));

          function onAnimalBorn() {
            return _onAnimalBorn.apply(this, arguments);
          }

          return onAnimalBorn;
        }();

        _proto.onAnimalForwrad = function onAnimalForwrad(_animalList, call) {
          var _this2 = this;

          var animalList = _animalList;
          animalList.forEach(function (element) {
            var endIndex = 0;
            var orgIndex = element.index;
            var needMove = false;
            endIndex = element.index;
            var ysize = element.index % _this2._size.y; //按照行来找

            for (var y = 1; y <= ysize; y++) {
              var targetIndex = element.index - y;
              if (_this2.haveOps(targetIndex)) break;

              if (targetIndex >= 0 && !_this2._mapTag[targetIndex]) {
                needMove = true;
                endIndex = targetIndex;
              }
            }

            if (needMove) {
              element.index = endIndex;
              element.temPos = _this2._alltmepPos[endIndex];

              _this2.setMapTag(element.index, true);

              _this2.setMapTag(orgIndex, false);

              var endPos = new Vec3(_this2._allPos[element.index].x, 0, _this2._allPos[element.index].y);
              element.move(endPos, false, null, 0, true);
            }
          });
        };

        _proto.onMergeDestroyAnimal = function onMergeDestroyAnimal(animal) {
          if (this._mergeDesAnimals.indexOf(animal) < 0) {
            this._mergeDesAnimals.push(animal);
          }
        };

        _proto.getRunPath = /*#__PURE__*/function () {
          var _getRunPath = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(needMerge) {
            var _this3 = this;

            var list, list_merge, mergeNumber, lastIndex, lastPos, startAnimal, startIndex, startPos, moveSpeed, _loop, i;

            return _regeneratorRuntime().wrap(function _callee3$(_context5) {
              while (1) switch (_context5.prev = _context5.next) {
                case 0:
                  list = new Array();
                  list_merge = Array.from(needMerge.values());
                  mergeNumber = list_merge.length - 1;

                  this._mergeDesAnimals.splice(0, this._mergeDesAnimals.length);

                  lastIndex = -1;
                  lastPos = Vec2.ZERO;
                  startAnimal = list_merge[0];
                  startIndex = startAnimal.index;
                  startPos = new Vec3(this._allPos[startIndex].x, 0, this._allPos[startIndex].y);
                  moveSpeed = 5.1;
                  _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop(i) {
                    var lastAnimal, _loop2, index, _ret, moveOneGirdeTime, _index, element, nowIndex, nextPos, nowPos;

                    return _regeneratorRuntime().wrap(function _loop$(_context4) {
                      while (1) switch (_context4.prev = _context4.next) {
                        case 0:
                          //排序一下
                          list.splice(0, list.length);
                          list.push(startAnimal);
                          lastAnimal = startAnimal;
                          _loop2 = /*#__PURE__*/_regeneratorRuntime().mark(function _loop2() {
                            var needMove;
                            return _regeneratorRuntime().wrap(function _loop2$(_context3) {
                              while (1) switch (_context3.prev = _context3.next) {
                                case 0:
                                  needMove = _this3.getNearAnimal(needMerge, lastAnimal, list);

                                  if (!(needMove == null)) {
                                    _context3.next = 4;
                                    break;
                                  }

                                  _this3.setMapTag(lastAnimal.index, false);

                                  return _context3.abrupt("return", "break");

                                case 4:
                                  if (!list.find(function (b) {
                                    return b.index == needMove.index;
                                  })) {
                                    list.push(needMove);
                                    lastAnimal = needMove;
                                  } else {
                                    _this3.setMapTag(lastAnimal.index, false);
                                  }

                                case 5:
                                case "end":
                                  return _context3.stop();
                              }
                            }, _loop2);
                          });
                          index = 0;

                        case 5:
                          if (!(index < list_merge.length)) {
                            _context4.next = 13;
                            break;
                          }

                          return _context4.delegateYield(_loop2(), "t0", 7);

                        case 7:
                          _ret = _context4.t0;

                          if (!(_ret === "break")) {
                            _context4.next = 10;
                            break;
                          }

                          return _context4.abrupt("break", 13);

                        case 10:
                          index++;
                          _context4.next = 5;
                          break;

                        case 13:
                          moveSpeed += 0.9;
                          moveSpeed = Utils.limitNumber(moveSpeed, 6, 9); //console.log("当前移动速度："+moveSpeed);

                          moveOneGirdeTime = 1 / moveSpeed * 1000; //合并队列移动一格

                          for (_index = 1; _index < list.length; _index++) {
                            element = list[_index];

                            if (_index == 1) {
                              lastIndex = element.index;
                              lastPos = element.temPos;

                              _this3.deleteMapItem(_this3._inMapAnimas_map, element.uuid);

                              _this3.deleteMapItem(needMerge, element.uuid);

                              _this3.onMergeDestroyAnimal(element); //需要让被点击的模型变大 


                              element.move(startPos, true, function () {
                                AudioManager.instance.playMerge(i);
                              }, moveSpeed);
                              startAnimal.setBigState(i);
                            } else {
                              nowIndex = element.index;
                              nextPos = _this3._allPos[lastIndex];
                              nowPos = element.temPos;
                              element.index = lastIndex;
                              element.temPos = lastPos;
                              lastIndex = nowIndex;
                              lastPos = nowPos;
                              element.move(new Vec3(nextPos.x, 0, nextPos.y), false, null, moveSpeed);
                            }
                          } // while (!isComplet) {
                          // }


                          _context4.next = 20;
                          return _this3.delay(moveOneGirdeTime);

                        case 20:
                        case "end":
                          return _context4.stop();
                      }
                    }, _loop);
                  });
                  i = 0;

                case 12:
                  if (!(i < mergeNumber)) {
                    _context5.next = 17;
                    break;
                  }

                  return _context5.delegateYield(_loop(i), "t0", 14);

                case 14:
                  i++;
                  _context5.next = 12;
                  break;

                case 17:
                  this.onAtk(startAnimal);

                case 18:
                case "end":
                  return _context5.stop();
              }
            }, _callee3, this);
          }));

          function getRunPath(_x) {
            return _getRunPath.apply(this, arguments);
          }

          return getRunPath;
        }();

        _proto.onextRound = function onextRound() {
          if (this.curAnimalState == AnimaActionlState.Other) {
            this.onAnimalForwrad(Array.from(this._inMapAnimas_map.values()));
            this.onAnimalBorn();
          }
        };

        _proto.onAtk = /*#__PURE__*/function () {
          var _onAtk = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(clickAnima) {
            var _this4 = this;

            var atk, startX, h, dis, rightDis, listAnimals, index, _iterator, _step, key, _element, _index5, item, endPos, atkTarget, _index4, element, offcet, isMoveOver, count, _loop3, _iterator2, _step2;

            return _regeneratorRuntime().wrap(function _callee4$(_context7) {
              while (1) switch (_context7.prev = _context7.next) {
                case 0:
                  this.curAnimalState = AnimaActionlState.Worship; //额外的伤害总和

                  this.additionalHurt = 0;

                  if (!(clickAnima.animalType == AnimalType.zebra)) {
                    _context7.next = 13;
                    break;
                  }

                  atk = false;
                  this.zebraAtk(clickAnima, function () {
                    atk = true;
                  });

                case 5:
                  if (atk) {
                    _context7.next = 10;
                    break;
                  }

                  _context7.next = 8;
                  return this.delay(10);

                case 8:
                  _context7.next = 5;
                  break;

                case 10:
                  this.curAnimalState = AnimaActionlState.Other;
                  this.onextRound();
                  return _context7.abrupt("return");

                case 13:
                  //开始避让
                  startX = clickAnima.temPos.x;
                  h = 1.0; //把0规避一下

                  dis = 0.3;
                  rightDis = dis / (startX + 1); //按列分配好

                  listAnimals = new Map();

                  for (index = 0; index < this._size.x; index++) {
                    listAnimals.set(index, new Array());
                  }

                  this._inMapAnimas_map.forEach(function (element) {
                    var list = listAnimals.get(element.temPos.x); //高于自己的才能移动

                    if (element.temPos.y < clickAnima.temPos.y) {
                      if (startX < element.temPos.x) {
                        var _index2 = startX * _this4._size.y + element.temPos.y;

                        if (_this4._mapTag[_index2]) {
                          list.push(element);
                        }
                      } else if (startX > element.temPos.x) {
                        //前一个位置为空就不添加
                        var _index3 = (startX - 1) * _this4._size.y + element.temPos.y;

                        if (_this4._mapTag[_index3]) {
                          list.push(element);
                        }
                      } else {
                        list.push(element);
                      }
                    }
                  }); //后退


                  for (_iterator = _createForOfIteratorHelperLoose(listAnimals.keys()); !(_step = _iterator()).done;) {
                    key = _step.value;
                    _element = listAnimals.get(key);

                    for (_index5 = 0; _index5 < _element.length; _index5++) {
                      item = _element[_index5];
                      endPos = new Vec3(item.node.position);

                      if (key < startX) {
                        endPos.add3f(-rightDis * (key + 1), 0, 0);
                        item.leftMove(endPos);
                      } else {
                        endPos.add3f(h + dis * (startX - key + 1), 0, 0);
                        item.rightMove(endPos);
                      }
                    }
                  }

                  _context7.next = 23;
                  return this.delay(300);

                case 23:
                  if (!(clickAnima.animalType == AnimalType.elephant)) {
                    _context7.next = 35;
                    break;
                  }

                  atkTarget = false;
                  this.elephantAtk(clickAnima, function () {
                    atkTarget = true;
                  });

                case 26:
                  if (atkTarget) {
                    _context7.next = 31;
                    break;
                  }

                  _context7.next = 29;
                  return this.delay(10);

                case 29:
                  _context7.next = 26;
                  break;

                case 31:
                  _context7.next = 33;
                  return this.delay(400);

                case 33:
                  _context7.next = 61;
                  break;

                case 35:
                  //开始攻击
                  clickAnima.myRotate(180, 0.15);
                  _context7.next = 38;
                  return this.delay(150);

                case 38:
                  clickAnima.setAtkState();
                  _context7.next = 41;
                  return this.delay(200);

                case 41:
                  _index4 = 0;

                case 42:
                  if (!(_index4 < this._mergeDesAnimals.length)) {
                    _context7.next = 57;
                    break;
                  }

                  element = this._mergeDesAnimals[_index4];
                  element.isNomalAnimal = false;
                  element.rg.type = physics.ERigidBodyType.DYNAMIC;
                  element.rg.useGravity = false;
                  element.setScale(clickAnima.getScale().x * 0.85);
                  offcet = new Vec3(element.node.position); //左右偏移一下

                  if (_index4 % 2 == 0) {
                    offcet.add3f(0.2, 0, 0);
                  } else {
                    offcet.add3f(-0.2, 0, 0);
                  }

                  element.node.setPosition(offcet);
                  element.doAtk(this._mergeDesAnimals.length, _index4 + 1);
                  _context7.next = 54;
                  return this.delay(GameCfg.atkRate * 1000);

                case 54:
                  _index4++;
                  _context7.next = 42;
                  break;

                case 57:
                  clickAnima.setIdleState();
                  clickAnima.setScale(1);
                  _context7.next = 61;
                  return this.delay(500);

                case 61:
                  isMoveOver = false; //防止没有避让的时候卡住逻辑

                  count = 0; //退回来

                  _loop3 = /*#__PURE__*/_regeneratorRuntime().mark(function _loop3() {
                    var key, element;
                    return _regeneratorRuntime().wrap(function _loop3$(_context6) {
                      while (1) switch (_context6.prev = _context6.next) {
                        case 0:
                          key = _step2.value;
                          element = listAnimals.get(key);
                          count += element.length;
                          element.forEach(function (item) {
                            if (key < startX) {
                              item.leftComBack(function () {
                                isMoveOver = true;
                              });
                            } else {
                              item.rightComBack(function () {
                                isMoveOver = true;
                              });
                            }
                          });

                        case 4:
                        case "end":
                          return _context6.stop();
                      }
                    }, _loop3);
                  });
                  _iterator2 = _createForOfIteratorHelperLoose(listAnimals.keys());

                case 65:
                  if ((_step2 = _iterator2()).done) {
                    _context7.next = 69;
                    break;
                  }

                  return _context7.delegateYield(_loop3(), "t0", 67);

                case 67:
                  _context7.next = 65;
                  break;

                case 69:
                  if (!(count != 0 && !isMoveOver)) {
                    _context7.next = 74;
                    break;
                  }

                  _context7.next = 72;
                  return this.delay(20);

                case 72:
                  _context7.next = 69;
                  break;

                case 74:
                  _context7.next = 76;
                  return this.delay(200);

                case 76:
                  this.curAnimalState = AnimaActionlState.Other; //攻击后，显示连击

                  if (clickAnima.animalType != AnimalType.elephant && this._mergeDesAnimals.length >= 5) {
                    UIManager.getInstance().tip.doubleHiTip(this._mergeDesAnimals.length, this.additionalHurt);
                  }

                  this.onextRound();

                case 79:
                case "end":
                  return _context7.stop();
              }
            }, _callee4, this);
          }));

          function onAtk(_x2) {
            return _onAtk.apply(this, arguments);
          }

          return onAtk;
        }();

        _proto.elephantAtk = function elephantAtk(clickAnima, call) {
          this.setMapTag(clickAnima.index, false);
          this.deleteMapItem(this._inMapAnimas_map, clickAnima.uuid);
          clickAnima.getComponent(Elephant).doelephantAtk(this._mergeDesAnimals.length, 1, call);

          this._mergeDesAnimals.forEach(function (element) {
            element.destroyEntity();
          });
        };

        _proto.zebraAtk = function zebraAtk(clickAnima, call) {
          clickAnima.setScale(clickAnima.orgScale.x);
          UIManager.getInstance().setUIMaskActive(false);

          this.prop.changeAnimalCall = function () {
            call();
          };

          clickAnima.play("golex");
          var list = new Array();

          this._inMapAnimas_map.forEach(function (element) {
            if (element.animalType == clickAnima.animalType) list.push(element);
          });

          var game = UIManager.getInstance().getPanel(Panel_Game);
          game.showSwtichPop();
          this.prop.showAnimalModel(clickAnima, [AnimalType.zebra]);
          this.prop.clickToAnimal(clickAnima, false);
        } //获取距离上一个点最近的点
        ;

        _proto.getNearAnimal = function getNearAnimal(needMerges, lastAnimal, path) {
          var _this5 = this;

          var temp = null;
          var enpos = lastAnimal.temPos;
          this.cile.some(function (element) {
            var pos = new Vec2(enpos).add(element);

            var nowAnimal = _this5.getAnimal(needMerges, pos);

            if (nowAnimal && _this5._mapTag[nowAnimal.index] && path.indexOf(nowAnimal) < 0) {
              temp = nowAnimal;
              return true;
            }
          });
          return temp;
        };

        _proto.haveOps = function haveOps(index) {
          var entity = this.mapInfo._boxEntitys[index];
          var bl = false;

          if (entity && (entity.getComponent(Fence) || entity.getComponent(TreasureBox))) {
            bl = true;
          } else if (!entity) {
            bl = false;
          }

          return bl;
        };

        _proto.verticalHaveOps = function verticalHaveOps(index) {
          var bl = false;
          var ysize = Math.floor(index / this._size.y);

          for (var y = 0; y < this._size.y; y++) {
            var targetIndex = ysize * this._size.y + y;
            var entity = this.mapInfo._boxEntitys[targetIndex];

            if (entity && (entity.getComponent(Fence) || entity.getComponent(TreasureBox))) {
              //在下方
              if (index < targetIndex) return true;
            }
          }

          return bl;
        };

        _proto.deleteMapItem = function deleteMapItem(_map, ky) {
          var item = null;

          for (var _iterator3 = _createForOfIteratorHelperLoose(_map.keys()), _step3; !(_step3 = _iterator3()).done;) {
            var key = _step3.value;

            if (key == ky) {
              item = key;
              break;
            }
          }

          if (!_map["delete"](item)) {
            console.log("删除失败：" + item + "ky:" + ky);
          }
        };

        _proto.getAnimal = function getAnimal(list, pos) {
          var anima = null;
          list.forEach(function (element) {
            if (element.temPos && element.temPos.x == pos.x && element.temPos.y == pos.y) {
              anima = element;
              return anima;
            }
          });
          return anima;
        };

        _proto.hasAnima = function hasAnima(list, pos) {
          for (var _iterator4 = _createForOfIteratorHelperLoose(list.values()), _step4; !(_step4 = _iterator4()).done;) {
            var value = _step4.value;
            if (value.temPos && value.temPos.x == pos.x && value.temPos.y == pos.y) return true;
          }

          return false;
        };

        _proto.getAllAnimal = function getAllAnimal() {
          var list = new Array();

          if (this._animalLibrary) {
            this._animalLibrary.forEach(function (element) {
              if (element != null && element != undefined) list.push(element);else console.log("_animalLibrary 有null");
            });
          }

          if (this._inMapAnimas_map) {
            this._inMapAnimas_map.forEach(function (element) {
              if (element != null && element != undefined) list.push(element.animalType);else console.log("_inMapAnimas_map 有null");
            });
          }

          return list;
        };

        _proto.getMergeList = function getMergeList(clickItem) {
          var _this6 = this;

          var tempAnimas = new Map();
          var clickAnima = clickItem;
          tempAnimas.set(clickAnima.uuid, clickAnima); //寻找8次

          var cnt = this._size.x * this._size.y;

          for (var index = 0; index < cnt; index++) {
            var list = Array.from(tempAnimas);
            list.forEach(function (element) {
              _this6.cile.forEach(function (dir) {
                var nowpos = new Vec2(element[1].temPos);
                nowpos.add(dir);

                var anima = _this6.getAnimal(_this6._inMapAnimas_map, nowpos);

                if (anima && anima.name == clickAnima.name && !_this6.hasAnima(tempAnimas, nowpos)) {
                  tempAnimas.set(anima.uuid, anima);
                }
              });
            });
          }

          return tempAnimas;
        };

        _proto.onGameStart = function onGameStart(npc, animalList, animalfarm, difftag) {
          if (difftag === void 0) {
            difftag = true;
          }

          this.init(npc, animalList, animalfarm, difftag);
          this._atking = false;
          AudioManager.instance.playMusicOnBattle();
          UIManager.getInstance().getPanel(Panel_Game).onGameStart();
          UIManager.getInstance().setUIMaskActive(false);
          this.onCheckGameState(); //处理一下垃圾回收

          if (Utils.isWxPlatform()) {
            //@ts-ignore
            wx.triggerGC();
          }
        };

        _proto.onCheckGameState = function onCheckGameState() {
          var state = this.checkGameLoseState();
          this.onGameFinish(state[0], state[1]);
        };

        _proto.checkGameLoseState = function checkGameLoseState() {
          var gameState = GameFinishState.Other;
          var hpCondition = this.mapInfo.enclos.curHp > 0;
          var animalCntCondition = this._animalLibrary.length <= 0 && this._inMapAnimas_map.size <= 0;
          if (!hpCondition) return [GameFinishState.Win, -1];

          if (this.prop.getbronAniamalCnt() <= 0 && animalCntCondition && hpCondition) {
            return [GameFinishState.Lose, -1];
          }

          if (this._inMapAnimas_map.size > 0 && hpCondition) {
            for (var _iterator5 = _createForOfIteratorHelperLoose(this._inMapAnimas_map.values()), _step5; !(_step5 = _iterator5()).done;) {
              var entity = _step5.value;
              var mergeMap = this.getMergeList(entity);

              if (mergeMap.size > 1) {
                return [gameState, -1];
              }
            }

            var panel_game = UIManager.getInstance().getPanel(Panel_Game); //没有可以合成的动物

            if (this.prop.getbronAniamalCnt() > 0) {
              panel_game.showPropTip(2);
            }

            if (this.prop.getchangeAnimalCnt() > 0) {
              panel_game.showPropTip(1);
            }

            if (this.prop.getreflashAniamalCnt() > 0) {
              panel_game.showPropTip(0);
            }

            if (this.prop.getbronAniamalCnt() <= 0 && this.prop.getchangeAnimalCnt() <= 0 && this.prop.getreflashAniamalCnt() <= 0) {
              return [GameFinishState.Lose, 1];
            } else {
              UIManager.getInstance().tip.showNomalTip("已无可消除动物\n可使用道具解围", 1, 1, 8);
            }
          }

          return [gameState, -1];
        };

        _proto.onGameFinish = function onGameFinish(gamefinish, losetype) {
          switch (gamefinish) {
            case GameFinishState.Win:
              this._inMapAnimas_map.forEach(function (element) {
                element.play("win");
              });

              GameResponces._event.emit(GameResponces.onGameFinish, gamefinish, losetype);

              break;

            case GameFinishState.Lose:
              GameResponces._event.emit(GameResponces.onGameFinish, gamefinish, losetype);

              break;
          }
        };

        _proto.triggerTouchStart = function triggerTouchStart(event) {
          this.onTouchStart(event);
        };

        _proto.onTouchStart = function onTouchStart(event) {
          var touch = event.touch;

          this._camera.screenPointToRay(touch.getLocationX(), touch.getLocationY(), this._ray);

          if (PhysicsSystem.instance.raycastClosest(this._ray)) {
            var raycastResults = PhysicsSystem.instance.raycastClosestResult;
            var item = raycastResults;
            var anima = item.collider.getComponent(Entity);

            if (anima && (anima instanceof Sheep || anima instanceof Cow || anima instanceof Zebra || anima instanceof Pig || anima instanceof Elephant)) {
              if (this.curAnimalState == AnimaActionlState.Other && !this._atking) {
                this.onMerge(anima);

                GameResponces._event.emit(GameResponces.clickAnimalMerge, anima);
              } else if (this.curAnimalState == AnimaActionlState.ShowAnimalModel && !this._atking && anima) {
                this.prop.clickToAnimal(anima);
              }
            }

            if (anima && anima instanceof TreasureBox) {
              anima.play("shake");
            }

            var npchead = item.collider.getComponent(Flag);

            if (npchead) {
              npchead.clickHead(true);
            }

            var homeAnimal = item.collider.getComponent(HomeAnimal);

            if (homeAnimal) {
              homeAnimal.onClick();
            }
          } else {
            console.log('raycast does not hit the target node !');
          }
        };

        _proto.delay = function delay(time) {
          return Utils.delay(time, this);
        };

        return GameManager;
      }(Component), _class3._instance = void 0, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "jsonAsset", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new JsonAsset();
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_atking", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameResponces.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, _decorator, EventTarget;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      EventTarget = module.EventTarget;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "051e16Vrf5H1phaqKVFbqMx", "GameResponces", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GameResponces = exports('GameResponces', (_dec = ccclass('GameResponces'), _dec(_class = (_class2 = function GameResponces() {}, _class2._event = new EventTarget(), _class2.endProgress = "endProgress", _class2.touchAnimal = "touchAnimal", _class2.createHpBar = "createHpBar", _class2.onGameFinish = "onGameFinish", _class2.updateCion = "updateCion", _class2.cionChange = "cionChange", _class2.clickHouse = "clickHouse", _class2.createNewSceneNpc = "createNewSceneNpc", _class2.createBronAnimal = "createBronAnimal", _class2.homeLvUp = "homeLvUp", _class2.clickAnimalMerge = "clickAnimalMerge", _class2.ShowEnding = "ShowEnding", _class2.FingerBack = "FingerBack", _class2.BackToMain = "BackToMain", _class2.RundFinish = "RundFinish", _class2.ClickStart = "ClickStart", _class2.FingerNPC = "FingerNPC", _class2.FingerAnimalDetails = "FingerAnimalDetails", _class2.ViewAnimalDetails = "ViewAnimalDetails", _class2.ClickWinHead = "ClickWinHead", _class2.ClickToBattle = "ClickToBattle", _class2.ClickCoinBuy = "ClickCoinBuy", _class2.ClickBattleIn = "ClickBattleIn", _class2.FingerRefresh = "FingerRefresh", _class2.ClickRefreshButton = "ClickRefreshButton", _class2.FingerAnimalCorpse = "FingerAnimalCorpse", _class2.FingerSellAnimal = "FingerSellAnimal", _class2.FingerClickUpdate = "FingerClickUpdate", _class2.FingerClickUpdateHouse = "FingerClickUpdateHouse", _class2.FingerUpdateClose = "FingerUpdateClose", _class2.FingerUpdateFence = "FingerUpdateFence", _class2.FingerSellRealAnimal = "FingerSellRealAnimal", _class2.ClickHouseToSellAnimal = "ClickHouseToSellAnimal", _class2.WaitForGoGame = "WaitForGoGame", _class2.ShowBuyAnimal = "ShowBuyAnimal", _class2.hidePopexceed = "hidePopexceed", _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameStateView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameManager.ts', './UIManager.ts', './Panel_Game.ts', './Panel_GameFinish.ts', './Panel_Load.ts', './AnimalFarm.ts', './AssetSys.ts', './Utils.ts', './NpcManager.ts', './CfgData.ts', './DataManager.ts', './ButtonExtend.ts', './SdkManager.ts', './HomeManager.ts', './GameResponces.ts', './TimeTools.ts', './GameCfg.ts', './GuideManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, CCInteger, Button, Label, Sprite, Node, instantiate, director, randomRangeInt, v3, Component, GameFinishState, GameManager, UIManager, Panel_Game, Panel_GameFinish, Panel_Load, AnimalFarm, AssetSys, Utils, NpcManager, CfgData, DataManager, ButtonExtend, SdkManager, ShareAppType, adEnum, HomeManager, GameResponces, TimeTools, GameCfg, GuideManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCInteger = module.CCInteger;
      Button = module.Button;
      Label = module.Label;
      Sprite = module.Sprite;
      Node = module.Node;
      instantiate = module.instantiate;
      director = module.director;
      randomRangeInt = module.randomRangeInt;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      GameFinishState = module.GameFinishState;
      GameManager = module.GameManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      Panel_Game = module.Panel_Game;
    }, function (module) {
      Panel_GameFinish = module.Panel_GameFinish;
    }, function (module) {
      Panel_Load = module.Panel_Load;
    }, function (module) {
      AnimalFarm = module.AnimalFarm;
    }, function (module) {
      AssetSys = module.AssetSys;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      NpcManager = module.NpcManager;
    }, function (module) {
      CfgData = module.CfgData;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      ButtonExtend = module.ButtonExtend;
    }, function (module) {
      SdkManager = module.SdkManager;
      ShareAppType = module.ShareAppType;
      adEnum = module.adEnum;
    }, function (module) {
      HomeManager = module.HomeManager;
    }, function (module) {
      GameResponces = module.GameResponces;
    }, function (module) {
      TimeTools = module.TimeTools;
    }, function (module) {
      GameCfg = module.GameCfg;
    }, function (module) {
      GuideManager = module.GuideManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13;

      cclegacy._RF.push({}, "903c2FgcyhCwoeaW8Esr4yR", "GameStateView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GameStateView = exports('GameStateView', (_dec = ccclass('GameStateView'), _dec2 = property({
        type: CCInteger,
        displayName: "游戏状态"
      }), _dec3 = property({
        type: Button,
        displayName: "回家"
      }), _dec4 = property({
        type: Button,
        displayName: "广告"
      }), _dec5 = property({
        type: Label,
        displayName: "奖励的金币"
      }), _dec6 = property({
        type: Label,
        displayName: "奖励的动物"
      }), _dec7 = property({
        type: Label,
        displayName: "npc名字"
      }), _dec8 = property({
        type: Sprite,
        displayName: "npc头像"
      }), _dec9 = property({
        type: Label,
        displayName: "玩家剩余动物数量"
      }), _dec10 = property({
        type: Label,
        displayName: "玩家名字"
      }), _dec11 = property({
        type: Sprite,
        displayName: "玩家头像"
      }), _dec12 = property({
        type: Node,
        displayName: "胜利特效"
      }), _dec13 = property({
        type: ButtonExtend,
        displayName: "分享录屏"
      }), _dec14 = property({
        type: ButtonExtend,
        displayName: "分享"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameStateView, _Component);

        function GameStateView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "gameState", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btn_back", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btn_wsfs", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rewardCoin", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rewardAnimals", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "npcName", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "npchead", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "residueAnimal", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "playerName", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "playeread", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fx_wibn", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btn_shareVideo", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btn_share", _descriptor13, _assertThisInitialized(_this));

          _this.fxNode = void 0;
          _this.coinCnt = 0;
          _this.aniamlCnt = void 0;
          _this.flag = void 0;
          _this.tips = ["<color =#FFFFFF>升级住宅才能解锁新功能!</color>", "<color =#FFFFFF>升级住宅才能解锁大象!</color>", "<color =#FFFFFF>升级住宅才能解锁斑马!</color>"];
          return _this;
        }

        var _proto = GameStateView.prototype;

        _proto.onLoad = function onLoad() {
          this.btn_back.node.on(Button.EventType.CLICK, this.back, this);

          if (this.gameState == GameFinishState.Win) {
            this.btn_wsfs.node.on(Button.EventType.CLICK, this.winDoubleAd, this);
          } else if (this.gameState == GameFinishState.Lose || this.gameState == GameFinishState.RunAway) {
            this.btn_wsfs.node.on(Button.EventType.CLICK, this.adwsfs, this);
          }

          this.btn_share.node.on(Button.EventType.CLICK, function () {
            SdkManager.getInstance().ShareAppMessage(ShareAppType.Game);
            SdkManager.getInstance().SendEvent(CfgData.getInstance().getEventData().getDotEvent(15).id, null);
          }, this);

          if (this.btn_shareVideo) {
            this.btn_shareVideo.node.on(Button.EventType.CLICK, function () {
              SdkManager.getInstance().ShareVideo(function () {});
            }, this);
          }
        };

        _proto.onDisable = function onDisable() {
          if (this.fxNode) {
            this.fxNode.destroy();
          }
        };

        _proto.onEnable = function onEnable() {
          if (this.gameState == GameFinishState.Win) {
            this.fxNode = instantiate(this.fx_wibn);
            this.fx_wibn.parent.addChild(this.fxNode);
            this.fxNode.active = true;

            if (Utils.isDyPlatform()) {
              this.btn_shareVideo.node.active = true;
              this.btn_share.node.active = false;
            } else {
              this.btn_shareVideo.node.active = false;
              this.btn_share.node.active = true;
            }
          } else {
            // this.btn_shareVideo.node.active = false;
            this.btn_share.node.active = true;
          }
        };

        _proto.ini = function ini(npc, flag) {
          var _this2 = this;

          this.flag = flag;
          this.aniamlCnt = GameManager.getInstance().getAllAnimal().length;
          var curNpc = npc;
          var homeCfg = CfgData.getInstance().getHomeCfg();
          var player = DataManager.getInstance().playerData;

          if (this.gameState == GameFinishState.Win) {
            this.coinCnt = homeCfg.house[curNpc.lv].WinCoin;
            this.rewardCoin.string = this.coinCnt.toString();
            this.rewardAnimals.string = curNpc.residualAnimalCount.toString();
            this.residueAnimal.string = "本次拱拱剩余动物：" + this.aniamlCnt + "只";
          } else if (this.gameState == GameFinishState.Lose || this.gameState == GameFinishState.RunAway) {
            if (player.headUrl) {
              Utils.urlToSpriteFrame(player.headUrl, function (res) {
                if (_this2.playeread) {
                  _this2.playeread.spriteFrame = res;
                }
              });
            }

            this.playerName.string = player.playerName;
          }

          Utils.urlToSpriteFrame(curNpc.headUrl, function (res) {
            if (_this2.npchead) _this2.npchead.spriteFrame = res;
          });
          this.npcName.string = curNpc.npcName;
        };

        _proto.back = function back() {
          this.showView(this.aniamlCnt, false);

          GameResponces._event.emit(GameResponces.FingerBack);
        };

        _proto.adwsfs = function adwsfs() {
          var _this3 = this;

          SdkManager.getInstance().showAd(adEnum.reward, function (isended) {
            if (isended) _this3.clickWsfs();
          }, this);
        };

        _proto.clickWsfs = /*#__PURE__*/function () {
          var _clickWsfs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var cnt, sleeper, enclosure;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  SdkManager.getInstance().SendEvent(CfgData.getInstance().getEventData().getDotEvent(16).id, null);
                  cnt = GameManager.getInstance().gameStartAnimalCnt;
                  sleeper = GameManager.getInstance().mapInfo.sleeper;
                  enclosure = GameManager.getInstance().mapInfo.enclos;
                  enclosure.hpBar.node.active = true;
                  enclosure.updateHpBarPos();
                  this.node.active = false;
                  UIManager.getInstance().getPanel(Panel_Game).fixFench();
                  this.flag.leave();
                  _context.next = 11;
                  return sleeper.quickFixFench(enclosure);

                case 11:
                  this.showView(cnt, false);

                case 12:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function clickWsfs() {
            return _clickWsfs.apply(this, arguments);
          }

          return clickWsfs;
        }() //胜利双倍广告
        ;

        _proto.winDoubleAd = function winDoubleAd() {
          var _this4 = this;

          SdkManager.getInstance().showAd(adEnum.reward, function (isended) {
            if (isended) {
              _this4.showView(_this4.aniamlCnt, true);

              SdkManager.getInstance().SendEvent(CfgData.getInstance().getEventData().getDotEvent(14).id, null);
            }
          }, this);
        };

        _proto.showView = function showView(animalCnt, isdouble) {
          var _this5 = this;

          if (isdouble) this.coinCnt *= 2;
          DataManager.getInstance().updateCoin(this.coinCnt);
          UIManager.getInstance().tip.clearschedule();
          NpcManager.getInstance().deleteCurNpc();
          var load = UIManager.getInstance().showPanel(Panel_Load);
          var panel_game = UIManager.getInstance().hidePanel(Panel_Game);
          UIManager.getInstance().hidePanel(Panel_GameFinish);
          UIManager.getInstance().setUIMaskActive(false);
          load.showStartProgress();

          GameResponces._event.emit(GameResponces.BackToMain);

          panel_game.destroyAllHpBars();

          if (DataManager.getInstance().guidIsOver()) {
            load.endProgress(function () {
              director.getScene().getComponentInChildren(HomeManager).init();

              if (AnimalFarm.getInstance().checkOverLimit(animalCnt, _this5.gameState, isdouble)) {
                if (_this5.gameState != GameFinishState.Win) {
                  GameResponces._event.once(GameResponces.hidePopexceed, function () {
                    _this5.guide(DataManager.getInstance().playerData);
                  });
                } else {
                  GameResponces._event.once(GameResponces.hidePopexceed, function () {
                    _this5.battleToHome();
                  });
                }
              } else {
                if (_this5.gameState != GameFinishState.Win) {
                  _this5.guide(DataManager.getInstance().playerData);
                } else {
                  _this5.battleToHome();
                }
              }
            });
            AssetSys.getInstance().loadHomeScene(function (pro) {
              load.setProgress(pro);
            });
          } else {
            GuideManager.getInstance().skipCurStep();
          }
        };

        _proto.guide = function guide(playerData) {
          var hometime = playerData.homeTime - TimeTools.getCurTime();
          var lv = playerData.homeLv;
          var needPrice = CfgData.getInstance().getHomeCfg().house[lv].LevelUpPrice;

          if (playerData.gameTimes >= GameCfg.GameTimes && playerData.coin >= needPrice && hometime <= 0) {
            GuideManager.getInstance().guideUpHome();
          } else {
            this.battleToHome();
          }
        };

        _proto.battleToHome = function battleToHome() {
          if (DataManager.getInstance().playerData.homeLv < 4) {
            UIManager.getInstance().tip.showNewbieGoBackHomeTips(this.tips[randomRangeInt(0, this.tips.length)], 2, 999, v3(-23.386, -247.121, 0));
          }

          if (DataManager.getInstance().guidIsOver() && DataManager.getInstance().playerData.gameTimes <= GameCfg.guideFlagCnt) {
            console.log("特殊插旗---------------");
            NpcManager.getInstance().creatFlagNpc();
          }
        };

        return GameStateView;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "gameState", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btn_back", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btn_wsfs", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "rewardCoin", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "rewardAnimals", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "npcName", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "npchead", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "residueAnimal", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "playerName", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "playeread", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "fx_wibn", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "btn_shareVideo", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "btn_share", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Grass.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Entity.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCFloat, Node, BoxCollider, Entity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
      Node = module.Node;
      BoxCollider = module.BoxCollider;
    }, function (module) {
      Entity = module.Entity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "e0431Kk1aFAe4fofh48XRgG", "Grass", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Grass = exports('Grass', (_dec = ccclass('Grass'), _dec2 = property({
        type: CCFloat,
        visible: true,
        displayName: "血量"
      }), _dec3 = property({
        type: Node,
        visible: true,
        displayName: "破坏特效"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Entity) {
        _inheritsLoose(Grass, _Entity);

        function Grass() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Entity.call.apply(_Entity, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "_hp", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "effect", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = Grass.prototype;

        _proto.start = function start() {
          this.effect.active = false;
        };

        _proto.onHit = function onHit(hit) {};

        _proto.toBroken = function toBroken() {
          var _this2 = this;

          this.rg.enabled = false;
          this.getComponent(BoxCollider).enabled = false;
          this.node.children[0].children[0].active = false;
          this.effect.active = true;
          this.scheduleOnce(function () {
            var _this2$node;

            (_this2$node = _this2.node) == null ? void 0 : _this2$node.destroy();
          }, 2);
        };

        return Grass;
      }(Entity), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_hp", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "effect", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GuideActions.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, Enum, Vec3, Color, v3, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
      Vec3 = module.Vec3;
      Color = module.Color;
      v3 = module.v3;
      Component = module.Component;
    }],
    execute: function () {
      exports('ActionType', void 0);

      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _class4, _class5, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _dec31, _dec32, _dec33, _class7, _class8, _descriptor29, _descriptor30;

      cclegacy._RF.push({}, "d8accMOXLpHia16QdCy3LrN", "GuideActions", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActionType;

      (function (ActionType) {
        ActionType[ActionType["tip"] = 0] = "tip";
        ActionType[ActionType["fingerClick"] = 1] = "fingerClick";
        ActionType[ActionType["gameTalk"] = 2] = "gameTalk";
        ActionType[ActionType["homeTalk"] = 3] = "homeTalk";
        ActionType[ActionType["waitTime"] = 4] = "waitTime";
        ActionType[ActionType["showui"] = 5] = "showui";
        ActionType[ActionType["waitEvent"] = 6] = "waitEvent";
        ActionType[ActionType["hideUI"] = 7] = "hideUI";
        ActionType[ActionType["freedomCtr"] = 8] = "freedomCtr";
        ActionType[ActionType["funCall"] = 9] = "funCall";
        ActionType[ActionType["setColor"] = 10] = "setColor";
        ActionType[ActionType["none"] = 11] = "none";
      })(ActionType || (ActionType = exports('ActionType', {})));

      Enum(ActionType);
      var BaseGuideAction = exports('BaseGuideAction', (_dec = ccclass('BaseGuideAction'), _dec2 = property({
        type: ActionType,
        visible: true,
        displayName: "动作类型"
      }), _dec3 = property({
        type: Number,
        visible: true,
        displayName: "动作id"
      }), _dec4 = property({
        type: Boolean,
        visible: true,
        displayName: "是否是强制引导动作"
      }), _dec5 = property({
        group: {
          name: 'tip'
        },
        type: Number,
        visible: true,
        displayName: "提示显示的时间"
      }), _dec6 = property({
        group: {
          name: 'tip'
        },
        type: String,
        visible: true,
        displayName: "提示显示的内容"
      }), _dec7 = property({
        group: {
          name: 'tip'
        },
        type: Vec3,
        visible: true,
        displayName: "提示出现的坐标"
      }), _dec8 = property({
        group: {
          name: 'tip'
        },
        type: Number,
        visible: true,
        displayName: "提示类型"
      }), _dec9 = property({
        group: {
          name: 'waitTime'
        },
        type: Number,
        visible: true,
        displayName: "等待的时间"
      }), _dec10 = property({
        group: {
          name: 'setMaskColor'
        },
        type: Color,
        visible: true,
        displayName: "黑色遮罩颜色"
      }), _dec11 = property({
        group: {
          name: 'waitEvent'
        },
        type: String,
        visible: true,
        displayName: "等待需要完成的事件"
      }), _dec12 = property({
        group: {
          name: 'waitEvent'
        },
        type: String,
        visible: true,
        displayName: "对应的中文"
      }), _dec13 = property({
        group: {
          name: 'homeTalk'
        },
        type: Number,
        visible: true,
        displayName: "嘲讽的内容"
      }), _dec14 = property({
        group: {
          name: 'gameTalk'
        },
        type: Number,
        visible: true,
        displayName: "嘲讽的内容"
      }), _dec15 = property({
        group: {
          name: 'UI'
        },
        type: [String],
        visible: true,
        displayName: "要显示的ui路径"
      }), _dec16 = property({
        group: {
          name: 'finger'
        },
        type: Number,
        visible: true,
        displayName: "手的类型"
      }), _dec17 = property({
        group: {
          name: 'finger'
        },
        type: String,
        visible: true,
        displayName: "手指对应的事件名称"
      }), _dec18 = property({
        group: {
          name: 'finger'
        },
        type: String,
        visible: true,
        displayName: "对应的中文"
      }), _dec19 = property({
        group: {
          name: 'finger'
        },
        type: Vec3,
        visible: true,
        displayName: "旋转"
      }), _dec20 = property({
        group: {
          name: 'finger'
        },
        type: Vec3,
        visible: true,
        displayName: "手指出现的坐标"
      }), _dec21 = property({
        group: {
          name: 'finger'
        },
        type: String,
        visible: true,
        displayName: "手指出现对应的ui"
      }), _dec22 = property({
        group: {
          name: 'finger'
        },
        type: Vec3,
        visible: true,
        displayName: "ui坐标偏移量"
      }), _dec23 = property({
        group: {
          name: 'hideUI'
        },
        type: [String],
        visible: true,
        displayName: "隐藏UI"
      }), _dec24 = property({
        group: {
          name: 'callFunc'
        },
        type: String,
        visible: true,
        displayName: "call方法"
      }), _dec(_class = (_class2 = function BaseGuideAction() {
        _initializerDefineProperty(this, "acType", _descriptor, this);

        _initializerDefineProperty(this, "id", _descriptor2, this);

        _initializerDefineProperty(this, "noClick", _descriptor3, this);

        _initializerDefineProperty(this, "tipTime", _descriptor4, this);

        _initializerDefineProperty(this, "tipDes", _descriptor5, this);

        _initializerDefineProperty(this, "tipPos", _descriptor6, this);

        _initializerDefineProperty(this, "tipType", _descriptor7, this);

        _initializerDefineProperty(this, "waitTime", _descriptor8, this);

        _initializerDefineProperty(this, "color", _descriptor9, this);

        _initializerDefineProperty(this, "waitEvent", _descriptor10, this);

        _initializerDefineProperty(this, "waitEventCN", _descriptor11, this);

        _initializerDefineProperty(this, "talkHomeInfo", _descriptor12, this);

        _initializerDefineProperty(this, "talkGameInfo", _descriptor13, this);

        _initializerDefineProperty(this, "showUI", _descriptor14, this);

        _initializerDefineProperty(this, "fingerType", _descriptor15, this);

        _initializerDefineProperty(this, "fingereventName", _descriptor16, this);

        _initializerDefineProperty(this, "fingerEventCN", _descriptor17, this);

        _initializerDefineProperty(this, "rotate", _descriptor18, this);

        _initializerDefineProperty(this, "fingerPos", _descriptor19, this);

        _initializerDefineProperty(this, "fingerPoStr", _descriptor20, this);

        _initializerDefineProperty(this, "fingerUIoffect", _descriptor21, this);

        _initializerDefineProperty(this, "hideUI", _descriptor22, this);

        _initializerDefineProperty(this, "funcStr", _descriptor23, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "acType", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return ActionType.none;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "noClick", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "tipTime", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "tipDes", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "tipPos", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return v3();
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "tipType", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "waitTime", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "color", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color(1, 1, 1, 1);
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "waitEvent", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "waitEventCN", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "talkHomeInfo", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "talkGameInfo", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "showUI", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "fingerType", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "fingereventName", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "fingerEventCN", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "rotate", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return v3();
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "fingerPos", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return v3();
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "fingerPoStr", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "fingerUIoffect", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return v3();
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "hideUI", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "funcStr", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      var GuideStorey = exports('GuideStorey', (_dec25 = ccclass('GuideStorey'), _dec26 = property({
        type: Number,
        visible: true,
        displayName: "层级id"
      }), _dec27 = property({
        type: String,
        visible: true,
        displayName: "层级名称"
      }), _dec28 = property({
        type: String,
        visible: true,
        displayName: "层级出现事件"
      }), _dec29 = property({
        type: [String],
        visible: true,
        displayName: "不显示的ui路径"
      }), _dec30 = property({
        type: [BaseGuideAction],
        visible: true,
        displayName: "新手引导动作"
      }), _dec25(_class4 = (_class5 = function GuideStorey() {
        _initializerDefineProperty(this, "id", _descriptor24, this);

        _initializerDefineProperty(this, "tipDes", _descriptor25, this);

        _initializerDefineProperty(this, "tipCondtion", _descriptor26, this);

        _initializerDefineProperty(this, "uipath", _descriptor27, this);

        _initializerDefineProperty(this, "actions", _descriptor28, this);
      }, (_descriptor24 = _applyDecoratedDescriptor(_class5.prototype, "id", [_dec26], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor25 = _applyDecoratedDescriptor(_class5.prototype, "tipDes", [_dec27], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor26 = _applyDecoratedDescriptor(_class5.prototype, "tipCondtion", [_dec28], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor27 = _applyDecoratedDescriptor(_class5.prototype, "uipath", [_dec29], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor28 = _applyDecoratedDescriptor(_class5.prototype, "actions", [_dec30], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class5)) || _class4));
      var GuideActions = exports('GuideActions', (_dec31 = ccclass('GuideActions'), _dec32 = property({
        type: [GuideStorey],
        visible: true,
        displayName: "新手引导层动作"
      }), _dec33 = property({
        type: GuideStorey,
        visible: true,
        displayName: "失败游戏后引导升级"
      }), _dec31(_class7 = (_class8 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GuideActions, _Component);

        function GuideActions() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "gas", _descriptor29, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "upHome", _descriptor30, _assertThisInitialized(_this));

          return _this;
        }

        return GuideActions;
      }(Component), (_descriptor29 = _applyDecoratedDescriptor(_class8.prototype, "gas", [_dec32], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor30 = _applyDecoratedDescriptor(_class8.prototype, "upHome", [_dec33], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new GuideStorey();
        }
      })), _class8)) || _class7));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GuideCfg.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "30052OOtjFH7qP0/VbVH1jD", "GuideCfg", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GuideCfg = exports('GuideCfg', (_dec = ccclass('GuideCfg'), _dec(_class = (_class2 = function GuideCfg() {}, _class2.disableReport = true, _class2.disableNpc = true, _class2.disableExceed = true, _class2.disableDifficult = true, _class2.disableTaunh = true, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GuideData.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "299664jSGdBDqcwjAjbHX5C", "GuideData", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GuideData = exports('GuideData', (_dec = ccclass('GuideData'), _dec(_class = function GuideData() {
        this.storeyIndex = 0;
        this.step = 0;
        this.showAuthTimes = 0;
      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GuideManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Npc.ts', './UIManager.ts', './Panel_Game.ts', './GameManager.ts', './NpcManager.ts', './DataManager.ts', './CfgData.ts', './GuideActions.ts', './Utils.ts', './Panel_guide.ts', './Coroutine.ts', './GameResponces.ts', './AnimalFarm.ts', './Panel_Main.ts', './Panel_Load.ts', './AssetSys.ts', './HomeManager.ts', './GuideCfg.ts', './GameCfg.ts', './SdkManager.ts', './MapInfo.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _regeneratorRuntime, _createClass, cclegacy, _decorator, Node, director, Component, Input, Npc, UIManager, Panel_Game, GameManager, NpcManager, DataManager, CfgData, ActionType, Utils, Panel_guide, Coroutine, GameResponces, AnimalFarm, Panel_Main, Panel_Load, AssetSys, HomeManager, GuideCfg, GameCfg, SdkManager, MapItem;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _regeneratorRuntime = module.regeneratorRuntime;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      director = module.director;
      Component = module.Component;
      Input = module.Input;
    }, function (module) {
      Npc = module.Npc;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      Panel_Game = module.Panel_Game;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      NpcManager = module.NpcManager;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      CfgData = module.CfgData;
    }, function (module) {
      ActionType = module.ActionType;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      Panel_guide = module.Panel_guide;
    }, function (module) {
      Coroutine = module.Coroutine;
    }, function (module) {
      GameResponces = module.GameResponces;
    }, function (module) {
      AnimalFarm = module.AnimalFarm;
    }, function (module) {
      Panel_Main = module.Panel_Main;
    }, function (module) {
      Panel_Load = module.Panel_Load;
    }, function (module) {
      AssetSys = module.AssetSys;
    }, function (module) {
      HomeManager = module.HomeManager;
    }, function (module) {
      GuideCfg = module.GuideCfg;
    }, function (module) {
      GameCfg = module.GameCfg;
    }, function (module) {
      SdkManager = module.SdkManager;
    }, function (module) {
      MapItem = module.MapItem;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "70cf8/tBJdHVY1ORt1brGlT", "GuideManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GuideManager = exports('GuideManager', (_dec = ccclass('GuideManager'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GuideManager, _Component);

        function GuideManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.npc = void 0;
          _this.playerData = void 0;
          _this.ac = void 0;
          _this.guideData = void 0;
          _this.panel_guide = void 0;
          _this.guideCorotine = void 0;
          _this.homeCfg = void 0;
          _this.uiroot = void 0;
          _this.waitEvent = void 0;
          _this.curStep = 0;
          _this.guideUpHomeStopCtr = void 0;
          return _this;
        }

        GuideManager.getInstance = function getInstance() {
          if (!this._instance) {
            var framNode = new Node("GuideManager");
            this._instance = framNode.addComponent(GuideManager);
            director.getScene().addChild(framNode);
            director.addPersistRootNode(this._instance.node);
          }

          return this._instance;
        };

        var _proto = GuideManager.prototype;

        _proto.init = function init() {
          console.log("新手引导初始化......"); //  UIManager.getInstance().showPanel(Panel_gm);

          this.guideData = DataManager.getInstance().guideData;
          this.ac = CfgData.getInstance().getGuideActions();

          if (GameCfg.skipGuide) {
            this.guideData.storeyIndex = this.ac.gas.length;
          }

          this.playerData = DataManager.getInstance().playerData;
          this.homeCfg = CfgData.getInstance().getHomeCfg();
          this.uiroot = UIManager.getInstance().node;
        };

        _proto.getNpcMapCashInfo = function getNpcMapCashInfo(id, npc) {
          var mapinfo = CfgData.getInstance().getHomeCfg().guidemap[id];
          var indexs = Utils.getSplitNumbers(mapinfo.Coordinate, "_");
          var itemtypes = Utils.getSplitNumbers(mapinfo.ItemType, "_");

          for (var i = 0; i < itemtypes.length; i++) {
            var itemtype = itemtypes[i];
            var index = indexs[i];
            var mapItem = new MapItem();
            mapItem._boxType = itemtype;
            mapItem._index = index;
            npc.mapInfoCash.push(mapItem);
          }

          npc.lv = mapinfo.HP - 1;
          return npc;
        };

        _proto.choiceStorey = function choiceStorey() {
          switch (this.guideData.storeyIndex) {
            case 0:
              this.storeyOne();
              break;

            case 1:
              this.storeyTwo();
              break;

            case 2:
              this.storeyThree();
              break;

            case 3:
              this.storeyFour();
              break;

            case 4:
              this.storeyFive();
              break;

            case 5:
              this.storeySix();
              break;

            case 6:
              this.storeySeven();
              break;

            case 7:
              this.storeyNine();
              break;

            case 8:
              this.storeyTen();
              break;

            case 9:
              this.storeyEleven();
              break;

            case 10:
              GuideCfg.disableDifficult = false;
              GuideCfg.disableExceed = false;
              GuideCfg.disableNpc = false;
              GuideCfg.disableReport = false;
              GuideCfg.disableTaunh = false;
              DataManager.getInstance().guideData.showAuthTimes = 2;
              DataManager.getInstance().saveGuideData();
              this.showAllUI();
              break;
          }
        };

        _proto.showAllUI = function showAllUI() {
          for (var index = 0; index < this.ac.gas.length; index++) {
            var actions = this.ac.gas[index].actions;
            this.setIconActive(this.ac.gas[index].uipath, true);

            for (var _index = 0; _index < actions.length; _index++) {
              var baseAction = actions[_index];

              if (baseAction.acType == ActionType.hideUI) {
                this.setIconActive(baseAction.hideUI, true);
              }
            }
          } //展示朋友圈图标


          UIManager.getInstance().getPanel(Panel_Main).showGameClubButton();
        };

        _proto.startGuide = /*#__PURE__*/_regeneratorRuntime().mark(function startGuide(basePanel) {
          var actions, index;
          return _regeneratorRuntime().wrap(function startGuide$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                this.panel_guide = UIManager.getInstance().showPanel(Panel_guide);
                this.setIconActive(this.ac.gas[this.guideData.storeyIndex].uipath, false);
                actions = this.ac.gas[this.guideData.storeyIndex].actions;
                index = 0;

              case 4:
                if (!(index < actions.length)) {
                  _context.next = 10;
                  break;
                }

                this.curStep = index;
                return _context.delegateYield(this.selectAction(basePanel, actions, index), "t0", 7);

              case 7:
                index++;
                _context.next = 4;
                break;

              case 10:
                console.log("完成当前的新手引导。。。。。");
                this.guideData.storeyIndex++;
                DataManager.getInstance().saveGuideData();
                this.choiceStorey();

              case 14:
              case "end":
                return _context.stop();
            }
          }, startGuide, this);
        });

        _proto.skipCurStep = function skipCurStep() {
          var actions = this.ac.gas[this.guideData.storeyIndex].actions;

          if (this.curStep < actions.length - 2) {
            console.log("跳过当前大步骤");
            this.guideData.storeyIndex++;
            DataManager.getInstance().saveGuideData();
            this.choiceStorey();
          }
        };

        _proto.selectAction = /*#__PURE__*/_regeneratorRuntime().mark(function selectAction(basePanel, actions, index) {
          var _this2 = this;

          var baseAction, data, tip, lpos, _lpos, wait;

          return _regeneratorRuntime().wrap(function selectAction$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                baseAction = actions[index];
                data = {
                  "storeyindex": this.guideData.storeyIndex,
                  "index": index
                };
                SdkManager.getInstance().SendEvent("guide", data);
                console.log("执行第：" + this.guideData.storeyIndex + "_" + index + "步。。。。。。。" + "类型：" + baseAction.acType);

                if (!(baseAction.acType == ActionType.fingerClick)) {
                  _context2.next = 12;
                  break;
                }

                if (!(baseAction.fingerPoStr != "undefined")) {
                  _context2.next = 9;
                  break;
                }

                return _context2.delegateYield(this.panel_guide.setFingerPos(this.guideData.storeyIndex, index, baseAction, basePanel, baseAction.fingerPoStr), "t0", 7);

              case 7:
                _context2.next = 10;
                break;

              case 9:
                return _context2.delegateYield(this.panel_guide.setFingerPos(this.guideData.storeyIndex, index, baseAction, basePanel, baseAction.fingerPos), "t1", 10);

              case 10:
                _context2.next = 54;
                break;

              case 12:
                if (!(baseAction.acType == ActionType.tip)) {
                  _context2.next = 18;
                  break;
                }

                this.panel_guide.setMask(baseAction.noClick);
                if (baseAction.tipType == 0) tip = UIManager.getInstance().tip.showGuideTip(baseAction.tipDes, 0, 0, baseAction.tipTime)[0];else tip = UIManager.getInstance().tip.showNewbieGoBackHomeTips(baseAction.tipDes, baseAction.tipTime, 4);

                if (basePanel instanceof Panel_Game) {
                  GameManager.getInstance()._camera.camera.update();

                  lpos = GameManager.getInstance()._camera.convertToUINode(baseAction.tipPos, UIManager.getInstance().tip.node);
                  tip.position = lpos;
                } else {
                  HomeManager.getInstance()._camera.camera.update();

                  _lpos = HomeManager.getInstance()._camera.convertToUINode(baseAction.tipPos, UIManager.getInstance().tip.node);
                  tip.position = _lpos;
                }

                _context2.next = 54;
                break;

              case 18:
                if (!(baseAction.acType == ActionType.waitTime)) {
                  _context2.next = 27;
                  break;
                }

                this.panel_guide.setMask(baseAction.noClick);
                wait = baseAction.waitTime;
                _context2.next = 23;
                return Coroutine.waitForSecond(0.002, this);

              case 23:
                _context2.next = 25;
                return Coroutine.waitForSecond(wait, this);

              case 25:
                _context2.next = 54;
                break;

              case 27:
                if (!(baseAction.acType == ActionType.gameTalk)) {
                  _context2.next = 31;
                  break;
                }

                if (GameManager.getInstance()) {
                  GameManager.getInstance().mapInfo.guideTaunh(baseAction.talkGameInfo);
                }

                _context2.next = 54;
                break;

              case 31:
                if (!(baseAction.acType == ActionType.homeTalk)) {
                  _context2.next = 35;
                  break;
                }

                if (HomeManager.getInstance()) {
                  HomeManager.getInstance().homeView.taunt(baseAction.talkHomeInfo);
                }

                _context2.next = 54;
                break;

              case 35:
                if (!(baseAction.acType == ActionType.hideUI)) {
                  _context2.next = 39;
                  break;
                }

                this.setIconActive(baseAction.hideUI, false);
                _context2.next = 54;
                break;

              case 39:
                if (!(baseAction.acType == ActionType.showui)) {
                  _context2.next = 43;
                  break;
                }

                this.setIconActive(baseAction.showUI, true);
                _context2.next = 54;
                break;

              case 43:
                if (!(baseAction.acType == ActionType.waitEvent)) {
                  _context2.next = 53;
                  break;
                }

                this.waitEvent = false;

                GameResponces._event.once(baseAction.waitEvent, function () {
                  _this2.waitEvent = true;
                }, this);

              case 46:
                if (this.waitEvent) {
                  _context2.next = 51;
                  break;
                }

                _context2.next = 49;
                return Coroutine.waitForSecond(0.02, this);

              case 49:
                _context2.next = 46;
                break;

              case 51:
                _context2.next = 54;
                break;

              case 53:
                if (baseAction.acType == ActionType.freedomCtr) {
                  this.panel_guide.setMask(false);
                } else if (baseAction.acType == ActionType.funCall) {
                  this.callMethodByName(baseAction.funcStr);
                } else if (baseAction.acType == ActionType.setColor) {
                  this.panel_guide.setMask(baseAction.noClick);
                  this.panel_guide.setColor(baseAction.color);
                } else if (baseAction.acType == ActionType.none) {
                  this.panel_guide.setMask(false);
                }

              case 54:
              case "end":
                return _context2.stop();
            }
          }, selectAction, this);
        });

        _proto.setIconActive = function setIconActive(paths, ac) {
          var _this3 = this;

          paths.forEach(function (element) {
            var ui = _this3.uiroot.getChildByPath(element);

            if (ui) ui.active = ac;else console.log("没有找到对应的path:" + element);
          });
        } //处理玩家数据
        ;

        _proto.disDisposeData = function disDisposeData() {};

        _proto.Accredit = function Accredit() {
          UIManager.getInstance().getPanel(Panel_Main).showPopAuth();
        };

        _proto.stopBuildAnimal = function stopBuildAnimal() {
          if (AnimalFarm.getInstance()) AnimalFarm.getInstance().puaseBuildAnimal = true;
        };

        _proto.rePlayBuildAnimal = function rePlayBuildAnimal() {
          if (AnimalFarm.getInstance()) AnimalFarm.getInstance().puaseBuildAnimal = false;
        };

        _proto.stopRunAnimal = function stopRunAnimal() {
          if (AnimalFarm.getInstance()) AnimalFarm.getInstance().puaseRunAnimal = true;
        };

        _proto.rePlayRunAnimal = function rePlayRunAnimal() {
          if (AnimalFarm.getInstance()) AnimalFarm.getInstance().puaseRunAnimal = false;
        };

        _proto.disDisposeWaitforAnimalMergeCnt = function disDisposeWaitforAnimalMergeCnt(cnt) {
          var clickCnt = 0;

          GameResponces._event.on(GameResponces.clickAnimalMerge, function () {
            clickCnt++;

            if (clickCnt >= cnt) {
              GameResponces._event.emit(GameResponces.ViewAnimalDetails);

              GameResponces._event.off(GameResponces.clickAnimalMerge);
            }
          }, this);
        };

        _proto.disDisposeWaitforAnimalMerge1 = function disDisposeWaitforAnimalMerge1() {
          this.disDisposeWaitforAnimalMergeCnt(1);
        };

        _proto.disDisposeWaitforAnimalMerge2 = function disDisposeWaitforAnimalMerge2() {
          this.disDisposeWaitforAnimalMergeCnt(2);
        };

        _proto.disDisposeWaitforAnimalMerge3 = function disDisposeWaitforAnimalMerge3() {
          this.disDisposeWaitforAnimalMergeCnt(3);
        };

        _proto.disDisposeWaitforAnimalMerge4 = function disDisposeWaitforAnimalMerge4() {
          this.disDisposeWaitforAnimalMergeCnt(4);
        };

        _proto.disDisposeWaitforAnimalMerge5 = function disDisposeWaitforAnimalMerge5() {
          this.disDisposeWaitforAnimalMergeCnt(5);
        };

        _proto.disDisposeWaitforAnimalMerge6 = function disDisposeWaitforAnimalMerge6() {
          this.disDisposeWaitforAnimalMergeCnt(6);
        };

        _proto.setAnimalfull = function setAnimalfull() {
          AnimalFarm.getInstance().buildAnimal(200);
        };

        _proto.createWinNpcflag = function createWinNpcflag() {
          console.log("胜利插旗");
          var npc = NpcManager.getInstance().createGuideNpc(true);
          npc.lv = 1;
          npc.fenceLv = 0;
          npc.residualHP = 1;
          npc.houseImg = 0;
          npc.residualAnimalCount = 58;
          npc.audioNotHide = true;
          npc.animalCorpseList = [];
          var info = NpcManager.getInstance().getNpcInfo(0);
          npc.npcName = info.name;
          npc.headUrl = info.avatar;

          GameResponces._event.emit(GameResponces.createNewSceneNpc, npc);
        };

        _proto.createLoseNpcflag = function createLoseNpcflag() {
          console.log("失败插旗");
          var npc = NpcManager.getInstance().createGuideNpc(false);
          npc.lv = 1;
          npc.fenceLv = 2;
          npc.residualHP = 1;
          npc.houseImg = 0;
          npc.residualAnimalCount = 58;
          var list = AnimalFarm.getInstance().buildNpcAnimals(npc, 300);
          npc.animalCorpseList = list;
          var info = NpcManager.getInstance().getNpcNameHeadUrl();
          npc.npcName = info.name;
          npc.headUrl = info.avatar;

          GameResponces._event.emit(GameResponces.createNewSceneNpc, npc);
        };

        _proto.createLoseSpNpcFlag = function createLoseSpNpcFlag() {
          NpcManager.getInstance().creatFlagNpc();
        } //第一步引导
        ;

        _proto.storeyOne = function storeyOne() {
          var _this4 = this;

          console.log("第一步引导处理数据");
          var load = UIManager.getInstance().showPanel(Panel_Load);
          load.endProgress(function () {
            NpcManager.getInstance().init();
            _this4.npc = new Npc();
            _this4.npc.lv = 0;
            _this4.npc.mapId = 0;
            _this4.npc.fenceLv = 0;
            _this4.npc.residualHP = 1.6;
            _this4.npc.houseImg = 0;
            _this4.npc.residualAnimalCount = 59;
            var info = NpcManager.getInstance().getNpcNameHeadUrl();
            _this4.npc.npcName = info.name;
            _this4.npc.headUrl = info.avatar;
            NpcManager.getInstance().curNpc = _this4.npc;
            var panel_game = UIManager.getInstance().showPanel(Panel_Game);
            GameManager.getInstance().onGameStart(_this4.npc, Utils.getSplitNumbers(_this4.homeCfg.guide[0].AnimalPos, "_"), null, false);
            var prop = GameManager.getInstance().prop;
            prop.reflashAdCnt = 1;
            prop.reflashBoxCnt = 0;
            prop.changeAnimalAdCnt = 1;
            prop.changeAnimalBoxCnt = 0;
            prop.bronNewAnimalsAdcnt = 1;
            prop.bronNewAnimalsBoxcnt = 0;
            _this4.guideCorotine = new Coroutine(function () {
              return _this4.startGuide(panel_game);
            });

            _this4.guideCorotine.start();
          });
          load.setProgress(0.95);
          AssetSys.getInstance().loadGameScene(function (pro) {}, function () {
            load.setProgress(1);
          });
        } //第二步引导
        ;

        _proto.storeyTwo = function storeyTwo() {
          var _this5 = this;

          console.log("第二步引导处理数据");
          var load = UIManager.getInstance().showPanel(Panel_Load);
          load.endProgress(function () {
            HomeManager.getInstance().init();
            AnimalFarm.getInstance().clearAnimals(60);
            AnimalFarm.getInstance().buildAnimal(59);
            NpcManager.getInstance().setNpcList(new Array());

            for (var index = 0; index < 6; index++) {
              NpcManager.getInstance().createNpc(true, 0);
            }

            var panel_main = UIManager.getInstance().showPanel(Panel_Main);
            _this5.guideCorotine = new Coroutine(function () {
              return _this5.startGuide(panel_main);
            });

            _this5.guideCorotine.start();
          });
          load.setProgress(0.95);
          AssetSys.getInstance().loadHomeScene(function (pro) {}, function () {
            load.setProgress(1);
          });
        } //第三步引导
        ;

        _proto.storeyThree = function storeyThree() {
          var _this6 = this;

          console.log("第三步引导处理数据");
          var load = UIManager.getInstance().showPanel(Panel_Load);
          load.endProgress(function () {
            NpcManager.getInstance().init();
            _this6.npc = new Npc();
            _this6.npc.lv = 0;
            _this6.npc.mapId = 0;
            _this6.npc.fenceLv = 0;
            _this6.npc.residualHP = 1.6;
            _this6.npc.houseImg = 0;
            _this6.npc.residualAnimalCount = 58;
            _this6.npc.mapInfoCash = []; //第二场战斗配置

            _this6.npc = _this6.getNpcMapCashInfo(1, _this6.npc);
            var info = NpcManager.getInstance().getNpcNameHeadUrl();
            _this6.npc.npcName = info.name;
            _this6.npc.headUrl = info.avatar;
            NpcManager.getInstance().curNpc = _this6.npc;
            var panel_game = UIManager.getInstance().showPanel(Panel_Game);
            GameManager.getInstance().onGameStart(_this6.npc, Utils.getSplitNumbers(_this6.homeCfg.guide[1].AnimalPos, "_"), null, false);
            var prop = GameManager.getInstance().prop;
            prop.reflashAdCnt = 0;
            prop.reflashBoxCnt = 0;
            prop.changeAnimalAdCnt = 0;
            prop.changeAnimalBoxCnt = 0;
            prop.bronNewAnimalsAdcnt = 0;
            prop.bronNewAnimalsBoxcnt = 0;
            _this6.guideCorotine = new Coroutine(function () {
              return _this6.startGuide(panel_game);
            });

            _this6.guideCorotine.start();
          });
          load.setProgress(0.95);
          AssetSys.getInstance().loadGameScene(function (pro) {}, function () {
            load.setProgress(1);
          });
        } //第四步引导
        ;

        _proto.storeyFour = function storeyFour() {
          var _this7 = this;

          console.log("第四步引导处理数据");
          var load = UIManager.getInstance().showPanel(Panel_Load);

          var func = function func() {
            DataManager.getInstance().playerData.sceneNpcList = [];
            HomeManager.getInstance().init();
            AnimalFarm.getInstance().buildAnimal(200);
            HomeManager.getInstance().initAnimals();
            var coin = DataManager.getInstance().playerData.coin = 200;
            DataManager.getInstance().savePlayData();
            var panel_main = UIManager.getInstance().showPanel(Panel_Main);
            panel_main.updateCoin(coin, coin, 0);
            _this7.guideCorotine = new Coroutine(function () {
              return _this7.startGuide(panel_main);
            });

            _this7.guideCorotine.start();
          };

          load.endProgress(func);
          load.setProgress(0.95);
          AssetSys.getInstance().loadHomeScene(function (pro) {}, function () {
            load.setProgress(1);
          });
        } //第五步引导
        ;

        _proto.storeyFive = function storeyFive() {
          var _this8 = this;

          console.log("第五步引导处理数据");
          var load = UIManager.getInstance().showPanel(Panel_Load);
          load.endProgress(function () {
            NpcManager.getInstance().init();
            _this8.npc = new Npc();
            _this8.npc.lv = 1;
            _this8.npc.fenceLv = 0;
            _this8.npc.mapId = 0;
            _this8.npc.houseImg = 0;
            _this8.npc.residualHP = 1;
            _this8.npc.residualAnimalCount = 58;
            var info = NpcManager.getInstance().getNpcInfo(0);
            _this8.npc.npcName = info.name;
            _this8.npc.headUrl = info.avatar;
            _this8.npc = _this8.getNpcMapCashInfo(2, _this8.npc);
            NpcManager.getInstance().curNpc = _this8.npc;
            var panel_game = UIManager.getInstance().showPanel(Panel_Game);
            GameManager.getInstance().onGameStart(_this8.npc, Utils.getSplitNumbers(_this8.homeCfg.guide[2].AnimalPos, "_"), null, false);
            var prop = GameManager.getInstance().prop;
            prop.reflashAdCnt = 999;
            prop.reflashBoxCnt = 0;
            prop.changeAnimalAdCnt = 0;
            prop.changeAnimalBoxCnt = 0;
            prop.bronNewAnimalsAdcnt = 0;
            prop.bronNewAnimalsBoxcnt = 0;
            _this8.guideCorotine = new Coroutine(function () {
              return _this8.startGuide(panel_game);
            });

            _this8.guideCorotine.start();
          });
          load.setProgress(0.95);
          AssetSys.getInstance().loadGameScene(function (pro) {}, function () {
            load.setProgress(1);
          });
        } //第六步引导
        ;

        _proto.storeySix = function storeySix() {
          var _this9 = this;

          console.log("第六步引导处理数据");
          var load = UIManager.getInstance().showPanel(Panel_Load);
          load.endProgress(function () {
            var coin = DataManager.getInstance().playerData.coin = 300;
            DataManager.getInstance().playerData.homeTime = 0;
            DataManager.getInstance().playerData.homeLv = 0;
            DataManager.getInstance().playerData.sceneNpcList = [];
            HomeManager.getInstance().init();
            NpcManager.getInstance().setNpcList(new Array());

            for (var index = 0; index < 6; index++) {
              var npc = NpcManager.getInstance().createNpc(true, 0);
              npc.fenceLv = 1;
            }

            console.log("npc:" + NpcManager.getInstance().getNpcList().length);
            var panel_main = UIManager.getInstance().showPanel(Panel_Main);
            panel_main.updateCoin(coin, coin, 0);
            _this9.guideCorotine = new Coroutine(function () {
              return _this9.startGuide(panel_main);
            });

            _this9.guideCorotine.start();
          });
          load.setProgress(0.95);
          AssetSys.getInstance().loadHomeScene(function (pro) {}, function () {
            load.setProgress(1);
          });
        } //第七步引导
        ;

        _proto.storeySeven = function storeySeven() {
          var _this10 = this;

          console.log("第七步引导处理数据");
          var load = UIManager.getInstance().showPanel(Panel_Load);
          load.endProgress(function () {
            if (NpcManager.getInstance() && NpcManager.getInstance().curNpc) {
              _this10.npc = NpcManager.getInstance().curNpc;
              _this10.npc = _this10.getNpcMapCashInfo(3, _this10.npc);
              NpcManager.getInstance().curNpc = _this10.npc;
            } else {
              NpcManager.getInstance().init();
              _this10.npc = new Npc();
              _this10.npc.lv = 0;
              _this10.npc.mapId = 0;
              _this10.npc.fenceLv = 0;
              _this10.npc.residualHP = 1;
              _this10.npc.houseImg = 0;
              _this10.npc.residualAnimalCount = 58;
              var info = NpcManager.getInstance().getNpcNameHeadUrl();
              _this10.npc.npcName = info.name;
              _this10.npc.headUrl = info.avatar;
              _this10.npc = _this10.getNpcMapCashInfo(3, _this10.npc);
              NpcManager.getInstance().curNpc = _this10.npc;
            }

            var panel_game = UIManager.getInstance().showPanel(Panel_Game);
            GameManager.getInstance().onGameStart(_this10.npc, Utils.getSplitNumbers(_this10.homeCfg.guide[3].AnimalPos, "_"), null, false);
            var prop = GameManager.getInstance().prop;
            prop.reflashAdCnt = 999;
            prop.reflashBoxCnt = 0;
            prop.changeAnimalAdCnt = 999;
            prop.changeAnimalBoxCnt = 0;
            prop.bronNewAnimalsAdcnt = 999;
            prop.bronNewAnimalsBoxcnt = 0;
            _this10.guideCorotine = new Coroutine(function () {
              return _this10.startGuide(panel_game);
            });

            _this10.guideCorotine.start();
          });
          load.setProgress(0.95);
          AssetSys.getInstance().loadGameScene(function (pro) {}, function () {
            load.setProgress(1);
          });
        } //第八步引导
        ;

        _proto.storeyEight = function storeyEight() {
          var _this11 = this;

          console.log("第八步引导处理数据");
          var load = UIManager.getInstance().showPanel(Panel_Load);
          load.endProgress(function () {
            var coin = DataManager.getInstance().playerData.coin = 400;
            DataManager.getInstance().playerData.fenchTime = 0;
            DataManager.getInstance().playerData.fenchLv = 0;
            HomeManager.getInstance().init();
            var panel_main = UIManager.getInstance().showPanel(Panel_Main);
            panel_main.updateCoin(coin, coin, 0);
            _this11.guideCorotine = new Coroutine(function () {
              return _this11.startGuide(panel_main);
            });

            _this11.guideCorotine.start();
          });
          load.setProgress(0.95);
          AssetSys.getInstance().loadHomeScene(function (pro) {}, function () {
            load.setProgress(1);
          });
        } //第九步引导
        ;

        _proto.storeyNine = function storeyNine() {
          var _this12 = this;

          console.log("第九步引导处理数据");

          if (HomeManager.getInstance() && HomeManager.getInstance().isInit) {
            this.setAnimalfull();
            var coin = DataManager.getInstance().playerData.coin = 500;
            var panel_main = UIManager.getInstance().getPanel(Panel_Main);
            panel_main.updateCoin(coin, coin, 0);
            NpcManager.getInstance().setNpcList(new Array());

            for (var index = 0; index < 6; index++) {
              NpcManager.getInstance().createNpc(true, 0);
            }

            this.guideCorotine = new Coroutine(function () {
              return _this12.startGuide(panel_main);
            });
            this.guideCorotine.start();
          } else {
            var load = UIManager.getInstance().showPanel(Panel_Load);
            load.endProgress(function () {
              HomeManager.getInstance().init();

              _this12.setAnimalfull();

              var coin = DataManager.getInstance().playerData.coin = 500;
              var panel_main = UIManager.getInstance().showPanel(Panel_Main);
              panel_main.updateCoin(coin, coin, 0);
              NpcManager.getInstance().setNpcList(new Array());

              for (var _index2 = 0; _index2 < 6; _index2++) {
                NpcManager.getInstance().createNpc(true, 0);
              }

              _this12.guideCorotine = new Coroutine(function () {
                return _this12.startGuide(panel_main);
              });

              _this12.guideCorotine.start();
            });
            load.setProgress(0.95);
            AssetSys.getInstance().loadHomeScene(function (pro) {}, function () {
              load.setProgress(1);
            });
          }
        } //第十步引导
        ;

        _proto.storeyTen = function storeyTen() {
          var _this13 = this;

          console.log("第十步引导处理数据");
          var load = UIManager.getInstance().showPanel(Panel_Load);
          load.endProgress(function () {
            if (NpcManager.getInstance() && NpcManager.getInstance().curNpc) {
              _this13.npc = NpcManager.getInstance().curNpc;
            } else {
              NpcManager.getInstance().init();
              _this13.npc = NpcManager.getInstance().curNpc = NpcManager.getInstance().createNpc(false);
            }

            _this13.npc = _this13.getNpcMapCashInfo(4, _this13.npc);
            var panel_game = UIManager.getInstance().showPanel(Panel_Game);
            GameManager.getInstance().onGameStart(_this13.npc, Utils.getSplitNumbers(_this13.homeCfg.guide[4].AnimalPos, "_"), null, false);
            var prop = GameManager.getInstance().prop;
            prop.reflashAdCnt = 999;
            prop.reflashBoxCnt = 0;
            prop.changeAnimalAdCnt = 999;
            prop.changeAnimalBoxCnt = 0;
            prop.bronNewAnimalsAdcnt = 999;
            prop.bronNewAnimalsBoxcnt = 0;
            _this13.guideCorotine = new Coroutine(function () {
              return _this13.startGuide(panel_game);
            });

            _this13.guideCorotine.start();
          });
          load.setProgress(0.95);
          AssetSys.getInstance().loadGameScene(function (pro) {}, function () {
            load.setProgress(1);
          });
        } //第11步引导
        ;

        _proto.storeyEleven = function storeyEleven() {
          var _this14 = this;

          console.log("第11步引导处理数据");

          if (HomeManager.getInstance() && HomeManager.getInstance().isInit) {
            var panel_main = UIManager.getInstance().getPanel(Panel_Main);
            this.guideCorotine = new Coroutine(function () {
              return _this14.startGuide(panel_main);
            });
            this.guideCorotine.start();
          } else {
            var load = UIManager.getInstance().showPanel(Panel_Load);
            load.endProgress(function () {
              HomeManager.getInstance().init();
              var panel_main = UIManager.getInstance().showPanel(Panel_Main);
              _this14.guideCorotine = new Coroutine(function () {
                return _this14.startGuide(panel_main);
              });

              _this14.guideCorotine.start();
            });
            load.setProgress(0.95);
            AssetSys.getInstance().loadHomeScene(function (pro) {}, function () {
              load.setProgress(1);
            });
          }
        } //升级房子的引导
        ;

        _proto.guideUpHome = function guideUpHome() {
          var _this15 = this;

          this.ac = CfgData.getInstance().getGuideActions();
          var panel_home = UIManager.getInstance().getPanel(Panel_Main);
          this.panel_guide = UIManager.getInstance().showPanel(Panel_guide);
          var coro = new Coroutine(function () {
            return _this15.startGuideUpHome(panel_home);
          });
          this.guideUpHomeStopCtr = new GuideUpHomeStopCtr(coro, this.panel_guide.node);
          this.guideUpHomeStopCtr.listenClickEvent();
          coro.start();
        };

        _proto.startGuideUpHome = /*#__PURE__*/_regeneratorRuntime().mark(function startGuideUpHome(panel_home) {
          var _this$guideUpHomeStop;

          var index, ac;
          return _regeneratorRuntime().wrap(function startGuideUpHome$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                index = 0;

              case 1:
                if (!(index < this.ac.upHome.actions.length)) {
                  _context3.next = 8;
                  break;
                }

                ac = this.ac.upHome.actions[index];
                this.guideUpHomeStopCtr.tryListenClickEvent(ac);
                return _context3.delegateYield(this.selectAction(panel_home, this.ac.upHome.actions, index), "t0", 5);

              case 5:
                index++;
                _context3.next = 1;
                break;

              case 8:
                (_this$guideUpHomeStop = this.guideUpHomeStopCtr) == null ? void 0 : _this$guideUpHomeStop.myDestroy();
                this.guideUpHomeStopCtr = null;

              case 10:
              case "end":
                return _context3.stop();
            }
          }, startGuideUpHome, this);
        });

        _proto.callMethodByName = function callMethodByName(methodName) {
          if (typeof this[methodName] === 'function') {
            console.log("call Name:" + methodName);
            return this[methodName]();
          } else {
            throw new Error("Method " + methodName + " does not exist on this class.");
          }
        };

        return GuideManager;
      }(Component), _class2._instance = void 0, _class2)) || _class));

      var GuideUpHomeStopCtr = /*#__PURE__*/function () {
        function GuideUpHomeStopCtr(coro, clickNode) {
          this.coro = void 0;
          this.clickNode = void 0;
          this.targetEventName = void 0;
          this.hasListenedClickEvent = void 0;
          this.baseGuideAction = void 0;
          this.coro = coro;
          this.clickNode = clickNode;
          this.targetEventName = '';
          this.hasListenedClickEvent = false;
          this.baseGuideAction = null;
          console.info('~~升级家园：' + '创建 停止控制');
        }

        var _proto2 = GuideUpHomeStopCtr.prototype;

        _proto2.myDestroy = function myDestroy() {
          this.stopListenClick();
          this.coro = null;
          this.clickNode = null;
          this.targetEventName = '';
          this.hasListenedClickEvent = false;
          this.baseGuideAction = null;
          console.info('~~升级家园：' + '销毁 停止控制');
        };

        _proto2.listenClickEvent = function listenClickEvent(targetEventName) {
          if (targetEventName === void 0) {
            targetEventName = '';
          }

          this.stopListenClick();
          this.targetEventName = targetEventName;
          console.info('~~升级家园：设置targetEventName：' + this.targetEventName);
          this.clickNode.on(Input.EventType.TOUCH_END, this.onClick, this);
          this.clickNode.on(Input.EventType.TOUCH_START, this.onTouchStart, this);
          this.hasListenedClickEvent = true;
          console.info('~~升级家园：' + '关注点击事件：' + this.targetEventName);
        } // 关注点击弹起事件
        ;

        _proto2.tryListenClickEvent = function tryListenClickEvent(baseGuideAction) {
          this.baseGuideAction = baseGuideAction;
          this.listenClickEvent(baseGuideAction.fingereventName);
        };

        _proto2.onClick = function onClick(event) {
          var _this16 = this;

          if (this.baseGuideAction.acType == ActionType.fingerClick) {
            console.info('~~升级家园：' + '点击:');
            event.preventSwallow = true;
            var fingerGuide = UIManager.getInstance().getPanel(Panel_guide);
            fingerGuide.scheduleOnce(function () {
              if (!_this16.isInGuide) {
                console.info('升级房子指引已结束！');
                return;
              }

              console.info('~~升级家园：' + _this16.targetEventName + '；' + _this16.baseGuideAction.fingereventName);

              if (_this16.targetEventName == _this16.baseGuideAction.fingereventName) {
                _this16.stopGuide();
              } else {
                _this16.targetEventName = _this16.baseGuideAction.fingereventName;
              }
            }, GuideUpHomeStopCtr.delayCheckTime);
          } else // 隐藏手指
            {
              var _fingerGuide = UIManager.getInstance().getPanel(Panel_guide);

              _fingerGuide.finger.active = false;
              _fingerGuide.finger2.active = false;
            }
        };

        _proto2.onTouchStart = function onTouchStart(event) {
          event.preventSwallow = true;
        };

        _proto2.stopListenClick = function stopListenClick() {
          if (this.hasListenedClickEvent) {
            this.hasListenedClickEvent = false;
            console.info('~~升级家园：' + '停止关注点击事件');
            this.clickNode.off(Input.EventType.TOUCH_END, this.onClick, this);
            this.clickNode.off(Input.EventType.TOUCH_START, this.onTouchStart, this);
          }
        };

        _proto2.stopGuide = function stopGuide() {
          this.stopListenClick(); // 结束协程

          if (this.coro) {
            this.coro.stop();
            this.coro = null;
          } // 隐藏finger、finger2


          var fingerGuide = UIManager.getInstance().getPanel(Panel_guide);
          fingerGuide.finger.active = false;
          fingerGuide.finger2.active = false;
          fingerGuide.mask.active = false;
          fingerGuide.setMask(false);

          GameResponces._event.off(this.targetEventName); // 隐藏tip


          UIManager.getInstance().tip.hideGuideTip();
          console.info('~~升级家园：' + '停止指引');
        };

        _createClass(GuideUpHomeStopCtr, [{
          key: "isInGuide",
          get: function get() {
            return this.coro != null;
          }
        }]);

        return GuideUpHomeStopCtr;
      }();

      GuideUpHomeStopCtr.delayCheckTime = 0.2;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GuidePrevent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "a2175CGF/dLz6o2/hQmK6kt", "GuidePrevent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GuidePrevent = exports('GuidePrevent', (_dec = ccclass('GuidePrevent'), _dec2 = property({
        type: Node,
        visible: true,
        displayName: "反向的遮罩"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GuidePrevent, _Component);

        function GuidePrevent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "mask", _descriptor, _assertThisInitialized(_this));

          _this.click = void 0;
          return _this;
        }

        var _proto = GuidePrevent.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on(Node.EventType.TOUCH_START, this.touchStart, this);
        };

        _proto.touchStart = function touchStart(_event) {
          if (_event) {
            var _this$click;

            (_this$click = this.click) == null ? void 0 : _this$click.call(this);
            console.log("点击");
            _event.preventSwallow = true;
          }
        };

        return GuidePrevent;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "mask", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HomeAnimal.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts', './HomeAnimalCfg.ts', './Coroutine.ts', './AudioManager.ts', './EffectManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _regeneratorRuntime, _asyncToGenerator, cclegacy, _decorator, Enum, SphereCollider, BoxCollider, Material, v3, RigidBody, SkeletalAnimation, SkinnedMeshRenderer, randomRangeInt, randomRange, tween, Vec3, math, Quat, physics, Component, Utils, HomeAnimalCfg, Coroutine, AudioManager, EffectManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _regeneratorRuntime = module.regeneratorRuntime;
      _asyncToGenerator = module.asyncToGenerator;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
      SphereCollider = module.SphereCollider;
      BoxCollider = module.BoxCollider;
      Material = module.Material;
      v3 = module.v3;
      RigidBody = module.RigidBody;
      SkeletalAnimation = module.SkeletalAnimation;
      SkinnedMeshRenderer = module.SkinnedMeshRenderer;
      randomRangeInt = module.randomRangeInt;
      randomRange = module.randomRange;
      tween = module.tween;
      Vec3 = module.Vec3;
      math = module.math;
      Quat = module.Quat;
      physics = module.physics;
      Component = module.Component;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      HomeAnimalCfg = module.HomeAnimalCfg;
    }, function (module) {
      Coroutine = module.Coroutine;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      EffectManager = module.EffectManager;
    }],
    execute: function () {
      exports('HomeAnimalState', void 0);

      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;

      cclegacy._RF.push({}, "346d2j0v31I8LpnACvsqXs0", "HomeAnimal", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var HomeAnimalState;

      (function (HomeAnimalState) {
        HomeAnimalState[HomeAnimalState["move"] = 0] = "move";
        HomeAnimalState[HomeAnimalState["idle"] = 1] = "idle";
        HomeAnimalState[HomeAnimalState["fastMove"] = 2] = "fastMove";
        HomeAnimalState[HomeAnimalState["goHome"] = 3] = "goHome";
        HomeAnimalState[HomeAnimalState["outHome"] = 4] = "outHome";
        HomeAnimalState[HomeAnimalState["max"] = 5] = "max";
        HomeAnimalState[HomeAnimalState["dead"] = 6] = "dead";
        HomeAnimalState[HomeAnimalState["runAway"] = 7] = "runAway";
        HomeAnimalState[HomeAnimalState["eat"] = 8] = "eat";
        HomeAnimalState[HomeAnimalState["jump"] = 9] = "jump";
        HomeAnimalState[HomeAnimalState["checkObs"] = 10] = "checkObs";
      })(HomeAnimalState || (HomeAnimalState = exports('HomeAnimalState', {})));

      Enum(HomeAnimalState);
      var HomeAnimal = exports('HomeAnimal', (_dec = ccclass('HomeAnimal'), _dec2 = property({
        type: SphereCollider,
        displayName: "寻路检测器"
      }), _dec3 = property({
        type: BoxCollider,
        displayName: "逃跑时检测的区域"
      }), _dec4 = property({
        type: [Material],
        displayName: "材质球"
      }), _dec5 = property({
        type: HomeAnimalState,
        displayName: "动物状态"
      }), _dec6 = property({
        type: Number,
        displayName: "移动时间"
      }), _dec7 = property({
        type: Number,
        displayName: "吃草时间"
      }), _dec8 = property({
        type: Number,
        displayName: "为了规避障碍物吃草次数"
      }), _dec9 = property({
        type: Number,
        displayName: "扫描范围"
      }), _dec10 = property({
        type: Number,
        displayName: "扫描距离"
      }), _dec11 = property({
        type: Number,
        displayName: "检测间隔"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(HomeAnimal, _Component);

        function HomeAnimal() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.animalType = void 0;

          _initializerDefineProperty(_this, "collider", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "flagTrigger", _descriptor2, _assertThisInitialized(_this));

          _this.selfCollider = void 0;
          _this.meshRender = void 0;
          _this.haveObs = false;
          _this.rg = void 0;
          _this.skeleAniaml = void 0;
          _this.stop = v3(0, 0, 0);
          _this.doRandomMove = void 0;
          _this.click = void 0;
          _this.flaglist = [];

          _initializerDefineProperty(_this, "mats", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animalState", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "moveTime", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "eatTime", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "eatCnt", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sector", _descriptor8, _assertThisInitialized(_this));

          _this.index = 0;

          _initializerDefineProperty(_this, "dis", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "frequency", _descriptor10, _assertThisInitialized(_this));

          _this.rotateSpeed = 0.2;
          _this.colliderOrg = v3();
          _this.canMove = true;
          return _this;
        }

        var _proto = HomeAnimal.prototype;

        _proto.onLoad = function onLoad() {
          this.collider.node.active = false;
          this.selfCollider = this.node.getComponent(SphereCollider);
          this.collider.on("onTriggerEnter", this.onTriggerEnter, this);
          this.collider.on("onTriggerStay", this.onTriggerEnter, this);
          this.flagTrigger.on("onTriggerEnter", this.onFlagTriggerEnter, this);
          this.flagTrigger.on("onTriggerExit", this.onFlagTriggerExit, this);
        };

        _proto.onDestroy = function onDestroy() {
          var _this$doRandomMove, _this$click;

          (_this$doRandomMove = this.doRandomMove) == null ? void 0 : _this$doRandomMove.stop();
          (_this$click = this.click) == null ? void 0 : _this$click.stop();
        };

        _proto.init = function init(animalType) {
          this.animalType = animalType;
          this.rg = this.node.getComponent(RigidBody);
          this.skeleAniaml = this.node.getComponentInChildren(SkeletalAnimation);
          this.meshRender = this.node.getComponentInChildren(SkinnedMeshRenderer);
          this.node.setRotationFromEuler(0, 0, 0);
          this.meshRender.setMaterial(this.mats[0], 0);
          this.rg.useGravity = true;
        };

        _proto.onClick = function onClick() {
          var _this$click2,
              _this2 = this;

          AudioManager.instance.clickAnimal(this.animalType);
          (_this$click2 = this.click) == null ? void 0 : _this$click2.stop();
          this.click = new Coroutine(function () {
            return _this2.clickAniaml();
          });
          this.click.start();
        } //栅栏受到攻击
        ;

        _proto.onBeAtk = function onBeAtk() {
          var _this3 = this;

          if (!this.skeleAniaml.getState("wake").isPlaying) {
            var _this$click3;

            (_this$click3 = this.click) == null ? void 0 : _this$click3.stop();
            this.click = new Coroutine(function () {
              return _this3.clickAniaml();
            });
            this.click.start();
          }
        };

        _proto.clickAniaml = /*#__PURE__*/_regeneratorRuntime().mark(function clickAniaml() {
          var _this$doRandomMove2,
              _this4 = this;

          var time;
          return _regeneratorRuntime().wrap(function clickAniaml$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                (_this$doRandomMove2 = this.doRandomMove) == null ? void 0 : _this$doRandomMove2.stop();
                this.skeleAniaml.crossFade("wake");
                time = this.skeleAniaml.getState("wake").duration;

                if (!this.canMove) {
                  _context.next = 12;
                  break;
                }

                _context.next = 6;
                return Coroutine.waitForSecond(0.02, this);

              case 6:
                _context.next = 8;
                return Coroutine.waitForSecond(time, this);

              case 8:
                this.doRandomMove = new Coroutine(function () {
                  return _this4.doAction();
                });
                this.doRandomMove.start();
                _context.next = 17;
                break;

              case 12:
                _context.next = 14;
                return Coroutine.waitForSecond(0.02, this);

              case 14:
                _context.next = 16;
                return Coroutine.waitForSecond(time, this);

              case 16:
                this.skeleAniaml.crossFade("eat");

              case 17:
              case "end":
                return _context.stop();
            }
          }, clickAniaml, this);
        });

        _proto.initRandomMove = /*#__PURE__*/function () {
          var _initRandomMove = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(pos, canMove) {
            var _this5 = this;

            return _regeneratorRuntime().wrap(function _callee$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  if (canMove === void 0) {
                    canMove = true;
                  }

                  this.moveTime = HomeAnimalCfg.moveTime[randomRangeInt(0, 2)];
                  this.eatTime = HomeAnimalCfg.eatTime[randomRangeInt(0, 2)];
                  this.eatCnt = HomeAnimalCfg.eatCnt;
                  this.sector = HomeAnimalCfg.sector;
                  this.dis = HomeAnimalCfg.dis;
                  this.canMove = canMove;
                  this.flagTrigger.enabled = canMove;
                  this.frequency = HomeAnimalCfg.frequency;
                  this.node.setWorldPosition(v3(pos));
                  this.collider.node.active = true;
                  this.colliderOrg = v3(this.collider.node.position);
                  this.node.setWorldRotationFromEuler(0, randomRangeInt(0, 361), 0);
                  this.stopMove();
                  _context2.next = 16;
                  return this.delay(randomRange(2, 5));

                case 16:
                  if (canMove) {
                    this.doRandomMove = new Coroutine(function () {
                      return _this5.doAction();
                    });
                    this.doRandomMove.start();
                  }

                case 17:
                case "end":
                  return _context2.stop();
              }
            }, _callee, this);
          }));

          function initRandomMove(_x, _x2) {
            return _initRandomMove.apply(this, arguments);
          }

          return initRandomMove;
        }();

        _proto.initBron = function initBron(pos) {
          var _this6 = this;

          this.moveTime = HomeAnimalCfg.moveTime[randomRangeInt(0, 2)];
          this.eatTime = HomeAnimalCfg.eatTime[randomRangeInt(0, 2)];
          this.eatCnt = HomeAnimalCfg.eatCnt;
          this.sector = HomeAnimalCfg.sector;
          this.dis = HomeAnimalCfg.dis;
          this.frequency = HomeAnimalCfg.frequency;
          this.node.setWorldPosition(v3(pos));
          this.collider.node.active = true;
          this.colliderOrg = v3(this.collider.node.position);
          var dir = v3(randomRange(-0.5, 0.6), 0, 1);
          var runDir = v3(dir).negative();
          this.skeleAniaml.play('run');
          this.flaglist = [];
          tween(this.node).to(0.5, {}, {
            onUpdate: function onUpdate() {
              _this6.node.lookAt(runDir);

              _this6.rg.setLinearVelocity(dir);
            },
            onComplete: function onComplete() {
              _this6.doRandomMove = new Coroutine(function () {
                return _this6.doAction();
              });

              _this6.doRandomMove.start();
            }
          }).start();
        };

        _proto.LookAround = /*#__PURE__*/_regeneratorRuntime().mark(function LookAround(controller, randomdir, dis, sector) {
          var dirs, dir, rote, y;
          return _regeneratorRuntime().wrap(function LookAround$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                this.index = 0;
                dirs = [];
                dir = v3();

              case 3:
                if (!(this.index <= sector && this.node.active && dirs.length < 1)) {
                  _context3.next = 20;
                  break;
                }

                rote = void 0;
                y = controller.eulerAngles.y + this.frequency * randomdir;
                rote = v3(0, y, 0);
                this.index += this.frequency;

                if (!(this.index == 0)) {
                  _context3.next = 13;
                  break;
                }

                return _context3.delegateYield(this.checkObs(controller, rote, 0), "t0", 10);

              case 10:
                dir = _context3.t0;
                _context3.next = 15;
                break;

              case 13:
                return _context3.delegateYield(this.checkObs(controller, rote, randomdir), "t1", 14);

              case 14:
                dir = _context3.t1;

              case 15:
                if (dir != null) dirs.push(dir);
                _context3.next = 18;
                return Coroutine.waitForSecond(0.02, this);

              case 18:
                _context3.next = 3;
                break;

              case 20:
                if (!(dirs.length >= 1)) {
                  _context3.next = 24;
                  break;
                }

                return _context3.abrupt("return", dirs[0]);

              case 24:
                return _context3.abrupt("return", null);

              case 25:
              case "end":
                return _context3.stop();
            }
          }, LookAround, this);
        });
        _proto.checkObs = /*#__PURE__*/_regeneratorRuntime().mark(function checkObs(controller, rote, randomdir) {
          var dir;
          return _regeneratorRuntime().wrap(function checkObs$(_context4) {
            while (1) switch (_context4.prev = _context4.next) {
              case 0:
                this.haveObs = false;
                this.collider.node.worldPosition = this.rotateByPoint(this.collider.node.getWorldPosition(), this.node.getWorldPosition(), randomdir * this.frequency);
                _context4.next = 4;
                return Coroutine.waitForSecond(0.04, this);

              case 4:
                if (!this.haveObs) {
                  _context4.next = 8;
                  break;
                }

                return _context4.abrupt("return", null);

              case 8:
                dir = v3();
                dir = v3(this.collider.node.worldPosition).subtract(controller.worldPosition).normalize();
                dir.y = 0;
                return _context4.abrupt("return", dir);

              case 12:
              case "end":
                return _context4.stop();
            }
          }, checkObs, this);
        });

        _proto.slowMove = function slowMove(dir, movetime, force) {
          var _this7 = this;

          if (force === void 0) {
            force = 1;
          }

          return /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var lookPos, lerpPos, rote, speed, org, _this7$rg;

            return _regeneratorRuntime().wrap(function _callee2$(_context5) {
              while (1) switch (_context5.prev = _context5.next) {
                case 0:
                  _this7.collider.node.setPosition(v3(_this7.colliderOrg));

                  if (_this7.animalState != HomeAnimalState.runAway) _this7.skeleAniaml.crossFade('walk');
                  lookPos = v3(dir).negative();
                  lerpPos = v3();
                  rote = 0;
                  speed = 0;
                  org = v3(_this7.node.forward).normalize();
                  speed = _this7.rotateSpeed / Vec3.distance(org, lookPos);

                case 8:
                  if (!(rote < 1)) {
                    _context5.next = 18;
                    break;
                  }

                  rote += speed;
                  Vec3.lerp(lerpPos, org, lookPos, rote);

                  if (!(_this7.animalState == HomeAnimalState.runAway)) {
                    _context5.next = 13;
                    break;
                  }

                  return _context5.abrupt("return");

                case 13:
                  _this7.node.lookAt(lerpPos.add(_this7.node.worldPosition));

                  _context5.next = 16;
                  return Coroutine.waitForSecond(0.02, _this7);

                case 16:
                  _context5.next = 8;
                  break;

                case 18:
                  dir = dir.multiplyScalar(force);
                  _this7.haveObs = false;
                  _this7.animalState = HomeAnimalState.move;

                case 21:
                  if (!(movetime > 0)) {
                    _context5.next = 33;
                    break;
                  }

                  movetime -= 0.02; //有障碍物就停下来吃草

                  if (!_this7.haveObs) {
                    _context5.next = 28;
                    break;
                  } //概率叫一声


                  if (Math.random() < 0.2) AudioManager.instance.clickAnimal(_this7.animalType);
                  movetime = 0;

                  _this7.stopMove();

                  return _context5.abrupt("return");

                case 28:
                  (_this7$rg = _this7.rg) == null ? void 0 : _this7$rg.setLinearVelocity(dir);
                  _context5.next = 31;
                  return Coroutine.waitForSecond(0.02, _this7);

                case 31:
                  _context5.next = 21;
                  break;

                case 33:
                case "end":
                  return _context5.stop();
              }
            }, _callee2);
          })();
        };

        _proto.doAction = /*#__PURE__*/_regeneratorRuntime().mark(function doAction() {
          var randomdir, sector, dir;
          return _regeneratorRuntime().wrap(function doAction$(_context6) {
            while (1) switch (_context6.prev = _context6.next) {
              case 0:
                if (!(this.animalState != HomeAnimalState.runAway && this.collider)) {
                  _context6.next = 20;
                  break;
                }

                this.animalState = HomeAnimalState.move;
                this.collider.node.active = true; //找一个方位

                randomdir = 1;
                if (math.random() > 0.5) randomdir = -1;
                sector = this.sector;

                if (this.eatCnt < 0) {
                  sector = 360;
                  this.eatCnt = 5;
                }

                return _context6.delegateYield(this.LookAround(this.node, randomdir, this.dis, sector), "t0", 8);

              case 8:
                dir = _context6.t0;

                if (!(dir == null)) {
                  _context6.next = 12;
                  break;
                }

                _context6.next = 14;
                break;

              case 12:
                this.moveTime = randomRange(HomeAnimalCfg.moveTime[0], HomeAnimalCfg.moveTime[1]);
                return _context6.delegateYield(this.slowMove(dir, this.moveTime, 1), "t1", 14);

              case 14:
                this.eatTime = randomRange(HomeAnimalCfg.eatTime[0], HomeAnimalCfg.eatTime[1]);
                this.stopMove();
                _context6.next = 18;
                return Coroutine.waitForSecond(this.eatTime, this);

              case 18:
                _context6.next = 0;
                break;

              case 20:
              case "end":
                return _context6.stop();
            }
          }, doAction, this);
        });

        _proto.rotateByPoint = function rotateByPoint(target, center, angle, axis) {
          if (axis === void 0) {
            axis = Vec3.UP;
          }

          var quat = new Quat();
          var dir = new Vec3();
          var rotated = new Vec3(); // 逐元素向量减法: 目标位置 - 中心位置 = 由中心位置指向目标位置的向量

          Vec3.subtract(dir, target, center); // 角度转弧度

          var rad = math.toRadian(angle); // 根据旋转轴和旋转弧度计算四元数: 绕指定轴旋转指定弧度后的四元数

          Quat.fromAxisAngle(quat, axis, rad); // 向量四元数乘法: 向量 * 四元数 = 该向量按照四元数旋转后的向量

          Vec3.transformQuat(rotated, dir, quat); // 逐元素向量加法: 中心点 + 旋转后的向量 = 旋转后的点

          Vec3.add(rotated, center, rotated);
          return rotated;
        };

        _proto.setRunAwayState = /*#__PURE__*/function () {
          var _setRunAwayState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
            var _this$doRandomMove3,
                _this8 = this;

            var dir, rundir, lookdir;
            return _regeneratorRuntime().wrap(function _callee3$(_context7) {
              while (1) switch (_context7.prev = _context7.next) {
                case 0:
                  (_this$doRandomMove3 = this.doRandomMove) == null ? void 0 : _this$doRandomMove3.stop();
                  this.selfCollider.isTrigger = true;
                  this.rg.type = physics.ERigidBodyType.KINEMATIC;
                  this.animalState = HomeAnimalState.runAway;
                  this.collider.node.active = false;
                  this.skeleAniaml.play('jump');
                  dir = HomeAnimalCfg.jumpForce;
                  this.node.lookAt(v3(dir).negative());
                  tween(this.node).by(0.7, {
                    position: dir
                  }).start();
                  _context7.next = 11;
                  return this.delay(0.7);

                case 11:
                  rundir = v3(10, 0, 0);
                  lookdir = v3(100, 0, 0);

                  if (Math.random() > 0.5) {
                    rundir.multiply3f(-1, 0, 0);
                    lookdir.multiply3f(-1, 0, 0);
                  }

                  this.skeleAniaml.play("run");
                  this.node.lookAt(lookdir.negative());
                  tween(this.node).by(3, {
                    position: rundir
                  }, {
                    onUpdate: function onUpdate() {},
                    onComplete: function onComplete() {
                      _this8.node.destroy();
                    }
                  }).start();

                case 17:
                case "end":
                  return _context7.stop();
              }
            }, _callee3, this);
          }));

          function setRunAwayState() {
            return _setRunAwayState.apply(this, arguments);
          }

          return setRunAwayState;
        }();

        _proto.stopMove = function stopMove() {
          if (this.animalState != HomeAnimalState.runAway) {
            this.eatCnt--;
            this.collider.node.active = false;
            this.animalState = HomeAnimalState.eat;
            this.rg.setLinearVelocity(this.stop);
            this.skeleAniaml.crossFade('eat');
          }
        };

        _proto.move = function move(dir, force) {
          if (force === void 0) {
            force = 1;
          }

          this.node.lookAt(v3(dir).negative());
          dir = dir.multiplyScalar(force);
          this.rg.setLinearVelocity(dir);
          this.skeleAniaml.crossFade('run');
        };

        _proto.dead = function dead() {
          this.rg.enabled = false;
          this.selfCollider.enabled = false;
          this.collider.node.active = false;
          this.flagTrigger.node.active = false;
          this.rg.type = physics.ERigidBodyType.STATIC;
          this.animalState = HomeAnimalState.dead;
          this.meshRender.setMaterial(this.mats[1], 0);
          this.skeleAniaml.play('deathpose'); // this.skeleAniaml.stop();
        };

        _proto.saleState = function saleState() {
          this.rg.enabled = false;
          this.selfCollider.enabled = false;
          this.collider.node.active = false;
          this.flagTrigger.node.active = false;
          this.rg.type = physics.ERigidBodyType.STATIC;
          this.animalState = HomeAnimalState.dead;
          this.skeleAniaml.play('win');
        };

        _proto.onTriggerEnter = function onTriggerEnter(collider) {
          var rg = collider.otherCollider;

          if (rg && rg.name != "Ground<BoxCollider>" && !this.isSelf(rg) && this.canCheckObs()) {
            this.haveObs = true;
          }
        };

        _proto.onTriggerStay = function onTriggerStay(collider) {
          var rg = collider.otherCollider;

          if (rg && rg.name != "Ground<BoxCollider>" && !this.isSelf(rg) && this.canCheckObs()) {
            this.haveObs = true;
          }
        };

        _proto.canCheckObs = function canCheckObs() {
          return this.animalState == HomeAnimalState.move;
        };

        _proto.onFlagTriggerEnter = function onFlagTriggerEnter(collider) {
          if (collider) {
            this.flaglist.push(collider.otherCollider.node);
          }
        };

        _proto.onFlagTriggerExit = function onFlagTriggerExit(collider) {
          if (collider) {
            this.flaglist = this.flaglist.filter(function (item) {
              return item != collider.otherCollider.node;
            });
          }
        };

        _proto.update = function update(dt) {
          if (this.flagTrigger) {
            this.flagTrigger.node.parent.setRotationFromEuler(this.node.eulerAngles.negative());
          }
        };

        _proto.isSelf = function isSelf(rg) {
          return rg.node.getComponent(HomeAnimal) == this;
        };

        _proto.randomState = function randomState() {
          var index = randomRangeInt(0, HomeAnimalState.max);
          this.animalState = index;
        };

        _proto.onPreDestroy = /*#__PURE__*/function () {
          var _onPreDestroy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(destoryEffect) {
            var partic;
            return _regeneratorRuntime().wrap(function _callee4$(_context8) {
              while (1) switch (_context8.prev = _context8.next) {
                case 0:
                  this.rg.enabled = false;
                  this.selfCollider.enabled = false;
                  this.collider.node.active = false;
                  this.flagTrigger.node.active = false;
                  this.rg.type = physics.ERigidBodyType.STATIC;
                  this.animalState = HomeAnimalState.dead;

                  if (!(destoryEffect == "")) {
                    _context8.next = 9;
                    break;
                  }

                  this.node.destroy();
                  return _context8.abrupt("return");

                case 9:
                  _context8.next = 11;
                  return this.delay(Math.random() * 0.8);

                case 11:
                  partic = EffectManager.instance.getParticle(destoryEffect);
                  partic.setPosition(this.node.getWorldPosition());
                  partic.active = true;
                  tween(partic).to(1, {}, {
                    onComplete: function onComplete(target) {
                      target.destroy();
                    }
                  }).start();
                  this.node.destroy();

                case 16:
                case "end":
                  return _context8.stop();
              }
            }, _callee4, this);
          }));

          function onPreDestroy(_x3) {
            return _onPreDestroy.apply(this, arguments);
          }

          return onPreDestroy;
        }();

        _proto.delay = function delay(time) {
          time *= 1000;
          return Utils.delay(time, this);
        };

        return HomeAnimal;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "collider", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "flagTrigger", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "mats", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "animalState", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return HomeAnimalState.move;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "moveTime", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "eatTime", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "eatCnt", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "sector", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 120;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "dis", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "frequency", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.02;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HomeAnimalCfg.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, _decorator, v3;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "437e7A+PZJF8KuqahuFusA5", "HomeAnimalCfg", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var HomeAnimalCfg = exports('HomeAnimalCfg', (_dec = ccclass('HomeAnimalCfg'), _dec(_class = (_class2 = function HomeAnimalCfg() {}, _class2.moveTime = [1, 2], _class2.eatTime = [10, 15], _class2.eatCnt = 2, _class2.sector = 360, _class2.dis = 1.5, _class2.frequency = 60, _class2.jumpForce = v3(0, 0, 2.4), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HomeCfg.ts", ['cc'], function () {
  'use strict';

  var cclegacy, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      cclegacy._RF.push({}, "127begOly1Ii6CBKH1ZFpYa", "HomeCfg", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HomeHelpManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Coroutine.ts', './TimeTools.ts', './DataManager.ts', './NpcManager.ts', './UIManager.ts', './Panel_Main.ts', './GameCfg.ts', './AnimalFarm.ts', './GameManager.ts', './Utils.ts', './AudioManager.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _regeneratorRuntime, cclegacy, _decorator, Node, director, randomRangeInt, Component, Coroutine, TimeTools, DataManager, NpcManager, UIManager, Panel_Main, GameCfg, AnimalFarm, GameFinishState, Utils, AudioManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      director = module.director;
      randomRangeInt = module.randomRangeInt;
      Component = module.Component;
    }, function (module) {
      Coroutine = module.Coroutine;
    }, function (module) {
      TimeTools = module.TimeTools;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      NpcManager = module.NpcManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      Panel_Main = module.Panel_Main;
    }, function (module) {
      GameCfg = module.GameCfg;
    }, function (module) {
      AnimalFarm = module.AnimalFarm;
    }, function (module) {
      GameFinishState = module.GameFinishState;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      AudioManager = module.AudioManager;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "71a8eMvbhlHGZcGMkNpNFNC", "HomeHelpManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var HelpNpcAction = exports('HelpNpcAction', function HelpNpcAction(npcName, npcHeadUrl, timeFrame) {
        this.npcName = void 0;
        this.npcHeadUrl = void 0;
        this.timeFrame = void 0;
        this.npcName = npcName;
        this.npcHeadUrl = npcHeadUrl;
        this.timeFrame = timeFrame;
      });
      var HomeHelpManager = exports('HomeHelpManager', (_dec = ccclass('HomeHelpManager'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(HomeHelpManager, _Component);

        function HomeHelpManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.nextAddTimer = 0;
          _this.lastTimer = 0;
          _this.curCd = 0;
          _this.homeHelpCoroutine = void 0;
          _this.needHelpAction = void 0;
          _this.showHelpPanelCd = 0;
          _this.panel_main = void 0;
          _this.notTime = void 0;
          _this.giveAnimalCorotine = void 0;
          return _this;
        }

        HomeHelpManager.getInstance = function getInstance() {
          if (!this._instance) {
            var framNode = new Node("HomeHelpManager");
            this._instance = framNode.addComponent(HomeHelpManager);
            director.getScene().addChild(framNode);
            director.addPersistRootNode(this._instance.node);
          }

          return this._instance;
        };

        var _proto = HomeHelpManager.prototype;

        _proto.init = function init() {
          if (DataManager.getInstance().playerData.friendHelp > 0) this.startCorotine();
          this.panel_main = UIManager.getInstance().getPanel(Panel_Main);
        };

        _proto.startCorotine = function startCorotine() {
          var _this2 = this;

          if (this.homeHelpCoroutine) {
            this.homeHelpCoroutine.start();
            return;
          }

          this.lastTimer = TimeTools.getCurTime();
          this.nextAddTimer = randomRangeInt(GameCfg.HelpTime[0] * 60, GameCfg.HelpTime[1] * 60) * 1000 + this.lastTimer;
          this.curCd = this.nextAddTimer - TimeTools.getCurTime();
          this.curCd = this.curCd / 1000;
          this.homeHelpCoroutine = new Coroutine(function () {
            return _this2.doHelp();
          });
          this.homeHelpCoroutine.start();
        };

        _proto.stop = function stop() {
          var _this$homeHelpCorouti;

          (_this$homeHelpCorouti = this.homeHelpCoroutine) == null ? void 0 : _this$homeHelpCorouti.stop();
        };

        _proto.doHelp = /*#__PURE__*/_regeneratorRuntime().mark(function doHelp() {
          var _this3 = this;

          var npcInfo;
          return _regeneratorRuntime().wrap(function doHelp$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                _context.next = 3;
                return Coroutine.waitForSecond(1, this);

              case 3:
                this.curCd--;

                if (this.curCd <= 0) {
                  this.lastTimer = TimeTools.getCurTime();
                  this.nextAddTimer = randomRangeInt(GameCfg.HelpTime[0] * 60, GameCfg.HelpTime[1] * 60) * 1000 + this.lastTimer;
                  this.curCd = this.nextAddTimer - TimeTools.getCurTime();
                  this.curCd = this.curCd / 1000;
                  npcInfo = NpcManager.getInstance().getNpcNameHeadUrl();
                  this.needHelpAction = new HelpNpcAction(npcInfo.name, npcInfo.avatar, TimeTools.getCurTime());
                }

                if (this.needHelpAction && this.showHelpPanelCd <= 0) {
                  if (this.panel_main.isOnlyShowHomePanel() && AnimalFarm.getInstance()._lisAnimals.length >= 10) {
                    this.showHelpPanelCd = 5; //防止this 没传过去

                    this.panel_main.showPopHelpNpc(this.needHelpAction.npcName, this.needHelpAction.npcHeadUrl, function (result, name, head) {
                      _this3.giveAnimaltoNpc(result, name, head);
                    });
                    this.needHelpAction = null;
                  }
                }

                _context.next = 0;
                break;

              case 8:
              case "end":
                return _context.stop();
            }
          }, doHelp, this);
        });

        _proto.giveAnimaltoNpc = function giveAnimaltoNpc(result, name, head) {
          var _this4 = this; //给了动物


          if (result) {
            DataManager.getInstance().playerData.addGiveProbability += GameCfg.SendAddProbability;
            DataManager.getInstance().playerData.addGiveProbability = Utils.limitNumber(DataManager.getInstance().playerData.addGiveProbability, 0, 1 - GameCfg.SendProbability);

            if (Math.random() <= GameCfg.NPCWinProbability) {
              this.giveAnimalCorotine = new Coroutine(function () {
                return _this4.doGiveAnimal(name, head);
              });
              this.giveAnimalCorotine.start(name, head);
            } else {
              UIManager.getInstance().tip.subscribeTip(["躺赢！", "在你支援下拱墙失败！", name, head], TimeTools.getCurTime(), 9, function () {
                var panel = UIManager.getInstance().getPanel(Panel_Main);
                return panel.node.active && !panel.Pop_exceed.node.active;
              }, 4, function () {
                AudioManager.instance.playSound("prompt_tone");
              });
            }

            var cnt = GameCfg.SendPAnimalCount;
            AnimalFarm.getInstance().clearAnimals(cnt);
          } else {
            DataManager.getInstance().playerData.addGiveProbability -= GameCfg.RefuseAddProbability;
            DataManager.getInstance().playerData.addGiveProbability = Utils.limitNumber(DataManager.getInstance().playerData.addGiveProbability, 0, 1);
          } //帮助界面的cd


          this.scheduleOnce(function () {
            _this4.showHelpPanelCd = 0;
          }, 5);
        };

        _proto.doGiveAnimal = /*#__PURE__*/_regeneratorRuntime().mark(function doGiveAnimal(nameNpc, npcHeadUrl) {
          var cd, cnt;
          return _regeneratorRuntime().wrap(function doGiveAnimal$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                this.notTime = randomRangeInt(GameCfg.NPWinGiveBackTime[0] * 60, GameCfg.NPWinGiveBackTime[1] * 60) * 1000 + TimeTools.getCurTime();

              case 1:
                _context2.next = 4;
                return Coroutine.waitForSecond(2, this);

              case 4:
                cd = this.notTime - TimeTools.getCurTime();

                if (!(cd <= 0)) {
                  _context2.next = 11;
                  break;
                }

                if (!this.panel_main.node.active) {
                  _context2.next = 11;
                  break;
                }

                cnt = GameCfg.SendPAnimalCount * 2;
                AnimalFarm.getInstance().checkOverLimit(cnt, GameFinishState.Other, false);
                UIManager.getInstance().tip.subscribeTip(["躺赢！", '打赢后送了你' + cnt + "只动物", nameNpc, npcHeadUrl], TimeTools.getCurTime(), 6, function () {
                  var panel = UIManager.getInstance().getPanel(Panel_Main);
                  return panel.node.active && !panel.Pop_exceed.node.active;
                }, 4, function () {
                  AudioManager.instance.playSound("prompt_tone");
                });
                return _context2.abrupt("return");

              case 11:
                _context2.next = 1;
                break;

              case 13:
              case "end":
                return _context2.stop();
            }
          }, doGiveAnimal, this);
        });
        return HomeHelpManager;
      }(Component), _class2._instance = void 0, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HomeManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AnimalFarm.ts', './CfgData.ts', './DataManager.ts', './GameManager.ts', './HomeAnimal.ts', './NpcManager.ts', './Panel_Main.ts', './UIManager.ts', './CameraManager.ts', './HomeView.ts', './Flag.ts', './AssetsMapItem.ts', './AssetsAnimal.ts', './PlayerFench.ts', './AudioManager.ts', './GameResponces.ts', './Utils.ts', './RunAwayAre.ts', './Coroutine.ts', './HomeHelpManager.ts', './DifficultyManager.ts', './TimeTools.ts', './Panel_Load.ts', './AuthorizeManager.ts', './SdkManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _regeneratorRuntime, _asyncToGenerator, cclegacy, _decorator, Camera, Node, director, geometry, BoxCollider, input, Input, game, Game, tween, v3, randomRangeInt, instantiate, randomRange, PhysicsSystem, RigidBody, Component, Vec3, AnimalFarm, CfgData, DataManager, GameManager, HomeAnimal, NpcManager, Panel_Main, UIManager, CameraManager, HomeView, Flag, AssetsMapItem, AssetsAnimal, PlayerFench, AudioManager, GameResponces, Utils, RunAwayAre, Coroutine, HomeHelpManager, DifficultyManager, TimeTools, Panel_Load, AuthorizeManager, SdkManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _regeneratorRuntime = module.regeneratorRuntime;
      _asyncToGenerator = module.asyncToGenerator;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Camera = module.Camera;
      Node = module.Node;
      director = module.director;
      geometry = module.geometry;
      BoxCollider = module.BoxCollider;
      input = module.input;
      Input = module.Input;
      game = module.game;
      Game = module.Game;
      tween = module.tween;
      v3 = module.v3;
      randomRangeInt = module.randomRangeInt;
      instantiate = module.instantiate;
      randomRange = module.randomRange;
      PhysicsSystem = module.PhysicsSystem;
      RigidBody = module.RigidBody;
      Component = module.Component;
      Vec3 = module.Vec3;
    }, function (module) {
      AnimalFarm = module.AnimalFarm;
    }, function (module) {
      CfgData = module.CfgData;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      HomeAnimal = module.HomeAnimal;
    }, function (module) {
      NpcManager = module.NpcManager;
    }, function (module) {
      Panel_Main = module.Panel_Main;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      CameraManager = module.CameraManager;
    }, function (module) {
      HomeView = module.HomeView;
    }, function (module) {
      Flag = module.Flag;
    }, function (module) {
      AssetsMapItem = module.AssetsMapItem;
    }, function (module) {
      AssetsAnimal = module.AssetsAnimal;
    }, function (module) {
      PlayerFench = module.PlayerFench;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      GameResponces = module.GameResponces;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      RunAwayAre = module.RunAwayAre;
    }, function (module) {
      Coroutine = module.Coroutine;
    }, function (module) {
      HomeHelpManager = module.HomeHelpManager;
    }, function (module) {
      DifficultyManager = module.DifficultyManager;
    }, function (module) {
      TimeTools = module.TimeTools;
    }, function (module) {
      Panel_Load = module.Panel_Load;
    }, function (module) {
      AuthorizeManager = module.AuthorizeManager;
    }, function (module) {
      SdkManager = module.SdkManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class3;

      cclegacy._RF.push({}, "58e0elcKUpE+bnrn98SGB7K", "HomeManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var HomeManager = exports('HomeManager', (_dec = ccclass('HomeManager'), _dec2 = property({
        type: Camera,
        visible: true,
        displayName: "camera"
      }), _dec3 = property({
        type: Node,
        displayName: "刷新动物的点"
      }), _dec4 = property({
        type: Node,
        displayName: "出售动物刷新点"
      }), _dec5 = property({
        type: Node,
        displayName: "动物死亡点"
      }), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(HomeManager, _Component);

        function HomeManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "_camera", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bronAnimalNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "SaleAnimalPos", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "diedAnimalNode", _descriptor4, _assertThisInitialized(_this));

          _this._sleeper = void 0;
          _this.animals = new Array();
          _this._ray = void 0;
          _this.animalParent = void 0;
          _this.runAwayCorotine = void 0;
          _this.fenchTriger = void 0;
          _this.runAwayAre = void 0;
          _this._homeCfg = void 0;
          _this.homeView = void 0;
          _this.isInit = false;
          _this.animalViewCnt = 10;
          _this.animalCorpseLimit = 50;
          _this._listHomeAnimals = [];
          _this.animalCorpselist = [];
          _this.animalCorpselistNode = [];
          _this.endPosList = [];
          _this.flashTimer = 0;
          return _this;
        }

        HomeManager.getInstance = function getInstance() {
          this._instance = director.getScene().getComponentInChildren(HomeManager);
          return this._instance;
        };

        var _proto = HomeManager.prototype;

        _proto.onLoad = function onLoad() {
          this.animals = AssetsAnimal.instance.homeAnimals;
          this._sleeper = AssetsMapItem.instance._sleeper;
          this._ray = new geometry.Ray();
        };

        _proto.init = function init() {
          if (this.isInit) return;
          this.isInit = true;
          this.fenchTriger = director.getScene().getChildByPath("tirger/fence").getComponent(BoxCollider);
          this.runAwayAre = director.getScene().getChildByPath("tirger/runAwayAre").getComponent(RunAwayAre);
          this._homeCfg = CfgData.getInstance().getHomeCfg();
          var playerData = DataManager.getInstance().playerData;
          this.animalCorpseLimit = this.diedAnimalNode.children.length;
          this.animalViewCnt = this._homeCfg.house[playerData.homeLv].HomeAnimalCount;
          this.homeView = this.getComponent(HomeView);
          this.animalParent = new Node("AnimalParent");
          director.getScene().addChild(this.animalParent);

          this._camera.getComponent(CameraManager).init(4, true);

          var panel_main = UIManager.getInstance().showPanel(Panel_Main);
          panel_main.init(playerData, this._homeCfg);
          AuthorizeManager.getInstance().init();
          DifficultyManager.init();
          console.log("初始化难度调整逻辑...");
          input.on(Input.EventType.TOUCH_START, this.clickHomeItem, this);
          AudioManager.instance.initAudioSet();
          console.log("设置音频...");
          AnimalFarm.getInstance().init(this._homeCfg, this);
          console.log("初始化动物农场完成...");
          NpcManager.getInstance().init();
          console.log("初始化npc完成...");
          this.homeView.init(playerData);
          console.log("初始化房子栅栏旗帜完成...");
          PlayerFench.getInstance().init(playerData, this.node, this);
          console.log("初始化玩家栅栏完成...");
          this.initAnimalCorpse(playerData.sceneNpcList);
          console.log("初始化动物尸体完成...");
          this.initAnimals();
          console.log("初始化农场里的动物");
          HomeHelpManager.getInstance().init();
          AudioManager.instance.playMusicOnHome();
          this.startRunAwayAnimal(); //注册回调

          GameResponces._event.on(GameResponces.createNewSceneNpc, this.createNewSceneNpc, this);

          GameResponces._event.on(GameResponces.createBronAnimal, this.createBronAnimal, this);

          if (Utils.isWxPlatform()) {
            wx.onHide(this.onHide);
            wx.onShow(this.onShow);
          } else if (Utils.isDyPlatform()) {
            tt.onShow(this.onShow);
            tt.onHide(this.onHide);
          } else {
            game.on(Game.EVENT_SHOW, this.onShow, this);
            game.on(Game.EVENT_HIDE, this.onHide, this);
          }
        };

        _proto.onShow = function onShow() {
          var timer = new Date();
          var n = Date.parse(timer.toString());
          var back = n - HomeManager.getInstance().flashTimer;

          if (back >= 60000 && !SdkManager.isShowAd) {
            var load = UIManager.getInstance().showPanel(Panel_Load);
            load.showStartProgress();
            load.endProgress(function () {
              var cnt = Math.ceil(back / 1000 / CfgData.getInstance().getHomeCfg().animal[0].CreatTime);
              AnimalFarm.getInstance().buildAnimal(cnt);
              HomeManager.getInstance().initAnimals();
            });
            tween(load).to(1.5, {}, {
              onUpdate: function onUpdate(load, ratio) {
                var panel = load;
                panel.setProgress(ratio);
              }
            }).start();
          }
        };

        _proto.onHide = function onHide() {
          var timer = new Date();
          var n = Date.parse(timer.toString());
          HomeManager.getInstance().flashTimer = n;
        };

        _proto.onDestroy = function onDestroy() {
          GameResponces._event.off(GameResponces.createNewSceneNpc, this.createNewSceneNpc, this);

          GameResponces._event.off(GameResponces.createBronAnimal, this.createBronAnimal, this);
        } //创建农场里面的动物
        ;

        _proto.initAnimals = function initAnimals() {
          this.clearInHomeAnimal("");
          var points = [];
          this.bronAnimalNode.children.forEach(function (child) {
            points.push(v3(child.getWorldPosition()));
          });
          points = Utils.KnuthDurstenfeldShuffle(points); // this.animalViewCnt = 1;

          for (var index = 0; index < this.animalViewCnt; index++) {
            var _this$createInHomeAni;

            var pos = points[index];

            var animalType = AnimalFarm.getInstance()._lisAnimals[randomRangeInt(0, AnimalFarm.getInstance()._lisAnimals.length)];

            (_this$createInHomeAni = this.createInHomeAnimal(animalType)) == null ? void 0 : _this$createInHomeAni.initRandomMove(pos);
          }
        };

        _proto.createBronAnimal = function createBronAnimal(animalType) {
          var _this$createInHomeAni2;

          (_this$createInHomeAni2 = this.createInHomeAnimal(animalType)) == null ? void 0 : _this$createInHomeAni2.initBron(v3(0, 0, 1));
        };

        _proto.createInHomeAnimal = function createInHomeAnimal(animalType) {
          if (!this._listHomeAnimals) return null;
          if (this._listHomeAnimals.length >= this.animalViewCnt) return null;
          if (AnimalFarm.getInstance()._lisAnimals.length <= this._listHomeAnimals.length) return null;
          var entity = this.createAnimalEntity(animalType, this.bronAnimalNode);

          this._listHomeAnimals.push(entity);

          return entity;
        };

        _proto.clearInHomeAnimal = function clearInHomeAnimal(ef) {
          for (var index = 0; index < this._listHomeAnimals.length; index++) {
            var element = this._listHomeAnimals[index];
            element.onPreDestroy(ef);
          }

          this._listHomeAnimals = [];
          this.runAwayAre.inAreAnimals = [];
        } //解锁功能
        ;

        _proto.updateHouseLv = function updateHouseLv() {
          var playerData = DataManager.getInstance().playerData;
          var houseItem = this._homeCfg.house[playerData.homeLv];
          this.homeView.updateHouse(playerData);

          if (houseItem.Unlock != "0_0") {
            var strs = houseItem.Unlock.split('_');
            var unlockType = Number.parseInt(strs[0]);
            var box = Number.parseInt(strs[1]);

            switch (unlockType) {
              //动物
              case 1:
                if (playerData.unlockAnimals.indexOf(box) < 0) {
                  playerData.unlockAnimals.push(box);
                  AnimalFarm.getInstance().getTotallrote();
                  console.log("解锁动物：" + box);
                }

                break;
              //宝箱

              case 2:
                playerData.treasureBox = box;
                console.log("解锁宝箱：" + box);
                break;
              //地图

              case 3:
                playerData.mapSize = this._homeCfg.map[box].LatticeCount;
                break;
              //求助好友解锁

              case 4:
                if (playerData.friendHelp == 1) break;
                playerData.friendHelp = 1;
                HomeHelpManager.getInstance().startCorotine();
                break;
            }
          }
        };

        _proto.createNewSceneNpc = /*#__PURE__*/function () {
          var _createNewSceneNpc = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(npc) {
            var panel_main;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  this.homeView.creaNpcFlag(npc);
                  this.createAnimalCorpse(npc);
                  panel_main = UIManager.getInstance().getPanel(Panel_Main);
                  panel_main.getPopCorpseSale().updateAnimalView();
                  _context.next = 6;
                  return Utils.delay(2000, this);

                case 6:
                  if (npc.isWin) this.onNpcAtkScecces();
                  _context.next = 9;
                  return Utils.delay(500, this);

                case 9:
                  if (npc.isWin) {
                    UIManager.getInstance().tip.subscribeTip([npc.npcName, npc.headUrl], TimeTools.getCurTime(), 2, function () {
                      var panel = UIManager.getInstance().getPanel(Panel_Main);
                      return panel.node.active && !panel.Pop_exceed.node.active;
                    }, 3, function () {
                      AudioManager.instance.playSound("warning");
                    });
                  } else {
                    UIManager.getInstance().tip.subscribeTip([npc.npcName, npc.headUrl], TimeTools.getCurTime(), 3, function () {
                      var panel = UIManager.getInstance().getPanel(Panel_Main);
                      return panel.node.active && !panel.Pop_exceed.node.active;
                    }, 3, function () {
                      AudioManager.instance.playSound("prompt_tone");
                    });
                  }

                case 10:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function createNewSceneNpc(_x) {
            return _createNewSceneNpc.apply(this, arguments);
          }

          return createNewSceneNpc;
        }();

        _proto.gameStart = function gameStart() {
          var _this$runAwayCorotine;

          if (Utils.isWxPlatform()) {
            wx.offHide(this.onHide);
            wx.offShow(this.onShow);
          } else if (Utils.isDyPlatform()) {
            tt.offShow(this.onShow);
            tt.offHide(this.onHide);
          } else {
            game.off(Game.EVENT_SHOW, this.onShow, this);
            game.off(Game.EVENT_HIDE, this.onHide, this);
          }

          (_this$runAwayCorotine = this.runAwayCorotine) == null ? void 0 : _this$runAwayCorotine.stop();
          this.runAwayCorotine = null;
          GameManager.unInstance();
          AnimalFarm.getInstance().onGameStart();
          PlayerFench.getInstance().onGameStart();
          HomeHelpManager.getInstance().stop();
        };

        _proto.isAnimalLimit = function isAnimalLimit() {
          var playerHomeLv = DataManager.getInstance().playerData.homeLv;
          this._homeCfg = CfgData.getInstance().getHomeCfg();
          return this._homeCfg.house[playerHomeLv].LimitStorage > AnimalFarm.getInstance()._lisAnimals.length;
        };

        _proto.getAnimalLimit = function getAnimalLimit() {
          var playerHomeLv = DataManager.getInstance().playerData.homeLv;
          this._homeCfg = CfgData.getInstance().getHomeCfg();
          return this._homeCfg.house[playerHomeLv].LimitStorage;
        };

        _proto.createAnimalEntity = function createAnimalEntity(animalType, bronPoint) {
          var anima = instantiate(this.animals[animalType]);
          var baseAnimal = anima.getComponent(HomeAnimal);
          this.animalParent.addChild(anima);
          baseAnimal.node.setWorldPosition(v3(bronPoint.getWorldPosition()));
          baseAnimal.init(animalType);
          anima.active = true;
          return baseAnimal;
        } //初始化动物尸体
        ;

        _proto.initAnimalCorpse = function initAnimalCorpse(npclis) {
          for (var index = 0; index < npclis.length; index++) {
            var npc = npclis[index];
            this.createAnimalCorpse(npc);
          }
        };

        _proto.createAnimalCorpse = function createAnimalCorpse(npc) {
          if (this.animalCorpselist.length >= this.animalCorpseLimit) return;
          var cnt = Math.ceil(npc.animalCorpseList.length / 5);
          var curIndex = this.animalCorpselist.length;

          for (var index = 0; index < cnt; index++) {
            if (this.animalCorpselist.length >= this.animalCorpseLimit) return;
            var animalType = npc.animalCorpseList[index]; //animalType = 0;

            var animal = this.createAnimalEntity(animalType, this.diedAnimalNode.children[curIndex]);
            animal.node.eulerAngles = v3(this.diedAnimalNode.children[curIndex].eulerAngles);
            this.animalCorpselistNode.push(animal.node);
            this.animalCorpselist.push(animalType);
            animal.dead();
            curIndex++;
          }
        };

        _proto.startRunAwayAnimal = function startRunAwayAnimal() {
          var _this2 = this;

          if (!this.runAwayCorotine) {
            this.runAwayCorotine = new Coroutine(function () {
              return _this2.createRunAwayAnimal();
            });
            this.runAwayCorotine.start();
          }
        };

        _proto.createRunAwayAnimal = /*#__PURE__*/_regeneratorRuntime().mark(function createRunAwayAnimal() {
          var _this3 = this;

          var _loop;

          return _regeneratorRuntime().wrap(function createRunAwayAnimal$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {
                  var runAwayime, list, index, item, _index, element, animal, _AnimalFarm$getInstan, _this3$createInHomeAn, animalType;

                  return _regeneratorRuntime().wrap(function _loop$(_context2) {
                    while (1) switch (_context2.prev = _context2.next) {
                      case 0:
                        runAwayime = randomRangeInt(2, 6);
                        _context2.next = 3;
                        return Coroutine.waitForSecond(0.02, _this3);

                      case 3:
                        _context2.next = 5;
                        return Coroutine.waitForSecond(runAwayime, _this3);

                      case 5:
                        if (!(AnimalFarm.getInstance()._lisAnimals.length > 0)) {
                          _context2.next = 39;
                          break;
                        }

                        if (PlayerFench.getInstance().isfullHp()) {
                          _context2.next = 39;
                          break;
                        }

                        list = [];
                        index = 0;

                      case 9:
                        if (!(index < _this3.runAwayAre.inAreAnimals.length)) {
                          _context2.next = 25;
                          break;
                        }

                        item = _this3.runAwayAre.inAreAnimals[index]; //有可能会被清理掉

                        if (!item) {
                          _context2.next = 22;
                          break;
                        }

                        _index = 0;

                      case 13:
                        if (!(_index < item.flaglist.length)) {
                          _context2.next = 21;
                          break;
                        }

                        element = item.flaglist[_index]; //如果有空的旗帜就是删除了的所以直接清空。

                        if (element) {
                          _context2.next = 18;
                          break;
                        }

                        item.flaglist = [];
                        return _context2.abrupt("break", 21);

                      case 18:
                        _index++;
                        _context2.next = 13;
                        break;

                      case 21:
                        if (item.flaglist.length <= 0) {
                          list.push(item);
                        }

                      case 22:
                        index++;
                        _context2.next = 9;
                        break;

                      case 25:
                        if (!(list.length > 0)) {
                          _context2.next = 39;
                          break;
                        }

                        animal = list[randomRangeInt(0, list.length)];

                        if (!animal) {
                          _context2.next = 39;
                          break;
                        }

                        _this3._listHomeAnimals = _this3._listHomeAnimals.filter(function (item) {
                          return item != animal;
                        });
                        _this3.runAwayAre.inAreAnimals = _this3.runAwayAre.inAreAnimals.filter(function (item) {
                          return item != animal;
                        });
                        AudioManager.instance.clickAnimal(animal.animalType);
                        if (!AnimalFarm.getInstance().puaseRunAnimal) (_AnimalFarm$getInstan = AnimalFarm.getInstance()) == null ? void 0 : _AnimalFarm$getInstan.popAnimal();
                        animal.setRunAwayState();
                        _context2.next = 35;
                        return Coroutine.waitForSecond(0.02, _this3);

                      case 35:
                        _context2.next = 37;
                        return Coroutine.waitForSecond(randomRangeInt(6, 10), _this3);

                      case 37:
                        animalType = AnimalFarm.getInstance()._lisAnimals[randomRangeInt(0, AnimalFarm.getInstance()._lisAnimals.length)];
                        (_this3$createInHomeAn = _this3.createInHomeAnimal(animalType)) == null ? void 0 : _this3$createInHomeAn.initBron(v3(0, 0, 1));

                      case 39:
                      case "end":
                        return _context2.stop();
                    }
                  }, _loop);
                });

              case 1:
                if (!this.node.active) {
                  _context3.next = 5;
                  break;
                }

                return _context3.delegateYield(_loop(), "t0", 3);

              case 3:
                _context3.next = 1;
                break;

              case 5:
              case "end":
                return _context3.stop();
            }
          }, createRunAwayAnimal, this);
        });

        _proto.clearNpcCorpse = function clearNpcCorpse() {
          for (var index = 0; index < this.animalCorpselistNode.length; index++) {
            var animal = this.animalCorpselistNode[index];
            animal.getComponent(HomeAnimal).onPreDestroy("FX_Coin");
          }

          this.animalCorpselistNode = [];
          this.animalCorpselist = [];
        };

        _proto.saleAnimalCorpse = function saleAnimalCorpse(n) {
          var npcManager = NpcManager.getInstance();
          DataManager.getInstance().updateCoin(npcManager.getAnimalCorpseTotallCoin() * n);
          npcManager.clearSceneNpc();
          this.homeView.clearFlags();
          this.clearNpcCorpse();
        } //出售动物
        ;

        _proto.saleAnimals = /*#__PURE__*/function () {
          var _saleAnimals = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(n) {
            var _this4 = this;

            var animallist, aniamlEntityList, cnt, index, animalType, animal, dir, startPos, endPos, ctr, _index2, element;

            return _regeneratorRuntime().wrap(function _callee2$(_context4) {
              while (1) switch (_context4.prev = _context4.next) {
                case 0:
                  animallist = Array.from(AnimalFarm.getInstance()._lisAnimals);
                  aniamlEntityList = [];
                  this.endPosList = [];
                  cnt = animallist.length;
                  this.SaleAnimalPos.children.forEach(function (child) {
                    var list = [];
                    child.children.forEach(function (son) {
                      list.push(v3(son.getWorldPosition()));
                    });
                    list = Utils.KnuthDurstenfeldShuffle(list);
                    _this4.endPosList = _this4.endPosList.concat(list);
                  });
                  index = 0;

                case 6:
                  if (!(index < cnt)) {
                    _context4.next = 26;
                    break;
                  }

                  animalType = animallist[index];
                  animal = this.createAnimalEntity(animalType, this.bronAnimalNode);
                  this.animalParent.addChild(animal.node);
                  animal.node.setWorldPosition(v3(this.SaleAnimalPos.worldPosition).add3f(0, 1, 0));
                  animal.node.setWorldRotationFromEuler(randomRangeInt(-7, 7), randomRangeInt(-7, 7), 0);
                  dir = new Vec3(randomRange(-0.1, 0.1), 0, 0.1).normalize(); //方向

                  dir = dir.multiplyScalar(randomRangeInt(2, 5)); //长度

                  startPos = animal.node.getWorldPosition();
                  endPos = this.endPosList[index];
                  ctr = v3(endPos).add(startPos).multiplyScalar(0.5).add3f(0, 2, 0);
                  Utils.bezierTo(animal.node, 0.5, startPos, ctr, endPos, null).start();

                  if (index % 6 == 0) {
                    AudioManager.instance.playfire();
                    AudioManager.instance.clickAnimal(animal.animalType);
                  }

                  animal.saleState();
                  aniamlEntityList.push(animal);
                  _context4.next = 23;
                  return this.delay(0.001);

                case 23:
                  index++;
                  _context4.next = 6;
                  break;

                case 26:
                  for (_index2 = 0; _index2 < aniamlEntityList.length; _index2++) {
                    element = aniamlEntityList[_index2];
                    element.onPreDestroy("FX_Coin");
                  }

                  aniamlEntityList = null;
                  this.endPosList = null;
                  this.clearInHomeAnimal("FX_Coin");
                  DataManager.getInstance().updateCoin(AnimalFarm.getInstance().getTotallCoin() * n);
                  AnimalFarm.getInstance().clearAnimals(AnimalFarm.getInstance()._lisAnimals.length);

                case 32:
                case "end":
                  return _context4.stop();
              }
            }, _callee2, this);
          }));

          function saleAnimals(_x2) {
            return _saleAnimals.apply(this, arguments);
          }

          return saleAnimals;
        }() //被npc攻打成功
        ;

        _proto.onNpcAtkScecces = function onNpcAtkScecces() {
          var animalList = AnimalFarm.getInstance()._lisAnimals;

          if (animalList.length <= 0) return;

          if (Math.random() <= 0.8) {
            this.clearInHomeAnimal("FX_Collect");
            AnimalFarm.getInstance().clearAnimals(AnimalFarm.getInstance()._lisAnimals.length);
          } else {
            var animalCnt = animalList.length - Math.floor(randomRange(0.5, 1.0) * animalList.length);
            AnimalFarm.getInstance().clearAnimals(animalCnt);
            this.clearInHomeAnimal("FX_Collect");
          }
        };

        _proto.updateFench = function updateFench(playerData) {
          PlayerFench.getInstance().updateFench(playerData);
          this.homeView.initFenceView(playerData.fenchLv);
        };

        _proto.triggerTouchStart = function triggerTouchStart(event) {
          this.clickHomeItem(event);
        };

        _proto.clickHomeItem = function clickHomeItem(event) {
          var touch = event.touch;

          this._camera.screenPointToRay(touch.getLocationX(), touch.getLocationY(), this._ray);

          if (PhysicsSystem.instance.raycastClosest(this._ray)) {
            var raycastResults = PhysicsSystem.instance.raycastClosestResult;
            var item = raycastResults;
            var rg = item.collider.getComponent(RigidBody);
            var flag = item.collider.getComponent(Flag);

            if (flag) {
              flag.clickHead(true);
              return;
            }

            if (rg && rg.group == 8) {
              var panel_main = UIManager.getInstance().getPanel(Panel_Main);
              console.log("rg:" + item.collider.node.name);

              if (item.collider.node.name == "home") {
                GameResponces._event.emit(GameResponces.ClickHouseToSellAnimal);

                panel_main.showPopSale();
              } else if (item.collider.node.name == "fence") {
                panel_main.showPopFix();
              }

              return;
            }

            var animal = item.collider.getComponent(HomeAnimal);

            if (rg && animal && rg.group == 32) {
              animal.onClick();
              return;
            }
          }
        };

        _proto.delay = function delay(time) {
          time *= 1000;
          return Utils.delay(time, this);
        };

        return HomeManager;
      }(Component), _class3._instance = void 0, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_camera", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bronAnimalNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "SaleAnimalPos", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "diedAnimalNode", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HomeView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CfgData.ts', './Utils.ts', './Flag.ts', './HomeManager.ts', './NpcManager.ts', './AssetsMapItem.ts', './LabelEx.ts', './TimeTools.ts', './DataManager.ts', './UIManager.ts', './Panel_Main.ts', './Pop_upHome.ts', './AudioManager.ts', './GameResponces.ts', './DifficultyManager.ts', './Coroutine.ts', './GuideCfg.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _regeneratorRuntime, _createClass, _asyncToGenerator, cclegacy, _decorator, Prefab, Node, instantiate, v3, Sprite, Label, randomRangeInt, Animation, Component, CfgData, Utils, Flag, HomeManager, NpcManager, AssetsMapItem, LabelEx, TimeTools, DataManager, UIManager, Panel_Main, Pop_upHome, AudioManager, GameResponces, DifficultyManager, Coroutine, GuideCfg;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _regeneratorRuntime = module.regeneratorRuntime;
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      instantiate = module.instantiate;
      v3 = module.v3;
      Sprite = module.Sprite;
      Label = module.Label;
      randomRangeInt = module.randomRangeInt;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      CfgData = module.CfgData;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      Flag = module.Flag;
    }, function (module) {
      HomeManager = module.HomeManager;
    }, function (module) {
      NpcManager = module.NpcManager;
    }, function (module) {
      AssetsMapItem = module.AssetsMapItem;
    }, function (module) {
      LabelEx = module.LabelEx;
    }, function (module) {
      TimeTools = module.TimeTools;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      Panel_Main = module.Panel_Main;
    }, function (module) {
      Pop_upHome = module.Pop_upHome;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      GameResponces = module.GameResponces;
    }, function (module) {
      DifficultyManager = module.DifficultyManager;
    }, function (module) {
      Coroutine = module.Coroutine;
    }, function (module) {
      GuideCfg = module.GuideCfg;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "c0a4cGYGgNAYoPDlyUr+wa/", "HomeView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var HomeView = exports('HomeView', (_dec = ccclass('HomeView'), _dec2 = property({
        type: Prefab,
        visible: true,
        displayName: "头像prefab"
      }), _dec3 = property({
        type: Prefab,
        visible: true,
        displayName: "胜利旗帜"
      }), _dec4 = property({
        type: Prefab,
        visible: true,
        displayName: "失败旗帜"
      }), _dec5 = property({
        type: Node,
        visible: true,
        displayName: "旗帜位置"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(HomeView, _Component);

        function HomeView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.houseViewPrefab = void 0;
          _this.fenceViewPrefab = void 0;

          _initializerDefineProperty(_this, "_curNpcHead", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_winflag", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_loseflag", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "flagPos", _descriptor4, _assertThisInitialized(_this));

          _this.housesView = void 0;
          _this.fenceView = void 0;
          _this.showCurHomeView = void 0;
          _this.showCurFenchView = void 0;
          _this.headView = void 0;
          _this.playerLv = void 0;
          _this.updateTime = 1;
          _this.playerData = void 0;
          _this.isFlagAnimation = false;
          _this.flagList = [];
          _this.isInit = false;
          _this.homeLvUpEffect = void 0;
          _this.corotaunh = void 0;
          return _this;
        }

        var _proto = HomeView.prototype;

        _proto.init = function init(playerDate) {
          var _this2 = this;

          this.playerData = playerDate;
          this.houseViewPrefab = AssetsMapItem.instance.houseViewPrefab;
          this.fenceViewPrefab = AssetsMapItem.instance.fenceViewPrefab;
          this.housesView = instantiate(this.houseViewPrefab);
          this.node.addChild(this.housesView);
          this.fenceView = instantiate(this.fenceViewPrefab);
          this.fenceView.setWorldPosition(v3());
          this.headView = instantiate(this._curNpcHead);
          this.node.addChild(this.fenceView);
          this.initHouseView(playerDate);
          this.initFenceView(playerDate.fenchLv); //都刷新一下

          this.createPlayerAvatar(playerDate);
          this.createFlags(NpcManager.getInstance().sceneList);
          this.startHomeLvUp();
          this.corotaunh = new Coroutine(function () {
            return _this2.stratTaunh();
          });
          this.corotaunh.start();

          GameResponces._event.on(GameResponces.homeLvUp, this.homeLvUp, this);

          this.isInit = true;
        };

        _proto.onDestroy = function onDestroy() {
          GameResponces._event.off(GameResponces.homeLvUp, this.homeLvUp, this);

          this.corotaunh.stop();
          this.corotaunh = null;
        };

        _proto.createPlayerAvatar = function createPlayerAvatar(playerDate) {
          var npcNode = this.flagPos.getChildByPath("curNpc");
          var npchead = this.headView;
          npcNode.addChild(npchead);
          npchead.setPosition(v3());
          var head = npchead.getChildByPath("Mask/head").getComponent(Sprite);
          this.playerLv = npchead.getChildByPath("lv").getComponent(Label);
          var playerName = npchead.getChildByPath("lay_name/name").getComponent(LabelEx);
          playerName.orgVlaue = playerDate.playerName;
          this.playerLv.string = "【" + (playerDate.homeLv + 1) + "级】";

          if (playerDate.headUrl) {
            Utils.urlToSpriteFrame(playerDate.headUrl, function (res) {
              if (head) head.spriteFrame = res;
            });
          }
        };

        _proto.updatePlayerAvatar = function updatePlayerAvatar(playerDate) {
          var head = this.headView.getChildByPath("Mask/head").getComponent(Sprite);
          var playerName = this.headView.getChildByPath("lay_name/name").getComponent(LabelEx);
          playerName.orgVlaue = playerDate.playerName;
          if (playerDate.headUrl) Utils.urlToSpriteFrame(playerDate.headUrl, function (res) {
            if (head) head.spriteFrame = res;
          });
        };

        _proto.creaNpcFlag = function creaNpcFlag(npc) {
          if (this.isFlagAnimation) return;

          if (!npc) {
            console.error("null npc 如果地图上的旗帜满了，为正常");
            return;
          }

          if (!this.node.active) {
            return;
          }

          var flagNode = this.flagPos.getChildByPath("NpcPoint");
          var flagInfoNode = this.flagPos.getChildByPath("UiPoint");
          var taunhNode = this.flagPos.getChildByPath("PopPoint");
          var flagIndex = -1; //如果npc 没有位置，给他一个位置

          if (!npc.flagPosIndex || npc.flagPosIndex < 0) {
            if (npc.isWin) {
              //先找胜利的点
              for (var index = 0; index < 6; index++) {
                var item = flagNode.children[index];

                if (!item.children[0]) {
                  flagIndex = index;
                  break;
                }
              } //后找失败的点


              if (flagIndex == -1) {
                for (var _index = 6; _index < 12; _index++) {
                  var _item = flagNode.children[_index];

                  if (!_item.children[0]) {
                    flagIndex = _index;
                    break;
                  }
                }
              }
            } else {
              //先找失败的点
              for (var _index2 = 6; _index2 < 12; _index2++) {
                var _item2 = flagNode.children[_index2];

                if (!_item2.children[0]) {
                  flagIndex = _index2;
                  break;
                }
              } //后找胜利的点


              for (var _index3 = 0; _index3 < 6; _index3++) {
                var _item3 = flagNode.children[_index3];

                if (!_item3.children[0]) {
                  flagIndex = _index3;
                  break;
                }
              }
            }
          } else {
            flagIndex = npc.flagPosIndex;
          } //没有空位，查旗帜,刷新一下排序


          if (flagIndex == -1) {
            var _flag = this.flagList.shift();

            flagIndex = Number.parseInt(_flag.parent.name) - 1;

            _flag.destroy();
          }

          var des = npc.isWin ? "胜利于此" : "战败于此";
          var flagInfoPos = v3(flagInfoNode.children[flagIndex].worldPosition);
          var taunhInfoNode = taunhNode.children[flagIndex];
          var flag = npc.isWin ? this.createFlag(0) : this.createFlag(1);
          npc.flagPosIndex = flagIndex;
          flagNode.children[flagIndex].addChild(flag);
          flag.setPosition(v3());
          flag.getComponent(Flag).init(npc, des, flagInfoPos, true, taunhInfoNode);
          this.flagList.push(flag);
        } //开始嘲讽
        ;

        _proto.stratTaunh = /*#__PURE__*/_regeneratorRuntime().mark(function stratTaunh() {
          var showtime, wait, cfg, flagNode, flag, info, words;
          return _regeneratorRuntime().wrap(function stratTaunh$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                if (!(this.node.active && !GuideCfg.disableTaunh)) {
                  _context.next = 10;
                  break;
                }

                showtime = 5;
                wait = randomRangeInt(8, 14) + showtime;
                _context.next = 5;
                return Coroutine.waitForSecond(0.02, this);

              case 5:
                _context.next = 7;
                return Coroutine.waitForSecond(wait, this);

              case 7:
                if (Math.random() <= 0.7) {
                  cfg = CfgData.getInstance().getTauntCfg();
                  flagNode = this.flagList[randomRangeInt(0, this.flagList.length)];

                  if (flagNode) {
                    flag = flagNode.getComponent(Flag);
                    info = null;
                    words = null;

                    if (flag.npc.isWin) {
                      info = cfg.sTaunt[randomRangeInt(0, cfg.sTaunt.length)];
                      words = info.words[randomRangeInt(0, info.words.length)];
                    } else {
                      info = cfg.fTaunt[randomRangeInt(0, cfg.fTaunt.length)];
                      words = info.words[randomRangeInt(0, info.words.length)];
                    }

                    flag.taunt(words, info.emojiId, showtime);
                  }
                }

                _context.next = 0;
                break;

              case 10:
              case "end":
                return _context.stop();
            }
          }, stratTaunh, this);
        }) //用于新手引导的npc嘲讽
        ;

        _proto.taunt = function taunt(index) {
          var cfg = CfgData.getInstance().getTauntCfg();
          var flagNode = this.flagList[0];
          var showtime = 5;

          if (flagNode) {
            var flag = flagNode.getComponent(Flag);
            var info = cfg.nTaunt[index];
            var words = info.words[0];
            flag.taunt(words, info.emojiId, showtime);
          }
        };

        _proto.clearFlags = function clearFlags() {
          //清理原来的头像
          for (var index = 0; index < this.flagList.length; index++) {
            var element = this.flagList[index];
            element.destroy();
          }

          this.flagList = [];
        };

        _proto.destroyFlag = function destroyFlag(npc) {
          var flagNode = this.flagPos.getChildByPath("NpcPoint");
          var flag = flagNode.children[npc.flagPosIndex];

          if (flag) {
            this.flagList = this.flagList.filter(function (a) {
              return a == flag;
            });
            flag.destroy();
          } else {
            console.log("删除flag失败");
          }
        };

        _proto.createFlags = /*#__PURE__*/function () {
          var _createFlags = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(npclist) {
            var index, element;
            return _regeneratorRuntime().wrap(function _callee$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  index = 0;

                case 1:
                  if (!(index < npclist.length)) {
                    _context2.next = 9;
                    break;
                  }

                  element = npclist[index];
                  this.creaNpcFlag(element);
                  _context2.next = 6;
                  return this.delay(0.1);

                case 6:
                  index++;
                  _context2.next = 1;
                  break;

                case 9:
                case "end":
                  return _context2.stop();
              }
            }, _callee, this);
          }));

          function createFlags(_x) {
            return _createFlags.apply(this, arguments);
          }

          return createFlags;
        }();

        _proto.createFlag = function createFlag(flagType) {
          var flag = null; //胜利旗帜

          if (flagType == 0) {
            flag = instantiate(this._winflag);
          } else {
            flag = instantiate(this._loseflag);
          }

          return flag;
        };

        _proto.updateHouse = function updateHouse(playerDate) {
          this.initHouseView(playerDate);
        } //房子样式
        ;

        _proto.initHouseView = function initHouseView(playerDate) {
          var houseIndex = CfgData.getInstance().getHomeCfg().house[playerDate.homeLv].HounseImage;
          this.showCurHomeView = this.showChildeView(this.housesView, houseIndex);
          this.createPlayerAvatar(playerDate);
        } //升级栅栏
        ;

        _proto.initFenceView = function initFenceView(lv) {
          this.showCurFenchView = this.showChildeView(this.fenceView, lv);
        };

        _proto.getFenceView = function getFenceView(lv) {
          return this.showChildeView(this.fenceView, lv);
        };

        _proto.showChildeView = function showChildeView(viewNode, index) {
          viewNode.children.forEach(function (childeNode) {
            childeNode.active = false;
          });

          if (viewNode.children.length - 1 >= index) {
            var showViewNode = viewNode.children[index];
            showViewNode.active = true;
            return showViewNode;
          } else {
            var _showViewNode = viewNode.children[viewNode.children.length - 1];
            _showViewNode.active = true;
            return _showViewNode;
          }
        };

        _proto.startHomeLvUp = function startHomeLvUp() {
          var hometime = (this.playerData.homeTime - TimeTools.getCurTime()) / 1000;

          if (hometime > 0) {
            this.housesView.getComponent(Animation).play("Fangzi_fix");
          }
        };

        _proto.homeLvUp = function homeLvUp() {
          var playerData = this.playerData;
          playerData.homeLv++;
          playerData.homeTime = -1;
          DifficultyManager.onHomeLvUp();
          this.homeLvUpEffect = this.showCurHomeView.getChildByName("FX_LevelUp");
          this.homeLvUpEffect.active = false;
          AudioManager.instance.playSound("levelup");
          this.housesView.getComponent(Animation).play("Fangzi_idle");
          this.homeLvUpEffect.active = true;
          var panel_main = UIManager.getInstance().getPanel(Panel_Main);
          panel_main.pop_upHome.getComponent(Pop_upHome).homeLvUp();
          HomeManager.getInstance().updateHouseLv();
          DataManager.getInstance().savePlayData();
          panel_main.setUpdataState();
        };

        _proto.checkHomeLvUp = function checkHomeLvUp() {
          var n = TimeTools.getCurTime();
          var hometime = (this.playerData.homeTime - n) / 1000;
          var fenchtime = (this.playerData.fenchTime - n) / 1000;

          if (hometime <= 0) {
            if (this.playerData.homeTime > 0) {
              this.homeLvUp();
            }
          } else {
            if (this.playerLv) this.playerLv.string = "【升级中" + TimeTools.formatTime(hometime) + "】";
          }

          if (fenchtime <= 0) {
            if (this.playerData.fenchTime > 0) {
              var playerData = this.playerData;
              playerData.fenchLv++;
              playerData.fenchTime = -1;
              AudioManager.instance.playSound("levelup");
              HomeManager.getInstance().updateFench(playerData);
              var panel_main = UIManager.getInstance().getPanel(Panel_Main);
              panel_main.pop_upHome.getComponent(Pop_upHome).fenceLvUp();
              panel_main.setUpdataState();
              DataManager.getInstance().savePlayData();
            }
          }
        };

        _proto.update = function update(dt) {
          if (this.isInit) {
            if (this.updateTime <= 0) {
              this.updateTime = 1;
              this.checkHomeLvUp();
            } else {
              this.updateTime -= dt;
            }
          }
        };

        _proto.delay = function delay(time) {
          var _this3 = this;

          return new Promise(function (reslove, reject) {
            _this3.scheduleOnce(function () {
              reslove(true);
            }, time);
          });
        };

        _createClass(HomeView, [{
          key: "FlagList",
          get: function get() {
            return this.flagList;
          }
        }]);

        return HomeView;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_curNpcHead", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_winflag", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_loseflag", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "flagPos", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LabelEx.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, CCInteger, Label;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCInteger = module.CCInteger;
      Label = module.Label;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "69128ZW7QpCWqei4YOGlXVM", "LabelEx", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LabelEx = exports('LabelEx', (_dec = ccclass('LabelEx'), _dec2 = property({
        type: CCInteger,
        visible: true,
        displayName: "最多多少个字符"
      }), _dec3 = property({
        type: Boolean,
        visible: true,
        displayName: "是否影响子节点上的label"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Label) {
        _inheritsLoose(LabelEx, _Label);

        function LabelEx() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Label.call.apply(_Label, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "_cnt", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_bl", _descriptor2, _assertThisInitialized(_this));

          _this.child = void 0;
          _this._orgVlaue = void 0;
          return _this;
        }

        var _proto = LabelEx.prototype;

        _proto.onLoad = function onLoad() {
          if (this._bl) {
            this.child = this.node.getComponentInChildren(Label);
          }
        };

        _createClass(LabelEx, [{
          key: "orgVlaue",
          get: function get() {
            return this._orgVlaue;
          },
          set: function set(value) {
            if (value.length >= this._cnt) {
              value = value.substring(0, this._cnt).concat("...");
            }

            this.string = value;

            if (this._bl) {
              if (this.child) {
                this.child.string = value;
              }
            }
          }
        }]);

        return LabelEx;
      }(Label), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_cnt", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_bl", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Launcher.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AssetSys.ts', './DataManager.ts', './Panel_Load.ts', './UIManager.ts', './TimeTools.ts', './AssetsAnimal.ts', './AssetsMapItem.ts', './AudioManager.ts', './EffectManager.ts', './SdkManager.ts', './HomeManager.ts', './GuideManager.ts', './GuideCfg.ts', './Panel_gm.ts', './Utils.ts', './NativeIos.ts', './CfgData.ts', './GameCfg.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, macro, dynamicAtlasManager, view, ResolutionPolicy, Component, instantiate, director, AssetSys, DataManager, Panel_Load, UIManager, TimeTools, AssetsAnimal, AssetsMapItem, AudioManager, EffectManager, SdkManager, HomeManager, GuideManager, GuideCfg, Panel_gm, Utils, NativeIos, CfgData, GameCfg;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      macro = module.macro;
      dynamicAtlasManager = module.dynamicAtlasManager;
      view = module.view;
      ResolutionPolicy = module.ResolutionPolicy;
      Component = module.Component;
      instantiate = module.instantiate;
      director = module.director;
    }, function (module) {
      AssetSys = module.AssetSys;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      Panel_Load = module.Panel_Load;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      TimeTools = module.TimeTools;
    }, function (module) {
      AssetsAnimal = module.AssetsAnimal;
    }, function (module) {
      AssetsMapItem = module.AssetsMapItem;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      EffectManager = module.EffectManager;
    }, function (module) {
      SdkManager = module.SdkManager;
    }, function (module) {
      HomeManager = module.HomeManager;
    }, function (module) {
      GuideManager = module.GuideManager;
    }, function (module) {
      GuideCfg = module.GuideCfg;
    }, function (module) {
      Panel_gm = module.Panel_gm;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      NativeIos = module.NativeIos;
    }, function (module) {
      CfgData = module.CfgData;
    }, function (module) {
      GameCfg = module.GameCfg;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "2b39eir16pKj7tJTaeT3JLx", "Launcher", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property; //开启动态合批

      macro.CLEANUP_IMAGE_CACHE = false;
      dynamicAtlasManager.enabled = true;

      console.log = function (oldLogFunc) {
        return function () {
          if (GameCfg.logDebug) {
            oldLogFunc.apply(this, arguments);
          }
        };
      }(console.log);

      var Launcher = exports('Launcher', (_dec = ccclass('Launcher'), _dec2 = property({
        type: Panel_Load,
        visible: true,
        displayName: "Panel_load"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Launcher, _Component);

        function Launcher() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "load", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = Launcher.prototype;

        _proto.start = function start() {
          //禁用多指
          macro.ENABLE_MULTI_TOUCH = false; //ui适配

          this.setContentStrategy(); //设置ios微信帧率

          if (Utils.isWxPlatform()) {
            wx.getSystemInfo({
              success: function success(res) {
                if (res.platform == "ios") wx.setPreferredFramesPerSecond(45);
              }
            });
          } else if (Utils.isDyPlatform()) {
            tt.getSystemInfo({
              success: function success(res) {
                if (res.platform == "ios") tt.setPreferredFramesPerSecond(30);
              }
            });
          } else if (Utils.isIosNativePlaform()) {
            NativeIos.GetATTracking();
          }

          this.init();
        };

        _proto.setContentStrategy = function setContentStrategy() {
          if (view.getFrameSize().width / view.getFrameSize().height >= 0.5625) {
            // console.log(`适配高`);
            view.setDesignResolutionSize(view.getDesignResolutionSize().width, view.getDesignResolutionSize().height, ResolutionPolicy.FIXED_HEIGHT);
          } else {
            // console.log(`适配宽`);
            view.setDesignResolutionSize(view.getDesignResolutionSize().width, view.getDesignResolutionSize().height, ResolutionPolicy.FIXED_WIDTH);
          }
        };

        _proto.init = /*#__PURE__*/function () {
          var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var _this2 = this;

            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  // instantiate(this.uiroot).setParent(director.getScene());
                  this.load.showStartProgress();
                  console.log("初始化时间...............");
                  _context.next = 4;
                  return TimeTools.init();

                case 4:
                  console.log("初始化资源...............");
                  this.load.setProgress(0.1);
                  AssetSys.getInstance().init(function (re) {
                    CfgData.init(function () {
                      _this2.load.setProgress(0.4);

                      console.log("初始化音频资源...............");
                      AudioManager.instance.init();
                      EffectManager.instance.init();

                      _this2.load.setProgress(0.5);

                      console.log("初始化动物资源...............");
                      AssetsAnimal.init(function () {
                        console.log("初始化地图资源...............");

                        _this2.load.setProgress(0.6);

                        AssetsMapItem.init(function () {
                          console.log("初始化玩家数据...............");

                          _this2.load.setProgress(0.7);

                          DataManager.getInstance().init();
                          SdkManager.getInstance().init(function () {}); // DataManager.getInstance().guideData.storeyIndex = 2;    

                          _this2.load.setProgress(0.8);

                          SdkManager.getInstance().SendEvent("gamestart", null);
                          var animal = AssetSys.getInstance().bundlenName[0];
                          AssetSys.getInstance().loadAssets(animal, "UIRoot", function (data) {
                            var animalData = data;
                            var assetAnimal = instantiate(animalData);
                            director.getScene().addChild(assetAnimal);

                            _this2.load.setProgress(0.9);

                            if (GameCfg.showGMView) UIManager.getInstance().showPanel(Panel_gm);
                            GuideManager.getInstance().init();

                            if (DataManager.getInstance().guidIsOver()) {
                              GuideCfg.disableDifficult = false;
                              GuideCfg.disableExceed = false;
                              GuideCfg.disableNpc = false;
                              GuideCfg.disableReport = false;
                              GuideCfg.disableTaunh = false;
                              console.log("开始加载home场景...............");

                              _this2.load.showNotice();

                              _this2.load.setProgress(0.95);

                              AssetSys.getInstance().loadHomeScene(function (pro) {}, function () {
                                director.getScene().getComponentInChildren(HomeManager).init();
                              });
                            } else {
                              GuideManager.getInstance().choiceStorey();
                            }
                          });
                        });
                      });
                    });
                  });

                case 7:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function init() {
            return _init.apply(this, arguments);
          }

          return init;
        }();

        return Launcher;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "load", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LookDecision.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "1a41529oU1FELF6cX5eQBOQ", "LookDecision", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LookDecision = exports('LookDecision', (_dec = ccclass('LookDecision'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LookDecision, _Component);

        function LookDecision() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = LookDecision.prototype;

        _proto.start = function start() {};

        _proto.update = function update(deltaTime) {};

        return LookDecision;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/lvProgress.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CfgData.ts', './DataManager.ts', './HomeManager.ts', './Utils.ts', './AnimationExtend.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, instantiate, v3, Sprite, Color, Label, tween, Component, CfgData, DataManager, HomeManager, Utils, AnimationExtend;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      instantiate = module.instantiate;
      v3 = module.v3;
      Sprite = module.Sprite;
      Color = module.Color;
      Label = module.Label;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      CfgData = module.CfgData;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      HomeManager = module.HomeManager;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      AnimationExtend = module.AnimationExtend;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13;

      cclegacy._RF.push({}, "89686i2yP9F6boir5mc6Kbh", "lvProgress", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var lvProgress = exports('lvProgress', (_dec = ccclass('lvProgress'), _dec2 = property({
        type: Node,
        displayName: "小绿豆"
      }), _dec3 = property({
        type: Node,
        displayName: "大绿豆"
      }), _dec4 = property({
        type: Node,
        displayName: "羊"
      }), _dec5 = property({
        type: Node,
        displayName: "斑马"
      }), _dec6 = property({
        type: Node,
        displayName: "大象"
      }), _dec7 = property({
        type: Node,
        displayName: "地图"
      }), _dec8 = property({
        type: Node,
        displayName: "宝箱0"
      }), _dec9 = property({
        type: Node,
        displayName: "宝箱1"
      }), _dec10 = property({
        type: Node,
        displayName: "宝箱2"
      }), _dec11 = property({
        type: Node,
        displayName: "宝箱3"
      }), _dec12 = property({
        type: Node,
        displayName: "宝箱4"
      }), _dec13 = property({
        type: Node,
        displayName: "解锁好友"
      }), _dec14 = property({
        type: Node,
        displayName: "parent_lv"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(lvProgress, _Component);

        function lvProgress() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "liteNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sheepNode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "zbNode", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "elNode", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "map_0_Node", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "box_0_Node", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "box_1_Node", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "box_2_Node", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "box_3_Node", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "box_4_Node", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "firend_Node", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "parent_lv", _descriptor13, _assertThisInitialized(_this));

          _this.poslist = new Array();
          _this.homeCfg = void 0;
          _this.litedis = 25;
          _this.bigdis = 100;
          _this.isInit = false;
          return _this;
        }

        var _proto = lvProgress.prototype;

        _proto.init = function init() {
          var _this2 = this;

          if (HomeManager.getInstance()) {
            this.homeCfg = CfgData.getInstance().getHomeCfg();

            if (!this.isInit) {
              try {
                for (var index = 0; index < this.homeCfg.house.length; index++) {
                  var element = this.homeCfg.house[index];

                  if (index == 0) {
                    var viewNode = instantiate(this.liteNode);
                    var pos = v3(0, 0, 0);
                    viewNode.setPosition(pos);
                    viewNode.active = true;
                    this.parent_lv.addChild(viewNode);
                  } else {
                    var _viewNode = null;
                    var _pos = null;
                    var lastNode = this.parent_lv.children[index - 1];
                    if (lastNode.name == "bigNode") _pos = v3(lastNode.position).add3f(this.bigdis, 0, 0);else _pos = v3(lastNode.position).add3f(this.litedis, 0, 0);

                    if (element.Unlock == "0_0") {
                      _viewNode = instantiate(this.liteNode);

                      _pos.add3f(this.litedis, 0, 0);
                    } else {
                      _viewNode = instantiate(this.bigNode);
                      var lockView = this.getNodeView(element.Unlock);

                      _viewNode.addChild(lockView);

                      lockView.active = true;

                      _pos.add3f(this.bigdis, 0, 0);

                      lockView.setPosition(v3(0, 120, 0));
                    }

                    _viewNode.setPosition(_pos);

                    _viewNode.active = true;
                    this.parent_lv.addChild(_viewNode);
                  }
                }

                this.parent_lv.children.forEach(function (element) {
                  _this2.poslist.push(v3(element.position));
                });
              } catch (error) {
                console.log("配置：" + error);
              }

              this.isInit = true;
            }

            this.setLv(DataManager.getInstance().playerData.homeLv + 1, true);
          }
        };

        _proto.setLv = function setLv(lv, move) {
          var curLv = DataManager.getInstance().playerData.homeLv;
          lv = Utils.limitNumber(lv, 0, this.poslist.length - 1);
          if (move) this.parent_lv.setPosition(v3(this.poslist[lv]).negative());

          for (var index = 0; index < this.parent_lv.children.length; index++) {
            var element = this.parent_lv.children[index]; //如果满级

            if (curLv == this.poslist.length - 1) {
              element.getComponent(AnimationExtend).stopdefultAnima();
              element.children[1].getComponent(Sprite).color = Color.WHITE;
              this.setNodeActive(element, true);
              if (element.children[2]) this.setNodeActive(element.children[2], true);
            } else {
              this.setNodeActive(element, index <= lv);
              if (element.children[2]) this.setNodeActive(element.children[2], index < lv);

              if (index == lv) {
                element.getComponent(AnimationExtend).playDefultAnima();
              }
            }
          }
        };

        _proto.getNodeView = function getNodeView(str) {
          var strs = str.split('_');
          var viewNode = null;
          var unlockType = Number.parseInt(strs[0]);
          var box = Number.parseInt(strs[1]);

          switch (unlockType) {
            //动物
            case 1:
              switch (box) {
                case 0:
                  viewNode = this.sheepNode;
                  break;

                case 3:
                  viewNode = this.zbNode;
                  break;

                case 4:
                  viewNode = this.elNode;
                  break;
              }

              break;
            //宝箱

            case 2:
              switch (box) {
                case 0:
                  viewNode = this.box_0_Node;
                  break;

                case 1:
                  viewNode = this.box_1_Node;
                  break;

                case 2:
                  viewNode = this.box_2_Node;
                  break;

                case 3:
                  viewNode = this.box_3_Node;
                  break;

                case 4:
                  viewNode = this.box_4_Node;
                  break;
              }

              break;
            //地图

            case 3:
              viewNode = this.map_0_Node;
              this.map_0_Node.getComponentInChildren(Label).string = this.homeCfg.map[box].LatticeCount;
              break;
            //地图

            case 4:
              viewNode = this.firend_Node;
              break;

            default:
              console.error("解锁配置错误：" + str);
              break;
          }

          return viewNode;
        };

        _proto.setNodeActive = function setNodeActive(lvNode, bl) {
          if (bl) {
            lvNode.children[0].active = true;
            lvNode.children[1].active = true;
            lvNode.children[1].getComponent(Sprite).color = Color.WHITE;
          } else {
            lvNode.children[1].active = false;
            lvNode.children[0].active = true;
          }
        };

        _proto.onLevelUp = function onLevelUp(lv) {
          lv += 1;
          lv = Utils.limitNumber(lv, 0, this.poslist.length - 1);
          this.parent_lv.children[lv - 1].getComponent(AnimationExtend).stopdefultAnima();
          this.parent_lv.children[lv - 1].children[1].getComponent(Sprite).color = Color.WHITE;
          this.setLv(lv, false);
          var pos = v3(this.poslist[lv]).negative();
          tween(this.parent_lv).to(1.0, {
            position: pos
          }).start();
        };

        return lvProgress;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "liteNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bigNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "sheepNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "zbNode", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "elNode", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "map_0_Node", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "box_0_Node", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "box_1_Node", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "box_2_Node", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "box_3_Node", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "box_4_Node", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "firend_Node", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "parent_lv", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/main", ['./debug-view-runtime-control.ts', './AntiAddictionKit.ts', './AntiKit.ts', './Panel_Antikit.ts', './Panel_AntikitChild.ts', './Panel_Private.ts', './GameCfg.ts', './HomeAnimalCfg.ts', './AnimalCfg.ts', './HomeCfg.ts', './MapCfg.ts', './AStar.ts', './MapData.ts', './AnimalFarm.ts', './AssetSys.ts', './AssetsAnimal.ts', './AssetsMapItem.ts', './AudioAnimation.ts', './AudioManager.ts', './AudioSys.ts', './BasePanel.ts', './CameraManager.ts', './CauntCfg.ts', './CoinTools.ts', './Coroutine.ts', './CfgData.ts', './DataManager.ts', './GuideData.ts', './TimeData.ts', './DifficultyManager.ts', './EffectManager.ts', './Enclosure.ts', './EnclosureChild.ts', './Entity.ts', './EventData.ts', './Fence.ts', './FirstScene.ts', './Flag.ts', './FxTools.ts', './Cow.ts', './Elephant.ts', './GameResponces.ts', './Pig.ts', './Sheep.ts', './Sleeper.ts', './Zebra.ts', './GameHelpManager.ts', './GameManager.ts', './Grass.ts', './GuideActions.ts', './GuideCfg.ts', './GuideManager.ts', './GuidePrevent.ts', './Panel_guide.ts', './Polymorphism.ts', './TypeTxt.ts', './HomeAnimal.ts', './HomeHelpManager.ts', './HomeManager.ts', './Launcher.ts', './AchimedeanSpiral.ts', './DrawSectorMesh.ts', './LookDecision.ts', './MapInfo.ts', './AuthorizeManager.ts', './BaseAuthorize.ts', './DYIAuthorize.ts', './DYRank.ts', './NetTools.ts', './SdkManager.ts', './UserInfo.ts', './WXIAuthorize.ts', './WXRank.ts', './WxAudioManager.ts', './ATBannerTSSDK.ts', './ATIntersitialAutoTSSDK.ts', './ATIntersitialTSSDK.ts', './ATJSSDK.ts', './ATNativeTSSDK.ts', './ATRewardedAutoVideoTSSDK.ts', './ATRewardedVideoTSSDK.ts', './ATAndroidBannerTS.ts', './ATAndroidIntersitialAutoTS.ts', './ATAndroidIntersitialTS.ts', './ATAndroidJS.ts', './ATAndroidNativeTS.ts', './ATAndroidRewardedVideoAutoTS.ts', './ATAndroidRewardedVideoTS.ts', './ATiOSBannerTS.ts', './ATiOSIntersitiaAutolTS.ts', './ATiOSIntersitialTS.ts', './ATiOSJS.ts', './ATiOSNativeTS.ts', './ATiOSRewardedAutoVideoTS.ts', './ATiOSRewardedVideoTS.ts', './NativeSdkManager.ts', './NativeAndroid.ts', './NativeIos.ts', './Npc.ts', './NpcManager.ts', './Player.ts', './PlayerData.ts', './PlayerFench.ts', './PolyfillAudioManager.ts', './Prop.ts', './RunAwayAre.ts', './SpriteResources.ts', './Stone.ts', './TimeTools.ts', './TouchListenser.ts', './TreasureBox.ts', './Dailog_tip.ts', './AnimationExtend.ts', './ButtonExtend.ts', './LabelEx.ts', './GameStateView.ts', './HomeView.ts', './NpcInfoView.ts', './NpcView.ts', './PanelAnimation.ts', './Panel_BoxReward.ts', './Panel_Game.ts', './Panel_GameFinish.ts', './Panel_Load.ts', './Panel_Main.ts', './Panel_gm.ts', './Panel_netCheck.ts', './Pop_CorpseSale.ts', './Pop_Notfication.ts', './Pop_NpcInfo.ts', './Pop_authorize.ts', './Pop_exceed.ts', './Pop_game.ts', './Pop_gold.ts', './Pop_help.ts', './Pop_helpNpc.ts', './Pop_npc.ts', './Pop_qickFix.ts', './Pop_report.ts', './Pop_sale.ts', './Pop_set.ts', './Pop_taunh.ts', './Pop_tip.ts', './Pop_upHome.ts', './SwtichAnimal.ts', './TipInfo.ts', './lvProgress.ts', './UIManager.ts', './Utils.ts', './WInAnimalAnimation.ts'], function () {
  'use strict';

  return {
    setters: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
    execute: function () {}
  };
});

System.register("chunks:///_virtual/MapCfg.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "816ba3YAxFG/ZgfC8tE2PXJ", "MapCfg", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AnimaInfo = exports('AnimaInfo', function AnimaInfo() {
        this.animaId = void 0;
        this.animaName = void 0;
        this.animaNum = void 0;
      });
      var MapCfg = exports('MapCfg', (_dec = ccclass('MapCfg'), _dec(_class = function MapCfg() {
        this._size = void 0;
        this._animas = [];
      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MapData.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, size, v2;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      size = module.size;
      v2 = module.v2;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4c9b6Qwn1JAjI7wYzrYBGQ2", "MapData", undefined);

      var tableData = exports('tableData', [[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]);
      var tiledSize = exports('tiledSize', size(30, 30));
      var leftButtomStatPos = exports('leftButtomStatPos', v2(100, 100));
      var AStarMap = exports('AStarMap', /*#__PURE__*/function () {
        function AStarMap() {}

        var _proto = AStarMap.prototype;

        _proto.createAStarMap = function createAStarMap(size) {
          tableData = exports('tableData', new Array());

          for (var y = 0; y < size.y; y++) {
            var list = new Array();
            tableData.push(list);

            for (var x = 0; x < size.x; x++) {
              list.push(0);
            }
          }

          return tableData;
        };

        _proto.setObstacle = function setObstacle(pos) {
          tableData[pos.x][pos.y] = 1;
        };

        return AStarMap;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MapInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AStar.ts', './MapData.ts', './CfgData.ts', './DataManager.ts', './Enclosure.ts', './Entity.ts', './Fence.ts', './GameManager.ts', './NpcManager.ts', './TreasureBox.ts', './CameraManager.ts', './Flag.ts', './Utils.ts', './EnclosureChild.ts', './Sleeper.ts', './AssetsMapItem.ts', './AssetsAnimal.ts', './HomeAnimal.ts', './LabelEx.ts', './DifficultyManager.ts', './UIManager.ts', './Panel_Game.ts', './GuideCfg.ts', './Coroutine.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _regeneratorRuntime, _createClass, _asyncToGenerator, cclegacy, _decorator, Enum, Node, Prefab, CCBoolean, Vec2, instantiate, v3, v2, Vec3, director, Label, Sprite, randomRangeInt, Component, AStar, AStarMap, CfgData, DataManager, Enclosure, Entity, Fence, GameManager, NpcManager, TreasureBox, CameraManager, Flag, Utils, Card, EnclosureChild, Sleeper, AssetsMapItem, AssetsAnimal, HomeAnimal, LabelEx, DifficultyManager, UIManager, Panel_Game, GuideCfg, Coroutine;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _regeneratorRuntime = module.regeneratorRuntime;
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
      Node = module.Node;
      Prefab = module.Prefab;
      CCBoolean = module.CCBoolean;
      Vec2 = module.Vec2;
      instantiate = module.instantiate;
      v3 = module.v3;
      v2 = module.v2;
      Vec3 = module.Vec3;
      director = module.director;
      Label = module.Label;
      Sprite = module.Sprite;
      randomRangeInt = module.randomRangeInt;
      Component = module.Component;
    }, function (module) {
      AStar = module.AStar;
    }, function (module) {
      AStarMap = module.AStarMap;
    }, function (module) {
      CfgData = module.CfgData;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      Enclosure = module.Enclosure;
    }, function (module) {
      Entity = module.Entity;
    }, function (module) {
      Fence = module.Fence;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      NpcManager = module.NpcManager;
    }, function (module) {
      TreasureBox = module.TreasureBox;
    }, function (module) {
      CameraManager = module.CameraManager;
    }, function (module) {
      Flag = module.Flag;
    }, function (module) {
      Utils = module.Utils;
      Card = module.Card;
    }, function (module) {
      EnclosureChild = module.EnclosureChild;
    }, function (module) {
      Sleeper = module.Sleeper;
    }, function (module) {
      AssetsMapItem = module.AssetsMapItem;
    }, function (module) {
      AssetsAnimal = module.AssetsAnimal;
    }, function (module) {
      HomeAnimal = module.HomeAnimal;
    }, function (module) {
      LabelEx = module.LabelEx;
    }, function (module) {
      DifficultyManager = module.DifficultyManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      Panel_Game = module.Panel_Game;
    }, function (module) {
      GuideCfg = module.GuideCfg;
    }, function (module) {
      Coroutine = module.Coroutine;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13;

      cclegacy._RF.push({}, "b9a92F5P3pPhL5LeWcE+EVO", "MapInfo", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var mBoxType;

      (function (mBoxType) {
        mBoxType[mBoxType["grass"] = 0] = "grass";
        mBoxType[mBoxType["stone"] = 1] = "stone";
        mBoxType[mBoxType["fence_v"] = 2] = "fence_v";
        mBoxType[mBoxType["fence_h"] = 3] = "fence_h";
        mBoxType[mBoxType["treasure_box"] = 4] = "treasure_box";
      })(mBoxType || (mBoxType = {}));

      Enum(mBoxType);
      var MapItem = exports('MapItem', function MapItem() {
        this._index = void 0;
        this._boxType = mBoxType.grass;
        this.treasureBoxLv = -1;
      });
      var MapInfo = exports('MapInfo', (_dec = ccclass('MapInfo'), _dec2 = property({
        type: Node,
        visible: true,
        displayName: "动物viewParent"
      }), _dec3 = property({
        type: Node,
        visible: true,
        displayName: "动物view刷新点"
      }), _dec4 = property({
        type: Node,
        visible: true,
        displayName: "地图块"
      }), _dec5 = property({
        type: Prefab,
        visible: true,
        displayName: "当前npc的头像"
      }), _dec6 = property({
        type: Node,
        visible: true,
        displayName: "AnimalCamera"
      }), _dec7 = property({
        type: Node,
        visible: true,
        displayName: "boss"
      }), _dec8 = property({
        type: CCBoolean,
        visible: true,
        displayName: "是否开启地图测试模式"
      }), _dec9 = property({
        type: Vec2,
        visible: true,
        displayName: "地图大小"
      }), _dec10 = property({
        type: Vec2,
        visible: true,
        displayName: "地图块间隔"
      }), _dec11 = property({
        type: Node,
        visible: true,
        displayName: "mapItem"
      }), _dec12 = property({
        type: Node,
        visible: true,
        displayName: "头像位置"
      }), _dec13 = property({
        type: Node,
        visible: true,
        displayName: "npc插旗的位置"
      }), _dec14 = property({
        type: Node,
        visible: true,
        displayName: "帮助图标的位置"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MapInfo, _Component);

        function MapInfo() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._tempGrass = void 0;
          _this._tempStone = void 0;
          _this._tempFence_v = void 0;
          _this._tempFence_h = void 0;
          _this._tempBox = void 0;
          _this._winflag = void 0;
          _this._loseflag = void 0;
          _this.animals = new Array();

          _initializerDefineProperty(_this, "animalViewParent", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animalViewPos", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_cube", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_curNpcHead", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_animalCamera", _descriptor5, _assertThisInitialized(_this));

          _this._sleeper = void 0;

          _initializerDefineProperty(_this, "_enclosure", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_isTest", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_size", _descriptor8, _assertThisInitialized(_this));

          _this._boxs = new Array();

          _initializerDefineProperty(_this, "_mapOffect", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "mapItem", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "headPos", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "npcPos", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "helpPos", _descriptor13, _assertThisInitialized(_this));

          _this._bornPoints = void 0;
          _this._cubs = new Array();
          _this.houseView = void 0;
          _this.fenchView = void 0;
          _this._boxEntitys = new Array();
          _this.sleeper = void 0;
          _this.aStar = void 0;
          _this._mapParent = void 0;
          _this.aStarParent = void 0;
          _this.aStarOffcet = void 0;
          _this.npc = void 0;
          _this.npchead = void 0;
          _this.npcHeadSp = void 0;
          _this.npcheadRes = void 0;
          _this.homeCfg = void 0;
          _this.showingFenchView = void 0;
          _this.flagList = new Array();
          _this.enclos = void 0;
          _this.corotaunh = void 0;
          _this._listHomeAnimals = [];
          _this.animalViewCnt = 10;
          _this.gridType = [[0], [0, 1], [0, 2], [0, 1, 2, 3]];
          return _this;
        }

        var _proto = MapInfo.prototype;

        _proto.init = function init() {
          this._tempGrass = AssetsAnimal.instance._tempGrass;
          this._tempStone = AssetsAnimal.instance._tempStone;
          this._tempFence_v = AssetsAnimal.instance._tempFence_v;
          this._tempFence_h = AssetsAnimal.instance._tempFence_h;
          this._tempBox = AssetsAnimal.instance._tempBox;
          this._winflag = AssetsAnimal.instance._winflag;
          this._loseflag = AssetsAnimal.instance._loseflag;
          this.animals = AssetsAnimal.instance.homeAnimals;
        };

        _proto.onDestroy = function onDestroy() {
          var _this$corotaunh;

          (_this$corotaunh = this.corotaunh) == null ? void 0 : _this$corotaunh.stop();
          this.corotaunh = null;
        };

        _proto.initMap = /*#__PURE__*/function () {
          var _initMap = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var size, astarMap, tab, x, y, element, cub;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  this.aStar = new AStar();
                  size = v2(25, 25);
                  this.aStarParent = new Node("aStarParent");
                  director.getScene().addChild(this.aStarParent);
                  this.aStarParent.setWorldPosition(new Vec3(-size.x * 0.5 + 0.5 - this._mapOffect.x * 2, 0, -size.y * 0.5 + 0.5 - this._mapOffect.y * 2));
                  this.aStarOffcet = v2(this.aStarParent.worldPosition.x, this.aStarParent.worldPosition.z);
                  astarMap = new AStarMap();
                  tab = astarMap.createAStarMap(size);

                  for (x = 0; x < tab.length; x++) {
                    for (y = 0; y < tab.length; y++) {
                      element = tab[x][y];
                      cub = instantiate(this._cube);
                      cub.getComponentInChildren(Label).string = element.toString();
                      this.aStarParent.addChild(cub);
                      cub.setPosition(x, 0, y);
                    }
                  }

                case 9:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function initMap() {
            return _initMap.apply(this, arguments);
          }

          return initMap;
        }();

        _proto.aStarMove = /*#__PURE__*/function () {
          var _aStarMove = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(startPos, endPos) {
            var list, mapPosList;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  startPos.subtract(this.aStarOffcet);
                  startPos = v2(Math.floor(startPos.x), Math.floor(startPos.y));
                  endPos.subtract(this.aStarOffcet);
                  endPos = v2(Math.floor(endPos.x), Math.floor(endPos.y));
                  _context2.next = 6;
                  return this.aStar.findePaths(startPos, endPos);

                case 6:
                  list = _context2.sent;
                  mapPosList = null;

                  if (list[0]) {
                    mapPosList = list[1];
                  }

                  return _context2.abrupt("return", mapPosList);

                case 10:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));

          function aStarMove(_x, _x2) {
            return _aStarMove.apply(this, arguments);
          }

          return aStarMove;
        }();

        _proto.buildMap = function buildMap(npc) {
          var _this2 = this;

          this.init();
          this.fenchView = instantiate(AssetsMapItem.instance.fenceViewPrefab);

          this._enclosure.parent.addChild(this.fenchView);

          this.houseView = instantiate(AssetsMapItem.instance.houseViewPrefab);
          this.mapItem.addChild(this.houseView);
          this.houseView.setPosition(v3(0, 0, -9.738));
          this._sleeper = AssetsMapItem.instance._sleeper;
          var sl = instantiate(this._sleeper);
          this.mapItem.addChild(sl);
          sl.setPosition(v3(0, 0, -4.8));
          this.sleeper = sl.getComponent(Sleeper); //配置view的位置和样式

          this.npc = npc;
          this.createMapItemView(this.npc);
          this.homeCfg = CfgData.getInstance().getHomeCfg();
          var strs = this.homeCfg.map[this.npc.mapId].LatticeCount.split('_');

          var mapCfg = GameManager.getInstance()._camera.getComponent(CameraManager).init(this.npc.mapId, false); //设置地图位置


          this.mapItem.setPosition(v3(0, 0, mapCfg.MapItemZPosition));
          UIManager.getInstance().getPanel(Panel_Game).sethelpTimePos(this.helpPos.children[this.npc.mapId].worldPosition); //插旗

          if (npc.flagCnt > 0) this.randomNpcflags(this.npcPos, NpcManager.getInstance().createGameNpcs()); //刷新npc头像

          this.createNpcHead(this.npc, this.headPos); //创建动物

          this.createInHomeAnimals(this.npc);
          if (!this._isTest) this._size = v2(Number.parseInt(strs[0]), Number.parseInt(strs[1]));
          this.gridType[1] = [0, this._size.y];
          this.gridType[2] = [0, 1];
          this.gridType[3] = [0, this._size.y, 1, this._size.y + 1]; //创建地图块

          this._bornPoints = new Array();
          this._mapParent = new Node("mapParent");
          var bronParent = new Node("bronParent");

          this._mapParent.setWorldPosition(new Vec3(-this._size.x * 0.5 + 0.5 - this._mapOffect.x * 2, 0, -this._size.y * 0.5 + 0.5 - this._mapOffect.y * 2));

          bronParent.setWorldPosition(new Vec3(-this._size.x * 0.5 + 0.5 - this._mapOffect.x * 2, 0, -this._size.y * 0.5 + 0.5 - this._mapOffect.y * 2));
          director.getScene().addChild(this._mapParent);
          director.getScene().addChild(bronParent);
          var index = 0;

          for (var x = 0; x < this._size.x; x++) {
            var bo = new Vec3(x + this._mapOffect.x * x, 0, 12);
            var cub = instantiate(this._cube);
            cub.getComponentInChildren(Label).string = x.toString();
            bronParent.addChild(cub);
            cub.setPosition(bo);

            this._bornPoints.push(cub);

            for (var y = 0; y < this._size.y; y++) {
              var tempcub = instantiate(this._cube);
              tempcub.getComponentInChildren(Label).string = index.toString();

              this._mapParent.addChild(tempcub);

              tempcub.setPosition(new Vec3(x + this._mapOffect.x * x, 0, y + this._mapOffect.y * y));

              this._cubs.push(tempcub);

              index++;
            }
          }

          var boxParent = new Node("boxParent");
          this._boxEntitys = new Array(this._cubs.length);
          boxParent.setWorldPosition(new Vec3(-this._size.x * 0.5 + 0.5 - this._mapOffect.x * 2, 0, -this._size.y * 0.5 + 0.5 - this._mapOffect.y * 2));
          director.getScene().addChild(boxParent); //npc 生成过地图就不重新生成了

          if (this.npc.mapInfoCash.length <= 0) {
            this.randomBuildBox(boxParent);
            this.npc.mapInfoCash = new Array();

            this._boxs.forEach(function (element) {
              var info = new MapItem();
              info._boxType = element._boxType;
              info._index = element._index;
              info.treasureBoxLv = element.treasureBoxLv;

              _this2.npc.mapInfoCash.push(info);
            });

            DataManager.getInstance().savePlayData();
          } else {
            this.buildBox(boxParent);
          }

          this.enclos = this._enclosure.getComponent(Enclosure);
          this.enclos.init(this.npc);
          this.corotaunh = new Coroutine(function () {
            return _this2.stratTaunh();
          });
          this.corotaunh.start();
          return this._cubs;
        };

        _proto.createMapItemView = function createMapItemView(npc) {
          this.showingFenchView = this.showChildeView(this.fenchView, npc.fenceLv);

          for (var index = 1; index < 6; index++) {
            var fenchParent = this.showingFenchView.children[index];

            for (var x = 0; x < 3; x++) {
              var fenchchild = fenchParent.children[0];

              this._enclosure.children[x].getChildByName("animation").addChild(fenchchild);

              fenchchild.setPosition(v3());
            }
          }

          for (var _x3 = 0; _x3 < 3; _x3++) {
            for (var brokIndex = 0; brokIndex < 5; brokIndex++) {
              this._enclosure.children[_x3].getComponent(EnclosureChild).brokens[brokIndex].model = this._enclosure.children[_x3].getChildByName("animation").children[brokIndex];
            }
          }

          this.showChildeView(this.houseView, npc.houseImg);
        };

        _proto.showChildeView = function showChildeView(viewNode, index) {
          viewNode.children.forEach(function (childeNode) {
            childeNode.active = false;
          });

          if (viewNode.children.length - 1 >= index) {
            var view = viewNode.children[index];
            view.active = true;
            return view;
          } else {
            var _view = viewNode.children[viewNode.children.length - 1];
            _view.active = true;
            return _view;
          }
        };

        _proto.createNpcHead = function createNpcHead(npc, npcNode) {
          var _this3 = this;

          this.npchead = instantiate(this._curNpcHead);
          npcNode.addChild(this.npchead);
          this.npchead.setPosition(v3());
          this.npcHeadSp = this.npchead.getChildByPath("Mask/head").getComponent(Sprite);
          var lv = this.npchead.getChildByPath("lv").getComponent(Label);
          var headName = this.npchead.getChildByPath("lay_name/name").getComponent(LabelEx);
          lv.string = CfgData.getInstance().getHomeCfg().npc[npc.lv].Level + "级";
          headName.orgVlaue = npc.npcName;
          Utils.urlToSpriteFrame(npc.headUrl, function (res) {
            if (_this3.npcHeadSp) _this3.npcHeadSp.spriteFrame = res;
            _this3.npcheadRes = res;
          });
        };

        _proto.stopTaunh = function stopTaunh() {
          var _this$corotaunh2;

          (_this$corotaunh2 = this.corotaunh) == null ? void 0 : _this$corotaunh2.stop();
          this.corotaunh = null;
        } //开始嘲讽
        ;

        _proto.stratTaunh = /*#__PURE__*/_regeneratorRuntime().mark(function stratTaunh() {
          var showTime, wait, cfg, index, wordIndex;
          return _regeneratorRuntime().wrap(function stratTaunh$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                if (!(this.node.active && !GuideCfg.disableTaunh)) {
                  _context3.next = 10;
                  break;
                }

                showTime = 5;
                wait = randomRangeInt(12, 27) + showTime;
                _context3.next = 5;
                return Coroutine.waitForSecond(0.02, this);

              case 5:
                _context3.next = 7;
                return Coroutine.waitForSecond(wait, this);

              case 7:
                if (Math.random() <= 0.7) {
                  cfg = CfgData.getInstance().getTauntCfg();
                  index = randomRangeInt(0, cfg.gTaunt.length);
                  wordIndex = randomRangeInt(0, cfg.gTaunt[index].words.length);
                  this.taunh(index, wordIndex);
                }

                _context3.next = 0;
                break;

              case 10:
              case "end":
                return _context3.stop();
            }
          }, stratTaunh, this);
        });

        _proto.taunh = function taunh(index, wordIndex) {
          var _this4 = this;

          if (wordIndex === void 0) {
            wordIndex = 0;
          }

          var showTime = 5;
          var cfg = CfgData.getInstance().getTauntCfg();
          var info = cfg.gTaunt[index];
          var words = info.words[wordIndex];
          this.npcHeadSp.spriteFrame = info.emojiId;
          var panel_game = UIManager.getInstance().getPanel(Panel_Game);
          var wordPos = this.npchead.getChildByName("Pop").getWorldPosition();
          panel_game.showPopNpcTaunh(2, words, wordPos, showTime);
          this.scheduleOnce(function () {
            _this4.npcHeadSp.spriteFrame = _this4.npcheadRes;
            panel_game.hideNpcTaunh();
          }, 5);
        };

        _proto.guideTaunh = function guideTaunh(index, wordIndex) {
          var _this5 = this;

          if (wordIndex === void 0) {
            wordIndex = 0;
          }

          var showTime = 5;
          var cfg = CfgData.getInstance().getTauntCfg();
          var info = cfg.nTaunt[index];
          var words = info.words[wordIndex];
          this.npcHeadSp.spriteFrame = info.emojiId;
          var panel_game = UIManager.getInstance().getPanel(Panel_Game);
          var wordPos = this.npchead.getChildByName("Pop").getWorldPosition();
          panel_game.showPopNpcTaunh(2, words, wordPos, showTime);
          this.scheduleOnce(function () {
            _this5.npcHeadSp.spriteFrame = _this5.npcheadRes;
            panel_game.hideNpcTaunh();
          }, 5);
        };

        _proto.randomNpcflags = /*#__PURE__*/function () {
          var _randomNpcflags = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(flagNode, npclist) {
            var winNum, loseNum, winList, lostList, limitCnt, posIndex, npcIndex, index, Index, flag, npc, _index, _Index, _flag, _npc;

            return _regeneratorRuntime().wrap(function _callee3$(_context4) {
              while (1) switch (_context4.prev = _context4.next) {
                case 0:
                  winNum = 0;
                  loseNum = 0;
                  winList = [0, 1, 2, 3, 4, 5];
                  lostList = [6, 7, 8, 9, 10, 11];
                  limitCnt = randomRangeInt(1, 12);
                  winNum = randomRangeInt(1, limitCnt);
                  loseNum = limitCnt - winNum;
                  posIndex = new Array();
                  npcIndex = 0; //胜利

                  posIndex = this.getPosIndex(winList, lostList, winNum);
                  index = 0;

                case 11:
                  if (!(index < posIndex.length)) {
                    _context4.next = 26;
                    break;
                  }

                  Index = posIndex[index];
                  flag = this.createFlagView(0);
                  npc = npclist[npcIndex];
                  npc.isWin = true;
                  flagNode.children[Index].addChild(flag);
                  flag.setPosition(v3());
                  flag.getComponent(Flag).init(npc, "胜利于此", v3(), false, null);
                  this.flagList.push(flag.getComponent(Flag));
                  npcIndex++;
                  _context4.next = 23;
                  return Utils.delay(200, this);

                case 23:
                  index++;
                  _context4.next = 11;
                  break;

                case 26:
                  //失败
                  posIndex = this.getPosIndex(lostList, winList, loseNum);
                  _index = 0;

                case 28:
                  if (!(_index < posIndex.length)) {
                    _context4.next = 42;
                    break;
                  }

                  _Index = posIndex[_index];
                  _flag = this.createFlagView(1);
                  _npc = npclist[npcIndex];

                  flagNode.children[_Index].addChild(_flag);

                  this.flagList.push(_flag.getComponent(Flag));

                  _flag.setPosition(v3());

                  _flag.getComponent(Flag).init(_npc, "战败于此", v3(), false, null);

                  npcIndex++;
                  _context4.next = 39;
                  return Utils.delay(200, this);

                case 39:
                  _index++;
                  _context4.next = 28;
                  break;

                case 42:
                case "end":
                  return _context4.stop();
              }
            }, _callee3, this);
          }));

          function randomNpcflags(_x4, _x5) {
            return _randomNpcflags.apply(this, arguments);
          }

          return randomNpcflags;
        }();

        _proto.createFlagView = function createFlagView(flagType) {
          var flag = null; //胜利旗帜

          if (flagType == 0) {
            flag = instantiate(this._winflag);
          } else {
            flag = instantiate(this._loseflag);
          }

          return flag;
        };

        _proto.getPosIndex = function getPosIndex(list, other, num) {
          var pos = [];
          var posIndex = 0;

          for (var index = 0; index < num; index++) {
            if (list.length > 0) {
              posIndex = list[randomRangeInt(0, list.length)];
              pos.push(posIndex);
              this.deleyElementList(list, posIndex);
            } else {
              posIndex = other[randomRangeInt(0, other.length)];
              pos.push(posIndex);
              this.deleyElementList(other, posIndex);
            }
          }

          return pos;
        } //随机生成场上的物体
        ;

        _proto.randomBuildBox = function randomBuildBox(boxParent) {
          var fenceCount = 0;
          var grassCount = 0;
          var stoneCount = 0;
          var strsh; //防止死循环

          var randoms = 100;
          var cnt = randoms; //草

          var grassType = this.homeCfg.npc[this.npc.lv].GrassType; //处理障碍物个数因为难度改变而改变

          stoneCount = this.homeCfg.npc[this.npc.lv].StoneCount;
          grassCount = this.homeCfg.npc[this.npc.lv].GrassCount;
          fenceCount = this.homeCfg.npc[this.npc.lv].FenceCount;
          var cnts = DifficultyManager.changeObsCnt([fenceCount, stoneCount, grassCount]);
          fenceCount = cnts[0];
          stoneCount = cnts[1];
          grassCount = cnts[2];
          strsh = DifficultyManager.changeGrassPos(this.npc, this.homeCfg).split('_');

          while (grassCount > 0 && cnt > 0) {
            var fenchhPos = this.randomIndex(strsh);
            var list = this.gridType[grassType];

            if (this.isEmploy(fenchhPos, list)) {
              for (var index = 0; index < list.length; index++) {
                var element = list[index];
                var pos = element + fenchhPos;
                var grassView = randomRangeInt(0, 7);
                this.createBox(boxParent, mBoxType.grass, pos, grassView);
              }

              grassCount--;
            }

            cnt--;
          }

          cnt = randoms;

          for (var _index2 = 0; _index2 < fenceCount; _index2++) {
            var fenceType = Math.random() >= 0.5 ? 0 : 1;
            strsh = DifficultyManager.changeFenchPos(fenceType, this.npc, this.homeCfg).split('_'); //横向障碍物

            if (fenceType == 0) {
              this.homeCfg.npc[this.npc.lv].FenceH.split('_');

              var _fenchhPos = this.randomIndex(strsh);

              if (this.isEmploy(_fenchhPos, this.gridType[1])) {
                this.createBox(boxParent, mBoxType.fence_h, _fenchhPos);
                fenceCount--;
              }
            } else {
              //纵向障碍物
              var _fenchhPos2 = this.randomIndex(strsh);

              if (this.isEmploy(_fenchhPos2, this.gridType[2])) {
                this.createBox(boxParent, mBoxType.fence_v, _fenchhPos2);
                fenceCount--;
              }
            }
          }

          cnt = randoms; //宝箱

          var weightedCards = [];
          var diff = DifficultyManager.changeBoxWeigth();
          if (diff == "") weightedCards = Utils.getSplitNumbers(this.homeCfg.npc[this.npc.lv].BoxCount, '_');else {
            weightedCards = Utils.getSplitNumbers(diff, '_');
          }
          fenceCount = Utils.selectCardByWeight([new Card(weightedCards[0], 1), new Card(weightedCards[1], 2), new Card(weightedCards[2], 3)]).obj;
          strsh = this.homeCfg.npc[this.npc.lv].BoxPosition.split('_'); //   strsh = ["16","17"];

          var treasure = this.homeCfg.npc[this.npc.lv].BoxID;

          while (fenceCount > 0 && DataManager.getInstance().playerData.treasureBox >= 0 && cnt > 0) {
            var _fenchhPos3 = this.randomIndex(strsh);

            if (this.isEmploy(_fenchhPos3, this.gridType[0])) {
              this.createBox(boxParent, mBoxType.treasure_box, _fenchhPos3, treasure);
              fenceCount--;
            }

            cnt--;
          }

          cnt = randoms;
          strsh = DifficultyManager.changeStonePos(this.npc, this.homeCfg).split('_');

          while (stoneCount > 0 && cnt > 0) {
            var _fenchhPos4 = this.randomIndex(strsh);

            if (this.isEmploy(_fenchhPos4, this.gridType[0])) {
              this.createBox(boxParent, mBoxType.stone, _fenchhPos4);
              stoneCount--;
            }

            cnt--;
          }
        };

        _proto.buildBox = function buildBox(boxParent) {
          var _this6 = this;

          if (this.npc) {
            this.npc.mapInfoCash.forEach(function (element) {
              _this6.createBox(boxParent, element._boxType, element._index, element.treasureBoxLv);
            });
          }
        };

        _proto.setMapBoxInfo = function setMapBoxInfo(boxType, index, treasureBoxLv) {
          if (treasureBoxLv === void 0) {
            treasureBoxLv = -1;
          }

          var mapBoxInfo = new MapItem();
          mapBoxInfo._boxType = boxType;
          mapBoxInfo._index = index;
          mapBoxInfo.treasureBoxLv = treasureBoxLv;

          this._boxs.push(mapBoxInfo);
        };

        _proto.createBox = function createBox(boxParent, boxType, index, treasureBoxLv) {
          if (treasureBoxLv === void 0) {
            treasureBoxLv = 0;
          }

          var box = null;

          switch (boxType) {
            case mBoxType.grass:
              box = instantiate(this._tempGrass);
              boxParent.addChild(box);
              box.setPosition(this._cubs[index].position);
              this._boxEntitys[index] = box;
              box.getComponent(Entity).index = index;
              this.setMapBoxInfo(boxType, index);
              break;

            case mBoxType.fence_h:
              box = instantiate(this._tempFence_h);
              boxParent.addChild(box);
              var box_h = new Node("fence_h2");
              var fench = box.getComponent(Fence);
              fench.initFence(this.homeCfg.npc[this.npc.lv].FenceHVHP);
              box_h.addComponent(Fence).fenceParent = fench;
              fench.fenceChild = box_h.getComponent(Fence);
              boxParent.addChild(box_h);
              box_h.setPosition(this._cubs[index + this._size.y].position);
              box.setPosition(this._cubs[index].position);
              this._boxEntitys[index] = box;
              this._boxEntitys[index + this._size.y] = box_h;
              box.getComponent(Entity).index = index;
              box_h.getComponent(Entity).index = index + this._size.y;
              this.setMapBoxInfo(boxType, index);
              break;

            case mBoxType.fence_v:
              box = instantiate(this._tempFence_v);
              boxParent.addChild(box);
              var box_v = new Node("fence_v2");
              var fench2 = box.getComponent(Fence);
              fench2.initFence(this.homeCfg.npc[this.npc.lv].FenceHVHP);
              box_v.addComponent(Fence).fenceParent = fench2;
              fench2.fenceChild = box_v.getComponent(Fence);
              boxParent.addChild(box_v);
              box_v.setPosition(this._cubs[index + 1].position);
              box.setPosition(this._cubs[index].position);
              this._boxEntitys[index] = box;
              this._boxEntitys[index + 1] = box_v;
              box.getComponent(Entity).index = index;
              box_v.getComponent(Entity).index = index + 1;
              this.setMapBoxInfo(boxType, index);
              break;

            case mBoxType.stone:
              box = instantiate(this._tempStone);
              boxParent.addChild(box);
              box.setPosition(this._cubs[index].position);
              this._boxEntitys[index] = box;
              box.getComponent(Entity).index = index;
              this.setMapBoxInfo(boxType, index);
              break;

            case mBoxType.treasure_box:
              box = instantiate(this._tempBox);
              boxParent.addChild(box);
              box.setPosition(this._cubs[index].position);
              this._boxEntitys[index] = box;
              box.getComponent(Entity).index = index;
              box.getComponent(TreasureBox).init(treasureBoxLv);
              this.setMapBoxInfo(boxType, index, treasureBoxLv);
              break;
          }

          return box;
        };

        _proto.destroyBox = function destroyBox(entity) {
          GameManager.getInstance().setMapTag(entity.index, false);
          this._boxEntitys[entity.index] = null;
        };

        _proto.destroyAllBox = function destroyAllBox() {
          for (var index = 0; index < this._boxEntitys.length; index++) {
            var element = this._boxEntitys[index];

            if (element) {
              GameManager.getInstance().setMapTag(index, false);
              element.destroy();
              this._boxEntitys[index] = null;
            }
          }
        } //创建农场里面的动物
        ;

        _proto.createInHomeAnimals = function createInHomeAnimals(npc) {
          var points = []; //默认的动物类型

          var animalTypes = [0, 1, 2]; //解锁的动物

          for (var lv = 0; lv < npc.lv; lv++) {
            var houseItem = this.homeCfg.house[lv];

            if (houseItem.Unlock != "0_0") {
              var strs = houseItem.Unlock.split('_');
              var unlockType = Number.parseInt(strs[0]);
              var box = Number.parseInt(strs[1]);

              switch (unlockType) {
                //动物
                case 1:
                  animalTypes.push[box];
              }
            }
          }

          this.animalViewCnt = this.homeCfg.npc[npc.lv].HomeAnimal;
          this.animalViewPos.children.forEach(function (child) {
            points.push(v3(child.getWorldPosition()));
          });
          points = Utils.KnuthDurstenfeldShuffle(points);

          for (var index = 0; index < this.animalViewCnt; index++) {
            var _this$createInHomeAni;

            var pos = points[index];
            var animalType = animalTypes[randomRangeInt(0, animalTypes.length)];
            (_this$createInHomeAni = this.createInHomeAnimal(animalType)) == null ? void 0 : _this$createInHomeAni.initRandomMove(pos, false);
          }
        };

        _proto.createInHomeAnimal = function createInHomeAnimal(animalType) {
          var entity = this.createAnimalEntity(animalType);

          this._listHomeAnimals.push(entity);

          return entity;
        };

        _proto.createAnimalEntity = function createAnimalEntity(animalType) {
          var anima = instantiate(this.animals[animalType]);
          var baseAnimal = anima.getComponent(HomeAnimal);
          this.animalViewParent.addChild(anima);
          baseAnimal.init(animalType);
          anima.active = true;
          return baseAnimal;
        };

        _proto.isEmploy = function isEmploy(pos, gridType) {
          var bl = true;

          for (var index = 0; index < gridType.length; index++) {
            var element = gridType[index];
            var i = pos + element;

            if (i >= this._boxEntitys.length) {
              console.log("坐标越界：" + i);
              bl = false;
              break;
            }

            if (this._boxEntitys[i]) {
              bl = false;
              break;
            }
          }

          return bl;
        };

        _proto.randomIndex = function randomIndex(strs) {
          var index = 0;
          index = randomRangeInt(0, strs.length);
          return Number.parseInt(strs[index]);
        };

        _proto.destroyMap = function destroyMap() {
          this._cubs.forEach(function (element) {
            element.destroy();
          });
        };

        _proto.deleyElementList = function deleyElementList(list, element) {
          var index = list.indexOf(element); // 获取元素的索引

          if (index !== -1) {
            list.splice(index, 1); // 删除元素
          } else {
            console.log("要删除的值：" + element);
          }
        };

        _createClass(MapInfo, [{
          key: "listHomeAnimals",
          get: function get() {
            return this._listHomeAnimals;
          }
        }]);

        return MapInfo;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "animalViewParent", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "animalViewPos", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_cube", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_curNpcHead", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_animalCamera", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "_enclosure", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "_isTest", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "_size", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec2();
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "_mapOffect", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec2(0.06, 0.25);
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "mapItem", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "headPos", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "npcPos", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "helpPos", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NativeAndroid.ts", ['cc', './ATJSSDK.ts', './ATRewardedVideoTSSDK.ts'], function (exports) {
  'use strict';

  var cclegacy, _decorator, native, ATJSSDK, ATRewardedVideoSDK;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      native = module.native;
    }, function (module) {
      ATJSSDK = module.ATJSSDK;
    }, function (module) {
      ATRewardedVideoSDK = module.ATRewardedVideoSDK;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "67a48rztzpHEpPBwC1cr3+L", "NativeAndroid", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NativeAndroid = exports('NativeAndroid', (_dec = ccclass('NativeAndroid'), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function NativeAndroid() {
          this.plmentId = "b64a2450e1c323";
        }

        NativeAndroid.onLGRealNameCallback = function onLGRealNameCallback(result, callBack) {
          if (result == "0") {
            callBack == null ? void 0 : callBack();
          }
        };

        var _proto = NativeAndroid.prototype;

        _proto.Init = function Init(callBack) {
          var rewardedVideoListener = {
            //广告加载成功
            onRewardedVideoAdLoaded: function onRewardedVideoAdLoaded(placementId) {
              ATJSSDK.printLog("AnyThinkRewardedVideoDemo::onRewardedVideoAdLoaded(" + placementId + ")");
            },
            //广告加载失败
            onRewardedVideoAdFailed: function onRewardedVideoAdFailed(placementId, errorInfo) {
              ATJSSDK.printLog("AnyThinkRewardedVideoDemo::onRewardedVideoAdFailed(" + placementId + ", " + errorInfo + ")");
            },
            //广告开始播放
            onRewardedVideoAdPlayStart: function onRewardedVideoAdPlayStart(placementId, callbackInfo) {
              ATJSSDK.printLog("AnyThinkRewardedVideoDemo::onRewardedVideoAdPlayStart(" + placementId + ", " + callbackInfo + ")");
            },
            //广告播放结束
            onRewardedVideoAdPlayEnd: function onRewardedVideoAdPlayEnd(placementId, callbackInfo) {
              ATJSSDK.printLog("AnyThinkRewardedVideoDemo::onRewardedVideoAdPlayEnd(" + placementId + ", " + callbackInfo + ")");
            },
            //广告播放失败
            onRewardedVideoAdPlayFailed: function onRewardedVideoAdPlayFailed(placementId, errorInfo, callbackInfo) {
              NativeAndroid.isRewarded = false;
              ATJSSDK.printLog("AnyThinkRewardedVideoDemo::onRewardedVideoAdPlayFailed(" + placementId + ", " + errorInfo + ", " + callbackInfo + ")");
            },
            //广告被关闭
            onRewardedVideoAdClosed: function onRewardedVideoAdClosed(placementId, callbackInfo) {
              NativeAndroid.adCallback(NativeAndroid.isRewarded);
              ATJSSDK.printLog("AnyThinkRewardedVideoDemo::onRewardedVideoAdClosed(" + placementId + ", " + callbackInfo + ")");
            },
            //广告被点击
            onRewardedVideoAdPlayClicked: function onRewardedVideoAdPlayClicked(placementId, callbackInfo) {
              ATJSSDK.printLog("AnyThinkRewardedVideoDemo::onRewardedVideoAdPlayClicked(" + placementId + ", " + callbackInfo + ")");
            },
            //激励成功，开发者可在此回调中下发奖励，一般先于onRewardedVideoAdClosed回调，服务器激励则不一定
            onReward: function onReward(placementId, callbackInfo) {
              NativeAndroid.isRewarded = true;
              ATJSSDK.printLog("AnyThinkRewardedVideoDemo::onReward(" + placementId + ", " + callbackInfo + ")");
            }
          };
          ATRewardedVideoSDK.setAdListener(rewardedVideoListener);
          ATJSSDK.setLogDebug(false);
          ATJSSDK.initSDK("a64a244fccf594", "4a180b3ff54dc9f570dc42069d83a18d");
          callBack();
        };

        _proto.showAd = function showAd(adenum, callback) {
          NativeAndroid.isRewarded = false;
          NativeAndroid.adCallback = callback;
          ATRewardedVideoSDK.showAd(this.plmentId);
        };

        _proto.loadAd = function loadAd(adenum) {
          var str = ATRewardedVideoSDK.checkAdStatus(this.plmentId);

          if (str) {
            var info = JSON.parse(str);

            if (info) {
              //加载中
              if (info.isLoading) return; //有缓存

              if (info.isReady) return;
            }
          }

          ATRewardedVideoSDK.loadRewardedVideo(this.plmentId);
        };

        _proto.adIsReady = function adIsReady(adenum) {
          var str = ATRewardedVideoSDK.checkAdStatus(this.plmentId);
          var info = JSON.parse(str);
          return info.isReady;
        };

        _proto.sendEvent = function sendEvent(eventID, content) {//  native.reflection.callStaticMethod("com/cocos/game/OhayooSdk", "sendEvent", "(Ljava/lang/String;)V", str)
        };

        _proto.openProtectionService = function openProtectionService() {//    native.reflection.callStaticMethod("com/cocos/game/OhayooSdk", "openProtectionService", "()V");
        } //震动，毫秒
        ;

        _proto.doVibrate = function doVibrate(mm) {
          native.reflection.callStaticMethod("com/cocos/game/AppActivity", "DoVibrate", "(Ljava/lang/String;)V", mm.toString());
        };

        _proto.getLocation = function getLocation(callBack) {
          native.bridge.onNative = function (funName, arg) {
            if (funName == "getlocationCallBack") {
              callBack(arg);
            }
          };

          native.reflection.callStaticMethod("com/cocos/game/OhayooSdk", "getlocation", "()V");
        };

        return NativeAndroid;
      }(), _class2.adCallback = void 0, _class2.isRewarded = false, _class2.did = "123456", _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NativeIos.ts", ['cc', './AudioSys.ts', './ATJSSDK.ts', './ATRewardedVideoTSSDK.ts'], function (exports) {
  'use strict';

  var cclegacy, _decorator, native, sys, AudioSys, ATJSSDK, ATRewardedVideoSDK;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      native = module.native;
      sys = module.sys;
    }, function (module) {
      AudioSys = module.AudioSys;
    }, function (module) {
      ATJSSDK = module.ATJSSDK;
    }, function (module) {
      ATRewardedVideoSDK = module.ATRewardedVideoSDK;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "b3148lp4A9LEollTfPgYtot", "NativeIos", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NativeIos = exports('NativeIos', (_dec = ccclass('NativeIos'), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function NativeIos() {
          this.plmentId = "b64a242388e3c6";
        }

        NativeIos.GetATTracking = function GetATTracking() {
          native.jsbBridgeWrapper.dispatchEventToNative("GetATTracking");
        };

        NativeIos.onRewardVerify = function onRewardVerify(isEnded) {
          var reslut = false;
          if (isEnded == "0") reslut = true;
          NativeIos.adCallback == null ? void 0 : NativeIos.adCallback(reslut); //    AudioSys.instance.enable();
        };

        NativeIos.onLGRealNameCallback = function onLGRealNameCallback(result, callBack) {
          if (result == "0") {
            callBack == null ? void 0 : callBack();
          }

          NativeIos.isRealName = result;
          sys.localStorage.setItem("isRealName", NativeIos.isRealName);
        };

        var _proto = NativeIos.prototype;

        _proto.Init = function Init(callBack) {
          var rewardedVideoListener = {
            //广告加载成功
            onRewardedVideoAdLoaded: function onRewardedVideoAdLoaded(placementId) {
              ATJSSDK.printLog("AnyThinkRewardedVideoDemo::onRewardedVideoAdLoaded(" + placementId + ")");
            },
            //广告加载失败
            onRewardedVideoAdFailed: function onRewardedVideoAdFailed(placementId, errorInfo) {
              ATJSSDK.printLog("AnyThinkRewardedVideoDemo::onRewardedVideoAdFailed(" + placementId + ", " + errorInfo + ")");
            },
            //广告开始播放
            onRewardedVideoAdPlayStart: function onRewardedVideoAdPlayStart(placementId, callbackInfo) {
              AudioSys.instance.disable();
              ATJSSDK.printLog("AnyThinkRewardedVideoDemo::onRewardedVideoAdPlayStart(" + placementId + ", " + callbackInfo + ")");
            },
            //广告播放结束
            onRewardedVideoAdPlayEnd: function onRewardedVideoAdPlayEnd(placementId, callbackInfo) {
              ATJSSDK.printLog("AnyThinkRewardedVideoDemo::onRewardedVideoAdPlayEnd(" + placementId + ", " + callbackInfo + ")");
            },
            //广告播放失败
            onRewardedVideoAdPlayFailed: function onRewardedVideoAdPlayFailed(placementId, errorInfo, callbackInfo) {
              NativeIos.isRewarded = false;
              ATJSSDK.printLog("AnyThinkRewardedVideoDemo::onRewardedVideoAdPlayFailed(" + placementId + ", " + errorInfo + ", " + callbackInfo + ")");
            },
            //广告被关闭
            onRewardedVideoAdClosed: function onRewardedVideoAdClosed(placementId, callbackInfo) {
              NativeIos.adCallback(NativeIos.isRewarded);
              AudioSys.instance.enable();
              ATJSSDK.printLog("AnyThinkRewardedVideoDemo::onRewardedVideoAdClosed(" + placementId + ", " + callbackInfo + ")");
            },
            //广告被点击
            onRewardedVideoAdPlayClicked: function onRewardedVideoAdPlayClicked(placementId, callbackInfo) {
              ATJSSDK.printLog("AnyThinkRewardedVideoDemo::onRewardedVideoAdPlayClicked(" + placementId + ", " + callbackInfo + ")");
            },
            //激励成功，开发者可在此回调中下发奖励，一般先于onRewardedVideoAdClosed回调，服务器激励则不一定
            onReward: function onReward(placementId, callbackInfo) {
              NativeIos.isRewarded = true;
              ATJSSDK.printLog("AnyThinkRewardedVideoDemo::onReward(" + placementId + ", " + callbackInfo + ")");
            }
          };
          ATRewardedVideoSDK.setAdListener(rewardedVideoListener);
          ATJSSDK.setLogDebug(false);
          ATJSSDK.initSDK("a64a2421cd971c", "4a180b3ff54dc9f570dc42069d83a18d");
          callBack == null ? void 0 : callBack();
        };

        _proto.showAd = function showAd(adenum, callback) {
          NativeIos.isRewarded = false;
          NativeIos.adCallback = callback;
          ATRewardedVideoSDK.showAd(this.plmentId);
        };

        _proto.loadAd = function loadAd(adenum) {
          var str = ATRewardedVideoSDK.checkAdStatus(this.plmentId);

          if (str) {
            var info = JSON.parse(str);

            if (info) {
              //加载中
              if (info.isLoading) return; //有缓存

              if (info.isReady) return;
            }
          }

          ATRewardedVideoSDK.loadRewardedVideo(this.plmentId);
        };

        _proto.adIsReady = function adIsReady(adenum) {
          var str = ATRewardedVideoSDK.checkAdStatus(this.plmentId);
          var info = JSON.parse(str);
          return info.isReady;
        };

        _proto.sendEvent = function sendEvent(eventID, content) {//  native.jsbBridgeWrapper.dispatchEventToNative("SendEvent",eventID+"#"+content);
        };

        _proto.openProtectionService = function openProtectionService() {// native.jsbBridgeWrapper.dispatchEventToNative("openPersonalPrivacySettingWindow"); 
        };

        _proto.showReviewAlert = function showReviewAlert() {
          native.jsbBridgeWrapper.dispatchEventToNative("ShowReviewAlert");
        };

        _proto.doVibrate = function doVibrate() {
          native.jsbBridgeWrapper.dispatchEventToNative("DoVibrate");
        };

        NativeIos.netPremission = function netPremission() {
          var data = "{game_id:kqbmds,game_secret:5dce29d2b2799f3f627a43eeaa890a0b}";
          this.Get("https://simbasdk.icesimba.com/simba-sdk/api/v1/time", data);
        };

        NativeIos.Get = function Get(url, data) {
          var request = new XMLHttpRequest();
          request.timeout = 10000;
          request.open("GET", url, true);

          request.onerror = function (res) {
            console.info(res);
          };

          request.onreadystatechange = function () {};

          request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=utf-8');
          request.send(data);
        };

        return NativeIos;
      }(), _class2.adCallback = void 0, _class2.isRewarded = false, _class2.isRealName = "1", _class2.did = "123456", _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NativeSdkManager.ts", ['cc', './SdkManager.ts', './NativeAndroid.ts', './NativeIos.ts'], function (exports) {
  'use strict';

  var cclegacy, _decorator, sys, adEnum, vibrateType, NativeAndroid, NativeIos;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
    }, function (module) {
      adEnum = module.adEnum;
      vibrateType = module.vibrateType;
    }, function (module) {
      NativeAndroid = module.NativeAndroid;
    }, function (module) {
      NativeIos = module.NativeIos;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "0171d67lLFEW5lQyCPM8Rp0", "NativeSdkManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NativeSdkManager = exports('NativeSdkManager', (_dec = ccclass('NativeSdkManager'), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function NativeSdkManager() {
          this.nativeandroid = null;
          this.nativeios = null;
          this.rewardCallBack = void 0;
          this.isReward = false;
          this.isInit = false;
        }

        NativeSdkManager.GetInstance = function GetInstance() {
          if (this._instance == null) {
            this._instance = new NativeSdkManager();
          }

          return this._instance;
        };

        var _proto = NativeSdkManager.prototype;

        _proto.Init = function Init(callBack) {
          var _this = this;

          if (this.isInit) {
            return;
          }

          if (sys.platform == sys.Platform.ANDROID) {
            // 初始化SDK
            this.nativeandroid = new NativeAndroid();
            this.nativeandroid.Init(function () {
              _this.isInit = true;
              console.log("初始化成功！");
              callBack == null ? void 0 : callBack();

              _this.StartSession();
            });
          } else if (sys.platform == sys.Platform.IOS) {
            this.nativeios = new NativeIos();
            this.nativeios.Init(function () {
              _this.isInit = true;
              console.log("初始化成功！");
              callBack == null ? void 0 : callBack();

              _this.StartSession();
            });
          }
        };

        _proto.StartSession = function StartSession() {
          var _this2 = this;

          if (this.isInit) {
            setInterval(function () {
              console.log("native:加载广告");

              _this2.LoadAd(adEnum.reward);
            }, 10000);
          }
        };

        _proto.LoadAd = function LoadAd(adenum) {
          if (this.isInit) {
            if (sys.platform == sys.Platform.ANDROID) {
              this.nativeandroid.loadAd(adenum);
            } else if (sys.platform == sys.Platform.IOS) {
              this.nativeios.loadAd(adenum);
            }
          }
        };

        _proto.ShowAd = function ShowAd(adenum, callback) {
          if (this.isInit) {
            if (sys.platform == sys.Platform.ANDROID) {
              this.nativeandroid.showAd(adenum, callback);
            } else if (sys.platform == sys.Platform.IOS) {
              this.nativeios.showAd(adenum, callback);
            } //  callback?.(true);

          }
        };

        _proto.SendEvent = function SendEvent(eventName, data) {
          if (this.isInit) {
            if (sys.platform == sys.Platform.ANDROID) {
              this.nativeandroid.sendEvent(eventName, data);
            } else if (sys.platform == sys.Platform.IOS) {
              this.nativeios.sendEvent(eventName, data);
            } //  callback?.(true);

          }
        };

        _proto.GetDid = function GetDid() {
          if (sys.platform == sys.Platform.ANDROID) {
            return NativeAndroid.did;
          } else if (sys.platform == sys.Platform.IOS) {
            return NativeIos.did;
          }
        };

        _proto.AdIsReady = function AdIsReady(adenum) {
          if (this.isInit) {
            return true;
          } else {
            return false;
          }
        };

        _proto.openProtectionService = function openProtectionService() {
          if (sys.platform == sys.Platform.ANDROID) {
            this.nativeandroid.openProtectionService();
          } else if (sys.platform == sys.Platform.IOS) {
            this.nativeios.openProtectionService();
          }
        };

        _proto.VibrateShort = function VibrateShort(vibratetype) {
          if (this.isInit) {
            if (sys.platform == sys.Platform.ANDROID) {
              if (vibratetype == vibrateType.light) this.nativeandroid.doVibrate(25);else this.nativeandroid.doVibrate(70);
            } else if (sys.platform == sys.Platform.IOS) {
              this.nativeios.doVibrate();
            }
          }
        } //ios 评价
        ;

        _proto.showReviewAlert = function showReviewAlert() {
          if (this.isInit && sys.platform == sys.Platform.IOS) {
            this.nativeios.showReviewAlert();
          }
        };

        _proto.getLocation = function getLocation(callBack) {
          if (sys.platform == sys.Platform.ANDROID) {
            this.nativeandroid.getLocation(callBack);
          }
        };

        return NativeSdkManager;
      }(), _class2._instance = void 0, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NetTools.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "913aa7pPw1PdqcVeCQLPZeG", "NetTools", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NetTools = exports('NetTools', (_dec = ccclass('NetTools'), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function NetTools() {} //是否是测试环境


        NetTools.Post = function Post(data, callBack) {
          var _this = this;

          var request = new XMLHttpRequest();
          request.timeout = 10000;
          if (this.debug) request.open("POST", this.debugUrl, true);else request.open("POST", this.rootUrl, true);

          request.onerror = function (res) {
            console.info(res);
          };

          request.onreadystatechange = function () {
            if (request.readyState == 4 && request.status == 200) {
              try {
                _this.NetLog(data + "-----------------" + request.responseText);

                var rsp = JSON.parse(request.responseText);
                callBack(rsp);
              } catch (error) {
                _this.NetLog("request:" + error);

                callBack(null); //  GameTips.instance.showTips("网络数据错误："+error);
              }
            }
          };

          request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=utf-8');
          request.send(data);
        };

        NetTools.NetLog = function NetLog(str) {
          if (this.debug) console.log("网络log：" + str);
        };

        return NetTools;
      }(), _class2.debugUrl = "https://games.sleepfly.top/fish/dev", _class2.rootUrl = "https://games.sleepfly.top/fish/api", _class2.debug = false, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Npc.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "cdfd9C+ku1H8qYM4GUy5YR0", "Npc", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Npc = exports('Npc', (_dec = ccclass('Npc'), _dec(_class = function Npc() {
        this.houseImg = void 0;
        this.npcName = "今晚打老虎";
        this.headUrl = "https://thirdwx.qlogo.cn/mmopen/vi_32/R6HHfcvA53icNTUR8wxpcran9fe62icAphNF2iacsfFsBiaYIwe7noVUhr7vJOYR9y0LUQaI5cZzWyyTf5HTtib9hXg/132";
        this.lv = void 0;
        this.mapId = void 0;
        this.fenceLv = 0;
        this.residualHP = void 0;
        this.residualAnimalCount = void 0;
        this.mapInfoCash = new Array();
        this.animalCorpseList = void 0;
        this.flagPosIndex = -1;
        this.atkTimeFrame = void 0;
        this.isWin = void 0;
        this.isRevenge = void 0;
        this.flagCnt = 0;
        this.audioNotHide = false;
      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NpcInfoView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './TimeTools.ts', './HomeManager.ts', './UIManager.ts', './Panel_Main.ts', './Pop_NpcInfo.ts', './LabelEx.ts', './GameResponces.ts', './CfgData.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Button, v3, Component, parseMonthDayFour, HomeManager, UIManager, Panel_Main, Pop_NpcInfo, LabelEx, GameResponces, CfgData;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Button = module.Button;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      parseMonthDayFour = module.parseMonthDayFour;
    }, function (module) {
      HomeManager = module.HomeManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      Panel_Main = module.Panel_Main;
    }, function (module) {
      Pop_NpcInfo = module.Pop_NpcInfo;
    }, function (module) {
      LabelEx = module.LabelEx;
    }, function (module) {
      GameResponces = module.GameResponces;
    }, function (module) {
      CfgData = module.CfgData;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "21f09EAya9NU6qO842cEuTn", "NpcInfoView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NpcInfoView = exports('NpcInfoView', (_dec = ccclass('NpcInfoView'), _dec2 = property({
        type: LabelEx,
        displayName: "名字"
      }), _dec3 = property({
        type: Label,
        displayName: "等级"
      }), _dec4 = property({
        type: Label,
        displayName: "栅栏等级"
      }), _dec5 = property({
        type: Label,
        displayName: "时间"
      }), _dec6 = property({
        type: [Label],
        displayName: "动物个数"
      }), _dec7 = property({
        type: Button,
        displayName: "攻击当前npc"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(NpcInfoView, _Component);

        function NpcInfoView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "npcName", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lv", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fench_lv", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "timelabel", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "aniamlLabels", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btn_atk", _descriptor6, _assertThisInitialized(_this));

          _this.parent = void 0;
          _this.npc = void 0;
          return _this;
        }

        var _proto = NpcInfoView.prototype;

        _proto.onLoad = function onLoad() {
          this.btn_atk.node.on(Button.EventType.CLICK, this.clickNpc, this);
        };

        _proto.init = function init(npc, infoPos, parent) {
          var _this2 = this;

          this.npc = npc;
          this.node.active = true;
          this.parent = parent;
          this.npcName.orgVlaue = npc.npcName;
          this.lv.string = "【" + CfgData.getInstance().getHomeCfg().npc[npc.lv].Level + "级】";
          this.fench_lv.string = "栅栏" + (npc.fenceLv + 1) + "级";
          this.timelabel.string = parseMonthDayFour(npc.atkTimeFrame);
          this.aniamlLabels.forEach(function (element) {
            element.string = "0";
          });

          if (npc.animalCorpseList) {
            npc.animalCorpseList.forEach(function (animalType) {
              var cnt = Number.parseInt(_this2.aniamlLabels[animalType].string);
              cnt++;
              _this2.aniamlLabels[animalType].string = cnt.toString();
            });
          }

          this.btn_atk.node.active = !this.npc.isRevenge;
          var pos = this.convertTohpNode(infoPos);
          this.node.setPosition(pos);
        };

        _proto.clickNpc = function clickNpc() {
          this.parent.getComponent(Pop_NpcInfo).hide();
          this.npc.isRevenge = true;
          UIManager.getInstance().getPanel(Panel_Main).gameStart(this.npc);

          GameResponces._event.emit(GameResponces.ClickToBattle);
        };

        _proto.convertTohpNode = function convertTohpNode(wpos) {
          var pos = v3();

          HomeManager.getInstance()._camera.camera.update();

          pos = HomeManager.getInstance()._camera.convertToUINode(wpos, this.parent);
          return pos;
        };

        return NpcInfoView;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "npcName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lv", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "fench_lv", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "timelabel", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "aniamlLabels", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "btn_atk", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NpcManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CfgData.ts', './DataManager.ts', './Npc.ts', './Utils.ts', './TimeTools.ts', './AnimalFarm.ts', './UIManager.ts', './Panel_Main.ts', './GameResponces.ts', './GameCfg.ts', './PlayerFench.ts', './DifficultyManager.ts', './GuideCfg.ts'], function (exports) {
  'use strict';

  var _createClass, cclegacy, _decorator, randomRangeInt, randomRange, CfgData, DataManager, Npc, Utils, TimeTools, AnimalFarm, UIManager, Panel_Main, GameResponces, GameCfg, PlayerFench, DifficultyManager, GuideCfg;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      randomRangeInt = module.randomRangeInt;
      randomRange = module.randomRange;
    }, function (module) {
      CfgData = module.CfgData;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      Npc = module.Npc;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      TimeTools = module.TimeTools;
    }, function (module) {
      AnimalFarm = module.AnimalFarm;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      Panel_Main = module.Panel_Main;
    }, function (module) {
      GameResponces = module.GameResponces;
    }, function (module) {
      GameCfg = module.GameCfg;
    }, function (module) {
      PlayerFench = module.PlayerFench;
    }, function (module) {
      DifficultyManager = module.DifficultyManager;
    }, function (module) {
      GuideCfg = module.GuideCfg;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "616e5ofkgFLK5HeK93urjyj", "NpcManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NpcManager = exports('NpcManager', (_dec = ccclass('NpcManager'), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function NpcManager() {
          this.dateManager = void 0;
          this.homeCfg = void 0;
          this.curNpc = void 0;
          this.npcViewList = new Array();
          this._sceneList = new Array();
          this.offNpcList = new Array();
          this.cfgNpcInfo = new Array();
          this.npcInfoIndex = 0;
          this.npcLimnit = 12;
          this.nextCreateNpcTime = 0;
          this._intervalId = void 0;
          this.isInit = false;
          this.offtime = 0;
        }

        NpcManager.getInstance = function getInstance() {
          if (!this._instance) this._instance = new NpcManager();
          return this._instance;
        };

        var _proto = NpcManager.prototype;

        _proto.init = function init() {
          if (this.isInit) return;
          this.isInit = true;
          this.initCfgNpcInfo();
          this.homeCfg = CfgData.getInstance().getHomeCfg();
          this.dateManager = DataManager.getInstance();
          this.npcViewList = this.dateManager.playerData.npcList; //有可能删除的时候出问题，所以都各地

          if (!this.dateManager.playerData.sceneNpcList) {
            this.dateManager.playerData.sceneNpcList = this.sceneList;
          } else {
            this.sceneList = this.dateManager.playerData.sceneNpcList;
          }

          if (!GuideCfg.disableNpc) {
            this.iniOffLineNpcLogic();
            this.initOnlineNpc();
          }
        };

        _proto.creatFlagNpc = function creatFlagNpc() {
          //每次都会产生一个失败的npc
          var npc = this.createSceneNpc(TimeTools.getCurTime(), this.npcLimnit, this.sceneList);
          npc.isWin = false;
          PlayerFench.getInstance().behit(npc);

          GameResponces._event.emit(GameResponces.createNewSceneNpc, npc);

          this.dateManager.playerData.sceneNpcList = this.sceneList;
          this.dateManager.savePlayData();
          console.log("生成一个特殊的npc");
        };

        _proto.initCfgNpcInfo = function initCfgNpcInfo() {
          var _this = this;

          var cfg = CfgData.getInstance().getUserInfo();
          var indxex = 0;
          cfg.forEach(function (element) {
            _this.cfgNpcInfo.push(indxex);

            indxex++;
          });
          this.cfgNpcInfo = Utils.KnuthDurstenfeldShuffle(this.cfgNpcInfo);
        };

        _proto.createGameNpcs = function createGameNpcs() {
          var npcs = [];

          for (var index = 0; index < this.npcLimnit; index++) {
            npcs.push(this.createNpc(false));
          }

          return npcs;
        };

        _proto.createNpc = function createNpc(join, npcLv, watchAd) {
          if (join === void 0) {
            join = true;
          }

          if (npcLv === void 0) {
            npcLv = -1;
          }

          if (watchAd === void 0) {
            watchAd = false;
          }

          var npc = new Npc();
          var lv = this.dateManager.playerData.homeLv + randomRangeInt(GameCfg.NPClevelInterval[0], GameCfg.NPClevelInterval[1] + 1);
          lv = Utils.limitNumber(lv, 0, GameCfg.HouseMaxLevel - 1);
          var strs = this.homeCfg.npc[lv].FenceLevel.split("_");
          var fenceLv = randomRangeInt(Number.parseInt(strs[0]), Number.parseInt(strs[1]) + 1) - 1;
          fenceLv = Utils.limitNumber(fenceLv, 0, GameCfg.FenceMaxLevel - 1);
          console.log("npc初始等级：" + lv + "栅栏等级：" + fenceLv);

          if (!watchAd) {
            //处理难度变化问题
            var result = DifficultyManager.changeNpcLv(lv, fenceLv);
            lv = result[0];
            lv = Utils.limitNumber(lv, 0, GameCfg.HouseMaxLevel - 1);
            lv = npcLv >= 0 ? npcLv : lv;
            fenceLv = result[1];
            fenceLv = Utils.limitNumber(fenceLv, 0, GameCfg.FenceMaxLevel - 1);
            console.log("npc处理后的等级：" + lv + "栅栏处理后的等级：" + fenceLv);
          } else {
            console.log("通过广告刷新");
          }

          var limit = this.homeCfg.house[lv].LimitStorage;
          var totallPb = 0;

          for (var index = 0; index < this.homeCfg.visitor.length; index++) {
            var element = this.homeCfg.visitor[index];
            totallPb += element.AttackProbability;
          }

          var rangdomIndex = randomRangeInt(0, totallPb);
          var prob = 0;

          for (var _index = 0; _index < this.homeCfg.visitor.length; _index++) {
            var _element = this.homeCfg.visitor[_index];
            prob += _element.AttackProbability;

            if (prob > rangdomIndex && rangdomIndex >= prob - _element.AttackProbability) {
              var _strs = _element.ResidualHP.split("_");

              var strs2 = _element.ResidualAnimalCount.split('_');

              var hp = randomRange(Number.parseFloat(_strs[0]), Number.parseFloat(_strs[1]));
              var count = randomRange(Number.parseFloat(strs2[0]), Number.parseFloat(strs2[1]));
              npc.residualHP = hp;
              npc.residualAnimalCount = Math.floor(count * limit);
              break;
            }
          }

          npc.houseImg = this.homeCfg.house[lv].HounseImage;
          npc.fenceLv = fenceLv;
          npc.lv = lv;
          npc.mapId = CfgData.getInstance().getHomeCfg().npc[lv].Map;
          npc.flagCnt = 1; //头像名

          var info = this.getNpcNameHeadUrl();
          npc.npcName = info.name;
          npc.headUrl = info.avatar;
          if (join) this.npcViewList.push(npc);
          return npc;
        };

        _proto.getNpcNameHeadUrl = function getNpcNameHeadUrl() {
          var cfg = CfgData.getInstance().getUserInfo();
          var info = cfg[this.cfgNpcInfo[this.npcInfoIndex]];
          this.addNpcInfoIndex();
          return info;
        };

        _proto.getNpcInfo = function getNpcInfo(index) {
          var cfg = CfgData.getInstance().getUserInfo();
          var info = cfg[index];
          return info;
        };

        _proto.addNpcInfoIndex = function addNpcInfoIndex() {
          this.npcInfoIndex++;
          if (this.npcInfoIndex >= this.cfgNpcInfo.length) this.npcInfoIndex = 0;
        };

        _proto.getNpcList = function getNpcList() {
          return this.npcViewList;
        };

        _proto.setNpcList = function setNpcList(value) {
          this.npcViewList = value;
        };

        _proto.initOnlineNpc = function initOnlineNpc() {
          var _this2 = this;

          if (this._intervalId) clearInterval(this._intervalId);
          var curtime = TimeTools.getCurTime();
          var s = new Date(curtime);
          var solt = s.getHours() * 60 + s.getMinutes();
          var nextIndex = this.getNpcOnlineAtckIndex(solt) + 1;
          nextIndex = nextIndex >= this.homeCfg.atktime.length - 1 ? this.homeCfg.atktime.length - 1 : nextIndex; //下一次

          var offlineAtk = Utils.getSplitNumbers(this.homeCfg.atktime[nextIndex].OnLineATKRate, "_");
          this.nextCreateNpcTime = offlineAtk[0] + randomRangeInt(1, 19);
          var seconds = (this.nextCreateNpcTime - solt) * 60 * 1000 + TimeTools.getCurTime();
          console.log("下一次产出npc的时间点：" + new Date(seconds).toString());
          this._intervalId = setInterval(function () {
            if (TimeTools.getCurTime() > seconds) {
              //根据概率，计算攻打
              if (offlineAtk[1] >= Math.random()) {
                console.log("产出成功！");

                var npc = _this2.createSceneNpc(TimeTools.getCurTime(), _this2.npcLimnit, _this2.sceneList);

                PlayerFench.getInstance().behit(npc);

                GameResponces._event.emit(GameResponces.createNewSceneNpc, npc);

                _this2.dateManager.playerData.sceneNpcList = _this2.sceneList;

                _this2.dateManager.savePlayData();
              } else {
                console.log("按概率产出失败！");
              }

              NpcManager.getInstance().initOnlineNpc();
            }
          }, 1000);
        };

        _proto.stopOnlineNpcLogic = function stopOnlineNpcLogic() {
          if (this._intervalId) clearInterval(this._intervalId);
        } //离线npc逻辑
        ;

        _proto.iniOffLineNpcLogic = function iniOffLineNpcLogic() {
          var interval = 20 * 60 * 1000;
          var curtime = TimeTools.getCurTime();
          var lasttime = this.dateManager.timeDate.offLinefram;
          var tempTime = curtime;
          tempTime -= interval;
          var cnt = 72;

          while (tempTime > lasttime && cnt > 0) {
            cnt--;
            tempTime -= interval;
            var s = new Date(tempTime);
            var solt = s.getHours() * 60 + s.getMinutes();
            var atkIndex = this.getNpcOfflineAtckIndex(solt);
            curtime -= interval - randomRangeInt(1, 19) * 60 * 1000;
            var offlineAtk = Utils.getSplitNumbers(this.homeCfg.atktime[atkIndex].OffLineATKRate, "_"); //根据概率，计算攻打

            if (offlineAtk[1] >= Math.random()) {
              var npc = this.createSceneNpc(curtime, this.npcLimnit, this.sceneList);
              this.offNpcList.push(npc);
            }
          }

          this.offtime = TimeTools.getCurTime() - this.dateManager.timeDate.offLinefram;
          UIManager.getInstance().getPanel(Panel_Main).showPopReport(this.offNpcList, this.offtime);
          this.dateManager.playerData.sceneNpcList = this.sceneList;
          this.dateManager.savePlayData();
        };

        _proto.createSceneNpc = function createSceneNpc(farme, npclimit, npcList) {
          var npc = this.createNpc(false); //生成动物尸体数

          var cnt = 0;
          var houselv = npc.lv;
          var limit = this.homeCfg.house[houselv].LimitStorage;

          if ((npc.lv - 2) * DataManager.getInstance().playerData.fenchLv < 0) {
            cnt = Math.ceil(randomRange(0.7, 1) * limit);
          } else {
            cnt = Math.ceil(randomRange(0.1, 1) * limit);
          }

          var list = AnimalFarm.getInstance().buildNpcAnimals(npc, cnt); //------------

          npc.animalCorpseList = list;
          npc.atkTimeFrame = farme;
          var rote = 0.5 + 0.025 * (npc.lv - this.dateManager.playerData.homeLv) - 0.025 * (this.dateManager.playerData.fenchLv * 2 - this.dateManager.playerData.homeLv);
          npc.isWin = rote > Math.random();

          if (npcList.length >= npclimit) {
            npcList.shift();
          }

          npcList.push(npc);
          return npc;
        };

        _proto.createGuideNpc = function createGuideNpc(winFlag) {
          var npc = this.createSceneNpc(TimeTools.getCurTime(), this.npcLimnit, this.sceneList);
          npc.isWin = winFlag;
          PlayerFench.getInstance().behit(npc);
          return npc;
        };

        _proto.getNpcOfflineAtckIndex = function getNpcOfflineAtckIndex(solt) {
          var timeIndex = 0;

          for (var index = 0; index < this.homeCfg.atktime.length; index++) {
            var item = Utils.getSplitNumbers(this.homeCfg.atktime[index].OffLineATKRate, "_")[0];
            var nextItem = Utils.getSplitNumbers(this.homeCfg.atktime[index + 1].OffLineATKRate, "_")[0];

            if (nextItem && solt >= item && solt < nextItem) {
              timeIndex = index;
              break;
            }
          }

          return timeIndex;
        };

        _proto.getNpcOnlineAtckIndex = function getNpcOnlineAtckIndex(solt) {
          var timeIndex = 0;

          for (var index = 0; index < this.homeCfg.atktime.length; index++) {
            var item = Utils.getSplitNumbers(this.homeCfg.atktime[index].OnLineATKRate, "_")[0];
            var nextItem = Utils.getSplitNumbers(this.homeCfg.atktime[index + 1].OnLineATKRate, "_")[0];

            if (nextItem && solt >= item && solt < nextItem) {
              timeIndex = index;
              break;
            }
          }

          return timeIndex;
        };

        _proto.getAnimalCorpseTotallCoin = function getAnimalCorpseTotallCoin() {
          var _this3 = this;

          var totall = 0;
          this.sceneList.forEach(function (npc) {
            npc.animalCorpseList.forEach(function (animalType) {
              totall += _this3.homeCfg.animal[animalType].DeadPrice;
            });
          });
          return totall;
        };

        _proto.clearSceneNpc = function clearSceneNpc() {
          this.dateManager.playerData.sceneNpcList = this.sceneList = [];
          DataManager.getInstance().savePlayData();
        } //删除npc选择列表里的单个npc
        ;

        _proto.deleteCurNpc = function deleteCurNpc() {
          var index = this.npcViewList.indexOf(this.curNpc);

          if (index >= 0) {
            this.npcViewList[index] = this.createNpc(true);
            this.dateManager.playerData.npcList = this.npcViewList;
            this.dateManager.savePlayData();
            UIManager.getInstance().getPanel(Panel_Main).Pop_npc.init();
            UIManager.getInstance().getPanel(Panel_Main).Pop_npc.destroyNpcItem();
            return;
          }
        };

        _proto.deleteSceneNpc = function deleteSceneNpc(npc) {
          var sceneNpc = this.sceneList.indexOf(npc);

          if (sceneNpc >= 0) {
            this.sceneList.splice(sceneNpc, 1);
            this.dateManager.playerData.sceneNpcList = this.sceneList;
            this.dateManager.savePlayData();
            return;
          }
        };

        _createClass(NpcManager, [{
          key: "sceneList",
          get: function get() {
            return this._sceneList;
          },
          set: function set(value) {
            this._sceneList = value;
          }
        }]);

        return NpcManager;
      }(), _class2._instance = void 0, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NpcView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UIManager.ts', './Utils.ts', './Panel_Main.ts', './CfgData.ts', './LabelEx.ts', './SdkManager.ts', './GameResponces.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Sprite, Label, Button, v3, instantiate, Component, UIManager, Utils, Panel_Main, CfgData, LabelEx, SdkManager, GameResponces;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Sprite = module.Sprite;
      Label = module.Label;
      Button = module.Button;
      v3 = module.v3;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      Panel_Main = module.Panel_Main;
    }, function (module) {
      CfgData = module.CfgData;
    }, function (module) {
      LabelEx = module.LabelEx;
    }, function (module) {
      SdkManager = module.SdkManager;
    }, function (module) {
      GameResponces = module.GameResponces;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "df92c3JzxNBLbig78OxCb2W", "NpcView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NpcView = exports('NpcView', (_dec = ccclass('NpcView'), _dec2 = property({
        type: Node,
        displayName: "房子prefab"
      }), _dec3 = property({
        type: Node,
        displayName: "栅栏prefab"
      }), _dec4 = property({
        type: Sprite,
        displayName: "房子"
      }), _dec5 = property({
        type: Sprite,
        displayName: "栅栏"
      }), _dec6 = property({
        type: Sprite,
        displayName: "头像"
      }), _dec7 = property({
        type: LabelEx,
        displayName: "名字"
      }), _dec8 = property({
        type: Label,
        displayName: "等级"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(NpcView, _Component);

        function NpcView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "prefab_house", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fence_house", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sp", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fence", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "head", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labname", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lablv", _descriptor7, _assertThisInitialized(_this));

          _this.npc = void 0;
          _this.btn_game = void 0;
          _this.fenceView = void 0;
          return _this;
        }

        var _proto = NpcView.prototype;

        _proto.start = function start() {
          var _this2 = this;

          this.btn_game = this.getComponent(Button);
          this.btn_game.node.on(Button.EventType.CLICK, function () {
            GameResponces._event.emit(GameResponces.FingerNPC);

            UIManager.getInstance().getPanel(Panel_Main).gameStart(_this2.npc);
            SdkManager.getInstance().SendEvent(CfgData.getInstance().getEventData().getDotEvent(1).id, null);
          }, this);
        };

        _proto.init = function init(npc) {
          var _this3 = this;

          this.npc = npc;
          this.labname.orgVlaue = npc.npcName;
          this.lablv.string = "【" + CfgData.getInstance().getHomeCfg().npc[npc.lv].Level + "级】";
          var pos = v3(0, 0, 0);
          var house = instantiate(this.prefab_house.children[npc.houseImg]);
          this.fenceView = instantiate(this.fence_house.children[npc.fenceLv]);
          this.sp.node.addChild(house);
          Utils.urlToSpriteFrame(npc.headUrl, function (res) {
            if (_this3.head) _this3.head.spriteFrame = res;
          });
          house.setPosition(pos);
          this.fence.node.addChild(this.fenceView);
          this.fenceView.setPosition(pos);
          this.selectBrokenView();
        };

        _proto.showChildeView = function showChildeView(viewNode, index) {
          viewNode.children.forEach(function (childeNode) {
            childeNode.active = false;
          });
          if (viewNode.children.length - 1 >= index) viewNode.children[index].active = true;else viewNode.children[viewNode.children.length - 1].active = true;
        } //栅栏破损状态
        ;

        _proto.selectBrokenView = function selectBrokenView() {
          var strs = CfgData.getInstance().getHomeCfg().fence[0].BrokenState.split(',');
          var state = new Array();
          strs.forEach(function (element) {
            state.push(Number.parseFloat(element));
          });
          var p = this.npc.residualHP;
          var select = 0;

          if (p < 0.99) {
            for (var index = 0; index < state.length; index++) {
              var element = state[index]; //防止配置错误

              if (index + 1 >= state.length) {
                select = state.length - 1;
                break;
              }

              var nextelement = state[index + 1];

              if (p < element && p >= nextelement) {
                select = index;
                break;
              }
            }
          }

          this.showChildeView(this.fenceView, select);
        };

        return NpcView;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "prefab_house", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "fence_house", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "sp", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "fence", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "head", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "labname", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "lablv", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Panel_Antikit.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AntiAddictionKit.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, EditBox, Button, Component, AntiAddictionKit;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      EditBox = module.EditBox;
      Button = module.Button;
      Component = module.Component;
    }, function (module) {
      AntiAddictionKit = module.AntiAddictionKit;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "e601czg9GFGG5qCaSwpN1Af", "Panel_Antikit", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Panel_Antikit = exports('Panel_Antikit', (_dec = ccclass('Panel_Antikit'), _dec2 = property({
        type: EditBox,
        visible: true,
        displayName: "名字"
      }), _dec3 = property({
        type: EditBox,
        visible: true,
        displayName: "身份证"
      }), _dec4 = property({
        type: Button,
        visible: true,
        displayName: "提交"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Panel_Antikit, _Component);

        function Panel_Antikit() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "box_name", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "box_number", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btn_ok", _descriptor3, _assertThisInitialized(_this));

          _this.okCallBack = void 0;
          return _this;
        }

        var _proto = Panel_Antikit.prototype;

        _proto.start = function start() {
          this.btn_ok.node.on(Button.EventType.CLICK, this.clickRealNameAuth, this);
        };

        _proto.clickRealNameAuth = function clickRealNameAuth() {
          // console.log("-------Name:"+this.box_name.string);
          AntiAddictionKit.getIntance().realNameAuth(this.box_name.string, this.box_number.string, this.okCallBack);
        };

        _proto.addEvent = function addEvent(okCallBack) {
          this.okCallBack = okCallBack;
        };

        return Panel_Antikit;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "box_name", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "box_number", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btn_ok", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Panel_AntikitChild.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, game, Component, Utils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      game = module.game;
      Component = module.Component;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "d6b01s7t6ZMkbC1JAQ2yrPO", "Panel_AntikitChild", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Panel_AntikitChild = exports('Panel_AntikitChild', (_dec = ccclass('Panel_AntikitChild'), _dec2 = property({
        type: Button,
        visible: true,
        displayName: "同意"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Panel_AntikitChild, _Component);

        function Panel_AntikitChild() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "btn_ok", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = Panel_AntikitChild.prototype;

        _proto.start = function start() {
          this.btn_ok.node.on(Button.EventType.CLICK, function () {
            if (Utils.isNativePlatform()) {
              game.end();
            } else if (Utils.isWxPlatform()) {
              //@ts-ignore
              wx.exitMiniProgram();
            } else if (Utils.isDyPlatform()) {
              //@ts-ignore
              tt.exitMiniProgram();
            }
          }, this);
        };

        return Panel_AntikitChild;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "btn_ok", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Panel_BoxReward.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BasePanel.ts', './UIManager.ts', './Pop_game.ts', './GameManager.ts', './Panel_Game.ts', './SdkManager.ts', './CfgData.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, Node, Label, SpriteFrame, Button, Sprite, BasePanel, UIManager, PropType, GameManager, Panel_Game, SdkManager, adEnum, CfgData;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      SpriteFrame = module.SpriteFrame;
      Button = module.Button;
      Sprite = module.Sprite;
    }, function (module) {
      BasePanel = module.BasePanel;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      PropType = module.PropType;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      Panel_Game = module.Panel_Game;
    }, function (module) {
      SdkManager = module.SdkManager;
      adEnum = module.adEnum;
    }, function (module) {
      CfgData = module.CfgData;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class4, _class5, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "9b254PvNdZJ/6oKFpW8LMHc", "Panel_BoxReward", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PropRewardView = exports('PropRewardView', (_dec = ccclass('PropRewardView'), _dec2 = property({
        type: Node,
        displayName: "根"
      }), _dec3 = property({
        type: Label,
        displayName: "数量"
      }), _dec(_class = (_class2 = function PropRewardView() {
        _initializerDefineProperty(this, "root", _descriptor, this);

        _initializerDefineProperty(this, "lab_cnt", _descriptor2, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "root", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lab_cnt", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      var Panel_BoxReward = exports('Panel_BoxReward', (_dec4 = ccclass('Panel_BoxReward'), _dec5 = property({
        type: [PropRewardView],
        visible: true,
        displayName: "道具view"
      }), _dec6 = property({
        type: [SpriteFrame],
        visible: true,
        displayName: "道具sp"
      }), _dec7 = property({
        type: Node,
        displayName: "奖励面板"
      }), _dec8 = property({
        type: Button,
        displayName: "广告"
      }), _dec9 = property({
        type: Button,
        displayName: "领取"
      }), _dec4(_class4 = (_class5 = /*#__PURE__*/function (_BasePanel) {
        _inheritsLoose(Panel_BoxReward, _BasePanel);

        function Panel_BoxReward() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePanel.call.apply(_BasePanel, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "propViews", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sps", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "reward", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btn_ad", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btn_get", _descriptor7, _assertThisInitialized(_this));

          _this.panel_game = void 0;
          _this.boxList = [];
          _this.box = void 0;
          return _this;
        }

        var _proto = Panel_BoxReward.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          this.panel_game = UIManager.getInstance().getPanel(Panel_Game);
          this.btn_ad.node.on(Button.EventType.CLICK, this.clickAd, this);
          this.btn_get.node.on(Button.EventType.CLICK, function () {
            _this2.clickReward(); //   SdkManager.getInstance().SendEvent(CfgData.getInstance().getEventData().getDotEvent(12).id,null);

          }, this);
        };

        _proto.onEnable = function onEnable() {
          this.reward.active = false;
        };

        _proto.onDisable = function onDisable() {
          this.reward.active = false;
        };

        _proto.clickAd = function clickAd() {
          var _this3 = this;

          SdkManager.getInstance().showAd(adEnum.reward, function (isended) {
            if (!isended) return;
            var prop = GameManager.getInstance().prop;

            for (var index = 0; index < _this3.box.ProTypes.length; index++) {
              var propType = _this3.box.ProTypes[index];
              if (propType == PropType.ChangeAnimal) prop.changeAnimalBoxCnt += _this3.box.PropCnt[index];
              if (propType == PropType.GetAnimals) prop.bronNewAnimalsBoxcnt += _this3.box.PropCnt[index];
              if (propType == PropType.ReflashAnimal) prop.reflashBoxCnt += _this3.box.PropCnt[index];
            }

            _this3.clickReward();

            SdkManager.getInstance().SendEvent(CfgData.getInstance().getEventData().getDotEvent(12).id, null);
          }, this);
        };

        _proto.clickReward = function clickReward() {
          var _this4 = this;

          UIManager.getInstance().hidePanel(Panel_BoxReward);
          this.panel_game.updatePropCnt();
          this.boxList = this.boxList.filter(function (a) {
            return a != _this4.box;
          });
          if (this.boxList.length > 0) this.scheduleOnce(function () {
            UIManager.getInstance().showPanel(Panel_BoxReward);

            _this4.showReward(_this4.boxList[0]);
          }, 0.3);
        };

        _proto.init = function init(box) {
          this.boxList.push(box);

          if (this.boxList.length <= 1) {
            this.showReward(box);
          }
        };

        _proto.showReward = function showReward(box) {
          this.box = box;
          var prop = GameManager.getInstance().prop;
          this.propViews.forEach(function (propView) {
            propView.root.active = false;
          });

          for (var index = 0; index < box.ProTypes.length; index++) {
            var propType = box.ProTypes[index];
            if (propType == PropType.ChangeAnimal) prop.changeAnimalBoxCnt += box.PropCnt[index];
            if (propType == PropType.GetAnimals) prop.bronNewAnimalsBoxcnt += box.PropCnt[index];
            if (propType == PropType.ReflashAnimal) prop.reflashBoxCnt += box.PropCnt[index];
            this.propViews[index].root.active = true;
            console.log("刷出来的道具类型：" + propType);
            this.propViews[index].root.children[0].getComponent(Sprite).spriteFrame = this.sps[propType];
            this.propViews[index].lab_cnt.string = box.PropCnt[index].toString();
          }

          this.reward.active = true;
        };

        return Panel_BoxReward;
      }(BasePanel), (_descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "propViews", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "sps", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class5.prototype, "reward", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class5.prototype, "btn_ad", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class5.prototype, "btn_get", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class5)) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Panel_Game.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AnimalFarm.ts', './BasePanel.ts', './GameResponces.ts', './GameManager.ts', './Player.ts', './UIManager.ts', './SwtichAnimal.ts', './Pop_game.ts', './Panel_GameFinish.ts', './LabelEx.ts', './DataManager.ts', './Pop_Notfication.ts', './Pop_set.ts', './Pop_help.ts', './DifficultyManager.ts', './SdkManager.ts', './CfgData.ts', './Pop_taunh.ts', './Utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ProgressBar, Node, Label, Sprite, Button, v3, instantiate, math, tween, HomeAnimalInfo, BasePanel, GameResponces, GameManager, GameFinishState, AnimalType, UIManager, SwtichAnimal, Pop_game, PropType, Panel_GameFinish, LabelEx, DataManager, Pop_Notfication, Pop_set, Pop_help, DifficultyManager, SdkManager, CfgData, Pop_taunh, Utils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ProgressBar = module.ProgressBar;
      Node = module.Node;
      Label = module.Label;
      Sprite = module.Sprite;
      Button = module.Button;
      v3 = module.v3;
      instantiate = module.instantiate;
      math = module.math;
      tween = module.tween;
    }, function (module) {
      HomeAnimalInfo = module.HomeAnimalInfo;
    }, function (module) {
      BasePanel = module.BasePanel;
    }, function (module) {
      GameResponces = module.GameResponces;
    }, function (module) {
      GameManager = module.GameManager;
      GameFinishState = module.GameFinishState;
    }, function (module) {
      AnimalType = module.AnimalType;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      SwtichAnimal = module.SwtichAnimal;
    }, function (module) {
      Pop_game = module.Pop_game;
      PropType = module.PropType;
    }, function (module) {
      Panel_GameFinish = module.Panel_GameFinish;
    }, function (module) {
      LabelEx = module.LabelEx;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      Pop_Notfication = module.Pop_Notfication;
    }, function (module) {
      Pop_set = module.Pop_set;
    }, function (module) {
      Pop_help = module.Pop_help;
    }, function (module) {
      DifficultyManager = module.DifficultyManager;
    }, function (module) {
      SdkManager = module.SdkManager;
    }, function (module) {
      CfgData = module.CfgData;
    }, function (module) {
      Pop_taunh = module.Pop_taunh;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31;

      cclegacy._RF.push({}, "3dd8euK1xpE04OU+7fVz76f", "Panel_Game", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Panel_Game = exports('Panel_Game', (_dec = ccclass('Panel_Game'), _dec2 = property({
        type: ProgressBar,
        displayName: "boss血条"
      }), _dec3 = property({
        type: ProgressBar,
        displayName: "其他血条"
      }), _dec4 = property({
        type: Node,
        displayName: "伤害"
      }), _dec5 = property({
        type: Label,
        displayName: "动物总数量"
      }), _dec6 = property({
        type: LabelEx,
        displayName: "玩家名字"
      }), _dec7 = property({
        type: Sprite,
        displayName: "玩家头像"
      }), _dec8 = property({
        type: Button,
        displayName: "btn_animalInfo"
      }), _dec9 = property({
        type: Button,
        displayName: "animal_other"
      }), _dec10 = property({
        type: Node,
        displayName: "动物info"
      }), _dec11 = property({
        type: Node,
        displayName: "hpParent"
      }), _dec12 = property({
        type: Node,
        displayName: "hitParent"
      }), _dec13 = property({
        type: Node,
        displayName: "认输提示"
      }), _dec14 = property({
        type: Button,
        displayName: "设置"
      }), _dec15 = property({
        type: Button,
        displayName: "刷新动物"
      }), _dec16 = property({
        type: Label,
        displayName: "刷新动物可用次数"
      }), _dec17 = property({
        type: Button,
        displayName: "改变动物类型"
      }), _dec18 = property({
        type: Label,
        displayName: "改变动物类型可用次数"
      }), _dec19 = property({
        type: Button,
        displayName: "出生动物"
      }), _dec20 = property({
        type: Label,
        displayName: "出生动物可用次数"
      }), _dec21 = property({
        type: Node,
        displayName: "popParent"
      }), _dec22 = property({
        type: Node,
        displayName: "Pop_Swtich"
      }), _dec23 = property({
        type: Pop_game,
        displayName: "看广告换动物界面"
      }), _dec24 = property({
        type: Pop_game,
        displayName: "看广告召唤动物"
      }), _dec25 = property({
        type: Pop_game,
        displayName: "看广刷新动物"
      }), _dec26 = property({
        type: Node,
        displayName: "逃跑提示界面"
      }), _dec27 = property({
        type: Pop_set,
        displayName: "设置"
      }), _dec28 = property({
        type: Pop_help,
        displayName: "帮忙界面"
      }), _dec29 = property({
        type: Node,
        displayName: "帮忙界面背景"
      }), _dec30 = property({
        type: LabelEx,
        displayName: "帮忙倒计时"
      }), _dec31 = property({
        type: Pop_taunh,
        displayName: "嘲讽面板"
      }), _dec32 = property({
        type: [Node],
        displayName: "swtichs"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_BasePanel) {
        _inheritsLoose(Panel_Game, _BasePanel);

        function Panel_Game() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePanel.call.apply(_BasePanel, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "bossHpBar", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "otherHpBar", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tempHit", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lab_animalCnt", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "playerName", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "playerHead", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btn_animalInfo", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animal_other", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "AnimalInfo", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hpParent", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hitParent", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tip_renshu", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btn_set", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btn_reflash", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lab_reflash", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btn_changeAnimaltype", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lab_change", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btn_bronNewAnimals", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lab_bron", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "popParent", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Pop_Swtich", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Pop_ChangeAnimalAd", _descriptor22, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Pop_GetAnimalsAd", _descriptor23, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Pop_ReflashAd", _descriptor24, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Pop_runAwayTip", _descriptor25, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Pop_set", _descriptor26, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Pop_help", _descriptor27, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Pop_helpNode", _descriptor28, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "helpTime", _descriptor29, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Pop_taunh", _descriptor30, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "swtichs", _descriptor31, _assertThisInitialized(_this));

          _this.hpBars = new Array();
          _this.isfix = false;
          _this.lastAnimalCnt = void 0;
          _this.isAdProp = false;
          return _this;
        }

        var _proto = Panel_Game.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          GameResponces._event.on(GameResponces.createHpBar, this.createHpBar, this);

          var not = this.Pop_runAwayTip.getComponent(Pop_Notfication);
          not.btn_Confirm.node.on(Button.EventType.CLICK, this.clickBack, this);
          not.btn_Cancel.node.on(Button.EventType.CLICK, function () {
            _this2.popParent.active = false;
            _this2.Pop_runAwayTip.active = false;
          }, this);
          this.btn_reflash.node.on(Button.EventType.CLICK, this.showPopreflashAd, this);
          this.btn_changeAnimaltype.node.on(Button.EventType.CLICK, this.showPopChangeAnimalAd, this);
          this.btn_bronNewAnimals.node.on(Button.EventType.CLICK, this.showPopGetAnimalsAd, this);
          this.animal_other.node.on(Button.EventType.CLICK, this.clickAnimalOtherClose, this);
          this.btn_animalInfo.node.on(Button.EventType.CLICK, this.showAnimalInfo, this);
          this.btn_set.node.on(Button.EventType.CLICK, this.showSet, this);
          this.Pop_Swtich.getChildByName("Top_step02").getComponentInChildren(Button).node.on(Button.EventType.CLICK, this.cancelSwtichPop, this);

          GameResponces._event.on(GameResponces.onGameFinish, this.onGameFinish, this);
        };

        _proto.onEnable = function onEnable() {
          this.isfix = false;
          this.AnimalInfo.active = false;
          this.animal_other.node.active = false;
          this.tip_renshu.active = false;
          this.btn_changeAnimaltype.getComponent(Sprite).grayscale = false;
          this.btn_bronNewAnimals.getComponent(Sprite).grayscale = false;
          this.btn_reflash.getComponent(Sprite).grayscale = false;
          this.helpTime.node.parent.active = false;
        };

        _proto.onDisable = function onDisable() {
          this.hidePropTip();
          this.Pop_set.unscheduleAllCallbacks();
          this.unscheduleAllCallbacks();
        };

        _proto.showRunAwayTip = function showRunAwayTip() {
          this.popParent.active = true;
          this.Pop_runAwayTip.active = true;
        };

        _proto.hideRunAwayTip = function hideRunAwayTip() {
          this.Pop_runAwayTip.active = false;
          this.popParent.active = false;
        };

        _proto.showHelp = function showHelp() {
          var _this3 = this;

          var player = DataManager.getInstance().playerData;

          if (player.friendHelp > 0) {
            this.scheduleOnce(function () {
              _this3.Pop_helpNode.active = true;
              _this3.Pop_help.node.active = true;
              SdkManager.getInstance().SendEvent(CfgData.getInstance().getEventData().getDotEvent(21).id, null);
            }, 2);
          } else {
            this.hideHelp();
          }
        };

        _proto.hideHelp = function hideHelp() {
          this.Pop_helpNode.active = false;
          this.Pop_help.node.active = false;
          this.helpTime.node.parent.active = false;
        };

        _proto.sethelpTimePos = function sethelpTimePos(wpos) {
          var pos = v3();

          GameManager.getInstance()._camera.camera.update();

          pos = GameManager.getInstance()._camera.convertToUINode(wpos, this.helpTime.node.parent.parent);
          this.helpTime.node.parent.setPosition(pos);
        };

        _proto.showSet = function showSet() {
          this.popParent.active = true;
          this.Pop_set.node.active = true;
          this.Pop_set.showPopSet();
        };

        _proto.hideSet = function hideSet() {
          this.popParent.active = false;
          this.Pop_set.node.active = false;
        };

        _proto.clickBack = function clickBack() {
          this.onGameFinish(GameFinishState.RunAway, -1);
          this.hideRunAwayTip();
          SdkManager.getInstance().SendEvent(CfgData.getInstance().getEventData().getDotEvent(17).id, null);
        };

        _proto.closePopPanel = function closePopPanel() {
          this.popParent.active = false;
        };

        _proto.onGameStart = function onGameStart() {
          var _this4 = this;

          var player = DataManager.getInstance().playerData;
          this.playerName.orgVlaue = player.playerName;

          if (player.headUrl) {
            Utils.urlToSpriteFrame(player.headUrl, function (res) {
              if (_this4.playerHead) {
                _this4.playerHead.spriteFrame = res;
              }
            });
          }

          this.Pop_set.onGameStart();
          this.showHelp();
          this.updatePropCnt();
          this.updateAnimalCntView();
          SdkManager.getInstance().updateShareTimes();
          SdkManager.getInstance().StartRecord();
        };

        _proto.onGameFinish = function onGameFinish(gamefinishState, losetype) {
          DifficultyManager.onGameFinish(gamefinishState);
          GameManager.getInstance().gameHelpManager.onGameFinish(gamefinishState);
          GameManager.getInstance().mapInfo.stopTaunh();
          this.hideNpcTaunh();
          this.hideHpBars();
          UIManager.getInstance().setUIMaskActive(true);
          SdkManager.getInstance().StopRecord(function (bl) {
            var gamefinish = UIManager.getInstance().showPanel(Panel_GameFinish);
            if (GameManager.getInstance().gameHelpManager.helpCoroutine != null) gamefinish.tip.active = true;else gamefinish.tip.active = false;
            gamefinish.shwoGameStateView(GameManager.getInstance().mapInfo.npc, gamefinishState, losetype, bl);
          });
        };

        _proto.hideHpBars = function hideHpBars() {
          this.hpBars.forEach(function (element) {
            element.active = false;
          });
        };

        _proto.destroyAllHpBars = function destroyAllHpBars() {
          this.hpBars.forEach(function (element) {
            var _element;

            (_element = element) == null ? void 0 : _element.destroy();
            element = null;
          });
        };

        _proto.createHpBar = function createHpBar(hpStye, pos, call) {
          var tmepHpBar = null;

          if (hpStye == 0) {
            tmepHpBar = this.bossHpBar;
          } else {
            tmepHpBar = this.otherHpBar;
          }

          var temp = instantiate(tmepHpBar.node);
          this.hpParent.addChild(temp);
          temp.setPosition(pos);
          this.hpBars.push(temp);
          call(temp.getComponent(ProgressBar));
        };

        _proto.convertTohpNode = function convertTohpNode(wpos) {
          var pos = v3();

          GameManager.getInstance()._camera.camera.update();

          pos = GameManager.getInstance()._camera.convertToUINode(wpos, this.hpParent);
          return pos;
        };

        _proto.cancelSwtichPop = function cancelSwtichPop() {
          if (this.isAdProp) {
            GameManager.getInstance().prop.cancelChanAnimal();
            this.showSwtichPop();
          }
        };

        _proto.showSwtichPop = function showSwtichPop() {
          this.Pop_Swtich.active = true;
          this.Pop_Swtich.getChildByName("Top_step01").active = true;
          this.Pop_Swtich.getChildByName("Top_step02").active = false;
          this.popParent.active = false;
          this.swtichs.forEach(function (element) {
            element.position = v3(0, 3000, 0);
          });
          GameManager.getInstance().prop.showAnimalModels([AnimalType.sheep, AnimalType.cow, AnimalType.pig, AnimalType.zebra, AnimalType.elephant]);
        };

        _proto.hideSwtichPop = function hideSwtichPop() {
          this.Pop_Swtich.active = false;
        };

        _proto.clickAnimal = function clickAnimal(animal, isAdProp) {
          this.isAdProp = isAdProp;
          var cnt = 0;
          var animalTypes = new Array();
          this.Pop_Swtich.getChildByName("Top_step01").active = false;
          this.Pop_Swtich.getChildByName("Top_step02").active = true;
          this.Pop_Swtich.getChildByPath("Top_step02/lab_tip").active = isAdProp;

          if (animal.animalType == AnimalType.pig) {
            cnt = 2;
            animalTypes.push(AnimalType.sheep);
            animalTypes.push(AnimalType.cow);
          } else if (animal.animalType == AnimalType.cow) {
            cnt = 2;
            animalTypes.push(AnimalType.sheep);
            animalTypes.push(AnimalType.pig);
          } else if (animal.animalType == AnimalType.sheep) {
            cnt = 2;
            animalTypes.push(AnimalType.cow);
            animalTypes.push(AnimalType.pig);
          } else {
            cnt = 3;
            animalTypes.push(AnimalType.sheep);
            animalTypes.push(AnimalType.cow);
            animalTypes.push(AnimalType.pig);
          }

          var x = GameManager.getInstance()._size.x;

          var swtich = null; //根据动物种类选择不同的ui用于展示

          if (cnt >= 3) {
            //左边
            if (animal.temPos.x < x * 0.5) {
              swtich = this.swtichs[1];
            } else {
              swtich = this.swtichs[2];
            }
          } else {
            swtich = this.swtichs[0];
          }

          var setSwIndex = 0; //设置动物类型

          for (var index = 0; index < cnt; index++) {
            var sw = swtich.children[setSwIndex].getComponent(SwtichAnimal);
            var animalType = animalTypes[index];

            if (animal.animalType != animalType) {
              sw.setAnimalType(animalType, isAdProp);
              setSwIndex++;
            }
          }

          var pos = v3();

          GameManager.getInstance()._camera.camera.update();

          pos = GameManager.getInstance()._camera.convertToUINode(animal.node.worldPosition, this.Pop_Swtich);
          swtich.setPosition(pos); //this.swtich.
        };

        _proto.showHit = function showHit(wpos, hit) {
          var pos = v3();

          GameManager.getInstance()._camera.camera.update();

          pos = GameManager.getInstance()._camera.convertToUINode(wpos, this.hitParent);
          pos.add3f(math.randomRange(-100, 100), math.randomRange(-100, 100), 0);
          var tmep = instantiate(this.tempHit);
          this.hitParent.addChild(tmep);
          tmep.setPosition(pos);
          tmep.getComponentInChildren(Label).string = "-" + hit.toString();
        };

        _proto.clickAnimalOtherClose = function clickAnimalOtherClose() {
          this.unschedule(this.hideAnimalinfo);
          this.hideAnimalinfo();
        };

        _proto.hideAnimalinfo = function hideAnimalinfo() {
          this.AnimalInfo.active = false;
          this.animal_other.node.active = false;
        };

        _proto.showAnimalInfo = function showAnimalInfo() {
          if (GameManager.getInstance()) {
            GameResponces._event.emit(GameResponces.FingerAnimalDetails);

            this.AnimalInfo.active = true;
            this.animal_other.node.active = true;
            var list = new Array();

            var _listAnimalMap = new Map();

            GameManager.getInstance()._animalLibrary.forEach(function (element) {
              list.push(element);
            });

            list.forEach(function (element) {
              var animal = _listAnimalMap.get(element);

              if (!animal) {
                var am = new HomeAnimalInfo();
                am.AnimalTy = element;
                am.Cnt = 1;

                _listAnimalMap.set(element, am);
              } else {
                animal.Cnt++;
              }
            }); //显示ui

            for (var index = 0; index < this.AnimalInfo.children.length; index++) {
              var element = this.AnimalInfo.children[index];
              var lb = element.getComponentInChildren(Label);

              var animal = _listAnimalMap.get(index);

              if (animal) {
                lb.string = animal.Cnt.toString();
              } else {
                lb.string = "0";
              }
            }

            this.scheduleOnce(this.hideAnimalinfo, 2);
          }
        };

        _proto.updatePropCnt = function updatePropCnt() {
          var prop = GameManager.getInstance().prop;
          this.showPropLabel(prop.reflashBoxCnt, this.lab_reflash);
          this.showPropLabel(prop.changeAnimalBoxCnt, this.lab_change);
          this.showPropLabel(prop.bronNewAnimalsBoxcnt, this.lab_bron);
          this.updatePropViewState(PropType.ChangeAnimal);
          this.updatePropViewState(PropType.GetAnimals);
          this.updatePropViewState(PropType.ReflashAnimal);
        };

        _proto.showPropLabel = function showPropLabel(cnt, lab) {
          if (cnt > 0) {
            lab.node.parent.active = true;
            lab.node.active = true;
            lab.string = cnt.toString();
          } else {
            lab.node.parent.active = false;
            lab.node.active = false;
          }
        };

        _proto.showPopreflashAd = function showPopreflashAd() {
          var prop = GameManager.getInstance().prop;

          GameResponces._event.emit(GameResponces.FingerRefresh);

          if (prop.reflashBoxCnt > 0) {
            prop.reflashAnimal();
            this.updatePropCnt();
            this.hidePropTip();
            return;
          }

          if (prop.reflashAdCnt > 0) {
            this.popParent.active = true;
            this.Pop_ReflashAd.node.active = true;
          }

          this.hidePropTip();
        };

        _proto.showPopChangeAnimalAd = function showPopChangeAnimalAd() {
          var prop = GameManager.getInstance().prop;

          if (prop.changeAnimalBoxCnt > 0) {
            this.showSwtichPop();
            this.updatePropCnt();
            this.hidePropTip();
            return;
          }

          if (prop.changeAnimalAdCnt > 0) {
            this.popParent.active = true;
            this.Pop_ChangeAnimalAd.node.active = true;
          }

          this.hidePropTip();
        };

        _proto.showPopGetAnimalsAd = function showPopGetAnimalsAd() {
          var prop = GameManager.getInstance().prop;

          if (prop.bronNewAnimalsBoxcnt > 0) {
            prop.bronNewAnimals();
            this.updatePropCnt();
            this.hidePropTip();
            return;
          }

          if (prop.bronNewAnimalsAdcnt > 0) {
            this.popParent.active = true;
            this.Pop_GetAnimalsAd.node.active = true;
          }

          this.hidePropTip();
        };

        _proto.updatePropViewState = function updatePropViewState(propType) {
          var prop = GameManager.getInstance().prop;

          switch (propType) {
            case PropType.ChangeAnimal:
              if (prop.changeAnimalBoxCnt <= 0 && prop.changeAnimalAdCnt <= 0) {
                this.btn_changeAnimaltype.getComponent(Sprite).grayscale = true;
              } else {
                this.btn_changeAnimaltype.getComponent(Sprite).grayscale = false;
              }

              break;

            case PropType.GetAnimals:
              if (prop.bronNewAnimalsBoxcnt <= 0 && prop.bronNewAnimalsAdcnt <= 0) {
                this.btn_bronNewAnimals.getComponent(Sprite).grayscale = true;
              } else {
                this.btn_bronNewAnimals.getComponent(Sprite).grayscale = false;
              }

              break;

            case PropType.ReflashAnimal:
              if (prop.reflashAdCnt <= 0 && prop.reflashBoxCnt <= 0) {
                this.btn_reflash.getComponent(Sprite).grayscale = true;
              } else {
                this.btn_reflash.getComponent(Sprite).grayscale = false;
              }

              break;
          }
        } //快修，把动物还原
        ;

        _proto.fixFench = function fixFench() {
          var _this5 = this;

          this.isfix = true;
          this.lab_animalCnt.node.scale = v3(0.5, 0.5, 0.5);
          tween(this.lab_animalCnt.node).to(0.5, {
            scale: v3(1, 1, 1)
          }, {
            easing: "backOut"
          }).call(function () {
            _this5.lab_animalCnt.string = GameManager.getInstance().gameStartAnimalCnt.toString();
          }).start();
        };

        _proto.showPropTip = function showPropTip(index) {
          var prop = GameManager.getInstance().prop;

          if (index == 0) {
            if (prop.reflashAdCnt > 0 || prop.reflashBoxCnt > 0) this.btn_reflash.node.children[1].active = true;
          }

          if (index == 1) {
            if (prop.changeAnimalAdCnt > 0 || prop.changeAnimalBoxCnt) this.btn_changeAnimaltype.node.children[1].active = true;
          }

          if (index == 2) {
            if (prop.bronNewAnimalsAdcnt > 0 || prop.bronNewAnimalsBoxcnt > 0) this.btn_bronNewAnimals.node.children[1].active = true;
          }

          this.tip_renshu.active = true;
        };

        _proto.hidePropTip = function hidePropTip() {
          this.tip_renshu.active = false;
          this.btn_reflash.node.children[1].active = false;
          this.btn_changeAnimaltype.node.children[1].active = false;
          this.btn_bronNewAnimals.node.children[1].active = false;
        } //npc说话气泡
        ;

        _proto.showPopNpcTaunh = function showPopNpcTaunh(style, des, infoPos, showtime) {
          this.Pop_taunh.node.active = true;

          var uipos = GameManager.getInstance()._camera.convertToUINode(infoPos, this.node);

          this.Pop_taunh.showNpcTaunh(style, des, uipos, showtime);
        } //npc说话气泡
        ;

        _proto.hideNpcTaunh = function hideNpcTaunh() {
          this.Pop_taunh.node.active = false;
        };

        _proto.updateAnimalCntView = function updateAnimalCntView() {
          var _this6 = this;

          this.schedule(function () {
            if (!_this6.isfix && _this6.node.active && GameManager.getInstance()) {
              var cnt = GameManager.getInstance()._animalLibrary.length;

              if (_this6.lastAnimalCnt != cnt) {
                _this6.lastAnimalCnt = cnt;
                _this6.lab_animalCnt.string = cnt.toString();
              }
            }
          }, 0.02);
        };

        return Panel_Game;
      }(BasePanel), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bossHpBar", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "otherHpBar", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "tempHit", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lab_animalCnt", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "playerName", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "playerHead", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "btn_animalInfo", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "animal_other", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "AnimalInfo", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "hpParent", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "hitParent", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "tip_renshu", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "btn_set", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "btn_reflash", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "lab_reflash", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "btn_changeAnimaltype", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "lab_change", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "btn_bronNewAnimals", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "lab_bron", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "popParent", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "Pop_Swtich", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "Pop_ChangeAnimalAd", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "Pop_GetAnimalsAd", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "Pop_ReflashAd", [_dec25], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "Pop_runAwayTip", [_dec26], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor26 = _applyDecoratedDescriptor(_class2.prototype, "Pop_set", [_dec27], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor27 = _applyDecoratedDescriptor(_class2.prototype, "Pop_help", [_dec28], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor28 = _applyDecoratedDescriptor(_class2.prototype, "Pop_helpNode", [_dec29], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor29 = _applyDecoratedDescriptor(_class2.prototype, "helpTime", [_dec30], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor30 = _applyDecoratedDescriptor(_class2.prototype, "Pop_taunh", [_dec31], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor31 = _applyDecoratedDescriptor(_class2.prototype, "swtichs", [_dec32], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Array();
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Panel_GameFinish.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BasePanel.ts', './GameManager.ts', './GameStateView.ts', './UIManager.ts', './CameraManager.ts', './Flag.ts', './DataManager.ts', './CfgData.ts', './GameResponces.ts', './AudioManager.ts', './SdkManager.ts', './AuthorizeManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Node, Button, v3, randomRangeInt, BasePanel, GameFinishState, GameManager, GameStateView, UIManager, CameraManager, Flag, DataManager, CfgData, GameResponces, AudioManager, SdkManager, AuthorizeManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Button = module.Button;
      v3 = module.v3;
      randomRangeInt = module.randomRangeInt;
    }, function (module) {
      BasePanel = module.BasePanel;
    }, function (module) {
      GameFinishState = module.GameFinishState;
      GameManager = module.GameManager;
    }, function (module) {
      GameStateView = module.GameStateView;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      CameraManager = module.CameraManager;
    }, function (module) {
      Flag = module.Flag;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      CfgData = module.CfgData;
    }, function (module) {
      GameResponces = module.GameResponces;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      SdkManager = module.SdkManager;
    }, function (module) {
      AuthorizeManager = module.AuthorizeManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "3f178E08KlDlYSeg1R/P7tC", "Panel_GameFinish", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Panel_GameFinish = exports('Panel_GameFinish', (_dec = ccclass('Panel_GameFinish'), _dec2 = property({
        type: Node,
        displayName: "游戏胜利界面"
      }), _dec3 = property({
        type: Node,
        displayName: "游戏失败界面"
      }), _dec4 = property({
        type: Node,
        displayName: "游戏逃跑界面"
      }), _dec5 = property({
        type: Node,
        displayName: "手指动画"
      }), _dec6 = property({
        type: Node,
        displayName: "房子点击区域"
      }), _dec7 = property({
        type: Node,
        displayName: "特殊失败点击区域"
      }), _dec8 = property({
        type: Node,
        displayName: "双倍tip"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_BasePanel) {
        _inheritsLoose(Panel_GameFinish, _BasePanel);

        function Panel_GameFinish() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePanel.call.apply(_BasePanel, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "win", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lose", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "runAway", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fingerAnimation", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "houseClickAre", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "loseClickAre", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tip", _descriptor7, _assertThisInitialized(_this));

          _this.clickCnt = 0;
          _this.npc = void 0;
          return _this;
        }

        var _proto = Panel_GameFinish.prototype;

        _proto.start = function start() {
          this.houseClickAre.on(Button.EventType.CLICK, this.clickHouse, this);
          this.loseClickAre.on(Button.EventType.CLICK, this.clickView, this);
        };

        _proto.onEnable = function onEnable() {
          this.houseClickAre.active = false;
          this.loseClickAre.active = false;
          this.fingerAnimation.active = false;
        };

        _proto.shwoGameStateView = function shwoGameStateView(npc, gameState, losetype, isShowRecorde) {
          var _this2 = this;

          this.win.active = false;
          this.lose.active = false;
          this.runAway.active = false;

          switch (gameState) {
            case GameFinishState.Win:
              this.showGameStateView(npc, gameState, losetype, "胜利", function (flag) {
                AudioManager.instance.playSound('winUI');

                _this2.win.getComponent(GameStateView).ini(npc, flag);

                _this2.win.active = true;

                GameResponces._event.emit(GameResponces.ShowEnding);
              });
              break;

            case GameFinishState.Lose:
              this.showGameStateView(npc, gameState, losetype, "失败", function (flag) {
                AudioManager.instance.playSound('loseUI');

                _this2.lose.getComponent(GameStateView).ini(npc, flag);

                _this2.lose.active = true;
              });
              break;

            case GameFinishState.RunAway:
              this.showGameStateView(npc, gameState, losetype, "逃跑", function (flag) {
                AudioManager.instance.playSound('loseUI');

                _this2.runAway.getComponent(GameStateView).ini(npc, flag);

                _this2.runAway.active = true;
              });
              break;
          }
        };

        _proto.showGameStateView = /*#__PURE__*/function () {
          var _showGameStateView = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(curnpc, gameState, losetype, des, call) {
            var cameraManager, flagIndex, npc, mapCfg, str, cameraPos, player, flagView, poslist, pos;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  cameraManager = GameManager.getInstance()._camera.getComponent(CameraManager);
                  flagIndex = 0;
                  npc = curnpc;
                  mapCfg = CfgData.getInstance().getHomeCfg().map;
                  str = mapCfg[npc.mapId].WinCamera.split('_');
                  cameraPos = v3(Number.parseFloat(str[0]), Number.parseFloat(str[1]), Number.parseFloat(str[2]));
                  player = DataManager.getInstance().playerData;
                  this.clickCnt = 0;
                  this.npc = curnpc;

                  if (!(gameState != GameFinishState.Win)) {
                    _context.next = 32;
                    break;
                  }

                  AudioManager.instance.playSound('losetip');
                  flagIndex = 1;

                  if (!(gameState == GameFinishState.RunAway)) {
                    _context.next = 16;
                    break;
                  }

                  UIManager.getInstance().tip.showNomalTip(des, 1, 1, 4, v3(0, 600, 0));
                  _context.next = 16;
                  return this.delay(2);

                case 16:
                  if (!(gameState == GameFinishState.Lose && losetype == 0)) {
                    _context.next = 20;
                    break;
                  }

                  UIManager.getInstance().tip.showNomalTip("失败", 1, 1, 4, v3(0, 600, 0));
                  _context.next = 20;
                  return this.delay(2);

                case 20:
                  if (!(gameState == GameFinishState.Lose && losetype == 1)) {
                    _context.next = 30;
                    break;
                  }

                  this.loseClickAre.active = true;
                  UIManager.getInstance().tip.showNomalTip("失败！已无可合成动物！", 1, 1, 9999, v3(0, 600, 0));
                  _context.next = 25;
                  return this.delay(0.5);

                case 25:
                  if (!(this.clickCnt == 0)) {
                    _context.next = 30;
                    break;
                  }

                  _context.next = 28;
                  return this.delay(0.02);

                case 28:
                  _context.next = 25;
                  break;

                case 30:
                  _context.next = 37;
                  break;

                case 32:
                  if (!(gameState == GameFinishState.Win)) {
                    _context.next = 37;
                    break;
                  }

                  AudioManager.instance.playSound('wintip');
                  UIManager.getInstance().tip.showNomalTip(des, 1, 1, 3, v3(0, 600, 0));
                  _context.next = 37;
                  return this.delay(2.5);

                case 37:
                  //移动镜头
                  GameManager.getInstance().mapInfo.npchead.setPosition(0, 0, -0.85);
                  cameraManager.move(cameraPos, 0.5);
                  _context.next = 41;
                  return this.delay(0.5);

                case 41:
                  //插旗
                  flagView = GameManager.getInstance().mapInfo.createFlagView(flagIndex);
                  poslist = [];
                  GameManager.getInstance().mapInfo.npcPos.children.forEach(function (pos) {
                    if (pos.children.length == 0) {
                      poslist.push(pos);
                    }
                  });
                  pos = poslist[randomRangeInt(0, poslist.length)];
                  pos.addChild(flagView);
                  flagView.setPosition(v3());
                  flagView.getComponent(Flag).initPlayer(player.headUrl, gameState);

                  if (!(gameState == GameFinishState.Win)) {
                    _context.next = 67;
                    break;
                  }

                  _context.next = 51;
                  return this.delay(0.5);

                case 51:
                  this.houseClickAre.active = true;
                  this.fingerAnimation.active = true;
                  GameManager.getInstance().mapInfo.enclos.updateEnclosurePos(1);
                  AudioManager.instance.playSound('finger');
                  UIManager.getInstance().tip.showNomalTip("抓获动物", 1, 1, 999, v3(0, 600, 0));
                  _context.next = 58;
                  return this.delay(0.5);

                case 58:
                  if (!(this.clickCnt == 0)) {
                    _context.next = 63;
                    break;
                  }

                  _context.next = 61;
                  return this.delay(0.01);

                case 61:
                  _context.next = 58;
                  break;

                case 63:
                  _context.next = 65;
                  return this.delay(5.5);

                case 65:
                  _context.next = 69;
                  break;

                case 67:
                  _context.next = 69;
                  return this.delay(1.3);

                case 69:
                  //
                  call(flagView.getComponent(Flag));

                case 70:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function showGameStateView(_x, _x2, _x3, _x4, _x5) {
            return _showGameStateView.apply(this, arguments);
          }

          return showGameStateView;
        }();

        _proto.clickHouse = function clickHouse() {
          if (this.clickCnt == 0) {
            this.clickCnt++;
            this.fingerAnimation.active = false;

            GameResponces._event.emit(GameResponces.clickHouse);

            UIManager.getInstance().tip.clearschedule();
            SdkManager.getInstance().SendEvent(CfgData.getInstance().getEventData().getDotEvent(13).id, null);

            if (this.npc) {
              console.log("上传的分数：" + this.npc.residualAnimalCount);
              AuthorizeManager.getInstance().updateWxOrDyRankScore(this.npc.residualAnimalCount);
            }
          }
        };

        _proto.clickView = function clickView() {
          if (this.clickCnt == 0) {
            this.clickCnt++;
            this.loseClickAre.active = false;
            UIManager.getInstance().tip.clearschedule();
          }
        };

        _proto.delay = function delay(time) {
          var _this3 = this;

          return new Promise(function (reslove, reject) {
            _this3.scheduleOnce(function () {
              reslove(true);
            }, time);
          });
        };

        return Panel_GameFinish;
      }(BasePanel), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "win", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lose", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "runAway", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "fingerAnimation", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "houseClickAre", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "loseClickAre", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "tip", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Panel_gm.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BasePanel.ts', './DataManager.ts', './TimeTools.ts', './GameManager.ts', './GameResponces.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, Button, BasePanel, DataManager, TimeTools, GameManager, GameFinishState, GameResponces;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Button = module.Button;
    }, function (module) {
      BasePanel = module.BasePanel;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      TimeTools = module.TimeTools;
    }, function (module) {
      GameManager = module.GameManager;
      GameFinishState = module.GameFinishState;
    }, function (module) {
      GameResponces = module.GameResponces;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "8055aDI1kVPWJYFEQjicLuD", "Panel_gm", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Panel_gm = exports('Panel_gm', (_dec = ccclass('Panel_gm'), _dec2 = property({
        type: Node,
        displayName: "gm面板"
      }), _dec3 = property({
        type: Label,
        displayName: "难度等级"
      }), _dec4 = property({
        type: Button,
        displayName: "btn"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_BasePanel) {
        _inheritsLoose(Panel_gm, _BasePanel);

        function Panel_gm() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePanel.call.apply(_BasePanel, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "gm", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "difLv", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btn_close", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = Panel_gm.prototype;

        _proto.start = function start() {
          var _this2 = this;

          this.btn_close.node.on(Button.EventType.CLICK, function () {
            if (_this2.gm.active) {
              _this2.btn_close.getComponentInChildren(Label).string = "打开gm";
            } else {
              _this2.btn_close.getComponentInChildren(Label).string = "关闭gm";
            }

            _this2.gm.active = !_this2.gm.active;
          }, this);
        };

        _proto.onEnable = function onEnable() {
          this.showDiffcutLv();
        };

        _proto.clearDate = function clearDate() {
          DataManager.getInstance().deleDate();
        };

        _proto.addCoin = function addCoin() {
          DataManager.getInstance().updateCoin(10000);
        };

        _proto.updateHome = function updateHome() {
          GameResponces._event.emit(GameResponces.homeLvUp);
        };

        _proto.addTime = function addTime() {
          TimeTools.addTimeFram(10 * 60);
        };

        _proto.win = function win() {
          if (GameManager.getInstance()) {
            GameManager.getInstance().onGameFinish(GameFinishState.Win, -1);
          }
        };

        _proto.lose = function lose() {
          if (GameManager.getInstance()) {
            GameManager.getInstance().onGameFinish(GameFinishState.Lose, -1);
          }
        };

        _proto.showDiffcutLv = function showDiffcutLv() {
          if (DataManager.getInstance() && DataManager.getInstance().playerData) this.difLv.string = "难度等级：" + DataManager.getInstance().playerData.difficultyLv;
        };

        return Panel_gm;
      }(BasePanel), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "gm", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "difLv", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btn_close", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Panel_guide.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BasePanel.ts', './GameManager.ts', './Coroutine.ts', './GameResponces.ts', './Panel_Game.ts', './HomeManager.ts', './UIManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _regeneratorRuntime, cclegacy, _decorator, Node, v3, Vec3, UITransform, math, Sprite, BasePanel, GameManager, Coroutine, GameResponces, Panel_Game, HomeManager, UIManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      v3 = module.v3;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      math = module.math;
      Sprite = module.Sprite;
    }, function (module) {
      BasePanel = module.BasePanel;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      Coroutine = module.Coroutine;
    }, function (module) {
      GameResponces = module.GameResponces;
    }, function (module) {
      Panel_Game = module.Panel_Game;
    }, function (module) {
      HomeManager = module.HomeManager;
    }, function (module) {
      UIManager = module.UIManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "c55c3dDkNVFhJi7Gu/TqhBQ", "Panel_guide", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Panel_guide = exports('Panel_guide', (_dec = ccclass('Panel_guide'), _dec2 = property({
        type: Node,
        visible: true,
        displayName: "手指"
      }), _dec3 = property({
        type: Node,
        visible: true,
        displayName: "手指2"
      }), _dec4 = property({
        type: Node,
        visible: true,
        displayName: "反向的遮罩"
      }), _dec5 = property({
        type: Node,
        visible: true,
        displayName: "正向的遮罩"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_BasePanel) {
        _inheritsLoose(Panel_guide, _BasePanel);

        function Panel_guide() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePanel.call.apply(_BasePanel, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "finger", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "finger2", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "mask", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "otherMask", _descriptor4, _assertThisInitialized(_this));

          _this.offect = v3(-50, 90, 0);
          _this.uiOffect = v3(50, -90, 0);
          _this.fingerClickEvent = void 0;
          _this.curFinger = void 0;
          _this.storeyIndex = void 0;
          _this.index = void 0;
          return _this;
        }

        var _proto = Panel_guide.prototype;

        _proto.onLoad = function onLoad() {
          this.mask.on(Node.EventType.TOUCH_START, this.clickMask, this);
        };

        _proto.init = function init() {
          this.finger2.active = false;
          this.finger.active = false;
          this.mask.active = false;
          this.otherMask.active = true;
        };

        _proto.setFingerPos = /*#__PURE__*/_regeneratorRuntime().mark(function setFingerPos(storeyIndex, index, baseAction, panel, pos) {
          var _this2 = this;

          var lpos, icon;
          return _regeneratorRuntime().wrap(function setFingerPos$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                GameResponces._event.once(baseAction.fingereventName, function () {
                  _this2.clickMask();
                });

                this.curFinger = baseAction.fingerType == 0 ? this.finger : this.finger2;
                this.otherMask.active = false;
                this.fingerClickEvent = false;
                this.curFinger.active = true;
                this.storeyIndex = storeyIndex;
                this.index = index;
                this.mask.active = baseAction.noClick;
                this.curFinger.setRotationFromEuler(baseAction.rotate);

                if (pos instanceof Vec3) {
                  this.mask.getComponent(UITransform).contentSize = math.size(120, 120);

                  if (panel instanceof Panel_Game) {
                    GameManager.getInstance()._camera.camera.update();

                    lpos = GameManager.getInstance()._camera.convertToUINode(pos, this.node);
                  } else {
                    HomeManager.getInstance()._camera.camera.update();

                    lpos = HomeManager.getInstance()._camera.convertToUINode(pos, this.node);
                  }

                  this.curFinger.position = lpos;
                  this.mask.position = lpos.add(this.offect);
                } else {
                  icon = UIManager.getInstance().node.getChildByPath(pos);
                  lpos = v3(icon.worldPosition);
                  if (baseAction.fingerType == 0) lpos.add(this.uiOffect).add(baseAction.fingerUIoffect);else lpos.add(baseAction.fingerUIoffect);
                  this.mask.getComponent(UITransform).contentSize = icon.getComponent(UITransform).contentSize;

                  if (icon) {
                    this.curFinger.worldPosition = lpos;
                    if (baseAction.fingerType == 1) this.mask.worldPosition = v3(icon.worldPosition);else this.mask.worldPosition = lpos.add(this.offect).subtract(baseAction.fingerUIoffect);
                  } else {
                    console.error("手指显示的位置对应的UI配置错误，检测一下Guide配置:" + pos);
                  }
                }

              case 10:
                if (this.fingerClickEvent) {
                  _context.next = 15;
                  break;
                }

                _context.next = 13;
                return Coroutine.waitForSecond(0.02, this);

              case 13:
                _context.next = 10;
                break;

              case 15:
                return _context.abrupt("return", null);

              case 16:
              case "end":
                return _context.stop();
            }
          }, setFingerPos, this);
        });

        _proto.setMask = function setMask(bl) {
          this.otherMask.active = bl;
        };

        _proto.setColor = function setColor(color) {
          this.otherMask.getComponent(Sprite).color = color;
        };

        _proto.clickMask = function clickMask() {
          this.finger2.active = false;
          this.finger.active = false;
          this.mask.active = false;
          this.fingerClickEvent = true;
          this.otherMask.active = true;
          UIManager.getInstance().tip.hideGuideTip();
        };

        return Panel_guide;
      }(BasePanel), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "finger", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "finger2", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "mask", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "otherMask", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Panel_Load.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BasePanel.ts', './UIManager.ts', './AudioManager.ts', './GameResponces.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, ProgressBar, Animation, Node, BasePanel, UIManager, AudioManager, GameResponces;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ProgressBar = module.ProgressBar;
      Animation = module.Animation;
      Node = module.Node;
    }, function (module) {
      BasePanel = module.BasePanel;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      GameResponces = module.GameResponces;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "e2afbJ4FopHS5K9w4cN4G75", "Panel_Load", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Panel_Load = exports('Panel_Load', (_dec = ccclass('Panel_Load'), _dec2 = property({
        type: ProgressBar,
        displayName: "进度条"
      }), _dec3 = property({
        type: Animation,
        displayName: "动画"
      }), _dec4 = property({
        type: Node,
        displayName: "审核界面"
      }), _dec5 = property({
        type: ProgressBar,
        displayName: "审核界面进度"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_BasePanel) {
        _inheritsLoose(Panel_Load, _BasePanel);

        function Panel_Load() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePanel.call.apply(_BasePanel, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "progress", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animation", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "notice", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pro_Notice", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = Panel_Load.prototype;

        _proto.showStartProgress = function showStartProgress(animationType) {
          if (animationType === void 0) {
            animationType = 0;
          }

          console.log("开始加载界面");
          this.progress.progress = 0; //从左到右

          if (animationType == 0) this.animation.node.setRotationFromEuler(0, 180, 0);else this.animation.node.setRotationFromEuler(0, 0, 0);
          this.animation.play("UI_load1");
          if (AudioManager.instance) AudioManager.instance.playSound("Load");
        };

        _proto.showNotice = function showNotice() {
          this.notice.active = true;
          this.pro_Notice.progress = 0; //    tween(this.pro_Notice).to(2,{progress:1},{onComplete:()=>{
          //     this.notice.active = false;
          //    }}).start();
        };

        _proto.setProgress = function setProgress(pro) {
          this.progress.progress = pro;
          this.pro_Notice.progress = pro;
        };

        _proto.endProgress = /*#__PURE__*/function () {
          var _endProgress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(call) {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (call === void 0) {
                    call = null;
                  }

                  _context.next = 3;
                  return this.delay(1500);

                case 3:
                  while (this.progress.progress <= 0.95) {
                    this.delay(10);
                  }

                  GameResponces._event.emit(GameResponces.endProgress);

                  call == null ? void 0 : call();
                  call = null;
                  this.notice.active = false;
                  UIManager.getInstance().hidePanel(Panel_Load);

                case 9:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function endProgress(_x) {
            return _endProgress.apply(this, arguments);
          }

          return endProgress;
        }();

        _proto.delay = function delay(time) {
          var _this2 = this;

          return new Promise(function (reslove, reject) {
            _this2.scheduleOnce(function () {
              reslove(true);
            }, time / 1000);
          });
        };

        return Panel_Load;
      }(BasePanel), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "progress", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "animation", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "notice", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "pro_Notice", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Panel_Main.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AssetSys.ts', './BasePanel.ts', './CoinTools.ts', './GameResponces.ts', './GameManager.ts', './HomeManager.ts', './NpcManager.ts', './UIManager.ts', './Panel_Game.ts', './Panel_Load.ts', './Pop_npc.ts', './Pop_tip.ts', './Pop_upHome.ts', './Pop_CorpseSale.ts', './Utils.ts', './Pop_NpcInfo.ts', './Pop_exceed.ts', './Pop_qickFix.ts', './PlayerFench.ts', './AnimalFarm.ts', './Pop_helpNpc.ts', './AudioManager.ts', './Pop_report.ts', './Pop_set.ts', './Pop_authorize.ts', './LabelEx.ts', './SdkManager.ts', './CfgData.ts', './GuideCfg.ts', './DataManager.ts', './Pop_taunh.ts', './AuthorizeManager.ts', './TimeTools.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Label, Node, ProgressBar, v2, screen, v3, AssetSys, BasePanel, CoinTools, GameResponces, GameManager, HomeManager, NpcManager, UIManager, Panel_Game, Panel_Load, Pop_npc, Pop_tip, Pop_upHome, Pop_CorpseSale, Utils, Pop_NpcInfo, Pop_exceed, Pop_qickFix, PlayerFench, AnimalFarm, Pop_helpNpc, AudioManager, Pop_report, Pop_set, Pop_authorize, LabelEx, SdkManager, CfgData, GuideCfg, DataManager, Pop_taunh, AuthorizeManager, TimeTools;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Label = module.Label;
      Node = module.Node;
      ProgressBar = module.ProgressBar;
      v2 = module.v2;
      screen = module.screen;
      v3 = module.v3;
    }, function (module) {
      AssetSys = module.AssetSys;
    }, function (module) {
      BasePanel = module.BasePanel;
    }, function (module) {
      CoinTools = module.CoinTools;
    }, function (module) {
      GameResponces = module.GameResponces;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      HomeManager = module.HomeManager;
    }, function (module) {
      NpcManager = module.NpcManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      Panel_Game = module.Panel_Game;
    }, function (module) {
      Panel_Load = module.Panel_Load;
    }, function (module) {
      Pop_npc = module.Pop_npc;
    }, function (module) {
      Pop_tip = module.Pop_tip;
    }, function (module) {
      Pop_upHome = module.Pop_upHome;
    }, function (module) {
      Pop_CorpseSale = module.Pop_CorpseSale;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      Pop_NpcInfo = module.Pop_NpcInfo;
    }, function (module) {
      Pop_exceed = module.Pop_exceed;
    }, function (module) {
      Pop_qickFix = module.Pop_qickFix;
    }, function (module) {
      PlayerFench = module.PlayerFench;
    }, function (module) {
      AnimalFarm = module.AnimalFarm;
    }, function (module) {
      Pop_helpNpc = module.Pop_helpNpc;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      Pop_report = module.Pop_report;
    }, function (module) {
      Pop_set = module.Pop_set;
    }, function (module) {
      Pop_authorize = module.Pop_authorize;
    }, function (module) {
      LabelEx = module.LabelEx;
    }, function (module) {
      SdkManager = module.SdkManager;
    }, function (module) {
      CfgData = module.CfgData;
    }, function (module) {
      GuideCfg = module.GuideCfg;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      Pop_taunh = module.Pop_taunh;
    }, function (module) {
      AuthorizeManager = module.AuthorizeManager;
    }, function (module) {
      TimeTools = module.TimeTools;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _dec33, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32;

      cclegacy._RF.push({}, "050510MgY5PYZry5TfHUZWS", "Panel_Main", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Panel_Main = exports('Panel_Main', (_dec = ccclass('Panel_Main'), _dec2 = property({
        type: Button,
        displayName: "游戏开始"
      }), _dec3 = property({
        type: Button,
        displayName: "升级"
      }), _dec4 = property({
        type: Button,
        displayName: "排行"
      }), _dec5 = property({
        type: Button,
        displayName: "打开售卖动物尸体界面"
      }), _dec6 = property({
        type: Label,
        displayName: "金币"
      }), _dec7 = property({
        type: Node,
        displayName: "金币位置"
      }), _dec8 = property({
        type: ProgressBar,
        displayName: "动物生产进度"
      }), _dec9 = property({
        type: Label,
        displayName: "+1动画"
      }), _dec10 = property({
        type: ProgressBar,
        displayName: "单个动物生产进度"
      }), _dec11 = property({
        type: ProgressBar,
        displayName: "栅栏血量"
      }), _dec12 = property({
        type: Label,
        displayName: "栅栏血量lab"
      }), _dec13 = property({
        type: Label,
        displayName: "栅栏血量提示"
      }), _dec14 = property({
        type: LabelEx,
        displayName: "动物lab"
      }), _dec15 = property({
        type: Node,
        displayName: "Pop_upHome"
      }), _dec16 = property({
        type: Node,
        displayName: "Pop_sale"
      }), _dec17 = property({
        type: Node,
        displayName: "Pop_CorpseSale"
      }), _dec18 = property({
        type: Pop_tip,
        displayName: "Pop_tip"
      }), _dec19 = property({
        type: Pop_npc,
        displayName: "Pop_npc"
      }), _dec20 = property({
        type: Pop_NpcInfo,
        displayName: "Pop_NpcInfo"
      }), _dec21 = property({
        type: Pop_taunh,
        displayName: "Pop_taunh"
      }), _dec22 = property({
        type: Pop_exceed,
        displayName: "Pop_exceed"
      }), _dec23 = property({
        type: Pop_qickFix,
        displayName: "Pop_fix"
      }), _dec24 = property({
        type: Pop_helpNpc,
        displayName: "Pop_helpNpc"
      }), _dec25 = property({
        type: Pop_report,
        displayName: "Pop_report"
      }), _dec26 = property({
        type: Pop_set,
        displayName: "Pop_set"
      }), _dec27 = property({
        type: Pop_authorize,
        displayName: "Pop_authorize"
      }), _dec28 = property({
        type: Node,
        displayName: "Pop"
      }), _dec29 = property({
        type: Button,
        displayName: "设置"
      }), _dec30 = property({
        type: CoinTools,
        displayName: "飞金币"
      }), _dec31 = property({
        type: Node,
        displayName: "Pop_rankAuthorize"
      }), _dec32 = property({
        type: Node,
        displayName: "gameclube"
      }), _dec33 = property({
        type: Node,
        displayName: "小红点"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_BasePanel) {
        _inheritsLoose(Panel_Main, _BasePanel);

        function Panel_Main() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePanel.call.apply(_BasePanel, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "btn_gameStart", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Btn_update", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Btn_rank", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Btn_openSale", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coin", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinPos", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animalBar", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animanumber", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "singanimalBar", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fenchBar", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lab_fenchBar", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lab_barTip", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lab_animal", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pop_upHome", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Pop_sale", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Pop_CorpseSale", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Pop_tip", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Pop_npc", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Pop_NpcInfo", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Pop_taunh", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Pop_exceed", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Pop_qickFix", _descriptor22, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Pop_helpNpc", _descriptor23, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Pop_report", _descriptor24, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Pop_set", _descriptor25, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Pop_authorize", _descriptor26, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "PopParent", _descriptor27, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btn_set", _descriptor28, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinTools", _descriptor29, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Pop_rankAuthorize", _descriptor30, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gameclube", _descriptor31, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "red", _descriptor32, _assertThisInitialized(_this));

          _this.homePop = void 0;
          _this.playerData = void 0;
          _this.homeCfg = void 0;
          _this.timefram = void 0;
          _this.takeTime = void 0;
          return _this;
        }

        var _proto = Panel_Main.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          this.gameclube.active = false;
          this.homePop = this.pop_upHome.getComponent(Pop_upHome);
          this.btn_gameStart.node.on(Button.EventType.CLICK, this.showPopNpc, this);
          this.Btn_openSale.node.on(Button.EventType.CLICK, this.showPopCAnimalSale, this);
          this.Btn_update.node.on(Button.EventType.CLICK, this.updateHome, this);
          this.btn_set.node.on(Button.EventType.CLICK, this.showPopSet, this);
          this.Btn_rank.node.on(Button.EventType.CLICK, function () {
            AuthorizeManager.getInstance().showWxOrDyRank();
          }, this);
          this.Pop_rankAuthorize.getComponentInChildren(Button).node.on(Button.EventType.CLICK, function () {
            _this2.hideRankAuth();
          }, this);

          GameResponces._event.on(GameResponces.updateCion, this.updateCoin, this);

          GameResponces._event.on(GameResponces.cionChange, this.setUpdataState, this);

          GameResponces._event.on(GameResponces.FingerUpdateFence, this.setUpdataState, this);

          GameResponces._event.on(GameResponces.FingerClickUpdateHouse, this.setUpdataState, this);
        };

        _proto.onEnable = function onEnable() {
          var _this3 = this;

          this.btn_set.node.children[0].active = false; //做一下延迟

          this.scheduleOnce(function () {
            if (DataManager.getInstance().guidIsOver() && !DataManager.getInstance().playerData.isAuthorize && DataManager.getInstance().guideData.showAuthTimes > 0) {
              _this3.btn_set.node.children[0].active = true;
              DataManager.getInstance().guideData.showAuthTimes--;
              DataManager.getInstance().saveGuideData();
            }

            _this3.setUpdataState();

            _this3.showGameClubButton();
          }, 0.2);
        }
        /**
         * @description: 设置升级小红点的状态
         * @return {*}
         */
        ;

        _proto.setUpdataState = function setUpdataState() {
          if (this.node.active) {
            this.playerData = DataManager.getInstance().playerData;
            var coin = this.playerData.coin;
            var fenchlv = this.playerData.fenchLv;
            var homelv = this.playerData.homeLv;
            var fenchNeedPrice = coin >= this.homeCfg.fence[fenchlv].LevelUpPrice;
            var houseNeedPrice = coin >= this.homeCfg.house[homelv].LevelUpPrice;
            var n = TimeTools.getCurTime();
            var hometime = (this.playerData.homeTime - n) / 1000;
            var fenchtime = (this.playerData.fenchTime - n) / 1000;
            this.red.active = DataManager.getInstance().guidIsOver() && (fenchNeedPrice || houseNeedPrice) && (hometime <= 0 || fenchtime <= 0);
          }
        };

        _proto.showGameClubButton = function showGameClubButton() {
          if (this.node.active && Utils.isWxPlatform() && DataManager.getInstance().guidIsOver()) {
            this.gameclube.active = true;
            var cam = UIManager.getInstance().uiCamera;
            var viewPos = cam.worldToScreen(this.gameclube.worldPosition);
            AuthorizeManager.getInstance().wxRank.CreateMainClubButton(v2(viewPos.x / screen.windowSize.width, viewPos.y / screen.windowSize.height), v2(263, 86));
          }
        };

        _proto.init = function init(playerData, homeCfg) {
          this.playerData = playerData;
          this.homeCfg = homeCfg;
          this.updateCoin(this.playerData.coin, this.playerData.coin, 0);
        };

        _proto.gameStart = function gameStart(npc) {
          NpcManager.getInstance().curNpc = npc;

          if (HomeManager.getInstance().isAnimalLimit()) {
            this.showPopTip();
          } else {
            this.GameStart();
          }
        };

        _proto.GameStart = function GameStart() {
          if (AnimalFarm.getInstance()._lisAnimals.length >= 20) {
            GameResponces._event.emit(GameResponces.WaitForGoGame);

            this.hidePopNpc(false);
            UIManager.getInstance().hidePanel(Panel_Main);
            HomeManager.getInstance().gameStart();
            var load = UIManager.getInstance().showPanel(Panel_Load);
            load.showStartProgress(1);

            if (DataManager.getInstance().guidIsOver()) {
              load.endProgress(function () {
                UIManager.getInstance().showPanel(Panel_Game);
                var animalfarm = AnimalFarm.getInstance();
                GameManager.getInstance().onGameStart(NpcManager.getInstance().curNpc, animalfarm._lisAnimals, animalfarm);
              });
              AssetSys.getInstance().loadGameScene(function (pro) {
                load.setProgress(pro);
              });
            }
          } else {
            UIManager.getInstance().tip.showNomalTip("动物数量低于20只无法进入", 1, 1);
            AudioManager.instance.playSound("noanimal");
          }
        };

        _proto.updatehouse = function updatehouse(cnt, wait) {
          var _this4 = this;

          this.timefram = wait;
          this.takeTime = wait;
          var houseLimit = this.homeCfg.house[this.playerData.homeLv].LimitStorage;

          if (this.animalBar.progress < 1) {
            this.animanumber.node.active = true;
            this.scheduleOnce(function () {
              _this4.animanumber.node.active = false;
            }, 0.67);
          }

          this.animalBar.progress = cnt / houseLimit;
          this.lab_animal.orgVlaue = "动物" + cnt + "/" + houseLimit + "只";

          if (houseLimit == cnt) {
            this.takeTime = 0;
            this.singanimalBar.progress = 1;
          }

          this.Pop_tip.updateView();
        };

        _proto.updateFenchView = function updateFenchView(curHp, maxHp) {
          this.lab_barTip.node.active = curHp < maxHp;
          this.fenchBar.node.active = curHp < maxHp;
          this.fenchBar.progress = curHp / maxHp;
          this.lab_fenchBar.string = curHp.toFixed(1) + "/" + maxHp;
          var result = curHp.toString().indexOf('.');
          if (result != -1) this.lab_fenchBar.string = curHp.toFixed(1) + "/" + maxHp;else this.lab_fenchBar.string = curHp + "/" + maxHp;
        };

        _proto.update = function update(deltaTime) {
          if (this.node.active && this.timefram > 0 && this.takeTime > 0) {
            this.takeTime -= deltaTime;
            this.singanimalBar.progress = (this.timefram - this.takeTime) / this.timefram;
          }
        };

        _proto.getPopCorpseSale = function getPopCorpseSale() {
          return this.Pop_CorpseSale.getComponent(Pop_CorpseSale);
        };

        _proto.flyCoin = function flyCoin() {
          var end = v3(this.coinPos.worldPosition);
          this.coinTools.flyCoin(v3(), end, 20);
        };

        _proto.isOnlyShowHomePanel = function isOnlyShowHomePanel() {
          return !this.PopParent.active && !this.Pop_npc.node.active && this.node.active;
        };

        _proto.updateHome = function updateHome() {
          GameResponces._event.emit(GameResponces.FingerClickUpdate);

          this.showPopHome();
        };

        _proto.showPopFix = function showPopFix() {
          if (PlayerFench.getInstance().isfullHp()) return;
          this.PopParent.active = true;
          this.Pop_qickFix.node.active = true;
        };

        _proto.hidePopFix = function hidePopFix() {
          this.PopParent.active = false;
          this.Pop_qickFix.node.active = false;
        };

        _proto.showPopHelpNpc = function showPopHelpNpc(npcName, npcHeadUrl, onConplet) {
          this.Pop_helpNpc.init(this, npcName, npcHeadUrl, onConplet);
          this.Pop_helpNpc.node.active = true;
          AudioManager.instance.playSound("helpit");
          return true;
        };

        _proto.hidePopHelpNpc = function hidePopHelpNpc() {
          this.Pop_helpNpc.node.active = false;
        };

        _proto.showPopNpc = function showPopNpc() {
          GameResponces._event.emit(GameResponces.ClickStart);

          HomeManager.getInstance()._camera.node.active = false;

          HomeManager.getInstance()._camera.camera.update();

          this.Pop_npc.onShow();
          this.Pop_npc.node.active = true;
          SdkManager.getInstance().SendEvent(CfgData.getInstance().getEventData().getDotEvent(0).id, null);

          if (Utils.isWxPlatform() && DataManager.getInstance().guidIsOver()) {
            AuthorizeManager.getInstance().wxRank.HideGameClubButton();
          }
        };

        _proto.hidePopNpc = function hidePopNpc(needhide) {
          HomeManager.getInstance()._camera.node.active = true;
          this.Pop_npc.node.active = false;
          if (needhide) this.showGameClubButton();
        };

        _proto.showPopexceed = function showPopexceed(animals) {
          if (!GuideCfg.disableExceed) {
            this.PopParent.active = true;
            this.Pop_exceed.init(animals);
            this.Pop_exceed.node.active = true;
          }
        };

        _proto.hidePopexceed = function hidePopexceed() {
          this.PopParent.active = false;
          this.Pop_exceed.node.active = false;

          GameResponces._event.emit(GameResponces.hidePopexceed);
        };

        _proto.showPopHome = function showPopHome() {
          this.PopParent.active = true;
          this.pop_upHome.active = true;
          this.homePop.init(this.playerData);
        };

        _proto.hidePopHome = function hidePopHome() {
          this.PopParent.active = false;
          this.pop_upHome.active = false;
        };

        _proto.showPopTip = function showPopTip() {
          this.PopParent.active = true;
          this.Pop_tip.node.active = true;
        };

        _proto.hidePopTip = function hidePopTip() {
          this.PopParent.active = false;
          this.Pop_tip.node.active = false;
        };

        _proto.showPopReport = function showPopReport(npcList, offTime) {
          if (offTime >= 20 * 60 * 1000 && npcList.length > 0 && !GuideCfg.disableReport) {
            this.PopParent.active = true;
            this.Pop_report.init(npcList, offTime);
            this.Pop_report.node.active = true;
          }
        };

        _proto.hidePopReport = function hidePopReport() {
          this.PopParent.active = false;
          this.Pop_report.node.active = false;
        };

        _proto.showPopSale = function showPopSale() {
          this.PopParent.active = true;
          this.Pop_sale.active = true;
        };

        _proto.hidePopSale = function hidePopSale() {
          this.PopParent.active = false;
          this.Pop_sale.active = false;
        };

        _proto.showPopSet = function showPopSet() {
          this.PopParent.active = true;
          this.Pop_set.node.active = true;
          this.btn_set.node.children[0].active = false;
        };

        _proto.showPopAuth = function showPopAuth() {
          this.hidePopSet();
          this.Pop_authorize.node.active = true;
          this.PopParent.active = true;
        };

        _proto.hidePopAuth = function hidePopAuth() {
          this.Pop_authorize.node.active = false;
          this.PopParent.active = false;
        };

        _proto.hidePopSet = function hidePopSet() {
          this.PopParent.active = false;
          this.Pop_set.node.active = false;
        };

        _proto.showPopCAnimalSale = function showPopCAnimalSale() {
          if (NpcManager.getInstance().getAnimalCorpseTotallCoin() > 0) {
            this.Pop_CorpseSale.active = true;
            this.PopParent.active = true;

            GameResponces._event.emit(GameResponces.FingerAnimalCorpse);
          }
        };

        _proto.hidePopCAnimalSale = function hidePopCAnimalSale() {
          this.PopParent.active = false;
          this.Pop_CorpseSale.active = false;
        };

        _proto.isShowtip = function isShowtip() {
          var bl = false;
          bl = this.node.active && !this.PopParent.active && !this.Pop_npc.node.active;
          return bl;
        };

        _proto.showPopNpcInfo = function showPopNpcInfo(audioHide, npc, des, infoPos) {
          audioHide = npc.audioNotHide;
          this.Pop_NpcInfo.node.active = true;
          this.Pop_NpcInfo.showNpcInfo(audioHide, npc, des, infoPos);
        } //npc说话气泡
        ;

        _proto.showPopNpcTaunh = function showPopNpcTaunh(style, des, infoPos, showtime) {
          this.Pop_taunh.node.active = true;

          var uipos = HomeManager.getInstance()._camera.convertToUINode(infoPos, this.node);

          this.Pop_taunh.showNpcTaunh(style, des, uipos, showtime);
        } //npc说话气泡
        ;

        _proto.hideNpcTaunh = function hideNpcTaunh() {
          this.Pop_taunh.node.active = false;
        };

        _proto.showRankAuth = function showRankAuth() {
          this.Pop_rankAuthorize.active = true;
          this.PopParent.active = true;
        };

        _proto.hideRankAuth = function hideRankAuth() {
          this.Pop_rankAuthorize.active = false;
          this.PopParent.active = false;
        };

        _proto.updateCoin = function updateCoin(originNum, curNum, daly) {
          Utils.numberAniamtion(originNum, curNum, this.coin, daly);
        };

        return Panel_Main;
      }(BasePanel), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btn_gameStart", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Btn_update", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "Btn_rank", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "Btn_openSale", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "coin", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "coinPos", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "animalBar", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "animanumber", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "singanimalBar", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "fenchBar", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "lab_fenchBar", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "lab_barTip", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "lab_animal", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "pop_upHome", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "Pop_sale", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "Pop_CorpseSale", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "Pop_tip", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "Pop_npc", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "Pop_NpcInfo", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "Pop_taunh", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "Pop_exceed", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "Pop_qickFix", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "Pop_helpNpc", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "Pop_report", [_dec25], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "Pop_set", [_dec26], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor26 = _applyDecoratedDescriptor(_class2.prototype, "Pop_authorize", [_dec27], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor27 = _applyDecoratedDescriptor(_class2.prototype, "PopParent", [_dec28], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor28 = _applyDecoratedDescriptor(_class2.prototype, "btn_set", [_dec29], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor29 = _applyDecoratedDescriptor(_class2.prototype, "coinTools", [_dec30], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor30 = _applyDecoratedDescriptor(_class2.prototype, "Pop_rankAuthorize", [_dec31], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor31 = _applyDecoratedDescriptor(_class2.prototype, "gameclube", [_dec32], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor32 = _applyDecoratedDescriptor(_class2.prototype, "red", [_dec33], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Panel_netCheck.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BasePanel.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Button, director, BasePanel;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Button = module.Button;
      director = module.director;
    }, function (module) {
      BasePanel = module.BasePanel;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "0ae3dAsRptMdaH8x6SQ81CV", "Panel_netCheck", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Panel_netCheck = exports('Panel_netCheck', (_dec = ccclass('Panel_netCheck'), _dec2 = property({
        type: Node,
        displayName: "mask"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_BasePanel) {
        _inheritsLoose(Panel_netCheck, _BasePanel);

        function Panel_netCheck() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePanel.call.apply(_BasePanel, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "bg", _descriptor, _assertThisInitialized(_this));

          _this.timer = 5;
          return _this;
        }

        var _proto = Panel_netCheck.prototype;

        _proto.start = function start() {
          var _this2 = this;

          this.bg.on(Button.EventType.CLICK, function () {
            _this2.checkNet();
          });
        };

        _proto.checkNet = function checkNet() {
          if (!navigator.onLine) {
            if (!director.isPaused()) {
              this.bg.active = true;
              director.pause();
            }
          } else {
            if (director.isPaused()) {
              director.resume();
              this.bg.active = false;
            }
          }
        };

        _proto.update = function update(dt) {
          if (this.timer <= 0) {
            this.checkNet();
            this.timer = 5;
          } else {
            this.timer -= dt;
          }
        };

        return Panel_netCheck;
      }(BasePanel), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "bg", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Panel_Private.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "7c423Q0+PxCDrosxwAnl37L", "Panel_Private", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Panel_Private = exports('Panel_Private', (_dec = ccclass('Panel_Private'), _dec2 = property({
        type: Button,
        visible: true,
        displayName: "不同意"
      }), _dec3 = property({
        type: Button,
        visible: true,
        displayName: "同意"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Panel_Private, _Component);

        function Panel_Private() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "btn_dis", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btn_agree", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = Panel_Private.prototype;

        _proto.start = function start() {};

        _proto.update = function update(deltaTime) {};

        return Panel_Private;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btn_dis", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btn_agree", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PanelAnimation.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, v3, tween, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      tween = module.tween;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "e875by6J0dMcoX6k9IrRXg/", "PanelAnimation", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PanelAnimation = exports('PanelAnimation', (_dec = ccclass('PanelAnimation'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PanelAnimation, _Component);

        function PanelAnimation() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.scaleVaule = 1;
          return _this;
        }

        var _proto = PanelAnimation.prototype;

        _proto.onEnable = function onEnable() {
          this.node.scale = v3(0, 0, 0);
          tween(this.node).to(0.3, {
            scale: v3(this.scaleVaule, this.scaleVaule, this.scaleVaule)
          }, {
            easing: "backOut"
          }).start();
        };

        _proto.update = function update(deltaTime) {};

        return PanelAnimation;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Pig.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnclosureChild.ts', './Entity.ts', './Fence.ts', './GameManager.ts', './TreasureBox.ts', './SdkManager.ts', './DataManager.ts', './GameCfg.ts', './AudioManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCFloat, SphereCollider, v3, Vec3, randomRange, EnclosureChild, MapSacle, AtkFactor, TotallAtkFactor, Entity, Fence, GameManager, TreasureBox, SdkManager, vibrateType, DataManager, GameCfg, AudioManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
      SphereCollider = module.SphereCollider;
      v3 = module.v3;
      Vec3 = module.Vec3;
      randomRange = module.randomRange;
    }, function (module) {
      EnclosureChild = module.EnclosureChild;
    }, function (module) {
      MapSacle = module.MapSacle;
      AtkFactor = module.AtkFactor;
      TotallAtkFactor = module.TotallAtkFactor;
      Entity = module.Entity;
    }, function (module) {
      Fence = module.Fence;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      TreasureBox = module.TreasureBox;
    }, function (module) {
      SdkManager = module.SdkManager;
      vibrateType = module.vibrateType;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      GameCfg = module.GameCfg;
    }, function (module) {
      AudioManager = module.AudioManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "fc603ub6VVPnaeEcm0drMst", "Pig", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Pig = exports('Pig', (_dec = ccclass('Pig'), _dec2 = property({
        type: CCFloat,
        visible: true,
        displayName: "基础攻击力"
      }), _dec3 = property({
        type: [MapSacle],
        visible: true,
        displayName: "放大系数"
      }), _dec4 = property({
        type: [AtkFactor],
        visible: true,
        displayName: "攻击力个数加成系数"
      }), _dec5 = property({
        type: [TotallAtkFactor],
        visible: true,
        displayName: "总攻击力个数加成系数"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Entity) {
        _inheritsLoose(Pig, _Entity);

        function Pig() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Entity.call.apply(_Entity, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "baseAtk", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scale", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "atkFactor", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "totallAtk", _descriptor4, _assertThisInitialized(_this));

          _this.isAtk = false;
          _this.cfgs = void 0;
          return _this;
        }

        var _proto = Pig.prototype;

        _proto.initCfg = function initCfg() {
          this.scale = new Array();
          this.atkFactor = new Array();
          this.totallAtk = new Array();
          this.cfgs = GameManager.getInstance().animalCfg.Pig;
          this.baseAtk = this.cfgs[0].BaseAtk;

          for (var index = 0; index < this.cfgs.length; index++) {
            var element = this.cfgs[index];
            var sacle = new MapSacle();
            sacle.lv = index;
            sacle.sacle = element.MapSacle;
            this.scale.push(sacle);
            var atkfactor = new AtkFactor();
            atkfactor.lv = index;
            atkfactor.factor = element.AtkFactor;
            this.atkFactor.push(atkfactor);
            var totallatk = new TotallAtkFactor();
            totallatk.lv = index;
            totallatk.factor = element.TotallAtkFactor;
            this.totallAtk.push(totallatk);
          }
        };

        _proto.start = function start() {
          this.node.getComponent(SphereCollider).on('onCollisionEnter', this.onCollsEnter, this);
          this.node.getComponent(SphereCollider).on('onCollisionStay', this.onTriggerStay, this); //this.initCfg();
        };

        _proto.onCollsEnter = function onCollsEnter(collider) {
          var other = collider.otherCollider.node;

          if (other && this.atkState) {
            var point = v3();
            var box = other.getComponent(Fence);

            if (!this.isAtk && !this.isNomalAnimal && box) {
              collider.contacts[0].getWorldPointOnA(point);
              this.skeletal.play("behit");
              SdkManager.getInstance().VibrateShort(DataManager.getInstance().playerData.vibrateSet, vibrateType.light);
              box.onHit(this.getAtkFactor(), point);
              this.isAtk = true;
              this.stopMove();
              var dir = new Vec3(randomRange(-10, 10), randomRange(20, 60), 1).normalize(); //方向

              dir = dir.multiplyScalar(GameCfg.AnimalReboundForce); //长度

              this.rg.useGravity = true;
              this.rg.applyForce(dir);
              this.delayDestroy(800);
              this.isLastAtk();
              return;
            }

            var enc = other.getComponent(EnclosureChild);

            if (!this.isAtk && enc) {
              collider.contacts[0].getWorldPointOnA(point);
              this.skeletal.play("behit");
              SdkManager.getInstance().VibrateShort(DataManager.getInstance().playerData.vibrateSet, vibrateType.light);
              enc.onHit(this.getAtkFactor(), point);
              this.isAtk = true;
              this.stopMove();

              var _dir = new Vec3(randomRange(-10, 10), randomRange(20, 60), 1).normalize(); //方向


              _dir = _dir.multiplyScalar(GameCfg.AnimalReboundForce); //长度

              this.rg.useGravity = true;
              this.rg.applyForce(_dir);
              this.delayDestroy(1500);
              this.isLastAtk();
              return;
            }

            var tr = other.getComponent(TreasureBox);

            if (!this.isAtk && tr) {
              collider.contacts[0].getWorldPointOnA(point);
              this.skeletal.play("behit");
              SdkManager.getInstance().VibrateShort(DataManager.getInstance().playerData.vibrateSet, vibrateType.light);
              tr.onHit(this.getAtkFactor(), point);
              this.isAtk = true;
              this.stopMove();

              var _dir2 = new Vec3(randomRange(-10, 10), randomRange(20, 60), 1).normalize(); //方向


              _dir2 = _dir2.multiplyScalar(GameCfg.AnimalReboundForce); //长度

              this.rg.useGravity = true;
              this.rg.applyForce(_dir2);
              this.delayDestroy(1500);
              this.isLastAtk();
              return;
            }

            if (this.isAtk && other.name == "Dimian") {
              AudioManager.instance.playSound("down");

              var _dir3 = new Vec3(randomRange(-10, 10), randomRange(20, 60), 0).normalize(); //方向


              _dir3 = _dir3.multiplyScalar(GameCfg.AnimalReboundForce); //长度

              this.rg.applyForce(_dir3);
            }
          }
        };

        _proto.onTriggerStay = function onTriggerStay(collider) {
          var other = collider.otherCollider.node;

          if (other) {
            var box = other.getComponent(Fence);

            if (this.isNomalAnimal && box) {
              this.node.setPosition(this.node.position.add3f(0, 0.1, 0));
            }
          }
        };

        _proto.getAtkFactor = function getAtkFactor() {
          var atk;
          var step = this.step >= this.atkFactor.length ? this.atkFactor.length - 1 : this.step;
          atk = this.baseAtk * this.atkFactor[step].factor * this.totallAtk[step].factor;
          GameManager.getInstance().additionalHurt += atk - 1;
          return atk;
        };

        _proto.isLastAtk = function isLastAtk() {
          if (this.step == this.totallStep) ;
        };

        _proto.setBigState = function setBigState(step) {
          step = step >= this.scale.length ? this.scale.length - 1 : step;
          var sacle = this.scale[step].sacle;

          _Entity.prototype.setBigState.call(this, sacle);
        };

        _proto.update = function update(deltaTime) {
          _Entity.prototype.update.call(this, deltaTime);
        };

        return Pig;
      }(Entity), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "baseAtk", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "scale", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "atkFactor", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "totallAtk", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Player.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Enum, CCInteger;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
      CCInteger = module.CCInteger;
    }],
    execute: function () {
      exports('AnimalType', void 0);

      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _dec4, _class4;

      cclegacy._RF.push({}, "2a9b2vDQvJMO4H1AS85ZzQ/", "Player", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AnimalType;

      (function (AnimalType) {
        AnimalType[AnimalType["sheep"] = 0] = "sheep";
        AnimalType[AnimalType["cow"] = 1] = "cow";
        AnimalType[AnimalType["pig"] = 2] = "pig";
        AnimalType[AnimalType["zebra"] = 3] = "zebra";
        AnimalType[AnimalType["elephant"] = 4] = "elephant";
        AnimalType[AnimalType["none"] = -1] = "none";
      })(AnimalType || (AnimalType = exports('AnimalType', {})));

      Enum(AnimalType);
      var AnimalInfo = exports('AnimalInfo', (_dec = ccclass('AnimalInfo'), _dec2 = property({
        type: AnimalType,
        displayName: "动物类型"
      }), _dec3 = property({
        type: CCInteger,
        displayName: "动物数量"
      }), _dec(_class = (_class2 = function AnimalInfo() {
        _initializerDefineProperty(this, "animalType", _descriptor, this);

        _initializerDefineProperty(this, "animalCnt", _descriptor2, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "animalType", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return AnimalType.none;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "animalCnt", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class));
      var Player = exports('Player', (_dec4 = ccclass('Player'), _dec4(_class4 = function Player() {}) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PlayerData.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "45671XiOqZGVY4pZY0IFGF7", "PlayerData", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PlayerData = exports('PlayerData', (_dec = ccclass('PlayerData'), _dec(_class = function PlayerData() {
        this.isAuthorize = false;
        this.playerName = "我的名字";
        this.headUrl = "";
        this.coin = 0;
        this.fenchLv = 0;
        this.fencHp = 60;
        this.homeLv = 0;
        this.lastBuildAnimalfram = 0;
        this.homeTime = 0;
        this.fenchTime = 0;
        this.reflashNpcAdTime = 0;
        this.audioReflashTime = 0;
        this.treasureBox = -1;
        this.friendHelp = -1;
        this._listAnimals = new Array();
        this.unlockAnimals = new Array();
        this.mapSize = void 0;
        this.npcList = new Array();
        this.sceneNpcList = new Array();
        this.audioSet = true;
        this.musicSet = true;
        this.vibrateSet = true;
        this.addGiveProbability = 0;
        this.difficultyLv = -3;
        this.day = 0;
        this.ShareRefresh = 0;
        this.ShareChange = 0;
        this.ShareAddAnimal = 0;
        this.gameTimes = 0;
        this.gameCWins = 0;
      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PlayerFench.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Panel_Main.ts', './CfgData.ts', './UIManager.ts', './Utils.ts', './Sleeper.ts', './AssetsMapItem.ts', './DataManager.ts', './TimeTools.ts', './NpcManager.ts', './AnimalFarm.ts', './Coroutine.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _regeneratorRuntime, _createClass, cclegacy, _decorator, Node, director, instantiate, v3, randomRange, Component, Panel_Main, CfgData, UIManager, Utils, Sleeper, AssetsMapItem, DataManager, TimeTools, NpcManager, AnimalFarm, Coroutine;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _regeneratorRuntime = module.regeneratorRuntime;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      director = module.director;
      instantiate = module.instantiate;
      v3 = module.v3;
      randomRange = module.randomRange;
      Component = module.Component;
    }, function (module) {
      Panel_Main = module.Panel_Main;
    }, function (module) {
      CfgData = module.CfgData;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      Sleeper = module.Sleeper;
    }, function (module) {
      AssetsMapItem = module.AssetsMapItem;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      TimeTools = module.TimeTools;
    }, function (module) {
      NpcManager = module.NpcManager;
    }, function (module) {
      AnimalFarm = module.AnimalFarm;
    }, function (module) {
      Coroutine = module.Coroutine;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "913f5Nn3M1L6YXqqzy8iLCx", "PlayerFench", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PlayerFench = exports('PlayerFench', (_dec = ccclass('PlayerFench'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PlayerFench, _Component);

        function PlayerFench() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.sleeper = void 0;
          _this._curHp = void 0;
          _this.maxHp = void 0;
          _this.panel_home = void 0;
          _this.homecfg = void 0;
          _this.playerData = void 0;
          _this.timeData = void 0;
          _this.map_fail = void 0;
          _this.playSleeperRun = true;
          _this.hpstate = void 0;
          _this.homeView = void 0;
          _this.select = 0;
          _this.fixTime = void 0;
          _this.isInit = false;
          _this.homeManager = void 0;
          return _this;
        }

        PlayerFench.getInstance = function getInstance() {
          if (!this._instance) {
            var framNode = new Node("PlayerFenchView");
            this._instance = framNode.addComponent(PlayerFench);
            director.getScene().addChild(framNode);
            director.addPersistRootNode(this._instance.node);
          }

          return this._instance;
        };

        var _proto = PlayerFench.prototype;

        _proto.init = function init(playerData, homeNode, homeManager) {
          var _this2 = this;

          if (!this.isInit) {
            this.isInit = true;
            this.playerData = playerData;
            this.timeData = DataManager.getInstance().timeDate;
            this.panel_home = UIManager.getInstance().getPanel(Panel_Main);
            this.homecfg = CfgData.getInstance().getHomeCfg();
            this.map_fail = new Map();
            this.homecfg.fail.forEach(function (item) {
              var sp = Utils.getSplitNumbers(item.FenceSurplusHP, "_");

              _this2.map_fail.set(item.LevelGap, [sp[0], sp[1]]);
            });
            this.hpstate = Utils.getSplitNumbers(this.homecfg.fence[this.playerData.fenchLv].BrokenState, ",");
            this.fixTime = DataManager.getInstance().timeDate.offLinefram;
            this.maxHp = this.homecfg.fence[playerData.fenchLv].HP;
            this.curHp = playerData.fencHp;
            this.initOfflineFixFench();
            this.offlineFixFench();
            this.startFixFench();
          }

          this.homeManager = homeManager;
          this.sleeper = instantiate(AssetsMapItem.instance._sleeper).getComponent(Sleeper);
          homeNode.addChild(this.sleeper.node);
          this.sleeper.node.setPosition(v3(0, 0, 4.8));

          if (!this.isfullHp()) {
            this.playSleeperRun = false;
            this.sleeper.startslowFix();
          }

          this.panel_home.updateFenchView(this.curHp, this.maxHp);
        };

        _proto.onGameStart = function onGameStart() {
          this.sleeper = null;
        };

        _proto.onDestroy = function onDestroy() {
          DataManager.getInstance().timeDate.offLinefram = TimeTools.getCurTime();
          DataManager.getInstance().savePlayData();
        } //升级
        ;

        _proto.updateFench = function updateFench(playerData) {
          this.maxHp = this.homecfg.fence[playerData.fenchLv].HP;
          this.curHp = this.maxHp;
          this.playerData.fencHp = this.curHp;
          this.panel_home.updateFenchView(this.curHp, this.maxHp);
        };

        _proto.behit = function behit(npc) {
          var hit = 0;
          var lvc = npc.lv - this.playerData.homeLv;

          if (this.map_fail.has(lvc)) {
            hit = this.maxHp * randomRange(this.map_fail.get(lvc)[0], this.map_fail.get(lvc)[1]);
          } else {
            console.log("没有对应的等级差数据:" + lvc);
          }

          if (npc.isWin) hit = this.curHp;
          console.log("受到npc伤害：" + hit);
          this.curHp -= hit;
          this.playerData.fencHp = this.curHp;
          this.panel_home.updateFenchView(this.curHp, this.maxHp);
          this.calculateCurHp();

          if (this.sleeper && !this.isfullHp()) {
            this.sleeper.startslowFix();
            this.playSleeperRun = false;
          }
        } //特殊处理 为了让上线的时候表现为不满血
        ;

        _proto.initOfflineFixFench = function initOfflineFixFench() {
          var s = Utils.limitNumber((TimeTools.getCurTime() - this.fixTime) / 1000, 0, 99999);
          var lv = this.playerData.fenchLv;
          this.curHp += s * this.homecfg.fence[lv].Recovery;
          this.playerData.fencHp = this.curHp; //有npc 才处理

          if (NpcManager.getInstance().offNpcList.length > 0) {
            var hit = randomRange(0.15, 0.75) * this.maxHp;
            this.curHp -= hit;
            NpcManager.getInstance().offNpcList = [];
          }

          DataManager.getInstance().savePlayData();
        } //离线回血
        ;

        _proto.offlineFixFench = function offlineFixFench() {
          var s = Utils.limitNumber((TimeTools.getCurTime() - this.fixTime) / 1000, 0, 99999);
          console.log("离线" + s + "秒");
          var lv = this.playerData.fenchLv;
          this.curHp += s * this.homecfg.fence[lv].Recovery;
          this.playerData.fencHp = this.curHp;
          DataManager.getInstance().timeDate.offLinefram = TimeTools.getCurTime(); // 如果血没满，那么扣除一些动物

          if (!this.isfullHp() && s > 10 * 60) {
            var cnt = Math.floor(randomRange(0.1, 0.5) * AnimalFarm.getInstance()._lisAnimals.length);

            for (var index = 0; index < cnt; index++) {
              AnimalFarm.getInstance().popAnimal();
            }
          }

          DataManager.getInstance().savePlayData();
        };

        _proto.startFixFench = function startFixFench() {
          var _this3 = this;

          this.schedule(function () {
            _this3.calculateCurHp();
          }, 1); //每5秒存一次离线的时间

          this.schedule(function () {
            _this3.timeData.offLinefram = TimeTools.getCurTime();
            DataManager.getInstance().saveTimeData();
          }, 5);
        };

        _proto.calculateCurHp = function calculateCurHp() {
          if (this.curHp <= this.maxHp) {
            var s = Utils.limitNumber((TimeTools.getCurTime() - this.fixTime) / 1000, 0, 99999);
            s = Math.floor(s);
            this.fixTime = TimeTools.getCurTime();
            var lv = this.playerData.fenchLv;
            var addhp = s * this.homecfg.fence[lv].Recovery;
            this.curHp += addhp;
            this.playerData.fencHp = this.curHp;
            this.panel_home.updateFenchView(this.curHp, this.maxHp);

            if (this.sleeper && this.curHp >= this.maxHp && !this.playSleeperRun) {
              this.playSleeperRun = true;
              this.sleeper.play("leave");
            }

            this.selectBrokenView();
          }
        };

        _proto.qickFixFench = function qickFixFench() {
          if (this.sleeper) this.sleeper.startquickFix(this);
        };

        _proto.fixFench = /*#__PURE__*/_regeneratorRuntime().mark(function fixFench(n, com) {
          var fixhp, index;
          return _regeneratorRuntime().wrap(function fixFench$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                fixhp = (this.maxHp - this.curHp) / n;
                index = 0;

              case 2:
                if (!(index < n)) {
                  _context.next = 10;
                  break;
                }

                this.curHp += fixhp;
                this.panel_home.updateFenchView(this.curHp, this.maxHp);
                _context.next = 7;
                return Coroutine.waitForSecond(0.1, com);

              case 7:
                index++;
                _context.next = 2;
                break;

              case 10:
              case "end":
                return _context.stop();
            }
          }, fixFench, this);
        });

        _proto.selectBrokenView = function selectBrokenView() {
          var homemanager = this.homeManager;

          if (homemanager && homemanager.homeView) {
            this.homeView = homemanager.homeView;
            var p = this.curHp / this.maxHp;
            this.select = 0;

            if (p < 0.98) {
              for (var index = 0; index < this.hpstate.length; index++) {
                var element = this.hpstate[index];
                if (index == this.hpstate.length - 1) this.select = index;else {
                  var nextelement = this.hpstate[index + 1];

                  if (p <= element && p > nextelement) {
                    this.select = index;
                    break;
                  }
                }
              }
            }

            this.select += 1;
            var showingFench = this.homeView.showCurFenchView;

            for (var _index = 1; _index < showingFench.children.length; _index++) {
              var item = showingFench.children[_index];
              item.active = false;
            }

            showingFench.children[this.select].active = true;
          }
        };

        _proto.isfullHp = function isfullHp() {
          return this.curHp >= this.maxHp;
        };

        _createClass(PlayerFench, [{
          key: "curHp",
          get: function get() {
            return this._curHp;
          },
          set: function set(value) {
            this._curHp = value;
            this._curHp = Utils.limitNumber(this.curHp, 0, this.maxHp);
          }
        }]);

        return PlayerFench;
      }(Component), _class2._instance = void 0, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PolyfillAudioManager.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, AudioSource;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      AudioSource = module.AudioSource;
    }],
    execute: function () {
      cclegacy._RF.push({}, "302b7/3J1dNDLXL1WG2tjlN", "PolyfillAudioManager", undefined);

      console.log("patch cocos audio bug!");

      function remove(array, o) {
        var indexOf = array.indexOf(o);

        if (indexOf < 0) {
          return false;
        }

        array = array.splice(indexOf, 1);
        return true;
      }

      var PolyfillAudioManager = exports('PolyfillAudioManager', /*#__PURE__*/function () {
        function PolyfillAudioManager() {
          this._playingAudios = [];
        }

        var _proto = PolyfillAudioManager.prototype;

        _proto.removePlaying = function removePlaying(oneShotAudio) {
          remove(this._playingAudios, oneShotAudio);
        };

        _proto.addPlaying = function addPlaying(oneShotAudio) {
          this._playingAudios.push(oneShotAudio);
        };

        _proto.discardOnePlayingIfNeeded = function discardOnePlayingIfNeeded(maxAudioChannel) {
          if (maxAudioChannel == 0 || maxAudioChannel == undefined) {
            maxAudioChannel = 10;
          }

          if (this._playingAudios.length < maxAudioChannel) {
            return;
          }

          var removed = this._playingAudios.splice(0, 1)[0];

          removed.stop();
        };

        return PolyfillAudioManager;
      }());
      var audioManager = new PolyfillAudioManager();

      AudioSource.prototype.playOneShot = function (clip, volumeScale) {
        if (volumeScale === void 0) {
          volumeScale = 1;
        }

        if (!clip._nativeAsset) {
          console.error("Invalid audio clip");
          return;
        }

        var AudioPlayer = Object.getPrototypeOf(clip._nativeAsset.player).constructor; // @ts-ignore

        AudioPlayer.loadOneShotAudio(clip._nativeAsset.url, this._volume * volumeScale, {
          audioLoadMode: clip.loadMode
        }).then(function (oneShotAudio) {
          //@ts-ignore
          audioManager.discardOnePlayingIfNeeded(AudioPlayer.maxAudioChannel);

          oneShotAudio.onPlay = function () {
            audioManager.addPlaying(oneShotAudio);
          };

          oneShotAudio.onEnd = function () {
            audioManager.removePlaying(oneShotAudio);
          };

          oneShotAudio.play();
        })["catch"](function (e) {
          console.error(e);
        });
      };

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Polymorphism.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, ccenum, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      ccenum = module.ccenum;
      _decorator = module._decorator;
    }],
    execute: function () {
      exports('polymorphism', polymorphism);

      cclegacy._RF.push({}, "c48eeLRELVO15JTzAwkTkgN", "Polymorphism", undefined);

      function polymorphism(_ref) {
        var types = _ref.types,
            displayName = _ref.displayName;
        return function (target, propertyKey) {
          if (typeof propertyKey !== 'string') {
            throw new Error("Only string named fields are supported.");
          }

          var typePropertyKey = propertyKey + "__type";
          var typePropertyDescriptor = {
            get: function get() {
              var currentValue = this[propertyKey];
              var typeIndex = types.findIndex(function (_ref2) {
                var constructor = _ref2[0];
                return currentValue.constructor === constructor;
              });

              if (typeIndex < 0) {
                throw new Error(currentValue + " is not a registered type.");
              }

              return typeIndex;
            },
            set: function set(value) {
              var _types$value = types[value],
                  constructor = _types$value[0];

              if (this[propertyKey].constructor === constructor) {
                return;
              }

              var object = new constructor();
              this[propertyKey] = object;
            }
          };
          var typeEnums = types.reduce(function (result, _ref3, index) {
            var constructor = _ref3[0],
                name = _ref3[1];
            result[name] = index;
            return result;
          }, {});
          ccenum(typeEnums);

          _decorator.property({
            displayName: displayName != null ? displayName : "Type of " + propertyKey,
            type: typeEnums
          })(target, typePropertyKey, typePropertyDescriptor);

          Object.defineProperty(target, typePropertyKey, typePropertyDescriptor);
        };
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Pop_authorize.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AuthorizeManager.ts', './UIManager.ts', './Panel_Main.ts', './HomeManager.ts', './DataManager.ts', './Utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Label, Sprite, Component, AuthorizeManager, UIManager, Panel_Main, HomeManager, DataManager, Utils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Label = module.Label;
      Sprite = module.Sprite;
      Component = module.Component;
    }, function (module) {
      AuthorizeManager = module.AuthorizeManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      Panel_Main = module.Panel_Main;
    }, function (module) {
      HomeManager = module.HomeManager;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "e5e60mEmqlLPIGFuxg9hlqz", "Pop_authorize", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Pop_authorize = exports('Pop_authorize', (_dec = ccclass('Pop_authorize'), _dec2 = property({
        type: Button,
        visible: true,
        displayName: "授权"
      }), _dec3 = property({
        type: Button,
        visible: true,
        displayName: "取消"
      }), _dec4 = property({
        type: Label,
        visible: true,
        displayName: "名字"
      }), _dec5 = property({
        type: Sprite,
        visible: true,
        displayName: "头像"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Pop_authorize, _Component);

        function Pop_authorize() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "btn_auth", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btn_no", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lab_name", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "head", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = Pop_authorize.prototype;

        _proto.start = function start() {
          this.btn_auth.node.on(Button.EventType.CLICK, function () {
            Pop_authorize.auth();
          }, this);
          this.btn_no.node.on(Button.EventType.CLICK, function () {
            UIManager.getInstance().getPanel(Panel_Main).hidePopAuth();
          }, this);
        };

        Pop_authorize.auth = function auth() {
          if (Utils.isNativePlatform()) {
            UIManager.getInstance().getPanel(Panel_Main).hidePopAuth();
          } else {
            AuthorizeManager.getInstance().getBaseAuthrize().onlySetAuthorize(function (res) {
              if (res) {
                UIManager.getInstance().getPanel(Panel_Main).hidePopAuth();
                var playerdata = DataManager.getInstance().playerData;
                var userInfo = AuthorizeManager.getInstance().getBaseAuthrize().authorizUserInfo;
                playerdata.headUrl = userInfo.avatarUrl;
                playerdata.playerName = userInfo.nickName;
                playerdata.isAuthorize = true;
                DataManager.getInstance().savePlayData();
                HomeManager.getInstance().homeView.updatePlayerAvatar(playerdata);
              }
            });
          }
        };

        return Pop_authorize;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btn_auth", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btn_no", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lab_name", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "head", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Pop_CorpseSale.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UIManager.ts', './Panel_Main.ts', './HomeManager.ts', './NpcManager.ts', './Utils.ts', './LabelEx.ts', './SdkManager.ts', './DataManager.ts', './TimeTools.ts', './GameResponces.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Node, Label, Sprite, instantiate, Component, UIManager, Panel_Main, HomeManager, NpcManager, Utils, LabelEx, SdkManager, adEnum, DataManager, TimeTools, GameResponces;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Node = module.Node;
      Label = module.Label;
      Sprite = module.Sprite;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      Panel_Main = module.Panel_Main;
    }, function (module) {
      HomeManager = module.HomeManager;
    }, function (module) {
      NpcManager = module.NpcManager;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      LabelEx = module.LabelEx;
    }, function (module) {
      SdkManager = module.SdkManager;
      adEnum = module.adEnum;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      TimeTools = module.TimeTools;
    }, function (module) {
      GameResponces = module.GameResponces;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _dec11, _class4;

      cclegacy._RF.push({}, "aac11QO0jpFZ7jRs56q1IgG", "Pop_CorpseSale", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Pop_CorpseSale = exports('Pop_CorpseSale', (_dec = ccclass('Pop_CorpseSale'), _dec2 = property({
        type: Button,
        displayName: "出售"
      }), _dec3 = property({
        type: Button,
        displayName: "广告出售"
      }), _dec4 = property({
        type: Button,
        displayName: "close"
      }), _dec5 = property({
        type: Node,
        displayName: "animals"
      }), _dec6 = property({
        type: Label,
        displayName: "出售的金额"
      }), _dec7 = property({
        type: Label,
        displayName: "动物数"
      }), _dec8 = property({
        type: Label,
        displayName: "离开的时间"
      }), _dec9 = property({
        type: Node,
        displayName: "npc列表"
      }), _dec10 = property({
        type: Node,
        displayName: "npcItem"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Pop_CorpseSale, _Component);

        function Pop_CorpseSale() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "Btn_sale", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Btn_adSale", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Btn_close", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animals", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "saleGold", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animalCnt", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "levelTimelab", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "npcList", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "npcItem", _descriptor9, _assertThisInitialized(_this));

          _this._npclist = void 0;
          _this.npcManager = void 0;
          _this.saleTime = void 0;
          return _this;
        }

        var _proto = Pop_CorpseSale.prototype;

        _proto.start = function start() {
          this.Btn_close.node.on(Button.EventType.CLICK, function () {
            UIManager.getInstance().getPanel(Panel_Main).hidePopCAnimalSale();
          }, this);
          this.Btn_sale.node.on(Button.EventType.CLICK, this.clickSale, this);
          this.Btn_adSale.node.on(Button.EventType.CLICK, this.clickAdSale, this);
        };

        _proto.onEnable = function onEnable() {
          this.npcManager = NpcManager.getInstance();
          this.updateAnimalView();
        };

        _proto.updateAnimalView = function updateAnimalView() {
          var _this2 = this;

          this.saleTime = TimeTools.getCurTime() - DataManager.getInstance().timeDate.salefram;
          if (!this.node.active) return;
          this._npclist = this.npcManager.sceneList;
          this.npcList.children.forEach(function (item) {
            item.destroy();
          });

          this._npclist.forEach(function (npc) {
            var item = instantiate(_this2.npcItem);
            item.setParent(_this2.npcList);
            item.active = true;
            var view = new NpcView();
            view.init(npc, item);
          });

          var totallCnt = 0;

          for (var index = 0; index < 5; index++) {
            this.setAnimalCnt(index, 0);
          }

          for (var _index = 0; _index < 5; _index++) {
            this.animals.children[_index].getComponentInChildren(Label).string = "0";
          }

          this.saleGold.string = this.npcManager.getAnimalCorpseTotallCoin().toString();

          this._npclist.forEach(function (npc) {
            npc.animalCorpseList.forEach(function (animalType) {
              var lab = _this2.animals.children[animalType].getComponentInChildren(Label);

              var now = Number.parseInt(lab.string);
              now++;
              lab.string = now.toString();
              totallCnt++;
            });

            _this2.createNpcView(npc);
          });

          this.animalCnt.string = totallCnt + "只";
          var hours = Math.ceil(this.saleTime / 1000 / 60 / 60);
          this.levelTimelab.string = hours + "小时内以下玩家";
        };

        _proto.setAnimalCnt = function setAnimalCnt(animaType, cnt) {};

        _proto.createNpcView = function createNpcView(npc) {};

        _proto.clickSale = function clickSale() {
          HomeManager.getInstance().saleAnimalCorpse(1);
          this.updateAnimalView();
          UIManager.getInstance().getPanel(Panel_Main).hidePopCAnimalSale();
          DataManager.getInstance().timeDate.salefram = TimeTools.getCurTime();
          DataManager.getInstance().saveTimeData();

          GameResponces._event.emit(GameResponces.FingerSellAnimal);
        };

        _proto.clickAdSale = function clickAdSale() {
          var _this3 = this;

          SdkManager.getInstance().showAd(adEnum.reward, function (isened) {
            if (!isened) return;
            HomeManager.getInstance().saleAnimalCorpse(2);

            _this3.updateAnimalView();

            UIManager.getInstance().getPanel(Panel_Main).hidePopCAnimalSale();
            DataManager.getInstance().timeDate.salefram = TimeTools.getCurTime();
            DataManager.getInstance().saveTimeData();
          }, this);
        };

        return Pop_CorpseSale;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "Btn_sale", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Btn_adSale", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "Btn_close", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "animals", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "saleGold", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "animalCnt", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "levelTimelab", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "npcList", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "npcItem", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      var NpcView = exports('NpcView', (_dec11 = ccclass('NpcView'), _dec11(_class4 = /*#__PURE__*/function () {
        function NpcView() {
          this.head = void 0;
          this.npcName = void 0;
        }

        var _proto2 = NpcView.prototype;

        _proto2.init = function init(npc, root) {
          var _this4 = this;

          this.npcName = root.getChildByPath("npcName").getComponent(LabelEx);
          this.npcName.orgVlaue = npc.npcName;
          Utils.urlToSpriteFrame(npc.headUrl, function (res) {
            _this4.head = root.getChildByPath("mask/head").getComponent(Sprite);
            if (_this4.head) _this4.head.spriteFrame = res;
          });
        };

        return NpcView;
      }()) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Pop_exceed.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AnimalFarm.ts', './DataManager.ts', './UIManager.ts', './Panel_Main.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Node, Label, Component, AnimalFarm, DataManager, UIManager, Panel_Main;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Node = module.Node;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      AnimalFarm = module.AnimalFarm;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      Panel_Main = module.Panel_Main;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "6216bIKoQlMWJzRkPaNfKSm", "Pop_exceed", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Pop_exceed = exports('Pop_exceed', (_dec = ccclass('Pop_exceed'), _dec2 = property({
        type: Button,
        displayName: "出售"
      }), _dec3 = property({
        type: Node,
        displayName: "animals"
      }), _dec4 = property({
        type: Label,
        displayName: "出售的金额"
      }), _dec5 = property({
        type: Label,
        displayName: "动物数"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Pop_exceed, _Component);

        function Pop_exceed() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "Btn_sale", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animalsView", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "saleGold", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animalCnt", _descriptor4, _assertThisInitialized(_this));

          _this.animalList = void 0;
          _this.totall = void 0;
          return _this;
        }

        var _proto = Pop_exceed.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          this.Btn_sale.node.on(Button.EventType.CLICK, function () {
            DataManager.getInstance().updateCoin(_this2.totall);
            UIManager.getInstance().getPanel(Panel_Main).hidePopexceed();
          }, this);
        };

        _proto.init = function init(animals) {
          this.animalList = animals;
          this.totall = AnimalFarm.getInstance().getCoin(this.animalList);
          this.updateAnimalView();
        };

        _proto.updateAnimalView = function updateAnimalView() {
          this.animalCnt.string = this.animalList.length.toString();
          this.saleGold.string = this.totall.toString();

          for (var index = 0; index < this.animalsView.children.length; index++) {
            var element = this.animalsView.children[index];
            element.getComponentInChildren(Label).string = "0";
          }

          for (var _index = 0; _index < this.animalList.length; _index++) {
            var animalType = this.animalList[_index];
            var lb = this.animalsView.children[animalType].getComponentInChildren(Label);
            lb.string = (Number.parseInt(lb.string) + 1).toString();
          }
        };

        return Pop_exceed;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "Btn_sale", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "animalsView", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "saleGold", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "animalCnt", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Pop_game.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './DataManager.ts', './GameManager.ts', './UIManager.ts', './Panel_Game.ts', './GameCfg.ts', './SdkManager.ts', './CfgData.ts', './GameResponces.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Enum, Node, Button, Sprite, Component, DataManager, GameManager, UIManager, Panel_Game, GameCfg, SdkManager, ShareAppType, adEnum, CfgData, GameResponces;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
      Node = module.Node;
      Button = module.Button;
      Sprite = module.Sprite;
      Component = module.Component;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      Panel_Game = module.Panel_Game;
    }, function (module) {
      GameCfg = module.GameCfg;
    }, function (module) {
      SdkManager = module.SdkManager;
      ShareAppType = module.ShareAppType;
      adEnum = module.adEnum;
    }, function (module) {
      CfgData = module.CfgData;
    }, function (module) {
      GameResponces = module.GameResponces;
    }],
    execute: function () {
      exports('PropType', void 0);

      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "aae82eFUeZKGrVE1H2ji4rj", "Pop_game", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PropType;

      (function (PropType) {
        PropType[PropType["ReflashAnimal"] = 0] = "ReflashAnimal";
        PropType[PropType["ChangeAnimal"] = 1] = "ChangeAnimal";
        PropType[PropType["GetAnimals"] = 2] = "GetAnimals";
        PropType[PropType["None"] = 3] = "None";
      })(PropType || (PropType = exports('PropType', {})));

      Enum(PropType);
      var Pop_game = exports('Pop_game', (_dec = ccclass('Pop_game'), _dec2 = property({
        type: PropType,
        visible: true,
        displayName: "道具类型"
      }), _dec3 = property({
        type: Node,
        visible: true,
        displayName: "动物"
      }), _dec4 = property({
        type: Button,
        visible: true,
        displayName: "广告"
      }), _dec5 = property({
        type: Sprite,
        visible: true,
        displayName: "广告icon"
      }), _dec6 = property({
        type: Sprite,
        visible: true,
        displayName: "分享icon"
      }), _dec7 = property({
        type: Button,
        visible: true,
        displayName: "关闭"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Pop_game, _Component);

        function Pop_game() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "_proptpype", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animals", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btn_ad", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "adicon", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sharedicon", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btn_close", _descriptor6, _assertThisInitialized(_this));

          _this.panel_game = void 0;
          _this.gameManager = void 0;
          _this.adCnt = 1;
          return _this;
        }

        var _proto = Pop_game.prototype;

        _proto.onEnable = function onEnable() {
          this.panel_game = UIManager.getInstance().getPanel(Panel_Game);
          this.gameManager = GameManager.getInstance();
          this.init();
        };

        _proto.start = function start() {
          var _this2 = this;

          if (this._proptpype == PropType.GetAnimals) {
            for (var index = 0; index < 5; index++) {
              this.animals.children[index].getComponent(Sprite).grayscale = true;
            }

            DataManager.getInstance().playerData.unlockAnimals.forEach(function (element) {
              _this2.animals.children[element].getComponent(Sprite).grayscale = false;
            });
          }

          this.btn_ad.node.on(Button.EventType.CLICK, this.useProp, this);
          this.btn_close.node.on(Button.EventType.CLICK, this.close, this);
        };

        _proto.init = function init() {
          this.adicon.node.active = false;
          this.sharedicon.node.active = true;

          switch (this._proptpype) {
            case PropType.ChangeAnimal:
              this.adCnt = GameCfg.changeAnimalTypeAd;
              var ShareChangetimes = SdkManager.getInstance().GetShareTimes(ShareAppType.ShareChange);

              if (ShareChangetimes > 0) {
                this.sharedicon.node.active = true;
                this.adicon.node.active = false;
              } else {
                this.sharedicon.node.active = false;
                this.adicon.node.active = true;
              }

              break;

            case PropType.GetAnimals:
              this.adCnt = GameCfg.addAnimalCntAd;
              var ShareAddAnimalimes = SdkManager.getInstance().GetShareTimes(ShareAppType.ShareAddAnimal);

              if (ShareAddAnimalimes > 0) {
                this.sharedicon.node.active = true;
                this.adicon.node.active = false;
              } else {
                this.sharedicon.node.active = false;
                this.adicon.node.active = true;
              }

              break;

            case PropType.ReflashAnimal:
              this.adCnt = GameCfg.reflashAd;
              var ShareRefreshtimes = SdkManager.getInstance().GetShareTimes(ShareAppType.ShareRefresh);

              if (ShareRefreshtimes > 0) {
                this.sharedicon.node.active = true;
                this.adicon.node.active = false;
              } else {
                this.sharedicon.node.active = false;
                this.adicon.node.active = DataManager.getInstance().guideData.storeyIndex > 4;
              }

              break;
          }
        };

        _proto.close = function close() {
          this.node.active = false;
          this.panel_game.closePopPanel();
        };

        _proto.useProp = function useProp() {
          if (DataManager.getInstance().guideData.storeyIndex <= 4) {
            this.gameManager.prop.reflashAnimal();
            this.close();

            GameResponces._event.emit(GameResponces.ClickRefreshButton);

            return;
          }

          if (this.adicon.node.active) {
            this.watchAd();
          } else {
            this.shared();
          }
        };

        _proto.watchAd = function watchAd() {
          var _this3 = this;

          if (this.adCnt <= 0) return;
          SdkManager.getInstance().showAd(adEnum.reward, function (isended) {
            if (!isended) return;

            switch (_this3._proptpype) {
              case PropType.ChangeAnimal:
                _this3.close();

                _this3.panel_game.showSwtichPop();

                SdkManager.getInstance().SendEvent(CfgData.getInstance().getEventData().getDotEvent(10).id, null);
                break;

              case PropType.GetAnimals:
                _this3.gameManager.prop.bronNewAnimals();

                _this3.close();

                SdkManager.getInstance().SendEvent(CfgData.getInstance().getEventData().getDotEvent(11).id, null);
                break;

              case PropType.ReflashAnimal:
                _this3.gameManager.prop.reflashAnimal();

                _this3.close();

                SdkManager.getInstance().SendEvent(CfgData.getInstance().getEventData().getDotEvent(9).id, null);
                break;
            }

            _this3.panel_game.updatePropViewState(_this3._proptpype);

            _this3.adCnt--;
          }, this);
        };

        _proto.shared = function shared() {
          var _this4 = this;

          if (this.adCnt <= 0) return;

          switch (this._proptpype) {
            case PropType.ChangeAnimal:
              SdkManager.getInstance().ShareAppMessage(ShareAppType.ShareChange);
              this.close();
              this.panel_game.showSwtichPop();
              SdkManager.getInstance().SendEvent(CfgData.getInstance().getEventData().getDotEvent(7).id, null);
              break;

            case PropType.GetAnimals:
              SdkManager.getInstance().ShareAppMessage(ShareAppType.ShareAddAnimal);
              this.gameManager.prop.bronNewAnimals();
              this.close();
              SdkManager.getInstance().SendEvent(CfgData.getInstance().getEventData().getDotEvent(8).id, null);
              break;

            case PropType.ReflashAnimal:
              SdkManager.getInstance().ShareAppMessage(ShareAppType.ShareRefresh);
              this.close();
              this.scheduleOnce(function () {
                _this4.gameManager.prop.reflashAnimal();

                _this4.panel_game.updatePropViewState(_this4._proptpype);
              }, 0.3);
              SdkManager.getInstance().SendEvent(CfgData.getInstance().getEventData().getDotEvent(6).id, null);
              break;
          }

          this.panel_game.updatePropViewState(this._proptpype);
          this.adCnt--;
        };

        return Pop_game;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_proptpype", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return PropType.None;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "animals", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btn_ad", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "adicon", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "sharedicon", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "btn_close", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Pop_gold.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "e7236QO8hRHhIKO7ZorOZxU", "Pop_gold", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Pop_gold = exports('Pop_gold', (_dec = ccclass('Pop_gold'), _dec2 = property({
        type: [Label],
        displayName: "动物的售价"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Pop_gold, _Component);

        function Pop_gold() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "cnt", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = Pop_gold.prototype;

        _proto.init = function init(animalCfg) {
          for (var index = 0; index < this.cnt.length; index++) {
            var price = this.cnt[index];
            price.string = animalCfg[index].Price.toString();
          }
        };

        _proto.update = function update(deltaTime) {};

        return Pop_gold;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "cnt", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Pop_help.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UIManager.ts', './Panel_Game.ts', './GameManager.ts', './TimeTools.ts', './SdkManager.ts', './CfgData.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Component, UIManager, Panel_Game, GameManager, parseTimeOper, SdkManager, ShareAppType, CfgData;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Component = module.Component;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      Panel_Game = module.Panel_Game;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      parseTimeOper = module.parseTimeOper;
    }, function (module) {
      SdkManager = module.SdkManager;
      ShareAppType = module.ShareAppType;
    }, function (module) {
      CfgData = module.CfgData;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "9db58J/BzBHkL5JMvZf5/e7", "Pop_help", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Pop_help = exports('Pop_help', (_dec = ccclass('Pop_help'), _dec2 = property({
        type: Button,
        displayName: "叫人帮忙"
      }), _dec3 = property({
        type: Button,
        displayName: "不叫人帮忙"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Pop_help, _Component);

        function Pop_help() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "btn_share", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btn_no", _descriptor2, _assertThisInitialized(_this));

          _this.panel_game = void 0;
          _this.interval = void 0;
          return _this;
        }

        var _proto = Pop_help.prototype;

        _proto.start = function start() {
          this.btn_share.node.on(Button.EventType.CLICK, this.callHelp, this);
          this.btn_no.node.on(Button.EventType.CLICK, this.close, this);
        };

        _proto.onEnable = function onEnable() {
          this.panel_game = UIManager.getInstance().getPanel(Panel_Game);
          this.panel_game.helpTime.node.parent.active = false;
        };

        _proto.close = function close() {
          this.panel_game.hideHelp();
        };

        _proto.callHelp = function callHelp() {
          var _this2 = this;

          this.close();
          SdkManager.getInstance().ShareAppMessage(ShareAppType.None);
          SdkManager.getInstance().SendEvent(CfgData.getInstance().getEventData().getDotEvent(22).id, null);
          GameManager.getInstance().gameHelpManager.startCorotine();
          var starTime = GameManager.getInstance().gameHelpManager.totallTime;
          var now = starTime;
          this.panel_game.helpTime.orgVlaue = parseTimeOper(now);
          this.interval = setInterval(function () {
            now -= 1 * 1000;
            _this2.panel_game.helpTime.orgVlaue = parseTimeOper(now);

            if (now <= 0) {
              _this2.panel_game.hideHelp();

              clearInterval(_this2.interval);
            }
          }, 1000);
          this.panel_game.helpTime.node.parent.active = true;
        };

        _proto.onDisable = function onDisable() {
          if (this.interval) {
            clearInterval(this.interval);
          }
        };

        return Pop_help;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btn_share", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btn_no", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Pop_helpNpc.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LabelEx.ts', './Utils.ts', './SdkManager.ts', './CfgData.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Sprite, Component, LabelEx, Utils, SdkManager, CfgData;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Sprite = module.Sprite;
      Component = module.Component;
    }, function (module) {
      LabelEx = module.LabelEx;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      SdkManager = module.SdkManager;
    }, function (module) {
      CfgData = module.CfgData;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "7cde5q+DtpAfJx04WnA/biX", "Pop_helpNpc", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Pop_helpNpc = exports('Pop_helpNpc', (_dec = ccclass('Pop_helpNpc'), _dec2 = property({
        type: Button,
        displayName: "帮助"
      }), _dec3 = property({
        type: Button,
        displayName: "不帮助"
      }), _dec4 = property({
        type: Sprite,
        displayName: "头像"
      }), _dec5 = property({
        type: LabelEx,
        displayName: "名字"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Pop_helpNpc, _Component);

        function Pop_helpNpc() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "btn_help", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btn_no", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "head", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labName", _descriptor4, _assertThisInitialized(_this));

          _this.panel_main = void 0;
          _this.headUrl = void 0;
          _this.npcName = void 0;
          _this.onComplet = void 0;
          return _this;
        }

        var _proto = Pop_helpNpc.prototype;

        _proto.onLoad = function onLoad() {
          this.btn_help.node.on(Button.EventType.CLICK, this.helpNpc, this);
          this.btn_no.node.on(Button.EventType.CLICK, this.close, this);
        };

        _proto.init = function init(panel_main, npcName, headUrl, onComplet) {
          var _this2 = this;

          this.panel_main = panel_main;
          this.labName.orgVlaue = npcName;
          this.npcName = npcName;
          this.headUrl = headUrl;
          Utils.urlToSpriteFrame(headUrl, function (res) {
            _this2.head.spriteFrame = res;
          });
          this.onComplet = onComplet;
          SdkManager.getInstance().SendEvent(CfgData.getInstance().getEventData().getDotEvent(20).id, null);
        };

        _proto.helpNpc = function helpNpc() {
          var _this$onComplet;

          SdkManager.getInstance().SendEvent(CfgData.getInstance().getEventData().getDotEvent(23).id, null);
          (_this$onComplet = this.onComplet) == null ? void 0 : _this$onComplet.call(this, true, this.npcName, this.headUrl);
          this.onComplet = null;
          this.close();
        };

        _proto.close = function close() {
          var _this$onComplet2;

          (_this$onComplet2 = this.onComplet) == null ? void 0 : _this$onComplet2.call(this, false, "", "");
          this.onComplet = null;
          this.panel_main.hidePopHelpNpc();
        };

        return Pop_helpNpc;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btn_help", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btn_no", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "head", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "labName", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Pop_Notfication.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "7ed93jlkoVL75j2/PYC/oCp", "Pop_Notfication", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Pop_Notfication = exports('Pop_Notfication', (_dec = ccclass('Pop_Notfication'), _dec2 = property({
        type: Button,
        visible: true,
        displayName: "是"
      }), _dec3 = property({
        type: Button,
        visible: true,
        displayName: "否"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Pop_Notfication, _Component);

        function Pop_Notfication() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "btn_Confirm", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btn_Cancel", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        return Pop_Notfication;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btn_Confirm", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btn_Cancel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Pop_npc.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './DataManager.ts', './NpcManager.ts', './UIManager.ts', './NpcView.ts', './Panel_Main.ts', './TimeTools.ts', './SdkManager.ts', './AudioManager.ts', './CfgData.ts', './DifficultyManager.ts', './Coroutine.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _regeneratorRuntime, cclegacy, _decorator, Button, Label, Node, Sprite, instantiate, Component, DataManager, NpcManager, UIManager, NpcView, Panel_Main, TimeTools, parseTimeOper, SdkManager, adEnum, AudioManager, CfgData, DifficultyManager, Coroutine;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Label = module.Label;
      Node = module.Node;
      Sprite = module.Sprite;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      NpcManager = module.NpcManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      NpcView = module.NpcView;
    }, function (module) {
      Panel_Main = module.Panel_Main;
    }, function (module) {
      TimeTools = module.TimeTools;
      parseTimeOper = module.parseTimeOper;
    }, function (module) {
      SdkManager = module.SdkManager;
      adEnum = module.adEnum;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      CfgData = module.CfgData;
    }, function (module) {
      DifficultyManager = module.DifficultyManager;
    }, function (module) {
      Coroutine = module.Coroutine;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "0fec3e5NC1KKZ56dJ8apuYI", "Pop_npc", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Pop_npc = exports('Pop_npc', (_dec = ccclass('Pop_npc'), _dec2 = property({
        type: Button,
        displayName: "回退"
      }), _dec3 = property({
        type: Button,
        displayName: "刷新"
      }), _dec4 = property({
        type: Label,
        displayName: "广告按钮的显示内容"
      }), _dec5 = property({
        type: Label,
        displayName: "自动刷新提示"
      }), _dec6 = property({
        type: Node,
        displayName: "npcPrefab"
      }), _dec7 = property({
        type: Node,
        displayName: "npcViewParent"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Pop_npc, _Component);

        function Pop_npc() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "Btn_back", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Btn_reflah", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lab_des", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lab_audioRefalsh", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "npcPrefab", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "npcViewParent", _descriptor6, _assertThisInitialized(_this));

          _this.reflashTime = void 0;
          _this.audioReflashTime = void 0;
          _this.cd = 10 * 1000;
          _this.audioReflashCd = 3 * 60 * 1000;
          _this.coroAnima = void 0;
          _this.watchAd = false;
          return _this;
        }

        var _proto = Pop_npc.prototype;

        _proto.start = function start() {
          this.Btn_back.node.on(Button.EventType.CLICK, function () {
            UIManager.getInstance().getPanel(Panel_Main).hidePopNpc(true);
          }, this);
          this.Btn_reflah.node.on(Button.EventType.CLICK, this.reflash, this);
        };

        _proto.onShow = function onShow() {
          var _this2 = this;

          this.btnReflashInfo();
          this.reflashTime = DataManager.getInstance().playerData.reflashNpcAdTime;
          this.audioReflashTime = DataManager.getInstance().playerData.audioReflashTime;
          var s = this.reflashTime - TimeTools.getCurTime();

          if (!this.audioRefalsh()) {
            this.coroAnima = new Coroutine(function () {
              return _this2.init();
            });
            this.coroAnima.start();
          }

          this.setGrayscale(s > 0, s);
          this.watchAd = false;
        };

        _proto.onDisable = function onDisable() {
          for (var index = 0; index < this.npcViewParent.children.length; index++) {
            var npc = this.npcViewParent.children[index];
            npc.active = false;
          }

          if (this.coroAnima) {
            this.coroAnima.stop();
            this.coroAnima = null;
          }
        };

        _proto.btnReflashInfo = function btnReflashInfo() {
          var _this3 = this;

          this.schedule(function () {
            var s = _this3.reflashTime - TimeTools.getCurTime();

            _this3.audioRefalsh();

            _this3.setGrayscale(s > 0, s);
          }, 1);
        };

        _proto.setGrayscale = function setGrayscale(bl, s) {
          s /= 1000;

          if (s > 0) {
            this.lab_des.string = "暂不可用" + TimeTools.formatTime(s, true);
          } else {
            this.lab_des.string = "重新匹配6家";
          }

          this.Btn_reflah.getComponent(Sprite).grayscale = bl;
          this.Btn_reflah.getComponentsInChildren(Sprite).forEach(function (element) {
            element.grayscale = bl;
          });
        };

        _proto.destroyNpcItem = function destroyNpcItem() {
          for (var index = 0; index < this.npcViewParent.children.length; index++) {
            var npc = this.npcViewParent.children[index];
            npc.destroy();
          }
        };

        _proto.init = /*#__PURE__*/_regeneratorRuntime().mark(function init() {
          var npcList, index, _index, npc, npvView, _index2, _npc, _index3, _npc2, _npvView;

          return _regeneratorRuntime().wrap(function init$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                npcList = NpcManager.getInstance().getNpcList();

                if (!(npcList.length <= 0 || !npcList)) {
                  _context.next = 23;
                  break;
                }

                for (index = 0; index < 6; index++) {
                  NpcManager.getInstance().createNpc(true, -1, this.watchAd);
                }

                this.watchAd = false;
                npcList = NpcManager.getInstance().getNpcList();
                DataManager.getInstance().playerData.npcList = Array.from(npcList);
                DataManager.getInstance().savePlayData();
                _index = 0;

              case 8:
                if (!(_index < 6)) {
                  _context.next = 21;
                  break;
                }

                npc = npcList[_index];
                npvView = instantiate(this.npcPrefab).getComponent(NpcView);
                npvView.node.name = "npc_" + _index;
                npvView.node.setParent(this.npcViewParent);
                npvView.node.active = true;
                npvView.init(npc);
                AudioManager.instance.playSound("insertflag");
                _context.next = 18;
                return Coroutine.waitForSecond(0.15, this);

              case 18:
                _index++;
                _context.next = 8;
                break;

              case 21:
                _context.next = 50;
                break;

              case 23:
                if (!(this.npcViewParent.children.length == 6)) {
                  _context.next = 36;
                  break;
                }

                _index2 = 0;

              case 25:
                if (!(_index2 < this.npcViewParent.children.length)) {
                  _context.next = 34;
                  break;
                }

                _npc = this.npcViewParent.children[_index2];
                _npc.active = true;
                AudioManager.instance.playSound("insertflag");
                _context.next = 31;
                return Coroutine.waitForSecond(0.15, this);

              case 31:
                _index2++;
                _context.next = 25;
                break;

              case 34:
                _context.next = 50;
                break;

              case 36:
                _index3 = 0;

              case 37:
                if (!(_index3 < 6)) {
                  _context.next = 50;
                  break;
                }

                _npc2 = npcList[_index3];
                _npvView = instantiate(this.npcPrefab).getComponent(NpcView);
                _npvView.node.name = "npc_" + _index3;

                _npvView.node.setParent(this.npcViewParent);

                _npvView.node.active = true;

                _npvView.init(_npc2);

                AudioManager.instance.playSound("insertflag");
                _context.next = 47;
                return Coroutine.waitForSecond(0.15, this);

              case 47:
                _index3++;
                _context.next = 37;
                break;

              case 50:
              case "end":
                return _context.stop();
            }
          }, init, this);
        });

        _proto.reflash = function reflash() {
          var _this4 = this;

          if (this.reflashTime <= TimeTools.getCurTime()) {
            SdkManager.getInstance().showAd(adEnum.reward, function (isended) {
              if (!isended) return;
              DifficultyManager.onReflashNpc();
              DataManager.getInstance().playerData.reflashNpcAdTime = _this4.reflashTime = TimeTools.getCurTime() + _this4.cd;
              var s = _this4.reflashTime - TimeTools.getCurTime();

              _this4.setGrayscale(s > 0, s);

              DataManager.getInstance().playerData.npcList = new Array();
              NpcManager.getInstance().setNpcList(new Array());

              _this4.npcViewParent.children.forEach(function (element) {
                element.destroy();
              });

              NpcManager.getInstance().setNpcList([]);

              if (_this4.coroAnima) {
                _this4.coroAnima.stop();

                _this4.coroAnima = null;

                _this4.destroyNpcItem();

                _this4.watchAd = true;
                _this4.coroAnima = new Coroutine(function () {
                  return _this4.init();
                });

                _this4.coroAnima.start();
              }

              SdkManager.getInstance().SendEvent(CfgData.getInstance().getEventData().getDotEvent(2).id, null);
            }, this);
          }
        };

        _proto.audioRefalsh = function audioRefalsh() {
          var _this5 = this;

          var s2 = this.audioReflashTime - TimeTools.getCurTime();

          if (Number.isNaN(s2)) {
            s2 = this.audioReflashCd;
            this.audioReflashTime = TimeTools.getCurTime() + this.audioReflashCd;
          }

          this.lab_audioRefalsh.string = "点击头像选择一家去拱墙角（" + parseTimeOper(s2) + "后自动刷新）";

          if (this.audioReflashTime <= TimeTools.getCurTime() && DataManager.getInstance().guidIsOver()) {
            DataManager.getInstance().playerData.audioReflashTime = this.audioReflashTime = TimeTools.getCurTime() + this.audioReflashCd;
            var s = this.audioReflashTime - TimeTools.getCurTime(); //刷新一下

            this.lab_audioRefalsh.string = "点击头像选择一家去拱墙角（" + parseTimeOper(s) + "后自动刷新）";
            DataManager.getInstance().playerData.npcList = new Array();
            NpcManager.getInstance().setNpcList(new Array());
            this.npcViewParent.children.forEach(function (element) {
              element.destroy();
            });
            NpcManager.getInstance().setNpcList([]);

            if (this.coroAnima) {
              this.coroAnima.stop();
              this.coroAnima = null;
              this.destroyNpcItem();
              this.coroAnima = new Coroutine(function () {
                return _this5.init();
              });
              this.coroAnima.start();
            } else {
              this.coroAnima = new Coroutine(function () {
                return _this5.init();
              });
              this.coroAnima.start();
            }

            return true;
          }

          return false;
        };

        return Pop_npc;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "Btn_back", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Btn_reflah", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lab_des", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lab_audioRefalsh", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "npcPrefab", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "npcViewParent", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Pop_NpcInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './NpcInfoView.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Component, NpcInfoView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Component = module.Component;
    }, function (module) {
      NpcInfoView = module.NpcInfoView;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "258c0kwUtNMjZIHg77NublZ", "Pop_NpcInfo", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Pop_NpcInfo = exports('Pop_NpcInfo', (_dec = ccclass('Pop_NpcInfo'), _dec2 = property({
        type: NpcInfoView,
        displayName: "胜利的npc面板"
      }), _dec3 = property({
        type: NpcInfoView,
        displayName: "失败的npc面板"
      }), _dec4 = property({
        type: Button,
        displayName: "bg"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Pop_NpcInfo, _Component);

        function Pop_NpcInfo() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "winInfo", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "loseInfo", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btn_bg", _descriptor3, _assertThisInitialized(_this));

          _this.id = void 0;
          return _this;
        }

        var _proto = Pop_NpcInfo.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          this.scheduleOnce(function () {
            _this2.btn_bg.node.on(Button.EventType.CLICK, function () {
              _this2.hide();
            });
          }, 0.2);
        };

        _proto.showNpcInfo = function showNpcInfo(audioHide, npc, des, pos) {
          var _this3 = this;

          if (npc.isWin) this.winInfo.init(npc, pos, this.node);else this.loseInfo.init(npc, pos, this.node);

          if (!audioHide) {
            this.scheduleOnce(function () {
              _this3.hide();
            }, 5);
          }
        };

        _proto.hide = function hide() {
          console.log("hide");
          this.unscheduleAllCallbacks();
          this.winInfo.node.active = false;
          this.loseInfo.node.active = false;
          this.node.active = false;
        };

        return Pop_NpcInfo;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "winInfo", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "loseInfo", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btn_bg", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Pop_qickFix.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UIManager.ts', './Panel_Main.ts', './PlayerFench.ts', './SdkManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, RichText, Component, UIManager, Panel_Main, PlayerFench, SdkManager, adEnum;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      RichText = module.RichText;
      Component = module.Component;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      Panel_Main = module.Panel_Main;
    }, function (module) {
      PlayerFench = module.PlayerFench;
    }, function (module) {
      SdkManager = module.SdkManager;
      adEnum = module.adEnum;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "dcc63GfJHlOiKA8Aj+s84RH", "Pop_qickFix", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Pop_qickFix = exports('Pop_qickFix', (_dec = ccclass('Pop_qickFix'), _dec2 = property({
        type: Button,
        displayName: "取消"
      }), _dec3 = property({
        type: Button,
        displayName: "确定"
      }), _dec4 = property({
        type: RichText,
        displayName: "逃跑个数"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Pop_qickFix, _Component);

        function Pop_qickFix() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "Btn_cancel", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Btn_confirm", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "runCnt", _descriptor3, _assertThisInitialized(_this));

          _this.cnt = 10;
          return _this;
        }

        var _proto = Pop_qickFix.prototype;

        _proto.start = function start() {
          var _this2 = this;

          this.Btn_cancel.node.on(Button.EventType.CLICK, function () {
            UIManager.getInstance().getPanel(Panel_Main).hidePopFix();
          }, this);
          this.Btn_confirm.node.on(Button.EventType.CLICK, function () {
            //SdkManager.getInstance().ShareAppMessage(ShareAppType.None);
            SdkManager.getInstance().showAd(adEnum.reward, function (resend) {
              if (resend) {
                PlayerFench.getInstance().qickFixFench();
                UIManager.getInstance().getPanel(Panel_Main).hidePopFix();
              }
            }, _this2);
          }, this);
        };

        _proto.onEnable = function onEnable() {
          this.runCnt.string = "（今天累计逃跑" + this.cnt + "只）";
        };

        return Pop_qickFix;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "Btn_cancel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Btn_confirm", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "runCnt", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Pop_report.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UIManager.ts', './Panel_Main.ts', './TimeTools.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, RichText, Component, UIManager, Panel_Main, TimeTools;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      RichText = module.RichText;
      Component = module.Component;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      Panel_Main = module.Panel_Main;
    }, function (module) {
      TimeTools = module.TimeTools;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "4cf8cctRa5KS4jL7In/KZWg", "Pop_report", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Pop_report = exports('Pop_report', (_dec = ccclass('Pop_report'), _dec2 = property({
        type: Button,
        displayName: "close"
      }), _dec3 = property({
        type: RichText,
        displayName: "lab"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Pop_report, _Component);

        function Pop_report() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "Btn_close", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lab_des", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = Pop_report.prototype;

        _proto.init = function init(offNpcList, offTime) {
          var npcList = Array.from(offNpcList);
          var totallCnt = npcList.length;
          var win = npcList.filter(function (a) {
            return a.isWin;
          });
          var winanimal = 0;
          var loseanimal = 0;
          win.forEach(function (element) {
            winanimal += element.residualAnimalCount;
          });
          var lose = npcList.filter(function (a) {
            return !a.isWin;
          });
          lose.forEach(function (element) {
            loseanimal += element.animalCorpseList.length;
          });
          this.lab_des.string = "<color=#3e3e3e><b>欢迎回家！在你离开的<color=#48bbea>" + TimeTools.formatChTime(offTime / 1000) + "</color>内，有<color=#48bbea>" + totallCnt + "</color>人来拱你家墙角，其中<color=#fd784f>" + win.length + "</color>人成功并抓走了你家<color=#fd784f>" + winanimal + "</color>只动物！<color=#6fb47a>" + lose.length + "</color>人失败并留下了<color=#6fb47a>" + loseanimal + "</color>只动物。</b></color>";
        };

        _proto.start = function start() {
          this.Btn_close.node.on(Button.EventType.CLICK, function () {
            UIManager.getInstance().getPanel(Panel_Main).hidePopReport();
          }, this);
        };

        return Pop_report;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "Btn_close", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lab_des", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Pop_sale.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AnimalFarm.ts', './DataManager.ts', './HomeManager.ts', './UIManager.ts', './Panel_Main.ts', './CfgData.ts', './Pop_gold.ts', './SdkManager.ts', './GameResponces.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Node, Label, Sprite, Component, AnimalFarm, DataManager, HomeManager, UIManager, Panel_Main, CfgData, Pop_gold, SdkManager, adEnum, GameResponces;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Node = module.Node;
      Label = module.Label;
      Sprite = module.Sprite;
      Component = module.Component;
    }, function (module) {
      AnimalFarm = module.AnimalFarm;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      HomeManager = module.HomeManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      Panel_Main = module.Panel_Main;
    }, function (module) {
      CfgData = module.CfgData;
    }, function (module) {
      Pop_gold = module.Pop_gold;
    }, function (module) {
      SdkManager = module.SdkManager;
      adEnum = module.adEnum;
    }, function (module) {
      GameResponces = module.GameResponces;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;

      cclegacy._RF.push({}, "97b086OcnZB8bYqnKb9nsVJ", "Pop_sale", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Pop_sale = exports('Pop_sale', (_dec = ccclass('Pop_sale'), _dec2 = property({
        type: Button,
        displayName: "出售"
      }), _dec3 = property({
        type: Button,
        displayName: "广告出售"
      }), _dec4 = property({
        type: Button,
        displayName: "close"
      }), _dec5 = property({
        type: Button,
        displayName: "价格"
      }), _dec6 = property({
        type: Node,
        displayName: "animals"
      }), _dec7 = property({
        type: Label,
        displayName: "出售的金额"
      }), _dec8 = property({
        type: Label,
        displayName: "动物数"
      }), _dec9 = property({
        type: Pop_gold,
        displayName: "销售价格"
      }), _dec10 = property({
        type: Button,
        displayName: "Price_close"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Pop_sale, _Component);

        function Pop_sale() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "Btn_sale", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Btn_adSale", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Btn_close", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Btn_gold", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animals", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "saleGold", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animalCnt", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Pop_price", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Btn_Price_close", _descriptor9, _assertThisInitialized(_this));

          _this._homeCfg = void 0;
          _this.animalFarm = void 0;
          _this.timer = 0;
          return _this;
        }

        var _proto = Pop_sale.prototype;

        _proto.start = function start() {
          this.Btn_close.node.on(Button.EventType.CLICK, function () {
            UIManager.getInstance().getPanel(Panel_Main).hidePopSale();
          }, this);
          this.Btn_sale.node.on(Button.EventType.CLICK, this.clickSale, this);
          this.Btn_adSale.node.on(Button.EventType.CLICK, this.clickAdSale, this);
          this.Btn_gold.node.on(Button.EventType.CLICK, this.showPrice, this);
          this.Btn_Price_close.node.on(Button.EventType.CLICK, this.closePrice, this);
        };

        _proto.onEnable = function onEnable() {
          this.animalFarm = AnimalFarm.getInstance();
          this.updateAnimalView();
        };

        _proto.update = function update(dt) {
          if (this.timer >= 0) {
            this.timer -= dt;
          } else {
            this.updateAnimalView();
            this.timer = 1;
          }
        };

        _proto.showPrice = function showPrice() {
          var animalCfg = CfgData.getInstance().getHomeCfg().animal;
          this.Pop_price.init(animalCfg);
          this.Pop_price.node.active = true;
        };

        _proto.closePrice = function closePrice() {
          this.Pop_price.node.active = false;
        };

        _proto.updateAnimalView = function updateAnimalView() {
          var coin = this.animalFarm.getTotallCoin();
          this.saleGold.string = coin.toString();
          this._homeCfg = CfgData.getInstance().getHomeCfg();
          var houselv = DataManager.getInstance().playerData.homeLv;
          var limit = this._homeCfg.house[houselv].LimitStorage;
          this.animalCnt.string = "(动物" + this.animalFarm._lisAnimals.length + "/" + limit + "只)";

          for (var index = 0; index < this.animals.children.length; index++) {
            var element = this.animals.children[index];
            element.getComponent(Sprite).grayscale = false;
            var lb = element.getComponentInChildren(Label);

            var animal = this.animalFarm._listAnimalMap.get(index);

            if (animal) {
              lb.string = animal.Cnt.toString();
            } else {
              lb.string = "0";
            }

            if (DataManager.getInstance().playerData.unlockAnimals.indexOf(index) < 0) {
              lb.string = "未解锁";
              element.getComponent(Sprite).grayscale = true;
            }
          }
        };

        _proto.clickSale = function clickSale() {
          HomeManager.getInstance().saleAnimals(1);
          this.updateAnimalView();
          UIManager.getInstance().getPanel(Panel_Main).hidePopSale();

          GameResponces._event.emit(GameResponces.FingerSellRealAnimal);
        };

        _proto.clickAdSale = function clickAdSale() {
          var _this2 = this;

          SdkManager.getInstance().showAd(adEnum.reward, function (isended) {
            if (!isended) return;
            HomeManager.getInstance().saleAnimals(2);

            _this2.updateAnimalView();

            UIManager.getInstance().getPanel(Panel_Main).hidePopSale();
          }, this);
        };

        return Pop_sale;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "Btn_sale", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Btn_adSale", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "Btn_close", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "Btn_gold", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "animals", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "saleGold", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "animalCnt", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "Pop_price", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "Btn_Price_close", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Pop_set.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UIManager.ts', './Panel_Game.ts', './DataManager.ts', './AudioSys.ts', './Panel_Main.ts', './TimeTools.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Toggle, Label, v3, Component, UIManager, Panel_Game, DataManager, AudioSys, Panel_Main, TimeTools;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Toggle = module.Toggle;
      Label = module.Label;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      Panel_Game = module.Panel_Game;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      AudioSys = module.AudioSys;
    }, function (module) {
      Panel_Main = module.Panel_Main;
    }, function (module) {
      TimeTools = module.TimeTools;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "1e014vILH1JFK4vuG3HRA+Y", "Pop_set", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Pop_set = exports('Pop_set', (_dec = ccclass('Pop_set'), _dec2 = property({
        type: Button,
        displayName: "放弃游戏按钮"
      }), _dec3 = property({
        type: Button,
        displayName: "改名字"
      }), _dec4 = property({
        type: Toggle,
        displayName: "音效开关"
      }), _dec5 = property({
        type: Toggle,
        displayName: "音乐开关"
      }), _dec6 = property({
        type: Toggle,
        displayName: "震动开关"
      }), _dec7 = property({
        type: Label,
        displayName: "放弃的时间"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Pop_set, _Component);

        function Pop_set() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "btn_return", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btn_changeName", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tog_audio", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tog_muisc", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tog_shock", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lab_giveUpTime", _descriptor6, _assertThisInitialized(_this));

          _this.panel_Game = void 0;
          _this.giveUpTime = 60;
          return _this;
        }

        var _proto = Pop_set.prototype;

        _proto.onLoad = function onLoad() {
          this.panel_Game = UIManager.getInstance().getPanel(Panel_Game);
        };

        _proto.onEnable = function onEnable() {
          var _this2 = this;

          if (this.btn_changeName) this.btn_changeName.node.active = !DataManager.getInstance().playerData.isAuthorize;
          var userdata = DataManager.getInstance().playerData;
          this.tog_audio.isChecked = userdata.audioSet;
          this.tog_muisc.isChecked = userdata.musicSet;
          this.tog_shock.isChecked = userdata.vibrateSet;
          this.tog_audio.node.on("toggle", function (toggle) {
            userdata.audioSet = _this2.tog_audio.isChecked;

            if (userdata.audioSet) {
              AudioSys.instance.cancelMuteSound();
            } else {
              AudioSys.instance.muteSound();
            }

            DataManager.getInstance().savePlayData();
          }, this);
          this.tog_muisc.node.on("toggle", function (toggle) {
            userdata.musicSet = _this2.tog_muisc.isChecked;

            if (userdata.musicSet) {
              AudioSys.instance.cancelMuteMusic();
            } else {
              AudioSys.instance.muteMusic();
            }

            DataManager.getInstance().savePlayData();
          }, this);
          this.tog_shock.node.on("toggle", function (toggle) {
            userdata.vibrateSet = _this2.tog_shock.isChecked;
            DataManager.getInstance().savePlayData();
          }, this);
        };

        _proto.start = function start() {
          if (this.btn_return) this.btn_return.node.on(Button.EventType.CLICK, this.back, this);
          if (this.btn_changeName) this.btn_changeName.node.on(Button.EventType.CLICK, this.changeName, this);
        };

        _proto.onGameStart = function onGameStart() {
          var _this3 = this;

          this.unscheduleAllCallbacks();
          this.lab_giveUpTime.node.active = true;
          this.giveUpTime = TimeTools.getCurTime() + 60 * 1000;
          this.schedule(function () {
            if ((_this3.giveUpTime - TimeTools.getCurTime()) / 1000 <= 0) {
              _this3.lab_giveUpTime.node.active = false;

              _this3.unscheduleAllCallbacks();

              return;
            }

            _this3.lab_giveUpTime.string = TimeTools.formatTime((_this3.giveUpTime - TimeTools.getCurTime()) / 1000, true) + "后可以认输";
          }, 1, 120);
        };

        _proto.showPopSet = function showPopSet() {
          if ((this.giveUpTime - TimeTools.getCurTime()) / 1000 <= 0) {
            this.lab_giveUpTime.node.active = false;
            this.unscheduleAllCallbacks();
          } else {
            this.lab_giveUpTime.string = TimeTools.formatTime((this.giveUpTime - TimeTools.getCurTime()) / 1000, true) + "后可以认输";
          }
        };

        _proto.changeName = function changeName() {
          UIManager.getInstance().getPanel(Panel_Main).showPopAuth();
        };

        _proto.back = function back() {
          if ((this.giveUpTime - TimeTools.getCurTime()) / 1000 > 0) {
            UIManager.getInstance().tip.showNomalTip("开局一分钟内不可以投降", 1, 1, 3, v3(0, 600, 0));
          } else {
            this.panel_Game.hideSet();
            this.panel_Game.showRunAwayTip();
          }
        };

        return Pop_set;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btn_return", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btn_changeName", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "tog_audio", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "tog_muisc", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "tog_shock", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "lab_giveUpTime", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Pop_taunh.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UIManager.ts', './Panel_Main.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, Component, UIManager, Panel_Main;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      Panel_Main = module.Panel_Main;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "5445bEnyDtMS7y+FLxzeINs", "Pop_taunh", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Pop_taunh = exports('Pop_taunh', (_dec = ccclass('Pop_taunh'), _dec2 = property({
        type: [Node],
        displayName: "嘲讽气泡样式"
      }), _dec3 = property({
        type: [Label],
        displayName: "嘲讽lab"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Pop_taunh, _Component);

        function Pop_taunh() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "taunhs", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "taunhlabs", _descriptor2, _assertThisInitialized(_this));

          _this.curTaunh = null;
          _this.curTaunhlab = null;
          _this.panel_parent = void 0;
          return _this;
        }

        var _proto = Pop_taunh.prototype; //展示npc的嘲讽内容

        _proto.showNpcTaunh = function showNpcTaunh(style, str, uipos, showtime) {
          var _this2 = this;

          this.curTaunh = this.taunhs[style];
          this.curTaunhlab = this.taunhlabs[style];
          this.curTaunh.active = true;
          this.curTaunhlab.string = str;
          this.curTaunh.setPosition(uipos);
          this.scheduleOnce(function () {
            _this2.hide();
          }, showtime);
        };

        _proto.hide = function hide() {
          if (this.curTaunh) this.curTaunh.active = false;
          UIManager.getInstance().getPanel(Panel_Main).hideNpcTaunh();
        };

        _proto.onDisable = function onDisable() {
          this.unscheduleAllCallbacks();
          this.hide();
        };

        return Pop_taunh;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "taunhs", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "taunhlabs", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Pop_tip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameCfg.ts', './AnimalFarm.ts', './DataManager.ts', './HomeManager.ts', './UIManager.ts', './Panel_Main.ts', './CfgData.ts', './LabelEx.ts', './SdkManager.ts', './GameResponces.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Label, Node, RichText, v3, Sprite, Component, GameCfg, AnimalFarm, DataManager, HomeManager, UIManager, Panel_Main, CfgData, LabelEx, SdkManager, adEnum, GameResponces;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Label = module.Label;
      Node = module.Node;
      RichText = module.RichText;
      v3 = module.v3;
      Sprite = module.Sprite;
      Component = module.Component;
    }, function (module) {
      GameCfg = module.GameCfg;
    }, function (module) {
      AnimalFarm = module.AnimalFarm;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      HomeManager = module.HomeManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      Panel_Main = module.Panel_Main;
    }, function (module) {
      CfgData = module.CfgData;
    }, function (module) {
      LabelEx = module.LabelEx;
    }, function (module) {
      SdkManager = module.SdkManager;
      adEnum = module.adEnum;
    }, function (module) {
      GameResponces = module.GameResponces;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;

      cclegacy._RF.push({}, "5b2d5uzbX5BYoDLVWLjvjG0", "Pop_tip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Pop_tip = exports('Pop_tip', (_dec = ccclass('Pop_tip'), _dec2 = property({
        type: Button,
        displayName: "关闭"
      }), _dec3 = property({
        type: Button,
        displayName: "购买动物"
      }), _dec4 = property({
        type: Button,
        displayName: "买不起状态"
      }), _dec5 = property({
        type: LabelEx,
        displayName: "购买动物数"
      }), _dec6 = property({
        type: Label,
        displayName: "购买动物花的钱"
      }), _dec7 = property({
        type: Button,
        displayName: "广告购买动物"
      }), _dec8 = property({
        type: Button,
        displayName: "进游戏"
      }), _dec9 = property({
        type: Node,
        displayName: "动物"
      }), _dec10 = property({
        type: RichText,
        displayName: "提示1"
      }), _dec11 = property({
        type: RichText,
        displayName: "提示2"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Pop_tip, _Component);

        function Pop_tip() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "Btn_close", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Btn_buy", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Btn_gray", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lab_cnt", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lab_Cioncnt", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Btn_AdBuy", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Btn_goGame", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animals", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tip1", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tip2", _descriptor10, _assertThisInitialized(_this));

          _this.saleNumber = 1;
          _this.limit = 60;
          _this.animalCnt = 50;
          _this.playerData = void 0;
          _this.needBuyCnt = 0;
          _this.dv = 0;
          _this.startPos = v3(0, -569.771, 0);
          _this.endPos = v3(0, -360, 0);
          _this.btnchild_Pos0 = v3(0, 37.385, 0);
          _this.btnchild_Pos1 = v3(0, 13, 0);
          return _this;
        }

        var _proto = Pop_tip.prototype;

        _proto.start = function start() {
          var _this2 = this;

          this.Btn_close.node.on(Button.EventType.CLICK, function () {
            UIManager.getInstance().getPanel(Panel_Main).hidePopTip();
          }, this);
          this.Btn_goGame.node.on(Button.EventType.CLICK, function () {
            UIManager.getInstance().getPanel(Panel_Main).hidePopTip();
            UIManager.getInstance().getPanel(Panel_Main).GameStart();

            GameResponces._event.emit(GameResponces.ClickBattleIn);

            if (_this2.dv > 0) {
              SdkManager.getInstance().SendEvent(CfgData.getInstance().getEventData().getDotEvent(5).id, null);
            }
          }, this);
          this.Btn_buy.node.on(Button.EventType.CLICK, this.buyAnimal, this);
          this.Btn_AdBuy.node.on(Button.EventType.CLICK, this.adBuyAnimal, this);
          this.Btn_AdBuy.getComponentInChildren(LabelEx).orgVlaue = "免费获得" + GameCfg.FarmAnimals + "只";
        };

        _proto.onEnable = function onEnable() {
          this.playerData = DataManager.getInstance().playerData;
          this.saleNumber = CfgData.getInstance().getHomeCfg().animal[0].PurchasePrice;

          GameResponces._event.emit(GameResponces.ShowBuyAnimal);

          this.updateView();
        };

        _proto.buyAnimal = function buyAnimal() {
          if (this.needBuyCnt > 0) {
            var cnt = this.needBuyCnt;
            AnimalFarm.getInstance().buildAnimal(cnt);
            HomeManager.getInstance().initAnimals();
            DataManager.getInstance().updateCoin(-cnt * this.saleNumber);
            this.updateView();

            GameResponces._event.emit(GameResponces.ClickCoinBuy);

            SdkManager.getInstance().SendEvent(CfgData.getInstance().getEventData().getDotEvent(3).id, null);
          }
        };

        _proto.adBuyAnimal = function adBuyAnimal() {
          var _this3 = this;

          SdkManager.getInstance().showAd(adEnum.reward, function (isended) {
            if (!isended) return;
            var cnt = GameCfg.FarmAnimals;
            AnimalFarm.getInstance().buildAnimal(cnt);
            HomeManager.getInstance().initAnimals();

            _this3.updateView();

            SdkManager.getInstance().SendEvent(CfgData.getInstance().getEventData().getDotEvent(4).id, null);
          }, this);
        };

        _proto.updateView = function updateView() {
          if (this.node.active && HomeManager.getInstance()) {
            this.limit = HomeManager.getInstance().getAnimalLimit();
            this.animalCnt = AnimalFarm.getInstance()._lisAnimals.length; //需要购买的

            this.dv = this.limit - this.animalCnt;
            this.tip2.string = "<color=#000000>(动物" + this.ricthText(this.animalCnt.toString(), "ff6f0d") + "/" + this.limit + ")</color>";
            this.tip1.string = "<color=#000000>还差" + this.ricthText(this.dv.toString(), "ff6f0d") + "只动物，是否补足？</color>";

            for (var index = 0; index < this.animals.children.length; index++) {
              var element = this.animals.children[index];
              element.getComponent(Sprite).grayscale = false;
              var lb = element.getComponentInChildren(Label);

              var animal = AnimalFarm.getInstance()._listAnimalMap.get(index);

              if (animal) {
                lb.string = animal.Cnt.toString();
              } else {
                lb.string = "0";
              }

              if (DataManager.getInstance().playerData.unlockAnimals.indexOf(index) < 0) {
                lb.string = "未解锁";
                element.getComponent(Sprite).grayscale = true;
              }
            } //可以购买的动物数


            var need = this.playerData.coin / this.saleNumber;
            need = Math.floor(need);

            if (need <= 0) {
              this.Btn_gray.node.active = true;
              this.Btn_buy.node.active = false;
            } else {
              this.Btn_gray.node.active = false;
              this.Btn_buy.node.active = true;
            }

            this.needBuyCnt = this.limitNumber(need, 0, this.dv);

            if (this.dv > 0) {
              if (need > 0) this.Btn_buy.node.active = true;
              if (DataManager.getInstance().guidIsOver()) this.Btn_AdBuy.node.active = true;
              this.Btn_goGame.node.children[1].getComponent(Label).string = "甘冒兵力不足风险";
              this.Btn_goGame.node.setPosition(this.startPos);
              this.Btn_goGame.node.children[0].setPosition(this.btnchild_Pos0);
              this.Btn_goGame.node.children[0].getComponent(LabelEx).orgVlaue = "直接进入";
              this.lab_cnt.orgVlaue = "购买" + this.needBuyCnt + "只";
              this.lab_Cioncnt.string = "" + this.needBuyCnt * this.saleNumber;
            } else {
              this.Btn_buy.node.active = false;
              this.Btn_AdBuy.node.active = false;
              this.Btn_gray.node.active = false;
              this.tip1.string = this.ricthText("动物已经补满！", "000000");
              this.Btn_goGame.node.setPosition(this.endPos);
              this.Btn_goGame.node.children[0].setPosition(this.btnchild_Pos1);
              this.Btn_goGame.node.children[0].getComponent(LabelEx).orgVlaue = "立刻进入";
              this.Btn_goGame.node.children[1].getComponent(Label).string = "";
            }
          }
        };

        _proto.ricthText = function ricthText(str, colorStr) {
          return "<color=#" + colorStr + ">" + str + "</color>";
        };

        _proto.limitNumber = function limitNumber(num, min, max) {
          return Math.min(Math.max(num, min), max);
        };

        return Pop_tip;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "Btn_close", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Btn_buy", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "Btn_gray", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lab_cnt", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lab_Cioncnt", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "Btn_AdBuy", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "Btn_goGame", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "animals", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "tip1", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "tip2", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Pop_upHome.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './DataManager.ts', './TimeTools.ts', './UIManager.ts', './lvProgress.ts', './Panel_Main.ts', './CfgData.ts', './GameResponces.ts', './Utils.ts', './HomeManager.ts', './LabelEx.ts', './SdkManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Node, Label, RichText, Component, DataManager, TimeTools, UIManager, lvProgress, Panel_Main, CfgData, GameResponces, Utils, HomeManager, LabelEx, SdkManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Node = module.Node;
      Label = module.Label;
      RichText = module.RichText;
      Component = module.Component;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      TimeTools = module.TimeTools;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      lvProgress = module.lvProgress;
    }, function (module) {
      Panel_Main = module.Panel_Main;
    }, function (module) {
      CfgData = module.CfgData;
    }, function (module) {
      GameResponces = module.GameResponces;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      HomeManager = module.HomeManager;
    }, function (module) {
      LabelEx = module.LabelEx;
    }, function (module) {
      SdkManager = module.SdkManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19;

      cclegacy._RF.push({}, "e0b71AK+JlLy7Tn3ZNITXhm", "Pop_upHome", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Pop_upHome = exports('Pop_upHome', (_dec = ccclass('Pop_upHome'), _dec2 = property({
        type: Button,
        displayName: "close"
      }), _dec3 = property({
        type: Button,
        displayName: "升级栅栏"
      }), _dec4 = property({
        type: Button,
        displayName: "升级家"
      }), _dec5 = property({
        type: Node,
        displayName: "升级viewbuy"
      }), _dec6 = property({
        type: Label,
        displayName: "升级金币"
      }), _dec7 = property({
        type: Node,
        displayName: "升级view"
      }), _dec8 = property({
        type: Label,
        displayName: "升级时间"
      }), _dec9 = property({
        type: Node,
        displayName: "fenchbuy"
      }), _dec10 = property({
        type: Label,
        displayName: "升级栅栏金币"
      }), _dec11 = property({
        type: Node,
        displayName: "fenchView"
      }), _dec12 = property({
        type: Label,
        displayName: "升级栅栏时间"
      }), _dec13 = property({
        type: RichText,
        displayName: "房子等级"
      }), _dec14 = property({
        type: Label,
        displayName: "栅栏等级"
      }), _dec15 = property({
        type: Node,
        displayName: "fence"
      }), _dec16 = property({
        type: Node,
        displayName: "home"
      }), _dec17 = property({
        type: Label,
        displayName: "bullet"
      }), _dec18 = property({
        type: lvProgress,
        displayName: "lvProgress"
      }), _dec19 = property({
        type: Node,
        displayName: "栅栏小红点"
      }), _dec20 = property({
        type: Node,
        displayName: "房子小红点"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Pop_upHome, _Component);

        function Pop_upHome() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "Btn_close", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Btn_fence", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Btn_home", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "levelbuy", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lab_cion", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "levelup", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lab_time", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fenchbuy", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lab_fenchCion", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fenchView", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lab_fenchTime", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lab_homelv", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lab_fenchlv", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fence", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "home", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lab_bullet", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lvProgre", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fenchRed", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "houseRed", _descriptor19, _assertThisInitialized(_this));

          _this.playerData = void 0;
          _this.homeCfg = void 0;
          _this.lvhomeTime = void 0;
          _this.lvfenchTime = void 0;
          _this.nowtime = 1;
          _this.homeDialogId = "";
          _this.fenchDialogId = "";
          _this.bulletDes = [];
          _this.orgDes = [];
          _this.bulletIndex = 0;
          _this.bulletShowTime = 10;
          _this.bulletHideTime = 2;
          return _this;
        }

        var _proto = Pop_upHome.prototype;

        _proto.onLoad = function onLoad() {};

        _proto.start = function start() {
          this.Btn_close.node.on(Button.EventType.CLICK, function () {
            UIManager.getInstance().getPanel(Panel_Main).hidePopHome();

            GameResponces._event.emit(GameResponces.FingerUpdateClose);
          }, this);
          this.Btn_home.node.on(Button.EventType.CLICK, this.startUpdateHome, this);
          this.Btn_fence.node.on(Button.EventType.CLICK, this.startUpdateFench, this);
          this.updateBullet();
        };

        _proto.init = function init(playerData) {
          var _this2 = this;

          this.homeCfg = CfgData.getInstance().getHomeCfg();
          this.playerData = playerData;
          this.lvhomeTime = this.playerData.homeTime;
          this.lvfenchTime = this.playerData.fenchTime;
          this.bulletDes = [];
          this.homeCfg.tips.forEach(function (des) {
            _this2.bulletDes.push(des.words);
          });
          this.orgDes = Array.from(this.bulletDes);
          this.setfenchView(this.fence, this.playerData.fenchLv);
          this.setHoseView(this.home, this.playerData.homeLv);
          this.lvProgre.init();
          this.updateView();
          this.lab_bullet.node.parent.active = DataManager.getInstance().guidIsOver();
        } //开始升级房子
        ;

        _proto.startUpdateHome = function startUpdateHome() {
          if (this.homeCfg.house.length <= this.playerData.homeLv + 1) {
            return;
          }

          var lv = this.playerData.homeLv;
          var needPrice = this.homeCfg.house[lv].LevelUpPrice;
          var n = TimeTools.getCurTime();
          var s = (this.lvhomeTime - n) / 1000;

          if (s <= 0) {
            if (needPrice <= this.playerData.coin) {
              var _HomeManager$getInsta;

              DataManager.getInstance().updateCoin(-needPrice);
              this.sethomeTime(lv + 1);
              (_HomeManager$getInsta = HomeManager.getInstance()) == null ? void 0 : _HomeManager$getInsta.homeView.startHomeLvUp();
              var dot = CfgData.getInstance().getEventData().getDotEvent(18);
              var data = {
                "level_id": lv
              };
              SdkManager.getInstance().SendEvent(dot.id, data);
            } else {
              UIManager.getInstance().tip.showNomalTip("金币不足！", 1, 1);
            }
          }

          GameResponces._event.emit(GameResponces.FingerClickUpdateHouse);
        } //开始升级栅栏
        ;

        _proto.startUpdateFench = function startUpdateFench() {
          if (this.homeCfg.fence.length <= this.playerData.fenchLv + 1) {
            return;
          }

          var lv = this.playerData.fenchLv;
          var needPrice = this.homeCfg.fence[lv].LevelUpPrice;
          var n = TimeTools.getCurTime();
          var s = (this.lvfenchTime - n) / 1000;

          if (s <= 0) {
            if (needPrice <= this.playerData.coin) {
              DataManager.getInstance().updateCoin(-needPrice);
              this.setfenchTime(this.playerData.fenchLv + 1);
              var dot = CfgData.getInstance().getEventData().getDotEvent(19);
              var atr = dot.attribute[0];
              var data = {
                "fencelevel_id": lv
              };
              SdkManager.getInstance().SendEvent(dot.id, data);
            } else {
              UIManager.getInstance().tip.showNomalTip("金币不足！", 1, 1);
            }
          }

          GameResponces._event.emit(GameResponces.FingerUpdateFence);
        };

        _proto.homeLvUp = function homeLvUp() {
          if (this.node.active) {
            // UIManager.getInstance().tip.cancelSubscribeTip(this.homeDialogId);
            this.lvhomeTime = this.playerData.homeTime;
            this.setHoseView(this.home, this.playerData.homeLv);
            this.lvProgre.onLevelUp(this.playerData.homeLv);
            this.levelbuy.active = true;
            this.levelup.active = false;
            var needPrice = this.homeCfg.house[this.playerData.homeLv].LevelUpPrice;
            this.lab_cion.string = needPrice.toString();
          }
        };

        _proto.fenceLvUp = function fenceLvUp() {
          if (this.node.active) {
            // UIManager.getInstance().tip.cancelSubscribeTip(this.fenchDialogId);
            this.lvfenchTime = this.playerData.fenchTime;
            this.setfenchView(this.fence, this.playerData.fenchLv);
          }
        };

        _proto.update = function update(deltaTime) {
          if (this.nowtime <= 0) {
            this.nowtime = 1;
            this.updateView();
          } else {
            this.nowtime -= deltaTime;
          }

          if (this.bulletShowTime <= 0) {
            if (this.bulletHideTime <= 0) {
              this.bulletShowTime = 10;
              this.bulletHideTime = 2;
              if (DataManager.getInstance().guidIsOver()) this.lab_bullet.node.parent.active = true;
              this.updateBullet();
              return;
            } else {
              this.bulletHideTime -= deltaTime;
            }

            this.lab_bullet.node.parent.active = false;
          } else {
            this.bulletShowTime -= deltaTime;
          }
        };

        _proto.updateBullet = function updateBullet() {
          if (this.bulletDes.length <= 0) this.bulletDes = Array.from(this.orgDes);
          Utils.KnuthDurstenfeldShuffle(this.bulletDes);
          this.lab_bullet.string = this.bulletDes.pop();
        };

        _proto.updateView = function updateView() {
          var n = TimeTools.getCurTime();
          var hometime = (this.lvhomeTime - n) / 1000;
          var fenchtime = (this.lvfenchTime - n) / 1000;

          if (hometime <= 0) {
            this.levelbuy.active = true;
            this.levelup.active = false;
          } else {
            this.levelbuy.active = false;
            this.levelup.active = true;
          }

          if (fenchtime <= 0) {
            this.fenchbuy.active = true;
            this.fenchView.active = false;
          } else {
            this.fenchbuy.active = false;
            this.fenchView.active = true;
          }

          var str = TimeTools.formatTime(hometime);
          var fenchStr = TimeTools.formatTime(fenchtime);
          this.lab_time.string = str;
          this.lab_fenchTime.string = fenchStr;
        } //设置房子升级的时间
        ;

        _proto.sethomeTime = function sethomeTime(lv) {
          var needtime = this.homeCfg.house[lv].BuildTime * 1000;
          this.lvhomeTime = this.playerData.homeTime = TimeTools.getCurTime() + needtime;

          if (!this.homeCfg.house[lv].LevelUpDescrip) {
            this.homeDialogId = UIManager.getInstance().tip.subscribeTip(["住宅升级完成"], this.lvhomeTime, 1, function () {
              var panel = UIManager.getInstance().getPanel(Panel_Main);
              return panel.node.active && !panel.Pop_exceed.node.active;
            }, 1);
          } else {
            this.homeDialogId = UIManager.getInstance().tip.subscribeTip([this.homeCfg.house[lv].UnlockDescrip, this.homeCfg.house[lv].UnlockImage.toString()], this.lvhomeTime, 7, function () {
              var panel = UIManager.getInstance().getPanel(Panel_Main);
              return panel.node.active && !panel.Pop_exceed.node.active;
            }, 1);
          }

          DataManager.getInstance().savePlayData();
          this.updateView();
        };

        _proto.setfenchTime = function setfenchTime(lv) {
          var needtime = this.homeCfg.fence[lv].BuildTime * 1000;
          this.lvfenchTime = this.playerData.fenchTime = TimeTools.getCurTime() + needtime;
          this.fenchDialogId = UIManager.getInstance().tip.subscribeTip(["栅栏升级完成！"], this.lvfenchTime, 1, function () {
            var panel = UIManager.getInstance().getPanel(Panel_Main);
            return panel.node.active && !panel.Pop_exceed.node.active;
          }, 2);
          DataManager.getInstance().savePlayData();
          this.updateView();
        };

        _proto.setfenchView = function setfenchView(viewNode, lv) {
          if (this.homeCfg.fence.length > lv + 1) {
            this.fenchbuy.getComponentInChildren(LabelEx).orgVlaue = "升" + (lv + 2) + "级栅栏";
            this.lab_fenchlv.string = this.homeCfg.fence[lv + 1].FenceDescription + '/' + this.homeCfg.fence[lv + 1].HP + "HP";
            viewNode.children.forEach(function (element) {
              element.active = false;
            });
            viewNode.children[lv + 1].active = true;
            var needPrice = this.homeCfg.fence[lv].LevelUpPrice;
            this.lab_fenchCion.string = needPrice.toString();
            this.fenchRed.active = DataManager.getInstance().guidIsOver() && needPrice <= this.playerData.coin;
          } else {
            this.lab_fenchlv.string = "";
            this.lab_fenchCion.string = "♾️";
            this.fenchbuy.getComponentInChildren(LabelEx).orgVlaue = "已经满级";
            viewNode.children.forEach(function (element) {
              element.active = false;
            });
            viewNode.children[this.homeCfg.fence.length - 1].active = true;
            this.fenchRed.active = false;
          }
        };

        _proto.setHoseView = function setHoseView(viewNode, lv) {
          if (this.homeCfg.house.length > lv + 1) {
            this.levelbuy.getComponentInChildren(LabelEx).orgVlaue = "升" + (lv + 2) + "级住宅";

            if (this.homeCfg.house[lv + 1].LevelUpDescrip) {
              this.lab_homelv.string = "<color=#C5C5C5><b>" + "<color=#ea9936>升级后</color>" + this.homeCfg.house[lv + 1].LevelUpDescrip + "</b></color>";
            } else {
              this.lab_homelv.string = "<color=#C5C5C5><b>" + "<color=#ea9936>升级后</color>" + "动物容量增加至：" + this.homeCfg.house[lv + 1].LimitStorage + "</b></color>";
            }

            viewNode.children.forEach(function (element) {
              element.active = false;
            });
            var houseLv = this.homeCfg.house[lv + 1].HounseImage;
            viewNode.children[houseLv].active = true;
            var needPrice = this.homeCfg.house[lv].LevelUpPrice;
            this.lab_cion.string = needPrice.toString();
            this.houseRed.active = DataManager.getInstance().guidIsOver() && needPrice <= this.playerData.coin;
          } else {
            this.levelbuy.getComponentInChildren(LabelEx).orgVlaue = "已经满级";
            this.lab_homelv.string = "";
            this.lab_cion.string = "♾️";
            var _houseLv = this.homeCfg.house[this.homeCfg.house.length - 1].HounseImage;
            viewNode.children.forEach(function (element) {
              element.active = false;
            });
            viewNode.children[_houseLv].active = true;
            this.houseRed.active = false;
          }
        };

        return Pop_upHome;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "Btn_close", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Btn_fence", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "Btn_home", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "levelbuy", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lab_cion", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "levelup", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "lab_time", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "fenchbuy", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "lab_fenchCion", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "fenchView", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "lab_fenchTime", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "lab_homelv", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "lab_fenchlv", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "fence", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "home", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "lab_bullet", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "lvProgre", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "fenchRed", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "houseRed", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Prop.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameCfg.ts', './CfgData.ts', './GameManager.ts', './AchimedeanSpiral.ts', './Player.ts', './Panel_Game.ts', './UIManager.ts', './AudioManager.ts', './Utils.ts', './DataManager.ts'], function (exports) {
  'use strict';

  var _createForOfIteratorHelperLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, v2, v3, randomRangeInt, math, Vec2, GameCfg, CfgData, GameManager, AnimaActionlState, AchimedeanSpiral, AnimalType, Panel_Game, UIManager, AudioManager, Utils, DataManager;

  return {
    setters: [function (module) {
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v2 = module.v2;
      v3 = module.v3;
      randomRangeInt = module.randomRangeInt;
      math = module.math;
      Vec2 = module.Vec2;
    }, function (module) {
      GameCfg = module.GameCfg;
    }, function (module) {
      CfgData = module.CfgData;
    }, function (module) {
      GameManager = module.GameManager;
      AnimaActionlState = module.AnimaActionlState;
    }, function (module) {
      AchimedeanSpiral = module.AchimedeanSpiral;
    }, function (module) {
      AnimalType = module.AnimalType;
    }, function (module) {
      Panel_Game = module.Panel_Game;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      DataManager = module.DataManager;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "ca9b4f88+BI5qJS+OIYgvbl", "Prop", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;

      var tempEntity = function tempEntity() {
        this.index = void 0;
        this.pos = void 0;
        this.wpos = void 0;
      }; //道具功能


      var Prop = exports('Prop', (_dec = ccclass('Prop'), _dec(_class = /*#__PURE__*/function () {
        function Prop() {
          this.reflashAdCnt = GameCfg.reflashAd;
          this.reflashBoxCnt = 0;
          this.changeAnimalAdCnt = GameCfg.changeAnimalTypeAd;
          this.changeAnimalBoxCnt = 0;
          this.bronNewAnimalsAdcnt = GameCfg.addAnimalCntAd;
          this.bronNewAnimalsBoxcnt = 0;
          this.center = v3(0, 2, 0);
          this.cile = [new Vec2(0, -1), new Vec2(1, 0), new Vec2(0, 1), new Vec2(-1, 0)];
          this.selectAnimal = void 0;
          this.changeAnimalCall = null;
        }

        var _proto = Prop.prototype;

        _proto.getbronAniamalCnt = function getbronAniamalCnt() {
          return this.bronNewAnimalsAdcnt + this.bronNewAnimalsBoxcnt;
        };

        _proto.getchangeAnimalCnt = function getchangeAnimalCnt() {
          return this.changeAnimalAdCnt + this.changeAnimalBoxCnt;
        };

        _proto.getreflashAniamalCnt = function getreflashAniamalCnt() {
          return this.reflashAdCnt + this.reflashBoxCnt;
        }; //刷新


        _proto.reflashAnimal = /*#__PURE__*/function () {
          var _reflashAnimal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var _this = this;

            var inMapAnimas_map, cubs, boxs, size, lisPos, lisIndex, poslist, x, y, index, box, element, tempos, ranlist, cnt, count, _index, endPos, entity;

            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  AudioManager.instance.playSound("xuanwo");
                  if (this.reflashBoxCnt <= 0) this.reflashAdCnt--;else this.reflashBoxCnt--;
                  UIManager.getInstance().setUIMaskActive(true);
                  inMapAnimas_map = GameManager.getInstance()._inMapAnimas_map;
                  cubs = GameManager.getInstance().mapInfo._cubs;
                  boxs = GameManager.getInstance().mapInfo._boxEntitys;
                  size = GameManager.getInstance()._size;
                  lisPos = new Array();
                  lisIndex = new Array();
                  poslist = new Array(); //横着排序

                  for (x = 0; x < size.y; x++) {
                    for (y = 0; y < size.x; y++) {
                      index = x + y * size.y;

                      if (cubs.length > index) {
                        box = boxs[index];

                        if (!box) {
                          element = cubs[index];
                          tempos = GameManager.getInstance()._alltmepPos[index];
                          poslist.push(v3(element.worldPosition));
                          lisPos.push(tempos);
                          lisIndex.push(index);
                        }
                      }
                    }
                  } //跑螺旋


                  ranlist = new Array();
                  cnt = 0;
                  Array.from(inMapAnimas_map.values()).forEach(function (element) {
                    ranlist.push(element);
                    var ac = null;
                    ac = element.getComponent(AchimedeanSpiral);
                    if (!ac) ac = element.addComponent(AchimedeanSpiral);
                    element.rg.enabled = false;
                    ac.startSprial(v3(element.node.worldPosition), v3(_this.center), function () {
                      cnt++;
                    });
                    element.showfxTrail(true);
                  });
                  count = ranlist.length;

                case 15:
                  if (!(cnt != count)) {
                    _context.next = 20;
                    break;
                  }

                  _context.next = 18;
                  return this.delay(10);

                case 18:
                  _context.next = 15;
                  break;

                case 20:
                  ranlist.forEach(function (child) {
                    var ac = child.getComponent(AchimedeanSpiral);
                    ac.destroy();
                  });
                  ranlist = this.KnuthDurstenfeldShuffle(ranlist);
                  cnt = 0; //还原

                  _index = 0;

                case 24:
                  if (!(_index < ranlist.length)) {
                    _context.next = 37;
                    break;
                  }

                  endPos = v3(poslist[_index]);
                  entity = ranlist[_index];
                  GameManager.getInstance().setMapTag(entity.index, false);
                  entity.temPos = v2(lisPos[_index]);
                  entity.index = lisIndex[_index];
                  entity.move(endPos, false, function () {
                    cnt++;
                  }, 15, true);
                  if (_index % 3 == 0) AudioManager.instance.playSound("jiuwei");
                  _context.next = 34;
                  return this.delay(10);

                case 34:
                  _index++;
                  _context.next = 24;
                  break;

                case 37:
                  this.rankAnimalMap(inMapAnimas_map);
                  inMapAnimas_map.forEach(function (element) {
                    element.rg.enabled = true;
                    GameManager.getInstance().setMapTag(element.index, true);
                  });

                case 39:
                  if (!(cnt < ranlist.length)) {
                    _context.next = 44;
                    break;
                  }

                  _context.next = 42;
                  return this.delay(25);

                case 42:
                  _context.next = 39;
                  break;

                case 44:
                  _context.next = 46;
                  return GameManager.getInstance().onAnimalBorn();

                case 46:
                  _context.next = 48;
                  return this.delay(50);

                case 48:
                  UIManager.getInstance().setUIMaskActive(false);
                  inMapAnimas_map = null;
                  poslist = null;
                  cubs = null;
                  size = null;
                  ranlist = null;
                  lisPos = null;
                  boxs = null;
                  lisIndex = null;

                case 57:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function reflashAnimal() {
            return _reflashAnimal.apply(this, arguments);
          }

          return reflashAnimal;
        }() //第二种刷新场上动物的方式，为动物互换
        ;

        _proto.reflashtwo = function reflashtwo() {
          var inMapAnimas_map;
          inMapAnimas_map = GameManager.getInstance()._inMapAnimas_map;
          var list; //相同的动物

          var spType = -1;
          var animalMap = new Map();
          inMapAnimas_map.forEach(function (element) {
            list = animalMap.get(element.animalType);

            if (list) {
              list.push(element);
            } else {
              list = new Array();
              list.push(element);
              animalMap.set(element.animalType, list);
            }
          });
          animalMap.forEach(function (element) {
            if (element.length >= 2) {
              spType = element[0].animalType;
            }
          }); //找到周边有动物的点

          var haveEntity;
          var sameEntity;
          var otherEntity;
          list = animalMap.get(spType);

          for (var _index2 = 0; _index2 < list.length; _index2++) {
            var element = list[_index2];
            haveEntity = this.isEntityAround(element, inMapAnimas_map);

            if (haveEntity) {
              sameEntity = element;
              break;
            }
          }

          if (haveEntity) {
            for (var _index3 = 0; _index3 < list.length; _index3++) {
              var _element = list[_index3];

              if (!_element.temPos.equals(sameEntity.temPos)) {
                otherEntity = _element;
                break;
              }
            }
          }

          var newList = new Array();
          var tempList = new Array();
          inMapAnimas_map.forEach(function (element) {
            if (haveEntity && !element.temPos.equals(haveEntity.temPos) && !element.temPos.equals(otherEntity.temPos) && !element.temPos.equals(sameEntity.temPos)) {
              newList.push(element);
              var temp = new tempEntity();
              temp.index = element.index;
              temp.pos = v2(element.temPos);
              temp.wpos = v3(element.node.position);
              tempList.push(temp);
            }
          });
          newList = this.KnuthDurstenfeldShuffle(newList);

          for (var _index4 = 0; _index4 < newList.length; _index4++) {
            var _element2 = newList[_index4];
            var temp = tempList[_index4];
            _element2.index = temp.index;
            _element2.temPos = temp.pos;
            _element2.node.position = temp.wpos;
          } //特色替换


          var wpos = v3(otherEntity.node.position);
          var otherPos = v3(haveEntity.node.position);
          var lastIndex = otherEntity.index;
          var index = haveEntity.index;
          var lastTempPos = v2(otherEntity.temPos);
          var tempPos = v2(haveEntity.temPos);
          haveEntity.node.position = wpos;
          haveEntity.index = lastIndex;
          otherEntity.index = index;
          haveEntity.temPos = lastTempPos;
          otherEntity.temPos = tempPos;
          otherEntity.node.position = otherPos; //重新排序

          this.rankAnimalMap(inMapAnimas_map);
        };

        _proto.rankAnimalMap = function rankAnimalMap(inMapAnimas_map) {
          var maplist = Array.from(inMapAnimas_map.values());
          maplist.sort(function (a, b) {
            return a.index - b.index;
          });
          inMapAnimas_map.clear();
          maplist.forEach(function (element) {
            inMapAnimas_map.set(element.uuid, element);
          });
        };

        _proto.showAnimalModels = function showAnimalModels(showAnimalTypes) {
          GameManager.getInstance().mapInfo._animalCamera.active = true;
          GameManager.getInstance().curAnimalState = AnimaActionlState.ShowAnimalModel;
          var inMapAnimas_map;
          inMapAnimas_map = GameManager.getInstance()._inMapAnimas_map;

          for (var _iterator = _createForOfIteratorHelperLoose(inMapAnimas_map.values()), _step; !(_step = _iterator()).done;) {
            var element = _step.value;
            var isShowAnimal = false;

            for (var _index5 = 0; _index5 < showAnimalTypes.length; _index5++) {
              var myanimalType = showAnimalTypes[_index5];

              if (element.animalType == myanimalType) {
                isShowAnimal = true;
                break;
              } else {
                isShowAnimal = false;
              }
            }

            if (isShowAnimal) {
              element.node.children[0].children[0].children[0].layer = 1 << 0;
              element.node.layer = 1 << 0;
            } else {
              element.node.children[0].children[0].children[0].layer = 1 << 1;
              element.node.layer = 1 << 1;
            }
          }
        };

        _proto.showAnimalModel = function showAnimalModel(clickAnima, showAnimalTypes) {
          GameManager.getInstance().mapInfo._animalCamera.active = true;
          GameManager.getInstance().curAnimalState = AnimaActionlState.ShowAnimalModel;

          GameManager.getInstance()._inMapAnimas_map.forEach(function (element) {
            element.node.children[0].children[0].children[0].layer = 1 << 1;
            element.node.layer = 1 << 1;
          });

          var isShowAnimal = false;

          for (var index = 0; index < showAnimalTypes.length; index++) {
            var myanimalType = showAnimalTypes[index];

            if (clickAnima.animalType == myanimalType) {
              isShowAnimal = true;
              break;
            } else {
              isShowAnimal = false;
            }
          }

          if (isShowAnimal) {
            clickAnima.node.children[0].children[0].children[0].layer = 1 << 0;
            clickAnima.node.layer = 1 << 0;
          } else {
            clickAnima.node.children[0].children[0].children[0].layer = 1 << 1;
            clickAnima.node.layer = 1 << 1;
          }
        } //改变动物类型
        ;

        _proto.clickToAnimal = function clickToAnimal(entity, isAdProp) {
          if (isAdProp === void 0) {
            isAdProp = true;
          }

          if (this.selectAnimal) return;
          this.selectAnimal = entity;
          var inMapAnimas_map;
          inMapAnimas_map = GameManager.getInstance()._inMapAnimas_map;
          entity.node.layer = 1 << 0;
          entity.node.children[0].children[0].children[0].layer = 1 << 0;
          inMapAnimas_map.forEach(function (element) {
            if (element.index != entity.index) {
              element.node.children[0].children[0].children[0].layer = 1 << 1;
              element.node.layer = 1 << 1;
            }
          });
          var game = UIManager.getInstance().getPanel(Panel_Game);
          game.clickAnimal(entity, isAdProp);
        };

        _proto.cancelChanAnimal = function cancelChanAnimal() {
          if (this.selectAnimal) {
            this.selectAnimal.node.children[0].children[0].children[0].layer = 1 << 1;
            this.selectAnimal.node.layer = 1 << 1;
            this.selectAnimal = null;
          }
        }
        /**
         * 改变动物类型
         * @param antype 动物类型
         * @param isAdProp 是否使用的广告
         */
        ;

        _proto.changeAnimal = /*#__PURE__*/function () {
          var _changeAnimal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(antype, isAdProp) {
            var _this$changeAnimalCal;

            var game, inMapAnimas_map, newAnimal;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  game = UIManager.getInstance().getPanel(Panel_Game);

                  if (isAdProp) {
                    if (this.changeAnimalBoxCnt <= 0) this.changeAnimalAdCnt--;else this.changeAnimalBoxCnt--;
                    game.updatePropCnt();
                  }

                  game.hideSwtichPop();

                  if (!(this.selectAnimal.animalType == AnimalType.zebra)) {
                    _context2.next = 7;
                    break;
                  }

                  this.selectAnimal.play("dance_end");
                  _context2.next = 7;
                  return this.delay(650);

                case 7:
                  GameManager.getInstance().mapInfo._animalCamera.active = false;
                  inMapAnimas_map = GameManager.getInstance()._inMapAnimas_map;
                  newAnimal = GameManager.getInstance().createAnimal(antype);
                  newAnimal.init(this.selectAnimal.index, this.selectAnimal.temPos, antype);
                  newAnimal.node.worldPosition = v3(this.selectAnimal.node.worldPosition);

                  GameManager.getInstance()._parentAnima.addChild(newAnimal.node);

                  inMapAnimas_map["delete"](this.selectAnimal.uuid);
                  inMapAnimas_map.set(newAnimal.uuid, newAnimal);
                  AudioManager.instance.playSound("change");
                  newAnimal.fx_Change.active = true;
                  this.rankAnimalMap(inMapAnimas_map);
                  GameManager.getInstance().curAnimalState = AnimaActionlState.Other;
                  this.selectAnimal.destroyEntity();
                  this.selectAnimal = null;
                  _context2.next = 23;
                  return this.delay(500);

                case 23:
                  (_this$changeAnimalCal = this.changeAnimalCall) == null ? void 0 : _this$changeAnimalCal.call(this);
                  this.changeAnimalCall = null;
                  if (!isAdProp) GameManager.getInstance().onCheckGameState();

                case 26:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));

          function changeAnimal(_x, _x2) {
            return _changeAnimal.apply(this, arguments);
          }

          return changeAnimal;
        }() //强制生成动物
        ;

        _proto.bronNewAnimals = /*#__PURE__*/function () {
          var _bronNewAnimals = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
            var cnts, cnt;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  if (this.bronNewAnimalsBoxcnt <= 0) this.bronNewAnimalsAdcnt--;else this.bronNewAnimalsBoxcnt--;
                  cnts = Utils.getSplitNumbers(CfgData.getInstance().getHomeCfg().house[DataManager.getInstance().playerData.homeLv].BattleAddAnimal, "_");
                  cnt = math.randomRangeInt(cnts[0], cnts[1]);
                  this.addAnimaltoGame(cnt);
                  UIManager.getInstance().tip.showNomalTip("增加" + cnt + "只动物", 1, 1, 5, v3(0, 600, 0));

                  if (GameManager.getInstance()._atking) {
                    _context3.next = 8;
                    break;
                  }

                  _context3.next = 8;
                  return GameManager.getInstance().onAnimalBorn();

                case 8:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, this);
          }));

          function bronNewAnimals() {
            return _bronNewAnimals.apply(this, arguments);
          }

          return bronNewAnimals;
        }();

        _proto.addAnimaltoGame = function addAnimaltoGame(cnt) {
          var animalCfg = CfgData.getInstance().getHomeCfg().animal;
          var totallPb = 0;

          GameManager.getInstance()._animalTypes.forEach(function (element) {
            totallPb += animalCfg[element].CreatProbability;
          });

          for (var index = 0; index < cnt; index++) {
            var animalType = -1;
            var randomIndex = randomRangeInt(0, totallPb);
            var pb = 0;

            for (var _index6 = 0; _index6 < GameManager.getInstance()._animalTypes.length; _index6++) {
              var element = GameManager.getInstance()._animalTypes[_index6];

              pb += animalCfg[element].CreatProbability;

              if (randomIndex >= pb - animalCfg[element].CreatProbability && randomIndex < pb) {
                animalType = element;
                break;
              }
            }

            if (animalType == -1) console.log("没有随机出动物");else GameManager.getInstance()._animalLibrary.push(animalType);
          }
        } //洗牌
        ;

        _proto.KnuthDurstenfeldShuffle = function KnuthDurstenfeldShuffle(_array) {
          var rand;
          var tempValue;

          for (var i = 0; i < _array.length; i++) {
            rand = math.randomRangeInt(0, _array.length - i);
            tempValue = _array[rand];
            _array[rand] = _array[_array.length - 1 - i];
            _array[_array.length - 1 - i] = tempValue;
          }

          return _array;
        };

        _proto.isEntityAround = function isEntityAround(entity, inMapAnimas_map) {
          for (var index = 0; index < this.cile.length; index++) {
            var child = this.cile[index];
            var off = v2(child);
            off.add(entity.temPos);

            for (var _iterator2 = _createForOfIteratorHelperLoose(inMapAnimas_map.values()), _step2; !(_step2 = _iterator2()).done;) {
              var element = _step2.value;

              if (off.equals(element.temPos)) {
                return element;
              }
            }
          }

          return null;
        };

        _proto.delay = /*#__PURE__*/function () {
          var _delay = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(time) {
            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) switch (_context4.prev = _context4.next) {
                case 0:
                  return _context4.abrupt("return", GameManager.getInstance().delay(this));

                case 1:
                case "end":
                  return _context4.stop();
              }
            }, _callee4, this);
          }));

          function delay(_x3) {
            return _delay.apply(this, arguments);
          }

          return delay;
        }();

        return Prop;
      }()) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RunAwayAre.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HomeAnimal.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, BoxCollider, Component, HomeAnimal, HomeAnimalState;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      BoxCollider = module.BoxCollider;
      Component = module.Component;
    }, function (module) {
      HomeAnimal = module.HomeAnimal;
      HomeAnimalState = module.HomeAnimalState;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "3dd43Tz7PZLvbG6v+dOarIq", "RunAwayAre", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var RunAwayAre = exports('RunAwayAre', (_dec = ccclass('RunAwayAre'), _dec2 = property({
        type: BoxCollider,
        displayName: "collider"
      }), _dec3 = property({
        type: [HomeAnimal],
        displayName: "在区域的动物"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RunAwayAre, _Component);

        function RunAwayAre() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "boxCollider", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "inAreAnimals", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = RunAwayAre.prototype;

        _proto.onLoad = function onLoad() {
          this.boxCollider.on("onTriggerEnter", this.onTriggerEnter, this);
          this.boxCollider.on("onTriggerExit", this.onTriggerExit, this);
        };

        _proto.clear = function clear() {
          this.inAreAnimals = [];
        };

        _proto.onTriggerEnter = function onTriggerEnter(event) {
          var animal = event.otherCollider.getComponent(HomeAnimal);

          if (animal && animal.animalState != HomeAnimalState.runAway) {
            this.inAreAnimals.push(animal);
          }
        };

        _proto.onTriggerExit = function onTriggerExit(event) {
          var animal = event.otherCollider.getComponent(HomeAnimal);

          if (animal) {
            this.inAreAnimals = this.inAreAnimals.filter(function (item) {
              return item != animal;
            });
          }
        };

        return RunAwayAre;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "boxCollider", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "inAreAnimals", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SdkManager.ts", ['cc', './AuthorizeManager.ts', './NativeSdkManager.ts', './GameCfg.ts', './DataManager.ts', './TimeTools.ts', './CfgData.ts', './AudioSys.ts'], function (exports) {
  'use strict';

  var cclegacy, _decorator, sys, randomRangeInt, Sprite, SpriteFrame, AuthorizeManager, NativeSdkManager, GameCfg, DataManager, TimeTools, CfgData, AudioSys;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
      randomRangeInt = module.randomRangeInt;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
    }, function (module) {
      AuthorizeManager = module.AuthorizeManager;
    }, function (module) {
      NativeSdkManager = module.NativeSdkManager;
    }, function (module) {
      GameCfg = module.GameCfg;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      TimeTools = module.TimeTools;
    }, function (module) {
      CfgData = module.CfgData;
    }, function (module) {
      AudioSys = module.AudioSys;
    }],
    execute: function () {
      exports({
        ShareAppType: void 0,
        adEnum: void 0,
        vibrateType: void 0
      });

      var _dec, _class, _class2;

      cclegacy._RF.push({}, "a48ccd4kLRJjr+Xlx2C2LTP", "SdkManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SdkManager = exports('SdkManager', (_dec = ccclass('SdkManager'), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function SdkManager() {
          this.dyadUnitId = "3a40j7m4lbc88da3r0";
          this.wxadUnitId = "adunit-b76942e403d92626";
          this.videoAd = void 0;
          this.interstitial = void 0;
          this.ShareRefresh = 0;
          this.ShareChange = 0;
          this.ShareAddAnimal = 0;
          this.lastTime = void 0;
          this.shareInfo = void 0;
          this.reworldCallBack = null;
          this.playerdata = void 0;
          this.isInits = false;
          this.videoPath = "";
          this.shareImgTemp = null;
        }

        SdkManager.getInstance = function getInstance() {
          if (SdkManager._instance == null) {
            SdkManager._instance = new SdkManager();
          }

          return SdkManager._instance;
        };

        var _proto = SdkManager.prototype;

        _proto.init = function init(callBack) {
          var _this = this;

          if (this.isInits) return;
          console.log("sdk开始初始化...");
          this.isInits = true;
          this.shareInfo = AuthorizeManager.getInstance().baseAuthoriz.ShareCfg;
          this.playerdata = DataManager.getInstance().playerData;
          this.lastTime = sys.localStorage.getItem("shareTime");
          this.ShareRefresh = this.playerdata.ShareRefresh;
          this.ShareChange = this.playerdata.ShareChange;
          this.ShareAddAnimal = this.playerdata.ShareAddAnimal;

          if (!this.lastTime) {
            console.log("last time is null");
            this.lastTime = TimeTools.getCurTime().toString();
            sys.localStorage.setItem("shareTime", this.lastTime);
          }

          if (sys.platform == sys.Platform.BYTEDANCE_MINI_GAME) {
            //广告id
            var options = {
              adUnitId: this.dyadUnitId
            };
            this.videoAd = tt.createRewardedVideoAd(options);

            if (this.videoAd != null) {
              this.videoAd.onLoad(function () {
                console.info("广告加完成！");
              });
            }

            this.Load(adEnum.reward);
            this.Load(adEnum.interstitial);
            callBack();
          } else if (sys.platform == sys.Platform.ANDROID || sys.platform == sys.Platform.IOS) {
            NativeSdkManager.GetInstance().Init(callBack); // NativeSdkManager.GetInstance();

            console.log("原生 广告初始化");
          } else if (sys.platform == sys.Platform.WECHAT_GAME) {
            var wxoptions = {
              adUnitId: this.wxadUnitId
            };
            this.videoAd = wx.createRewardedVideoAd(wxoptions);
            this.videoAd.onError(function (err) {
              console.log(err);
            });
            this.videoAd.onLoad(function () {
              console.log('激励视频 广告加载成功');
            });
            this.videoAd.onClose(function (res) {
              if (res && res.isEnded || res === undefined) {
                // 正常播放结束，可以下发游戏奖励
                _this.reworldCallBack == null ? void 0 : _this.reworldCallBack(true);
                AudioSys.instance.rePlayMusic(); //EventSys.ad_end_success_Event(LevelSys.instance.curLevelId.toString());
              } else {
                // 播放中途退出，不下发游戏奖励
                AudioSys.instance.rePlayMusic();
                _this.reworldCallBack == null ? void 0 : _this.reworldCallBack(false); //EventSys.ad_end_fail_Event(LevelSys.instance.curLevelId.toString());
              }
            });
            this.Load(adEnum.reward);
            console.log("微信广告初始化");
            callBack();
          } else {
            callBack();
          }
        }
        /**
         *  showAd
         */
        ;

        _proto.showAd = function showAd(adenum, call, target) {
          SdkManager.isShowAd = true;

          var callBack = function callBack(isEnded) {
            if (isEnded) {
              SdkManager.getInstance().SendEvent(CfgData.getInstance().getEventData().getDotEvent(25).id, null);
            } else {
              SdkManager.getInstance().SendEvent(CfgData.getInstance().getEventData().getDotEvent(26).id, null);
            }

            call(isEnded);
            setTimeout(function () {
              SdkManager.isShowAd = false;
            }, 1000);
          };

          if (GameCfg.isgm) {
            callBack(true);
            return;
          }

          SdkManager.getInstance().SendEvent(CfgData.getInstance().getEventData().getDotEvent(24).id, null);

          if (sys.platform == sys.Platform.BYTEDANCE_MINI_GAME && adenum == adEnum.reward) {
            this.videoAd.onClose(function (res) {
              if (callBack != null) {
                callBack(res.isEnded);
                callBack = null;
              }
            });
            this.videoAd.show();
          } else if (sys.platform == sys.Platform.ANDROID || sys.platform == sys.Platform.IOS && adenum == adEnum.reward) {
            NativeSdkManager.GetInstance().ShowAd(adenum, function (res) {
              callBack == null ? void 0 : callBack(res);
              AudioSys.instance.cancelMuteMusic();
              AudioSys.instance.cancelMuteSound();
            });
            AudioSys.instance.muteMusic();
            AudioSys.instance.muteSound();
          } else if (sys.platform == sys.Platform.WECHAT_GAME && adenum == adEnum.reward) {
            this.reworldCallBack = callBack;
            this.videoAd.show()["catch"](function (err) {
              callBack(false);
            });
            console.log("微信广告展示");
          } else {
            callBack(true);
          }
        };

        _proto.Load = function Load(adenum) {
          if (sys.platform == sys.Platform.BYTEDANCE_MINI_GAME && adenum == adEnum.reward) {
            this.videoAd.load();
            return;
          } else if (sys.platform == sys.Platform.ANDROID || sys.platform == sys.Platform.IOS && adenum == adEnum.reward) {
            NativeSdkManager.GetInstance().LoadAd(adenum);
            return;
          } else if (sys.platform == sys.Platform.WECHAT_GAME && adenum == adEnum.reward) {
            this.videoAd.load();
            return;
          }

          if (sys.platform == sys.Platform.BYTEDANCE_MINI_GAME && adenum == adEnum.interstitial) {
            this.videoAd.load();
            return;
          }
        }
        /***
         * 开始录屏
         * 
         */
        ;

        _proto.StartRecord = function StartRecord() {
          if (sys.platform == sys.Platform.BYTEDANCE_MINI_GAME) {
            tt.getGameRecorderManager().start({
              duration: 300
            });
            console.info("开始录屏");
          }
        };

        _proto.StopRecord = function StopRecord(callBack) {
          var _this2 = this;

          if (sys.platform == sys.Platform.BYTEDANCE_MINI_GAME) {
            tt.getGameRecorderManager().onStop(function (res) {
              _this2.videoPath = res.videoPath;
            });
            tt.getGameRecorderManager().stop();

            if (this.videoPath != "" || this.videoPath != null) {
              callBack == null ? void 0 : callBack(true);
            } else {
              callBack == null ? void 0 : callBack(false);
            }
          } else if (sys.platform == sys.Platform.WECHAT_GAME) {
            callBack == null ? void 0 : callBack(false);
          } else {
            callBack == null ? void 0 : callBack(true);
          }
        };

        _proto.isNextday = function isNextday() {
          var lasttime = new Date(Number(this.lastTime) * 1000);
          var nowtime = new Date(Number(AuthorizeManager.getInstance().baseAuthoriz.LoginTss) * 1000);
          var new_date = nowtime.getDate() - lasttime.getDate();
          return new_date >= 1 || lasttime.getMonth() < nowtime.getMonth() || lasttime.getFullYear() < nowtime.getFullYear();
        };

        _proto.GetShareTimes = function GetShareTimes(shareType) {
          if (shareType == ShareAppType.ShareRefresh) {
            return 0;
          } else if (shareType == ShareAppType.ShareChange) {
            return 0;
          } else if (shareType == ShareAppType.ShareAddAnimal) {
            return 0;
          }
        };

        _proto.updateShareTimes = function updateShareTimes() {
          if (this.isNextday()) {
            this.playerdata.ShareChange = this.ShareChange = GameCfg.ShareChange;
            this.playerdata.ShareAddAnimal = this.ShareAddAnimal = GameCfg.ShareAddAnimal;
            this.playerdata.ShareRefresh = this.ShareRefresh = GameCfg.ShareRefresh;
            this.lastTime = TimeTools.getCurTime().toString();
            sys.localStorage.setItem("shareTime", this.lastTime);
            DataManager.getInstance().savePlayData();
          }
        };

        _proto.setShareTimes = function setShareTimes(shareType) {
          if (shareType == ShareAppType.ShareChange) {
            this.playerdata.ShareChange = this.ShareChange--;
          } else if (shareType == ShareAppType.ShareRefresh) {
            this.playerdata.ShareRefresh = this.ShareRefresh--;
          } else if (shareType == ShareAppType.ShareAddAnimal) {
            this.playerdata.ShareAddAnimal = this.ShareAddAnimal--;
          }

          DataManager.getInstance().savePlayData();
        }
        /**
         * 分享
         * @param shareType 
         */
        ;

        _proto.ShareAppMessage = function ShareAppMessage(shareType) {
          var titles;
          var descList;
          var iconList;

          if (this.shareInfo) {
            titles = this.shareInfo.titleList;
            descList = this.shareInfo.descList;
            iconList = this.shareInfo.iconList;
          } else {
            titles = ["在小小的猪圈里拱呀拱呀拱！", "好巧啊你也来拱墙角！？", "创意拱墙角游戏嗄嗄好玩!", "有本事你来拱烂我墙脚！", "一起来拱墙脚吧太搞笑了！", "求助求助！帮我一起拱墙脚！", "太好玩了哈哈哈拱墙脚！"];
            descList = ["在小小的猪圈里拱呀拱呀拱！", "好巧啊你也来拱墙角！？"];
            iconList = ['openDataContext/render/share_1.jpg', 'openDataContext/render/share_2.jpg'];
          }

          var title = titles[randomRangeInt(0, titles.length)]; // let title = "好巧啊你也来拱墙角！？";

          var icon = iconList[randomRangeInt(0, iconList.length)];
          var des = descList[randomRangeInt(0, descList.length)]; // let des = "好巧啊你也来拱墙角！？";

          if (sys.platform == sys.Platform.WECHAT_GAME) {
            wx.shareAppMessage({
              title: title,
              imageUrl: icon
            });
            this.setShareTimes(shareType);
          } else if (sys.platform == sys.Platform.BYTEDANCE_MINI_GAME) {
            tt.shareAppMessage({
              title: title,
              desc: des,
              imageUrl: icon
            });
            this.setShareTimes(shareType);
          } else {
            this.setShareTimes(shareType);
          }
        }
        /**
         * 分享录屏
         * @param callback 完成回调
         */
        ;

        _proto.ShareVideo = function ShareVideo(callback) {
          var _this3 = this;

          if (sys.platform == sys.Platform.BYTEDANCE_MINI_GAME) {
            var titles = ["我就不信这条咸鱼翻不了身！", "明明就差一条了就是翻不了身！", "咱们家就一个没翻身了，来看看是谁？", "看起来好简单，但就是翻不了身！", "就差你没翻身了，快来看看！", "据说万分之一的人才能帮这条咸鱼翻身？", "咸鱼翻身难题，智商150才能解开？"];
            var index = randomRangeInt(0, titles.length); //  let title = titles[index];

            var title = "好巧啊你也来拱墙角！？";
            tt.shareAppMessage({
              channel: "video",
              title: title,
              complete: function complete() {
                console.log("分享完成！！！");
                callback == null ? void 0 : callback();
                _this3.videoPath = "";
              },
              extra: {
                videoPath: this.videoPath,
                withVideoId: true //video_title: title,

              }
            });
          } else {
            callback == null ? void 0 : callback();
          }
        }
        /**
         * 震动
         * @param vibratetype 类型
         */
        ;

        _proto.VibrateShort = function VibrateShort(vibrateSet, vibratetype) {
          if (!vibrateSet) return;
          if (sys.platform == sys.Platform.WECHAT_GAME) wx.vibrateShort(vibratetype.toString());else if (sys.platform == sys.Platform.BYTEDANCE_MINI_GAME) {
            if (vibratetype == vibrateType.light) {
              tt.vibrateShort();
            } else {
              tt.vibrateLong();
            }
          } else if (sys.platform == sys.Platform.ANDROID || sys.platform == sys.Platform.IOS) {
            NativeSdkManager.GetInstance().VibrateShort(vibratetype);
          }
        }
        /**
        * SendEvent 
        */
        ;

        _proto.SendEvent = function SendEvent(eventName, data) {
          if (sys.platform == sys.Platform.BYTEDANCE_MINI_GAME) {
            //  console.log("----------event log :"+eventName);
            if (data == null) tt.reportAnalytics(eventName, {});else tt.reportAnalytics(eventName, data);
          } else if (sys.platform == sys.Platform.WECHAT_GAME) {
            if (data == null) wx.reportEvent(eventName, {});else wx.reportEvent(eventName, data);
          } else if (sys.platform == sys.Platform.IOS || sys.platform == sys.Platform.ANDROID) ;
        };

        _proto.showCaptureImage = function showCaptureImage(spNode) {
          var sprite = spNode.getComponent(Sprite);
          sprite.spriteFrame = null;
          sprite.spriteFrame = this.shareImgTemp;
        } //用wx，抖音的api 创建图片
        ;

        _proto.createImage = function createImage(url, callback) {
          if (url == '') {
            callback(null);
          }

          if (sys.platform == sys.Platform.WECHAT_GAME) {
            var img = wx.createImage();
            img.src = url;

            img.onload = function () {
              callback(SpriteFrame.createWithImage(img));
            };

            img.onerror = function () {
              callback(null);
            };
          } else {
            callback(null);
          }
        };

        return SdkManager;
      }(), _class2._instance = void 0, _class2.isShowAd = false, _class2)) || _class));
      var adEnum;

      (function (adEnum) {
        adEnum[adEnum["reward"] = 0] = "reward";
        adEnum[adEnum["interstitial"] = 1] = "interstitial";
      })(adEnum || (adEnum = exports('adEnum', {})));

      var vibrateType;

      (function (vibrateType) {
        vibrateType[vibrateType["heavy"] = 0] = "heavy";
        vibrateType[vibrateType["medium"] = 1] = "medium";
        vibrateType[vibrateType["light"] = 2] = "light";
      })(vibrateType || (vibrateType = exports('vibrateType', {})));

      var ShareAppType;

      (function (ShareAppType) {
        ShareAppType[ShareAppType["ShareRefresh"] = 0] = "ShareRefresh";
        ShareAppType[ShareAppType["ShareChange"] = 1] = "ShareChange";
        ShareAppType[ShareAppType["ShareAddAnimal"] = 2] = "ShareAddAnimal";
        ShareAppType[ShareAppType["Game"] = 3] = "Game";
        ShareAppType[ShareAppType["None"] = 4] = "None";
      })(ShareAppType || (ShareAppType = exports('ShareAppType', {})));

      var shareCfg = exports('shareCfg', function shareCfg() {
        this.titleList = void 0;
        this.descList = void 0;
        this.iconList = void 0;
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Sheep.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnclosureChild.ts', './Entity.ts', './Fence.ts', './GameManager.ts', './TreasureBox.ts', './SdkManager.ts', './DataManager.ts', './GameCfg.ts', './AudioManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCFloat, SphereCollider, v3, Vec3, randomRange, EnclosureChild, MapSacle, AtkFactor, TotallAtkFactor, Entity, Fence, GameManager, TreasureBox, SdkManager, vibrateType, DataManager, GameCfg, AudioManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
      SphereCollider = module.SphereCollider;
      v3 = module.v3;
      Vec3 = module.Vec3;
      randomRange = module.randomRange;
    }, function (module) {
      EnclosureChild = module.EnclosureChild;
    }, function (module) {
      MapSacle = module.MapSacle;
      AtkFactor = module.AtkFactor;
      TotallAtkFactor = module.TotallAtkFactor;
      Entity = module.Entity;
    }, function (module) {
      Fence = module.Fence;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      TreasureBox = module.TreasureBox;
    }, function (module) {
      SdkManager = module.SdkManager;
      vibrateType = module.vibrateType;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      GameCfg = module.GameCfg;
    }, function (module) {
      AudioManager = module.AudioManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "6a03cXCgL9D35DuHD8TaiFq", "Sheep", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Sheep = exports('Sheep', (_dec = ccclass('Sheep'), _dec2 = property({
        type: CCFloat,
        visible: true,
        displayName: "基础攻击力"
      }), _dec3 = property({
        type: [MapSacle],
        visible: true,
        displayName: "放大系数"
      }), _dec4 = property({
        type: [AtkFactor],
        visible: true,
        displayName: "攻击力个数加成系数"
      }), _dec5 = property({
        type: [TotallAtkFactor],
        visible: true,
        displayName: "总攻击力个数加成系数"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Entity) {
        _inheritsLoose(Sheep, _Entity);

        function Sheep() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Entity.call.apply(_Entity, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "baseAtk", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scale", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "atkFactor", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "totallAtk", _descriptor4, _assertThisInitialized(_this));

          _this.isAtk = false;
          _this.cfgs = void 0;
          return _this;
        }

        var _proto = Sheep.prototype;

        _proto.initCfg = function initCfg() {
          this.scale = new Array();
          this.atkFactor = new Array();
          this.totallAtk = new Array();
          this.cfgs = GameManager.getInstance().animalCfg.Sheep;
          this.baseAtk = this.cfgs[0].BaseAtk;

          for (var index = 0; index < this.cfgs.length; index++) {
            var element = this.cfgs[index];
            var sacle = new MapSacle();
            sacle.lv = index;
            sacle.sacle = element.MapSacle;
            this.scale.push(sacle);
            var atkfactor = new AtkFactor();
            atkfactor.lv = index;
            atkfactor.factor = element.AtkFactor;
            this.atkFactor.push(atkfactor);
            var totallatk = new TotallAtkFactor();
            totallatk.lv = index;
            totallatk.factor = element.TotallAtkFactor;
            this.totallAtk.push(totallatk);
          }
        };

        _proto.start = function start() {
          this.node.getComponent(SphereCollider).on('onCollisionEnter', this.onCollsEnter, this);
          this.node.getComponent(SphereCollider).on('onCollisionStay', this.onTriggerStay, this); //this.initCfg();
        };

        _proto.onCollsEnter = function onCollsEnter(collider) {
          var other = collider.otherCollider.node;

          if (other && this.atkState) {
            var point = v3();
            var box = other.getComponent(Fence);

            if (!this.isAtk && !this.isNomalAnimal && box) {
              collider.contacts[0].getWorldPointOnA(point);
              this.skeletal.play("behit");
              SdkManager.getInstance().VibrateShort(DataManager.getInstance().playerData.vibrateSet, vibrateType.light);
              box.onHit(this.getAtkFactor(), point);
              this.isAtk = true;
              this.stopMove();
              var dir = new Vec3(randomRange(-10, 10), randomRange(20, 60), 1).normalize(); //方向

              dir = dir.multiplyScalar(GameCfg.AnimalReboundForce); //长度

              this.rg.useGravity = true;
              this.rg.applyForce(dir);
              this.delayDestroy(800);
              this.isLastAtk();
              return;
            }

            var enc = other.getComponent(EnclosureChild);

            if (!this.isAtk && enc) {
              collider.contacts[0].getWorldPointOnA(point);
              this.skeletal.play("behit");
              SdkManager.getInstance().VibrateShort(DataManager.getInstance().playerData.vibrateSet, vibrateType.light);
              enc.onHit(this.getAtkFactor(), point);
              this.isAtk = true;
              this.stopMove();

              var _dir = new Vec3(randomRange(-10, 10), randomRange(20, 60), 1).normalize(); //方向


              _dir = _dir.multiplyScalar(GameCfg.AnimalReboundForce); //长度

              this.rg.useGravity = true;
              this.rg.applyForce(_dir);
              this.delayDestroy(1500);
              this.isLastAtk();
              return;
            }

            var tr = other.getComponent(TreasureBox);

            if (!this.isAtk && tr) {
              collider.contacts[0].getWorldPointOnA(point);
              this.skeletal.play("behit");
              SdkManager.getInstance().VibrateShort(DataManager.getInstance().playerData.vibrateSet, vibrateType.light);
              tr.onHit(this.getAtkFactor(), point);
              this.isAtk = true;
              this.stopMove();

              var _dir2 = new Vec3(randomRange(-10, 10), randomRange(20, 60), 1).normalize(); //方向


              _dir2 = _dir2.multiplyScalar(GameCfg.AnimalReboundForce); //长度

              this.rg.useGravity = true;
              this.rg.applyForce(_dir2);
              this.delayDestroy(1500);
              this.isLastAtk();
              return;
            }

            if (this.isAtk && other.name == "Dimian") {
              AudioManager.instance.playSound("down");

              var _dir3 = new Vec3(randomRange(-10, 10), randomRange(20, 60), 0).normalize(); //方向


              _dir3 = _dir3.multiplyScalar(GameCfg.AnimalReboundForce); //长度

              this.rg.applyForce(_dir3);
            }
          }
        };

        _proto.onTriggerStay = function onTriggerStay(collider) {
          var other = collider.otherCollider.node;

          if (other) {
            var box = other.getComponent(Fence);
            var trea = other.getComponent(TreasureBox);

            if (this.isNomalAnimal && (box || trea)) {
              this.node.setPosition(this.node.position.add3f(0, 0.1, 0));
            }
          }
        };

        _proto.getAtkFactor = function getAtkFactor() {
          var atk;
          var step = this.step >= this.atkFactor.length ? this.atkFactor.length - 1 : this.step;
          atk = this.baseAtk * this.atkFactor[step].factor * this.totallAtk[step].factor;
          GameManager.getInstance().additionalHurt += atk - 1;
          return atk;
        };

        _proto.isLastAtk = function isLastAtk() {
          if (this.step == this.totallStep) ;
        };

        _proto.setBigState = function setBigState(step) {
          step = step >= this.scale.length ? this.scale.length - 1 : step;
          var sacle = this.scale[step].sacle;

          _Entity.prototype.setBigState.call(this, sacle);
        };

        _proto.update = function update(deltaTime) {
          _Entity.prototype.update.call(this, deltaTime);
        };

        return Sheep;
      }(Entity), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "baseAtk", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "scale", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "atkFactor", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "totallAtk", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Sleeper.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Coroutine.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _regeneratorRuntime, _asyncToGenerator, cclegacy, _decorator, Animation, Component, Coroutine;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _regeneratorRuntime = module.regeneratorRuntime;
      _asyncToGenerator = module.asyncToGenerator;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      Coroutine = module.Coroutine;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "d740bp3pY1JfY57xasH6F5E", "Sleeper", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Sleeper = exports('Sleeper', (_dec = ccclass('Sleeper'), _dec2 = property({
        type: Animation,
        displayName: "动画"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Sleeper, _Component);

        function Sleeper() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "skele", _descriptor, _assertThisInitialized(_this));

          _this.playState = "";
          _this.birthTime = 1.65;
          _this.slowFix = void 0;
          _this.qiukFix = void 0;
          return _this;
        }

        var _proto = Sleeper.prototype;

        _proto.init = function init() {};

        _proto.play = function play(animationName) {
          this.playState = animationName;
          this.skele.play(animationName);
        };

        _proto.onDestroy = function onDestroy() {
          var _this$slowFix, _this$qiukFix;

          (_this$slowFix = this.slowFix) == null ? void 0 : _this$slowFix.stop();
          (_this$qiukFix = this.qiukFix) == null ? void 0 : _this$qiukFix.stop();
        };

        _proto.quickFixFench = /*#__PURE__*/function () {
          var _quickFixFench = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(enclosure) {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  this.play("birth");
                  _context.next = 3;
                  return this.delay(this.birthTime);

                case 3:
                  this.play("fix_fast");
                  _context.next = 6;
                  return enclosure.fixFench(20);

                case 6:
                  this.play("leave");
                  _context.next = 9;
                  return this.delay(1.47);

                case 9:
                  return _context.abrupt("return", new Promise(function (reslove, reject) {
                    reslove(true);
                  }));

                case 10:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function quickFixFench(_x) {
            return _quickFixFench.apply(this, arguments);
          }

          return quickFixFench;
        }();

        _proto.fixFench = /*#__PURE__*/function () {
          var _fixFench = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(enclosure) {
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  this.play("birth");
                  _context2.next = 3;
                  return this.delay(this.birthTime);

                case 3:
                  this.play("fix_slow");
                  _context2.next = 6;
                  return enclosure.fixFench(20);

                case 6:
                  this.play("leave");
                  _context2.next = 9;
                  return this.delay(1.47);

                case 9:
                  return _context2.abrupt("return", new Promise(function (reslove, reject) {
                    reslove(true);
                  }));

                case 10:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));

          function fixFench(_x2) {
            return _fixFench.apply(this, arguments);
          }

          return fixFench;
        }();

        _proto.startslowFix = function startslowFix() {
          var _this2 = this;

          if (this.slowFix) this.slowFix.stop();
          this.slowFix = new Coroutine(function () {
            return _this2.fixPlayerFench(_this2);
          });
          this.slowFix.start();
        };

        _proto.startquickFix = function startquickFix(playerFench) {
          var _this3 = this,
              _this$slowFix2;

          if (this.qiukFix) this.qiukFix.stop();
          this.qiukFix = new Coroutine(function () {
            return _this3.quickfixPlayerFench(playerFench, _this3);
          });
          (_this$slowFix2 = this.slowFix) == null ? void 0 : _this$slowFix2.stop();
          this.qiukFix.start();
        };

        _proto.fixPlayerFench = /*#__PURE__*/_regeneratorRuntime().mark(function fixPlayerFench(com) {
          return _regeneratorRuntime().wrap(function fixPlayerFench$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                this.play("birth");
                _context3.next = 3;
                return Coroutine.waitForSecond(this.birthTime, com);

              case 3:
                this.play("fix_slow");

              case 4:
              case "end":
                return _context3.stop();
            }
          }, fixPlayerFench, this);
        });
        _proto.quickfixPlayerFench = /*#__PURE__*/_regeneratorRuntime().mark(function quickfixPlayerFench(playerFench, com) {
          var animation;
          return _regeneratorRuntime().wrap(function quickfixPlayerFench$(_context4) {
            while (1) switch (_context4.prev = _context4.next) {
              case 0:
                animation = this.playState == "fix_slow" || this.playState == "birth";

                if (animation) {
                  _context4.next = 5;
                  break;
                }

                this.play("birth");
                _context4.next = 5;
                return Coroutine.waitForSecond(this.birthTime, com);

              case 5:
                this.play("fix_fast");
                return _context4.delegateYield(playerFench.fixFench(20, playerFench), "t0", 7);

              case 7:
              case "end":
                return _context4.stop();
            }
          }, quickfixPlayerFench, this);
        });

        _proto.delay = function delay(time) {
          var _this4 = this;

          return new Promise(function (reslove, reject) {
            _this4.scheduleOnce(function () {
              reslove(true);
            }, time);
          });
        };

        return Sleeper;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "skele", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpriteResources.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "23e05Nf09dKHqDGfiqP8Ovr", "SpriteResources", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SpriteResources = exports('SpriteResources', (_dec = ccclass('SpriteResources'), _dec2 = property({
        type: [SpriteFrame],
        displayName: "emojs"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpriteResources, _Component);

        function SpriteResources() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "emojs", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        return SpriteResources;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "emojs", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Stone.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Entity.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCFloat, Node, BoxCollider, Entity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
      Node = module.Node;
      BoxCollider = module.BoxCollider;
    }, function (module) {
      Entity = module.Entity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "eb11fT6/XFMOZL2vZgnktxJ", "Stone", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Stone = exports('Stone', (_dec = ccclass('Stone'), _dec2 = property({
        type: CCFloat,
        visible: true,
        displayName: "血量"
      }), _dec3 = property({
        type: Node,
        visible: true,
        displayName: "破坏特效"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Entity) {
        _inheritsLoose(Stone, _Entity);

        function Stone() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Entity.call.apply(_Entity, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "_hp", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "effect", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = Stone.prototype;

        _proto.start = function start() {
          this.effect.active = false;
        };

        _proto.onHit = function onHit(hit) {};

        _proto.toBroken = function toBroken() {
          var _this2 = this;

          this.rg.enabled = false;
          this.getComponent(BoxCollider).enabled = false;
          this.node.children[0].children[0].active = false;
          this.effect.active = true;
          this.scheduleOnce(function () {
            var _this2$node;

            (_this2$node = _this2.node) == null ? void 0 : _this2$node.destroy();
          }, 2);
        };

        return Stone;
      }(Entity), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_hp", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "effect", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SwtichAnimal.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameManager.ts', './Player.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Button, Sprite, Component, GameManager, AnimalType;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Button = module.Button;
      Sprite = module.Sprite;
      Component = module.Component;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      AnimalType = module.AnimalType;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "19e53xVM6lBS6woYdP0hK0j", "SwtichAnimal", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SwtichAnimal = exports('SwtichAnimal', (_dec = ccclass('SwtichAnimal'), _dec2 = property({
        type: [SpriteFrame],
        displayName: "animalsps"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SwtichAnimal, _Component);

        function SwtichAnimal() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "animalsps", _descriptor, _assertThisInitialized(_this));

          _this._curAnimal = AnimalType.sheep;
          _this.isAdProp = void 0;
          return _this;
        }

        var _proto = SwtichAnimal.prototype;

        _proto.start = function start() {
          var _this2 = this;

          this.node.getComponent(Button).node.on(Button.EventType.CLICK, function () {
            _this2.click();
          });
        };

        _proto.click = function click() {
          GameManager.getInstance().prop.changeAnimal(this._curAnimal, this.isAdProp);
        };

        _proto.setAnimalType = function setAnimalType(aniType, isAdProp) {
          this._curAnimal = aniType;
          this.isAdProp = isAdProp;
          this.node.getComponent(Sprite).spriteFrame = this.animalsps[aniType];
        };

        return SwtichAnimal;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "animalsps", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Array();
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TimeData.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "4aaa4PQwj1P7I2XFyzd3v1w", "TimeData", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TimeData = exports('TimeData', (_dec = ccclass('TimeData'), _dec(_class = function TimeData() {
        this.offLinefram = 0;
        this.salefram = 0;
      }) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TimeTools.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Component, game, Game, Node, director, Utils;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
      game = module.game;
      Game = module.Game;
      Node = module.Node;
      director = module.director;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      exports({
        currentDateAddDate: currentDateAddDate,
        daysBetween: daysBetween,
        parseDayMonth: parseDayMonth,
        parseMonthDay: parseMonthDay,
        parseMonthDayFour: parseMonthDayFour,
        parseTime: parseTime,
        parseTimeFive: parseTimeFive,
        parseTimeFour: parseTimeFour,
        parseTimeOper: parseTimeOper,
        parseTimeSix: parseTimeSix,
        parseTimeThrid: parseTimeThrid,
        parseTimeTwo: parseTimeTwo,
        parseTime_CN: parseTime_CN,
        parse_cn_time: parse_cn_time,
        parse_cn_week: parse_cn_week
      });

      var _dec, _class, _class2;

      cclegacy._RF.push({}, "c736bnLUrtHFqiFVKb+wawE", "TimeTools", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TimeTools = exports('TimeTools', (_dec = ccclass('TimeTools'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TimeTools, _Component);

        function TimeTools() {
          return _Component.apply(this, arguments) || this;
        }

        TimeTools.init = /*#__PURE__*/function () {
          var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var _this = this;

            var parent;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  parent = new Node("TimeTools");
                  director.getScene().addChild(parent);
                  this._instance = parent.addComponent(TimeTools);
                  director.addPersistRootNode(parent);
                  _context.next = 6;
                  return this.getTime();

                case 6:
                  this.curTime = _context.sent;

                  this._instance.starTiming();

                  if (Utils.isWxPlatform()) {
                    wx.onHide(function () {
                      _this.onHide();
                    });
                    wx.onShow(function () {
                      _this.onShow();
                    });
                  } else if (Utils.isDyPlatform()) {
                    tt.onShow(function () {
                      _this.onShow();
                    });
                    tt.onHide(function () {
                      _this.onHide();
                    });
                  } else {
                    game.on(Game.EVENT_SHOW, this.onShow, this);
                    game.on(Game.EVENT_HIDE, this.onHide, this);
                  }

                case 9:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function init() {
            return _init.apply(this, arguments);
          }

          return init;
        }();

        TimeTools.onHide = function onHide() {} //监听后台事件
        ;

        TimeTools.onShow = /*#__PURE__*/function () {
          var _onShow = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return this.getTime();

                case 2:
                  this.curTime = _context2.sent;

                case 3:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));

          function onShow() {
            return _onShow.apply(this, arguments);
          }

          return onShow;
        }();

        var _proto = TimeTools.prototype;

        _proto.addTimerAction = function addTimerAction(call) {
          var id = setInterval(call, 1 * 1000);
        };

        TimeTools.addTimeFram = function addTimeFram(cnt) {
          this.curTime += cnt * 1000;
        };

        TimeTools.getCurTime = function getCurTime() {
          return this.curTime;
        };

        TimeTools.getCurDateTime = function getCurDateTime() {
          return new Date(this.curTime);
        };

        TimeTools.getTime = /*#__PURE__*/function () {
          var _getTime = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  if (!this.isDebug) {
                    _context3.next = 4;
                    break;
                  }

                  return _context3.abrupt("return", new Promise(function (resolve) {
                    var timer = new Date();
                    var n = Date.parse(timer.toString());
                    resolve(n);
                  }));

                case 4:
                  return _context3.abrupt("return", this.getNetTime());

                case 5:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, this);
          }));

          function getTime() {
            return _getTime.apply(this, arguments);
          }

          return getTime;
        }();

        TimeTools.getNetTime = /*#__PURE__*/function () {
          var _getNetTime = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
            var _this2 = this;

            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) switch (_context4.prev = _context4.next) {
                case 0:
                  return _context4.abrupt("return", new Promise(function (resolve) {
                    _this2.Get("https://simbasdk.icesimba.com/simba-sdk/api/v1/time", "", function (res) {
                      resolve(res.time);
                    });
                  }));

                case 1:
                case "end":
                  return _context4.stop();
              }
            }, _callee4);
          }));

          function getNetTime() {
            return _getNetTime.apply(this, arguments);
          }

          return getNetTime;
        }();

        TimeTools.Get = function Get(url, data, callBack) {
          var request = new XMLHttpRequest();
          request.timeout = 10000;
          request.open("GET", url, true);

          request.onerror = function (res) {
            console.info(res);
          };

          request.onreadystatechange = function () {
            if (request.readyState == 4 && request.status == 200) {
              try {
                var rsp = JSON.parse(request.responseText);
                callBack(rsp);
              } catch (error) {}
            }
          };

          request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=utf-8');
          request.send(data);
        };

        _proto.starTiming = function starTiming() {
          this.schedule(function () {
            TimeTools.curTime += 1000; //  console.log(new Date(TimeTools.getCurTime()).toString());
          }, 1);
        } // 将秒数显示为'xx:xx:xx'的形式
        ;

        TimeTools.formatTime = function formatTime(totalSeconds, shouldRemoveH) {
          if (shouldRemoveH === void 0) {
            shouldRemoveH = false;
          }

          var hours = this.rounding(totalSeconds / 3600);
          var hh = (hours < 10 ? "0" + hours : hours).toString();
          var minutes = this.rounding((totalSeconds - hours * 3600) / 60);
          var mm = minutes < 10 ? "0" + minutes : minutes.toString();
          var seconds = this.rounding(totalSeconds - hours * 3600 - minutes * 60);
          var ss = seconds < 10 ? "0" + seconds : seconds.toString();
          var num = hh + ":" + mm + ":" + ss;

          if (shouldRemoveH && hh == '00') {
            num = mm + ":" + ss;
          }

          return num;
        };

        TimeTools.rounding = function rounding(num) {
          return Math.floor(num);
        };

        TimeTools.formatChTime = function formatChTime(totalSeconds) {
          var hours = this.rounding(totalSeconds / 3600);
          var minutes = this.rounding((totalSeconds - hours * 3600) / 60);
          var num;
          if (hours <= 0) num = minutes + "分";else num = hours + "小时" + minutes + "分";
          return num;
        };

        _createClass(TimeTools, null, [{
          key: "instance",
          get: function get() {
            return TimeTools._instance;
          }
        }]);

        return TimeTools;
      }(Component), _class2.isDebug = false, _class2.curTime = 0, _class2._instance = void 0, _class2)) || _class));
      /************时间格式转换 */

      /*年-月-日- 时:分:秒*/

      function parseTime(time) {
        if (time) {
          var date = new Date(time);
          var year = date.getFullYear();
          /* 在日期格式中，月份是从0开始的，因此要加0
           * 使用三元表达式在小于10的前面加0，以达到格式统一  如 09:11:05
           * */

          var month = date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1;
          var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
          var hours = date.getHours() < 10 ? '0' + date.getHours() : date.getHours();
          var minutes = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();
          var seconds = date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds(); // 拼接

          return year + '-' + month + '-' + day + ' ' + hours + ':' + minutes + ':' + seconds;
        } else {
          return '';
        }
      } // 月-日


      function parseMonthDay(time) {
        if (time) {
          var date = new Date(time);
          var month = date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1;
          var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate(); // 拼接

          return month + '-' + day;
        } else {
          return '';
        }
      } // 月-日-时-分


      function parseMonthDayFour(time) {
        if (time) {
          var date = new Date(time);
          var month = date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1;
          var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
          var hours = date.getHours() < 10 ? '0' + date.getHours() : date.getHours();
          var minutes = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes(); // 拼接

          return month + '月' + day + '日' + hours + "时" + minutes + "分";
        } else {
          return '';
        }
      } // 分-秒


      function parseTimeOper(time) {
        if (time) {
          var date = new Date(time);
          /* 在日期格式中，月份是从0开始的，因此要加0
           * 使用三元表达式在小于10的前面加0，以达到格式统一  如 09:11:05
           * */

          var seconds = date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds();
          var minutes = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes(); // 拼接

          return minutes + ':' + seconds;
        } else {
          return '';
        }
      }
      /*年-月-日- 时:分:秒*/


      function parseTime_CN(time) {
        if (time) {
          var week;
          var date = new Date(time);
          var year = date.getFullYear();
          /* 在日期格式中，月份是从0开始的，因此要加0
           * 使用三元表达式在小于10的前面加0，以达到格式统一  如 09:11:05
           * */

          var month = date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1;
          var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
          var hours = date.getHours() < 10 ? '0' + date.getHours() : date.getHours();
          var minutes = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();
          var seconds = date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds(); // 拼接

          if (date.getDay() == 0) week = "星期日";
          if (date.getDay() == 1) week = "星期一";
          if (date.getDay() == 2) week = "星期二";
          if (date.getDay() == 3) week = "星期三";
          if (date.getDay() == 4) week = "星期四";
          if (date.getDay() == 5) week = "星期五";
          if (date.getDay() == 6) week = "星期六";
          return year + '年' + month + '月' + day + '日 ' + hours + ':' + minutes + ':' + seconds + "\xa0\xa0" + week;
        } else {
          return '';
        }
      } ///*中文:年-月-日- 时:分:秒*/


      function parse_cn_time(time) {
        if (time) {
          var date = new Date(time);
          var year = date.getFullYear();
          /* *
           * 在日期格式中，月份是从0开始的，因此要加0
           * 使用三元表达式在小于10的前面加0，以达到格式统一  如 09:11:05
           * */

          var month = date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1;
          var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
          var hours = date.getHours() < 10 ? '0' + date.getHours() : date.getHours();
          var minutes = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();
          var seconds = date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds();
          return year + '年' + month + '月' + day + '日 ' + hours + ':' + minutes + ':' + seconds + "\xa0\xa0";
        } else {
          return '';
        }
      } ///*中文:星期week*/


      function parse_cn_week(time) {
        if (time) {
          var week;
          var date = new Date(time); // 拼接

          if (date.getDay() == 0) week = "星期日";
          if (date.getDay() == 1) week = "星期一";
          if (date.getDay() == 2) week = "星期二";
          if (date.getDay() == 3) week = "星期三";
          if (date.getDay() == 4) week = "星期四";
          if (date.getDay() == 5) week = "星期五";
          if (date.getDay() == 6) week = "星期六";
          return week;
        } else {
          return '';
        }
      }
      /*年-月-日 时:分*/


      function parseTimeTwo(time) {
        if (time) {
          var date = new Date(time);
          var year = date.getFullYear();
          /* 在日期格式中，月份是从0开始的，因此要加0
           * 使用三元表达式在小于10的前面加0，以达到格式统一  如 09:11:05
           * */

          var month = date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1;
          var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
          var hours = date.getHours() < 10 ? '0' + date.getHours() : date.getHours();
          var minutes = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes(); // 拼接

          return year + '-' + month + '-' + day + ' ' + hours + ':' + minutes;
        } else {
          return '';
        }
      }
      /*格式: 日/月 例如24/10*/


      function parseDayMonth(time) {
        if (time) {
          var date = new Date(time);
          /* 在日期格式中，月份是从0开始的，因此要加0
           * 使用三元表达式在小于10的前面加0，以达到格式统一  如 09:11:05
           * */

          var month = date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1;
          var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate(); // 拼接

          return day + '/' + month;
        } else {
          return '';
        }
      }
      /*年-月-日*/


      function parseTimeThrid(time) {
        if (time) {
          var date = new Date(time);
          var year = date.getFullYear();
          /* 在日期格式中，月份是从0开始的，因此要加0
           * 使用三元表达式在小于10的前面加0，以达到格式统一  如 09:11:05
           * */

          var month = date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1;
          var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate(); // 拼接

          return year + '-' + month + '-' + day;
        } else {
          return '';
        }
      }
      /*年-月-日 时:分*/


      function parseTimeFour(time) {
        if (time) {
          var date = new Date(time);
          var year = date.getFullYear();
          /* 在日期格式中，月份是从0开始的，因此要加0
           * 使用三元表达式在小于10的前面加0，以达到格式统一  如 09:11:05
           * */

          var month = date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1;
          var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
          var hours = date.getHours() < 10 ? '0' + date.getHours() : date.getHours(); // 拼接

          return year + '年' + month + '月' + day + '日' + hours + '时';
        } else {
          return '';
        }
      }
      /*年-月-日*/


      function parseTimeFive(time) {
        if (time) {
          var date = new Date(time);
          var year = date.getFullYear();
          /* 在日期格式中，月份是从0开始的，因此要加0
           * 使用三元表达式在小于10的前面加0，以达到格式统一  如 09:11:05
           * */

          var month = date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1;
          var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate(); // 拼接

          return year + '年' + month + '月' + day + '日';
        } else {
          return '';
        }
      }
      /*年/月/日 时:分*/


      function parseTimeSix(time) {
        if (time) {
          var date = new Date(time);
          var year = date.getFullYear();
          /* 在日期格式中，月份是从0开始的，因此要加0
           * 使用三元表达式在小于10的前面加0，以达到格式统一  如 09:11:05
           * */

          var month = date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1;
          var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
          var hours = date.getHours() < 10 ? '0' + date.getHours() : date.getHours();
          var minutes = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes(); // 拼接

          return year + '/' + month + '/' + day + ' ' + hours + ':' + minutes;
        } else {
          return '';
        }
      }
      /*当前日期增加n天*/


      function currentDateAddDate(num) {
        var d1 = new Date();
        var d2 = new Date(d1);
        d2.setDate(d1.getDate() + num);
        return d2;
      } //判断两个日期，是否跨天


      function daysBetween(date1, date2) {
        var oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds

        var diffDays = Math.round(Math.abs((date1.getTime() - date2.getTime()) / oneDay));
        return diffDays;
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TipInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LabelEx.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Sprite, Component, LabelEx;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Sprite = module.Sprite;
      Component = module.Component;
    }, function (module) {
      LabelEx = module.LabelEx;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "9a04clalAFIc4IDcDq3kj1n", "TipInfo", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TipInfo = exports('TipInfo', (_dec = ccclass('TipInfo'), _dec2 = property({
        type: [Label],
        displayName: "提示类容"
      }), _dec3 = property({
        type: Sprite,
        displayName: "头像"
      }), _dec4 = property({
        type: LabelEx,
        displayName: "名字"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TipInfo, _Component);

        function TipInfo() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "tipsLab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "head", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labeName", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        return TipInfo;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "tipsLab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Array();
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "head", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "labeName", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TouchListenser.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameResponces.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Input, Component, GameResponces;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Input = module.Input;
      Component = module.Component;
    }, function (module) {
      GameResponces = module.GameResponces;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "844836Z75ROB4bz1Sm8tDSH", "TouchListenser", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TouchListenser = exports('TouchListenser', (_dec = ccclass('TouchListenser'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TouchListenser, _Component);

        function TouchListenser() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = TouchListenser.prototype;

        _proto.start = function start() {
          this.node.on(Input.EventType.TOUCH_START, this.touchStart, this);
        };

        _proto.touchStart = function touchStart(event) {
          GameResponces._event.emit(GameResponces.touchAnimal, event, this);
        };

        return TouchListenser;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TreasureBox.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CfgData.ts', './Entity.ts', './GameResponces.ts', './GameManager.ts', './Panel_Game.ts', './UIManager.ts', './Pop_game.ts', './Utils.ts', './Panel_BoxReward.ts', './AudioManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCFloat, Node, v3, SkeletalAnimation, Label, tween, CfgData, Entity, GameResponces, GameManager, Panel_Game, UIManager, PropType, Utils, Card, Panel_BoxReward, AudioManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
      Node = module.Node;
      v3 = module.v3;
      SkeletalAnimation = module.SkeletalAnimation;
      Label = module.Label;
      tween = module.tween;
    }, function (module) {
      CfgData = module.CfgData;
    }, function (module) {
      Entity = module.Entity;
    }, function (module) {
      GameResponces = module.GameResponces;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      Panel_Game = module.Panel_Game;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      PropType = module.PropType;
    }, function (module) {
      Utils = module.Utils;
      Card = module.Card;
    }, function (module) {
      Panel_BoxReward = module.Panel_BoxReward;
    }, function (module) {
      AudioManager = module.AudioManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "063cbjx18BIzZ3yephcaLw2", "TreasureBox", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TreasureBoxRewardEntity = exports('TreasureBoxRewardEntity', function TreasureBoxRewardEntity() {
        this.PropHoleCnt = 1;
        this.ProTypes = new Array();
        this.PropCnt = [];
      });
      var TreasureBox = exports('TreasureBox', (_dec = ccclass('TreasureBox'), _dec2 = property({
        type: CCFloat,
        visible: true,
        displayName: "血量"
      }), _dec3 = property({
        type: Node,
        displayName: '血量条位置'
      }), _dec4 = property({
        type: [Node],
        displayName: "宝箱样式"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Entity) {
        _inheritsLoose(TreasureBox, _Entity);

        function TreasureBox() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Entity.call.apply(_Entity, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "maxHp", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hpBarNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "boxViews", _descriptor3, _assertThisInitialized(_this));

          _this.view = void 0;
          _this.hpBar = void 0;
          _this.lab = void 0;
          _this.curHp = void 0;
          _this.boxCfg = void 0;
          return _this;
        }

        var _proto = TreasureBox.prototype;

        _proto.init = function init(boxId) {
          this.boxCfg = CfgData.getInstance().getHomeCfg().box[boxId];
          this.maxHp = this.curHp = this.boxCfg.BoxHP;
          var pos = v3();
          var wpos = this.hpBarNode.getWorldPosition();
          pos = UIManager.getInstance().getPanel(Panel_Game).convertTohpNode(wpos);
          this.createHpBar(pos);

          for (var index = 0; index < this.boxViews.length; index++) {
            var element = this.boxViews[index];
            element.active = false;
          }

          this.view = this.boxViews[this.boxCfg.BoxView];
          this.view.active = true;
          this.skeletal = this.view.getComponentInChildren(SkeletalAnimation);
        };

        _proto.showlabhp = function showlabhp() {
          this.hpBar.progress = this.curHp / this.maxHp;
          var result = this.curHp.toString().indexOf('.');
          if (result != -1) this.lab.string = this.curHp.toFixed(1) + "/" + this.maxHp;else this.lab.string = this.curHp + "/" + this.maxHp;
        };

        _proto.createHpBar = function createHpBar(pos) {
          var _this2 = this;

          GameResponces._event.emit(GameResponces.createHpBar, 1, pos, function (hpbar) {
            _this2.hpBar = hpbar;
            _this2.lab = _this2.hpBar.getComponentInChildren(Label);

            _this2.showlabhp();
          }, this);
        };

        _proto.boxReward = function boxReward() {
          var weights = Utils.getSplitNumbers(this.boxCfg.ItemQuantityWeight, "_");
          var propType = Utils.getSplitNumbers(this.boxCfg.ItemRandomWeight, "_");
          var cntweights = Utils.getSplitNumbers(this.boxCfg.ItemCount, "_");
          var reward = new TreasureBoxRewardEntity(); //按权重随机出一个奖励的格子数

          var q1 = Utils.selectCardByWeight([new Card(weights[0], 1), new Card(weights[1], 2), new Card(weights[2], 3)]);
          reward.PropHoleCnt = q1.obj;

          for (var index = 0; index < q1.obj; index++) {
            var q3 = Utils.selectCardByWeight([new Card(cntweights[0], 1), new Card(cntweights[1], 2), new Card(cntweights[2], 3)]);
            reward.PropCnt.push(q3.obj);
            var q2 = Utils.selectCardByWeight([new Card(propType[0], PropType.ReflashAnimal), new Card(propType[1], PropType.ChangeAnimal), new Card(propType[2], PropType.GetAnimals)]);
            reward.ProTypes.push(q2.obj);
          }

          return reward;
        };

        _proto.onHit = function onHit(hit, wpos) {
          var _this3 = this;

          UIManager.getInstance().getPanel(Panel_Game).showHit(wpos, hit);

          if (this.hpBar) {
            this.play("hit");
            this.curHp -= hit;
            this.curHp = Number.parseFloat(this.curHp.toFixed(1));
            this.showlabhp();

            if (this.curHp <= 0.001) {
              this.onDestoryHpBar();
              this.node.setWorldPosition(v3(this.node.getWorldPosition().add(v3(0, 3, 0))));
              var startPos = v3(this.node.getWorldPosition());
              var endPos = v3(0, 3, 0);
              var ctrPos = v3(0, 2, 0);
              ctrPos.add(startPos);
              ctrPos.add(endPos);
              ctrPos.multiplyScalar(0.5);
              AudioManager.instance.playSound("boxfly");
              this.play("flip");
              tween(this.node).to(1, {
                scale: v3(2, 2, 2)
              }).start();
              Utils.bezierTo(this.node, 1, startPos, ctrPos, endPos, null).call(function () {
                _this3.play("open");

                _this3.scheduleOnce(function () {
                  UIManager.getInstance().showPanel(Panel_BoxReward).init(_this3.boxReward());

                  _this3.node.destroy();
                }, 0.8);
              }).start();
              GameManager.getInstance().mapInfo.destroyBox(this);
            }
          }
        };

        _proto.onDestoryHpBar = function onDestoryHpBar() {
          if (this.hpBar) {
            this.hpBar.progress = 0;
            this.lab.string = "0/" + this.maxHp;
            this.hpBar.node.destroy();
            this.hpBar = null;
          }
        };

        return TreasureBox;
      }(Entity), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "maxHp", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 100;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "hpBarNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "boxViews", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Array();
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TypeTxt.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Polymorphism.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component, polymorphism;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      polymorphism = module.polymorphism;
    }],
    execute: function () {
      var _dec, _class, _dec2, _class2, _class3, _descriptor, _dec3, _class5, _class6, _descriptor2, _descriptor3, _dec4, _dec5, _class8, _class9, _descriptor4;

      cclegacy._RF.push({}, "1efbahXnrpKQJPYNjH5YbFr", "TypeTxt", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Shape = (_dec = ccclass('Shape'), _dec(_class = function Shape() {}) || _class);
      var Circle = (_dec2 = ccclass('Circle'), _dec2(_class2 = (_class3 = /*#__PURE__*/function (_Shape) {
        _inheritsLoose(Circle, _Shape);

        function Circle() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Shape.call.apply(_Shape, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "radius", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        return Circle;
      }(Shape), _descriptor = _applyDecoratedDescriptor(_class3.prototype, "radius", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.0;
        }
      }), _class3)) || _class2); // 圆形

      var Rectangle = (_dec3 = ccclass('Rectangle'), _dec3(_class5 = (_class6 = /*#__PURE__*/function (_Shape2) {
        _inheritsLoose(Rectangle, _Shape2);

        function Rectangle() {
          var _this2;

          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }

          _this2 = _Shape2.call.apply(_Shape2, [this].concat(args)) || this;

          _initializerDefineProperty(_this2, "width", _descriptor2, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "height", _descriptor3, _assertThisInitialized(_this2));

          return _this2;
        }

        return Rectangle;
      }(Shape), (_descriptor2 = _applyDecoratedDescriptor(_class6.prototype, "width", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.0;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class6.prototype, "height", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.0;
        }
      })), _class6)) || _class5); // 矩形

      var TypeTxt = exports('TypeTxt', (_dec4 = ccclass('TypeTxt'), _dec5 = polymorphism({
        // 为当前装饰的字段生成一个类型字段。
        types: [// 允许的类型项
        [Circle, '圆形'], // 圆形类以及它的展示名称
        [Rectangle, '矩形'] // 矩形类以及它的展示名称
        ]
      }), _dec4(_class8 = (_class9 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TypeTxt, _Component);

        function TypeTxt() {
          var _this3;

          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            args[_key5] = arguments[_key5];
          }

          _this3 = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this3, "shape", _descriptor4, _assertThisInitialized(_this3));

          return _this3;
        }

        return TypeTxt;
      }(Component), _descriptor4 = _applyDecoratedDescriptor(_class9.prototype, "shape", [property, _dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Circle();
        }
      }), _class9)) || _class8));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Dailog_tip.ts', './Panel_Game.ts', './Panel_GameFinish.ts', './Panel_gm.ts', './Panel_Load.ts', './Panel_Main.ts', './Panel_BoxReward.ts', './Panel_netCheck.ts', './Panel_guide.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, CCString, Node, Camera, director, Component, Dailog_tip, Panel_Game, Panel_GameFinish, Panel_gm, Panel_Load, Panel_Main, Panel_BoxReward, Panel_netCheck, Panel_guide;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCString = module.CCString;
      Node = module.Node;
      Camera = module.Camera;
      director = module.director;
      Component = module.Component;
    }, function (module) {
      Dailog_tip = module.Dailog_tip;
    }, function (module) {
      Panel_Game = module.Panel_Game;
    }, function (module) {
      Panel_GameFinish = module.Panel_GameFinish;
    }, function (module) {
      Panel_gm = module.Panel_gm;
    }, function (module) {
      Panel_Load = module.Panel_Load;
    }, function (module) {
      Panel_Main = module.Panel_Main;
    }, function (module) {
      Panel_BoxReward = module.Panel_BoxReward;
    }, function (module) {
      Panel_netCheck = module.Panel_netCheck;
    }, function (module) {
      Panel_guide = module.Panel_guide;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class4, _class5, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _class6;

      cclegacy._RF.push({}, "43043MIY3VGzoii2nQ4T1UD", "UIManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Panel = exports('Panel', (_dec = ccclass("Panel"), _dec2 = property({
        type: CCString,
        displayName: "name"
      }), _dec3 = property({
        type: Node,
        displayName: "panel"
      }), _dec(_class = (_class2 = function Panel() {
        _initializerDefineProperty(this, "panelName", _descriptor, this);

        _initializerDefineProperty(this, "panel", _descriptor2, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "panelName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "panel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      var UIManager = exports('UIManager', (_dec4 = ccclass('UIManager'), _dec5 = property({
        type: Camera,
        displayName: "uiCamera"
      }), _dec6 = property({
        type: Node,
        displayName: "uimask"
      }), _dec7 = property({
        type: Node,
        displayName: "开放域"
      }), _dec8 = property({
        type: Dailog_tip,
        displayName: "tip"
      }), _dec9 = property({
        type: [Panel],
        displayName: "panels"
      }), _dec4(_class4 = (_class5 = (_class6 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIManager, _Component);

        function UIManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "uiCamera", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "uimask", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "arRoot", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tip", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "panelNode", _descriptor7, _assertThisInitialized(_this));

          _this.panels = new Map();
          return _this;
        }

        UIManager.getInstance = function getInstance() {
          if (!this._instance) {
            this._instance = director.getScene().getComponentInChildren(UIManager);

            this._instance.init();
          }

          return this._instance;
        };

        var _proto = UIManager.prototype;

        _proto.onLoad = function onLoad() {
          director.addPersistRootNode(this.node);
        };

        _proto.setUIMaskActive = function setUIMaskActive(bl) {
          this.uimask.active = bl;
        };

        _proto.init = function init() {
          var _this2 = this;

          this.panelNode.forEach(function (element) {
            _this2.panels.set(element.panelName, element.panel);

            element.panel.active = false;
          });
          this.showPanel(Panel_netCheck);
          this.tip.node.active = true;
        } //这样是为了兼容微信小游戏。。。。
        ;

        _proto.getPanelName = function getPanelName(panel) {
          var className = "";

          switch (panel) {
            case Panel_Game:
              className = "Panel_Game";
              break;

            case Panel_Load:
              className = "Panel_Load";
              break;

            case Panel_Main:
              className = "Panel_Main";
              break;

            case Panel_gm:
              className = "Panel_gm";
              break;

            case Panel_GameFinish:
              className = "Panel_GameFinish";
              break;

            case Panel_BoxReward:
              className = "Panel_BoxReward";
              break;

            case Panel_netCheck:
              className = "Panel_netCheck";
              break;

            case Panel_guide:
              className = "Panel_guide";
              break;
          }

          return className;
        };

        _proto.showPanel = function showPanel(panel) {
          var className = this.getPanelName(panel);
          var pl = this.panels.get(className);
          pl.active = true;
          return pl.getComponent(className);
        };

        _proto.hidePanel = function hidePanel(panel) {
          var className = this.getPanelName(panel);
          var pl = this.panels.get(className);
          pl.active = false;
          return pl.getComponent(className);
        };

        _proto.getPanel = function getPanel(panel) {
          var className = this.getPanelName(panel);
          var panelNode = this.panels.get(className);
          var com = panelNode.getComponent(className);
          return com;
        };

        return UIManager;
      }(Component), _class6._instance = void 0, _class6), (_descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "uiCamera", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "uimask", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class5.prototype, "arRoot", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class5.prototype, "tip", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class5.prototype, "panelNode", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Array();
        }
      })), _class5)) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UserInfo.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "410daZlpphAMLWg+L3VIE+X", "UserInfo", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UserInfo = exports('UserInfo', (_dec = ccclass('UserInfo'), _dec(_class = function UserInfo() {
        this.userTyp = "web";
        this.avatar = "";
        this.name = "大鱼吃小鱼";
        this.regDateTSS = 123456;
        this.gender = "未知";
        this.city = "err";
        this.province = "err";
        this.provinceName = "未知";
        this.tLvDoneCntDic = void 0;
        this.tLvDoneMinSecDic = void 0;
        this.lvDoneMinSecDic = void 0;
        this.lvDoneTotalCntDic = void 0;
        this.tPlayedCnt = 0;
        this.totalPlayedCnt = 0;
        this.tOfferProvinceFlag = 0;
        this.offerProvinceTotalCnt = 0;
        this.uid = "";
        this.nationRankCnt = 0;
        this.nationRankMinSec = 0;
        this.yLvDoneCntDic = void 0;
        this.yLvDoneMinSecDic = void 0;
        this.openId = "";
        this.skinId = 0;
      }) || _class));
      var Province = exports('Province', function Province() {
        this.name = "重庆";
        this.count = 99999;
        this.userInfos = null;
      });
      var NationalRanking = exports('NationalRanking', function NationalRanking() {
        this.userList = void 0;
      });
      var NoticeInfo = exports('NoticeInfo', function NoticeInfo() {
        this.tPlayedUserCnt = void 0;
        this.tOfferProvinceUserCnt = void 0;
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Utils.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, _decorator, sys, isValid, Sprite, SpriteFrame, Texture2D, assetManager, v3, tween, math;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
      isValid = module.isValid;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      Texture2D = module.Texture2D;
      assetManager = module.assetManager;
      v3 = module.v3;
      tween = module.tween;
      math = module.math;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "1ec66Kx2bVB8prlWeCbIr4Z", "Utils", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Card = exports('Card', //权重
      function Card(weight, obj) {
        this.weight = void 0;
        this.obj = void 0;
        this.weight = weight;
        this.obj = obj;
      });
      var Utils = exports('Utils', (_dec = ccclass('Utils'), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function Utils() {}

        Utils.isNativePlatform = function isNativePlatform() {
          var bl = sys.platform == sys.Platform.WECHAT_GAME || sys.platform == sys.Platform.BYTEDANCE_MINI_GAME;
          return !bl;
        };

        Utils.isIosNativePlaform = function isIosNativePlaform() {
          return sys.platform == sys.Platform.IOS;
        } //目标平台，比如说 微信和抖音
        ;

        Utils.isTargetPlatform = function isTargetPlatform() {
          return !this.isNativePlatform();
        };

        Utils.isDyPlatform = function isDyPlatform() {
          return sys.platform == sys.Platform.BYTEDANCE_MINI_GAME;
        };

        Utils.isWxPlatform = function isWxPlatform() {
          return sys.platform == sys.Platform.WECHAT_GAME;
        } //包含最大
        ;

        Utils.limitNumber = function limitNumber(num, min, max) {
          return Math.min(Math.max(num, min), max);
        };

        Utils.getLoaclSpriteFrame = function getLoaclSpriteFrame(path, call) {};

        Utils.isNextDay = function isNextDay(logTime) {
          var dNow = new Date(new Date(new Date().toLocaleDateString()).getTime());
          var dPass = new Date(logTime);
          var nowTime = dNow.getFullYear() + "-" + (dNow.getMonth() + 1 < 10 ? "0" + (dNow.getMonth() + 1) : dNow.getMonth() + 1) + "-" + (dNow.getDate() < 10 ? "0" + dNow.getDate() : dNow.getDate()) + " 00:00:00";
          var passTime = dPass.getFullYear() + "-" + (dPass.getMonth() + 1 < 10 ? "0" + (dPass.getMonth() + 1) : dPass.getMonth() + 1) + "-" + (dPass.getDate() < 10 ? "0" + dPass.getDate() : dPass.getDate()) + " 00:00:00";
          var rangeDateNum = (new Date(nowTime).getTime() - new Date(passTime).getTime()) / (1000 * 3600 * 24);
          return rangeDateNum >= 1;
        } //释放远程资源
        ;

        Utils.releaseRemoteSprite = function releaseRemoteSprite(node) {
          if (!isValid(node)) {
            return;
          }

          var sp = node.getComponent(Sprite);

          if (sp && sp.spriteFrame) {
            var spFrame = sp.spriteFrame;
            sp.spriteFrame.decRef(false); // 只把计数减1

            sp.spriteFrame = null;

            if (spFrame.refCount <= 0) {
              var texture = spFrame.texture; // 如果已加入动态合图，必须取原始的Texture2D

              if (spFrame.packable) {
                var _spFrame$original;

                texture = (_spFrame$original = spFrame.original) == null ? void 0 : _spFrame$original._texture;
              }

              if (texture) {
                var _texture$image;

                delete this.spriteAssetCache[texture.image.uuid]; // 删除映射表记录

                (_texture$image = texture.image) == null ? void 0 : _texture$image.decRef();
                texture.destroy();
              }

              spFrame.destroy();
            }
          }
        } // 根据图片链接，获取图片
        ;

        Utils.urlToSpriteFrame = function urlToSpriteFrame(url, call) {
          var _this = this; // let sp = this.spresList.get(url);
          // let callback = (spriteFrame: SpriteFrame) => {
          //     call?.(spriteFrame);
          //     this.spresList.set(url, spriteFrame);
          // }
          // if (sp) {
          //     call(sp);
          //     return;
          // }


          var callback = call;

          if (sys.platform == sys.Platform.BYTEDANCE_MINI_GAME) {
            var image = tt.createImage();
            image.src = url; // image.width = 75;
            // image.height = 75;

            image.addEventListener("load", function (res) {
              // console.log("抖音图片加载成功："+url);
              callback(SpriteFrame.createWithImage(image));
            });
            image.addEventListener("error", function (res) {
              // console.log("抖音图片加载失败："+url);
              callback(null);
            });
          } else if (sys.platform == sys.Platform.WECHAT_GAME) {
            var img = wx.createImage();
            img.src = url;

            img.onload = function () {
              var spFrame = SpriteFrame.createWithImage(img);

              if (!spFrame) {
                var texture = new Texture2D();
                texture.image = img;
                spFrame = new SpriteFrame();
                spFrame.texture = texture;
                img.addRef();
                _this.spriteAssetCache[img.uuid] = spFrame; // 添加映射表记录
              }

              spFrame.addRef(); // 计数加1

              callback(spFrame);
            };

            img.onerror = function () {
              callback(null);
            };
          } else {
            try {
              assetManager.loadRemote(url, {
                ext: '.png'
              }, function (err, imageAsset) {
                if (err) {
                  callback(null);
                } else {
                  callback(SpriteFrame.createWithImage(imageAsset));
                }
              });
            } catch (error) {
              console.log("加载图片出错：" + error);
              callback(null);
            }
          }
        } //随机权重对象
        ;

        Utils.selectCardByWeight = function selectCardByWeight(cards) {
          var weightedCards = [];
          cards.forEach(function (card) {
            for (var i = 0; i < card.weight; i++) {
              weightedCards.push(card);
            }
          });
          var randomIndex = Math.floor(Math.random() * weightedCards.length);
          var randomCard = weightedCards[randomIndex];
          return randomCard;
        } //贝塞尔曲线
        ;

        Utils.bezierTo = function bezierTo(target, duration, startPos, ctrPos, endPos, opts) {
          opts = opts || Object.create(null);

          var twoBezier = function twoBezier(t, p1, cp, p2) {
            var x = (1 - t) * (1 - t) * p1.x + 2 * t * (1 - t) * cp.x + t * t * p2.x;
            var y = (1 - t) * (1 - t) * p1.y + 2 * t * (1 - t) * cp.y + t * t * p2.y;
            var z = (1 - t) * (1 - t) * p1.z + 2 * t * (1 - t) * cp.z + t * t * p2.z;
            return v3(x, y, z);
          };

          opts.onUpdate = function (arg, ratio) {
            target.worldPosition = twoBezier(ratio, startPos, ctrPos, endPos);
          };

          return tween(target).to(duration, {}, opts);
        } //跳数字动画
        ;

        Utils.numberAniamtion = function numberAniamtion(originNum, curNum, coin, daly) {
          var difference = curNum - originNum;
          var absDifference = Math.abs(difference);
          var changeTimes = absDifference < 8 ? absDifference : 8;
          var changeUnit = absDifference < 8 ? 1 : Math.floor(difference / 8);
          coin.string = originNum;
          setTimeout(function () {
            for (var i = 0; i < changeTimes; i++) {
              (function (i) {
                setTimeout(function () {
                  coin.string = originNum += changeUnit;

                  if (i == changeTimes - 1) {
                    coin.string = curNum;
                  }
                }, 100 * (i + 1));
              })(i);
            }
          }, daly * 1000);
        };

        Utils.getSplitNumbers = function getSplitNumbers(str, sl) {
          var n = [];

          if (str.split) {
            var strs = str.split(sl);

            for (var index = 0; index < strs.length; index++) {
              var element = strs[index];
              n.push(Number.parseFloat(element));
            }
          } else {
            n[0] = Number(str);
          }

          return n;
        } //洗牌
        ;

        Utils.KnuthDurstenfeldShuffle = function KnuthDurstenfeldShuffle(_array) {
          var rand;
          var tempValue;

          for (var i = 0; i < _array.length; i++) {
            rand = math.randomRangeInt(0, _array.length - i);
            tempValue = _array[rand];
            _array[rand] = _array[_array.length - 1 - i];
            _array[_array.length - 1 - i] = tempValue;
          }

          return _array;
        } //延迟
        ;

        Utils.delay = function delay(ms, com) {
          return new Promise(function (reslove, reject) {
            com.scheduleOnce(function () {
              reslove(true);
            }, ms / 1000);
          });
        };

        Utils.guid = function guid() {
          return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0,
                v = c == 'x' ? r : r & 0x3 | 0x8;
            return v.toString(16);
          });
        };

        Utils.isEmpty = function isEmpty(obj) {
          if (obj == null || obj === "") {
            return true;
          } else {
            return false;
          }
        };

        return Utils;
      }(), _class2.spriteAssetCache = new Map(), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WInAnimalAnimation.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameManager.ts', './GameResponces.ts', './AudioManager.ts', './Utils.ts', './CfgData.ts', './DataManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Node, director, v3, randomRangeInt, Component, Vec3, randomRange, GameManager, GameResponces, AudioManager, Utils, CfgData, DataManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      director = module.director;
      v3 = module.v3;
      randomRangeInt = module.randomRangeInt;
      Component = module.Component;
      Vec3 = module.Vec3;
      randomRange = module.randomRange;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      GameResponces = module.GameResponces;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      CfgData = module.CfgData;
    }, function (module) {
      DataManager = module.DataManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "45de8AE3YNAvpRuOVXe74do", "WInAnimalAnimation", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var WInAnimalAnimation = exports('WInAnimalAnimation', (_dec = ccclass('WInAnimalAnimation'), _dec2 = property({
        type: Node,
        visible: true,
        displayName: "动物起始点"
      }), _dec3 = property({
        type: Node,
        visible: true,
        displayName: "动物结束点"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(WInAnimalAnimation, _Component);

        function WInAnimalAnimation() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "startPos", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "endPos", _descriptor2, _assertThisInitialized(_this));

          _this.cnt = 141;
          _this.animalParent = void 0;
          _this.animallist = [];
          _this.endPosList = [];
          return _this;
        }

        var _proto = WInAnimalAnimation.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          GameResponces._event.on(GameResponces.clickHouse, this.startAnimation, this);

          this.animalParent = new Node("animalAnimationParent");
          director.getScene().addChild(this.animalParent);
          this.endPos.children.forEach(function (child) {
            var list = [];
            child.children.forEach(function (son) {
              list.push(v3(son.getWorldPosition()));
            });
            list = Utils.KnuthDurstenfeldShuffle(list);
            _this2.endPosList = _this2.endPosList.concat(list);
          });
        };

        _proto.start = function start() {//const group = 1 << 5;
          // animal.rg.group = group;
          // animal.rg.setMask(1<<0|1<<2|1<<4|group);
          // animal.rg.type = physics.ERigidBodyType.DYNAMIC;
          // animal.rg.useGravity = true;
          // animal.rg.applyForce(dir);
        };

        _proto.isUnlockAnimalType = function isUnlockAnimalType(animalType) {
          return DataManager.getInstance().playerData.unlockAnimals.indexOf(animalType) >= 0;
        } //按概率生成动物列表
        ;

        _proto.buildNpcAnimals = function buildNpcAnimals(cnt) {
          var _this3 = this;

          var animalCfg = CfgData.getInstance().getHomeCfg().animal;
          var list = [];
          var totallrote = 0; //总概率

          var totallPb = 0;
          animalCfg.forEach(function (element) {
            if (_this3.isUnlockAnimalType(element.Id)) {
              totallPb += element.CreatProbability;
            }
          });
          totallrote = totallPb; //动物类型

          var animalType = -1;

          while (cnt > 0) {
            var prob = 0;
            var rangdomIndex = randomRangeInt(0, totallrote);

            for (var index = 0; index < animalCfg.length; index++) {
              var element = animalCfg[index];
              if (!this.isUnlockAnimalType(element.Id)) continue;
              prob += element.CreatProbability;

              if (prob > rangdomIndex && rangdomIndex >= prob - element.CreatProbability) {
                animalType = element.Id;
                cnt--;
                list.push(animalType);
                break;
              }
            }
          }

          return list;
        };

        _proto.buildAnimals = /*#__PURE__*/function () {
          var _buildAnimals = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var list, index, animal;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  list = this.buildNpcAnimals(this.cnt);
                  index = 0;

                case 2:
                  if (!(index < this.cnt)) {
                    _context.next = 19;
                    break;
                  }

                  animal = GameManager.getInstance().createAnimal(list[index]);

                  if (animal) {
                    _context.next = 6;
                    break;
                  }

                  return _context.abrupt("return");

                case 6:
                  animal.head.active = false;
                  this.animalParent.addChild(animal.node);
                  animal.node.setWorldPosition(v3(this.startPos.worldPosition));
                  animal.node.setWorldRotationFromEuler(randomRangeInt(-7, 7), randomRangeInt(-7, 7), 0);
                  animal.setColliderActive(false);
                  animal.rg.enabled = false;
                  animal.node.active = false;
                  this.animallist.push(animal);
                  _context.next = 16;
                  return this.delay(0.02);

                case 16:
                  index++;
                  _context.next = 2;
                  break;

                case 19:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function buildAnimals() {
            return _buildAnimals.apply(this, arguments);
          }

          return buildAnimals;
        }();

        _proto.startAnimation = /*#__PURE__*/function () {
          var _startAnimation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var index, animal, dir, startPos, endPos, ctr;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  index = 0;

                case 1:
                  if (!(index < this.cnt)) {
                    _context2.next = 17;
                    break;
                  }

                  animal = this.animallist[index];
                  animal.node.active = true;
                  dir = new Vec3(randomRange(-0.1, 0.1), 0, 0.1).normalize(); //方向

                  dir = dir.multiplyScalar(randomRangeInt(2, 5)); //长度

                  startPos = animal.node.getWorldPosition();
                  endPos = this.endPosList[index];
                  ctr = v3(endPos).add(startPos).multiplyScalar(0.5).add3f(0, 2, 0);
                  Utils.bezierTo(animal.node, 0.5, startPos, ctr, endPos, null).start();

                  if (index % 6 == 0) {
                    AudioManager.instance.playfire();
                    AudioManager.instance.clickAnimal(animal.animalType);
                  }

                  _context2.next = 13;
                  return this.delay(0.001);

                case 13:
                  animal.play("win");

                case 14:
                  index++;
                  _context2.next = 1;
                  break;

                case 17:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));

          function startAnimation() {
            return _startAnimation.apply(this, arguments);
          }

          return startAnimation;
        }();

        _proto.delay = function delay(time) {
          var _this4 = this;

          return new Promise(function (reslove, reject) {
            _this4.scheduleOnce(function () {
              reslove(true);
            }, time);
          });
        };

        return WInAnimalAnimation;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "startPos", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "endPos", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WxAudioManager.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "45102RhEPFL5qqbMAoUEiR7", "WxAudioManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var WxAudioManager = exports('WxAudioManager', (_dec = ccclass('WxAudioManager'), _dec(_class = /*#__PURE__*/function () {
        function WxAudioManager() {
          this._wxMusicAudio = null;
          this.soundVolume = 1;
        }

        var _proto = WxAudioManager.prototype;

        _proto.playAudio = function playAudio(clip) {
          var wxAudio = wx.createInnerAudioContext({
            useWebAudioImplement: true
          });
          wxAudio.src = clip.nativeUrl; // src 可以设置 http(s) 的路径，本地文件路径或者代码包文件路径

          wxAudio.volume = this.soundVolume;
          wxAudio.loop = false;
          wxAudio.play();
        } //播放的bgm只能有一个
        ;

        _proto.playMusic = function playMusic(clip) {
          if (this._wxMusicAudio == null) {
            this._wxMusicAudio = wx.createInnerAudioContext();
          }

          this._wxMusicAudio.src = clip.nativeUrl; // src 可以设置 http(s) 的路径，本地文件路径或者代码包文件路径

          this._wxMusicAudio.volume = this.soundVolume;
          this._wxMusicAudio.loop = true;

          this._wxMusicAudio.play();
        };

        return WxAudioManager;
      }()) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WXIAuthorize.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseAuthorize.ts', './NetTools.ts', './UserInfo.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, sys, AuthorizUserInfo, BaseAuthorize, NetTools, UserInfo, NationalRanking, NoticeInfo, Province;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
    }, function (module) {
      AuthorizUserInfo = module.AuthorizUserInfo;
      BaseAuthorize = module.BaseAuthorize;
    }, function (module) {
      NetTools = module.NetTools;
    }, function (module) {
      UserInfo = module.UserInfo;
      NationalRanking = module.NationalRanking;
      NoticeInfo = module.NoticeInfo;
      Province = module.Province;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "943757GfjtGvp/OMXcwcOa8", "WXIAuthorize", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var WXIAuthorize = exports('WXIAuthorize', (_dec = ccclass('WXIAuthorize'), _dec(_class = /*#__PURE__*/function (_BaseAuthorize) {
        _inheritsLoose(WXIAuthorize, _BaseAuthorize);

        function WXIAuthorize() {
          return _BaseAuthorize.apply(this, arguments) || this;
        }

        var _proto = WXIAuthorize.prototype;

        _proto.Init = function Init() {
          if (sys.localStorage.getItem("AuthorizUserInfo")) {
            this.authorizUserInfo = JSON.parse(sys.localStorage.getItem("AuthorizUserInfo"));
          } else {
            this.authorizUserInfo = null;
          }

          this.token = sys.localStorage.getItem("token");
          this.location = sys.localStorage.getItem("province");
          this.city = sys.localStorage.getItem("city");
          this.userInfo = new UserInfo();
          this.nationalRanking = new NationalRanking();
          this.noticeInfo = new NoticeInfo();
          this.userInfo.provinceName = this.location;
        };

        _proto.GetUserInfo = function GetUserInfo() {
          return _BaseAuthorize.prototype.GetUserInfo.call(this);
        };

        _proto.onlySetAuthorize = function onlySetAuthorize(callBack) {
          var _this = this;

          this.authorizUserInfo = new AuthorizUserInfo();
          this.authorizUserInfo.avatarUrl = "";
          this.authorizUserInfo.nickName = "";
          wx.login({
            success: function success(res) {
              _this.code = res.code;

              _this.SetAuthorize(function () {
                callBack(true);
                sys.localStorage.setItem("AuthorizUserInfo", JSON.stringify(_this.authorizUserInfo));
              });
            },
            fail: function fail(err) {
              callBack(false);
            }
          });
        };

        _proto.Login = function Login(callBack) {
          var _this2 = this;

          this.GetServceInfo(function (res) {
            //关服
            if (!res) {
              // GameTips.instance.showTips("服务器维护中，预计30分钟后开服。");
              return;
            }

            if (_this2.logined) {
              callBack == null ? void 0 : callBack();
              return;
            }

            if (_this2.token) {
              _this2.LoginToken(_this2.token, callBack);

              return;
            }

            wx.login({
              success: function success(res) {
                if (res.code) {
                  _this2.code = res.code;
                  var isrelaseUsr = 0;
                  if (NetTools.debug) isrelaseUsr = 1; //获取用户信息

                  _this2.SetAuthorize(function () {
                    NetTools.Post("cmd=wxLogin&code=" + res.code + "&rawData=" + _this2.rawData + "&signature=" + _this2.signature + "&environment=" + isrelaseUsr, function (responseContent) {
                      if (responseContent) {
                        //@ts-ignore
                        if (responseContent.errorCode == 0) {
                          //@ts-ignore
                          _this2.token = responseContent.token;
                          sys.localStorage.setItem("token", _this2.token);

                          _this2.AssembleUserInfo(responseContent); //to


                          callBack == null ? void 0 : callBack();
                        }
                      }
                    });
                  });
                } else {
                  console.error('微信登录失败：' + res.errMsg);
                }
              }
            });
          });
        };

        _proto.LoginToken = function LoginToken(token, callBack) {
          var _this3 = this;

          NetTools.Post("cmd=login&token=" + token, function (responseContent) {
            if (responseContent) {
              if (responseContent.errorCode == 0) {
                _this3.AssembleUserInfo(responseContent);

                callBack == null ? void 0 : callBack();
              } else {
                _this3.token = null;

                _this3.Login(callBack);
              }
            }
          });
        };

        _proto.AssembleUserInfo = function AssembleUserInfo(responseContent) {
          this.userInfo = responseContent.userInfo;
          this.userInfo.provinceName = this.location;
          this.LoginTss = responseContent.nowTSS;
          this.ShareCfg = responseContent.shareCfg;
          this.logined = true;
        };

        _proto.SetAuthorize = function SetAuthorize(callBack) {
          var _this4 = this;

          wx.getSetting({
            success: function success(res) {
              if (!res.authSetting['scope.userInfo']) {
                wx.getUserProfile({
                  desc: '登录',
                  success: function success(res) {
                    _this4.rawData = res.rawData;
                    _this4.signature = res.signature;
                    _this4.authorizUserInfo.nickName = res.userInfo.nickName;
                    _this4.authorizUserInfo.avatarUrl = res.userInfo.avatarUrl;
                    callBack == null ? void 0 : callBack();
                  },
                  fail: function fail() {
                    // debugger
                    console.log("未授权！！！");
                    callBack == null ? void 0 : callBack();
                  }
                });
              } else {
                console.info("已经授权-------------------2");
                wx.getUserInfo({
                  success: function success(res) {
                    // 此处可以获取到用户信息
                    _this4.rawData = res.rawData;
                    _this4.signature = res.signature;
                    _this4.authorizUserInfo.nickName = res.userInfo.nickName;
                    _this4.authorizUserInfo.avatarUrl = res.userInfo.avatarUrl;
                    callBack == null ? void 0 : callBack();
                  },
                  fail: function fail() {
                    console.info("获取用户信息失败------------0");
                    callBack == null ? void 0 : callBack();
                  }
                });
              }
            }
          });
        };

        _proto.GetLocation = function GetLocation(callBack) {
          var _this5 = this;

          if (!this.token && this.token != "") {
            callBack();
            return;
          }

          wx.getSetting({
            success: function success(res) {
              if (!res.authSetting['scope.userLocation']) {
                //@ts-ignore
                wx.authorize({
                  scope: 'scope.userLocation',
                  success: function success() {
                    _this5.getWXLocation(callBack);
                  },
                  fail: function fail() {
                    callBack(); // this.getWXLocation(callBack);
                  }
                });
              } else {
                _this5.getWXLocation(callBack);
              }
            }
          });
        };

        _proto.getWXLocation = function getWXLocation(callBack) {
          var _this6 = this;

          if (!this.token && this.token != "") {
            callBack == null ? void 0 : callBack();
            return;
          }

          wx.getLocation({
            type: 'wgs84',
            success: function success(res) {
              var latitude = res.latitude;
              var longitude = res.longitude;
              NetTools.Post("cmd=joinProvince&token=" + _this6.token + "&latitude=" + latitude + "&longitude=" + longitude, function (responseContent) {
                //@ts-ignore
                if (responseContent.errorCode == 0) {
                  //@ts-ignore
                  _this6.location = responseContent.provinceName;
                  sys.localStorage.setItem("province", _this6.location);
                  _this6.city = responseContent.city;
                  sys.localStorage.setItem("city", _this6.city);
                  _this6.userInfo.province = responseContent.province;
                  _this6.userInfo.provinceName = _this6.location;
                  _this6.userInfo.city = _this6.city;
                  callBack == null ? void 0 : callBack();
                } else {
                  callBack == null ? void 0 : callBack(); //@ts-ignore

                  console.error("location is error:" + responseContent.errorMsg);
                }
              });
            }
          });
        };

        _proto.UpdateScore = function UpdateScore(score, callBack) {
          if (!this.token && this.token != "") {
            callBack == null ? void 0 : callBack();
            return;
          }

          NetTools.Post("cmd=updateScore&token=" + this.token + "&score=" + score, function (responseContent) {
            if (responseContent.errorCode == 0) ;
          });
        } //获取省份信息
        ;

        _proto.GetProvinceRank = function GetProvinceRank(callBack) {
          var _this7 = this;

          if (!this.token && this.token != "") {
            callBack == null ? void 0 : callBack(null);
            return;
          }

          NetTools.Post("cmd=getProvinceRank&token=" + this.token, function (responseContent) {
            if (responseContent.errorCode == 0) {
              var list = responseContent.provinceList;
              _this7.province = new Map();
              list.forEach(function (element) {
                var item = new Province();
                item.name = element.name;
                item.count = element.score;

                _this7.province.set(element.code, item);
              });
              callBack == null ? void 0 : callBack(_this7.province);
            } else {
              callBack == null ? void 0 : callBack(null);
            }
          }); //todo
        } //获取省份内用户组信息
        ;

        _proto.GetProvinceRankDetail = function GetProvinceRankDetail(provinceName, callBack) {
          if (!this.token && this.token != "") {
            callBack == null ? void 0 : callBack(null);
            return;
          }

          var item = this.province.get(provinceName);
          NetTools.Post("cmd=getProvinceRankDetail&token=" + this.token + "&code=" + provinceName, function (responseContent) {
            if (responseContent.errorCode == 0) {
              if (item) {
                var list = responseContent.topUserList;

                if (list.length > 0) {
                  item.userInfos = new Array(list.length);

                  for (var index = 0; index < list.length; index++) {
                    var element = list[index]; // let userinfor = new UserInfo();
                    // userinfor.avatar = element.avatar;
                    // userinfor.name = element.name;
                    // userinfor.city = element.city;
                    // userinfor.skinId =element.skinId;
                    // userinfor.openId = element.openId;

                    item.userInfos[index] = element;
                  }
                } // //填充假数据
                // if (item.userInfos.length <= 30) {
                //     let count = 30 - item.userInfos.length;
                //     for (let index = 0; index < count; index++) {
                //         let userInfo = new UserInfo();
                //         userInfo.avatar = this.userInfo.avatar;
                //         userInfo.name = this.userInfo.name;
                //         userInfo.city = this.userInfo.city;
                //         item.userInfos.push(userInfo);
                //     }
                // }

              }

              callBack == null ? void 0 : callBack(item);
            } else {
              callBack == null ? void 0 : callBack(null);
            }
          });
        };

        _proto.SetLevelDone = function SetLevelDone(levelId, doneSec) {
          _BaseAuthorize.prototype.SetLevelDone.call(this, levelId, doneSec);
        };

        _proto.Set100LevelDone = function Set100LevelDone(levelId, doneSec, totallSec, callBack) {
          _BaseAuthorize.prototype.Set100LevelDone.call(this, levelId, doneSec, totallSec, callBack);
        };

        _proto.GetNationalRanking = function GetNationalRanking(callBack) {
          _BaseAuthorize.prototype.GetNationalRanking.call(this, callBack);
        };

        _proto.GetNotice = function GetNotice(callBack) {
          _BaseAuthorize.prototype.GetNotice.call(this, callBack);
        };

        _proto.SetLevelBegin = function SetLevelBegin(levelId, callBack) {
          _BaseAuthorize.prototype.SetLevelBegin.call(this, levelId, callBack);
        };

        return WXIAuthorize;
      }(BaseAuthorize)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WXRank.ts", ['cc', './AuthorizeManager.ts', './Utils.ts', './UIManager.ts', './Panel_Main.ts', './DataManager.ts', './HomeManager.ts'], function (exports) {
  'use strict';

  var cclegacy, _decorator, Button, randomRangeInt, AuthorizeManager, Utils, UIManager, Panel_Main, DataManager, HomeManager;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      randomRangeInt = module.randomRangeInt;
    }, function (module) {
      AuthorizeManager = module.AuthorizeManager;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      Panel_Main = module.Panel_Main;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      HomeManager = module.HomeManager;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "9c976MlONxNjbeKmzJADPSK", "WXRank", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var WXRank = exports('WXRank', (_dec = ccclass('WXRank'), _dec(_class = /*#__PURE__*/function () {
        function WXRank() {
          this.button = null;
          this.nowScore = 0;
          this.nowDay = 0;
          wx.showShareMenu({
            withShareTicket: true,
            menus: ['shareAppMessage', 'shareTimeline']
          });
          var titles = ["在小小的猪圈里拱呀拱呀拱！", "好巧啊你也来拱墙角！？", "创意拱墙角游戏嗄嗄好玩!", "有本事你来拱烂我墙脚！", "一起来拱墙脚吧太搞笑了！", "求助求助！帮我一起拱墙脚！", "太好玩了哈哈哈拱墙脚！"];
          var titleinfo = titles[randomRangeInt(0, titles.length)];
          var id = "kk1J/y0bTvqhFYTeWHXysg=="; // 通过 MP 系统审核的图片编号

          var url = 'https://mmocgame.qpic.cn/wechatgame/tBnrkwibKWzr45QbsCZySXfRmSPXguvriaHhloa0jF1asIH2RmicSYKIkXUuNIw0grQ/0'; // 通过 MP 系统审核的图片地址

          wx.onShareAppMessage(function () {
            return {
              title: titleinfo,
              imageUrlId: id,
              imageUrl: url
            };
          });
        }

        var _proto = WXRank.prototype;

        _proto.CreateMainGameClubButton = function CreateMainGameClubButton() {
          var sizeX = 137.0 * screen.width / 1080.0;
          var sizY = 174.0 * screen.width / 1080.0;
          var width = screen.width * 0.96 - sizeX;
          var height = screen.height * 0.40 + sizY;
          this.button = wx.createGameClubButton({
            type: "image",
            image: 'openDataContext/render/firend.png',
            //   icon: 'light',
            style: {
              left: width,
              top: height,
              width: sizeX,
              height: sizY
            }
          });
        };

        _proto.CreateMainClubButton = function CreateMainClubButton(pos, size) {
          if (this.button) {
            var _this$button;

            (_this$button = this.button) == null ? void 0 : _this$button.destroy();
            this.button = null;
          }

          var sizeX = size.x * screen.width / 1080.0;
          var sizY = size.y * screen.width / 1080.0;
          var width = pos.x * screen.width - sizeX * 0.5;
          var height = (1 - pos.y) * screen.height - sizY * 0.5;
          this.button = wx.createGameClubButton({
            type: "image",
            image: 'openDataContext/render/firend.png',
            //   icon: 'light',
            style: {
              left: width,
              top: height,
              width: sizeX,
              height: sizY
            }
          });
          this.button.show();
        };

        _proto.CreateGameInGameClubButton = function CreateGameInGameClubButton() {
          return;
        };

        _proto.HideGameClubButton = function HideGameClubButton() {
          var _this$button2;

          (_this$button2 = this.button) == null ? void 0 : _this$button2.destroy();
          this.button = null;
        };

        _proto.showRank = function showRank() {
          if (Utils.isWxPlatform()) {
            wx.getSetting({
              success: function success(res) {
                if (!res.authSetting["scope.WxFriendInteraction"]) {
                  wx.authorize({
                    scope: "scope.WxFriendInteraction",
                    success: function success() {
                      console.log("授权成功");
                      WXRank.openRank();
                      var playerdata = DataManager.getInstance().playerData;
                      if (playerdata.isAuthorize) return;
                      AuthorizeManager.getInstance().getBaseAuthrize().onlySetAuthorize(function (res) {
                        if (res) {
                          var userInfo = AuthorizeManager.getInstance().getBaseAuthrize().authorizUserInfo;
                          playerdata.headUrl = userInfo.avatarUrl;
                          playerdata.playerName = userInfo.nickName;
                          playerdata.isAuthorize = true;
                          DataManager.getInstance().savePlayData();
                          HomeManager.getInstance().homeView.updatePlayerAvatar(playerdata);
                        }
                      });
                    },
                    fail: function fail() {
                      console.log("授权失败:");
                      UIManager.getInstance().getPanel(Panel_Main).showRankAuth();
                    }
                  });
                } else {
                  WXRank.openRank();
                }
              }
            });
          }
        };

        WXRank.openRank = function openRank() {
          var arRoot = UIManager.getInstance().arRoot;

          if (arRoot) {
            arRoot.active = true; //@ts-ignore

            wx.getOpenDataContext().postMessage({
              message: "openRank"
            });
            arRoot.getComponentInChildren(Button).node.once(Button.EventType.CLICK, function () {
              arRoot.active = false;
              wx.getOpenDataContext().postMessage({
                message: "close"
              });
            });
          }
        } //更新排行榜数据
        ;

        _proto.UpdateFriendRank = function UpdateFriendRank(score) {
          this.UpdatetotallFriendRank(score);
          var gameScoreData = {
            wxgame: {
              levelId: score,
              update_time: new Date().getTime()
            }
          };
          wx.getOpenDataContext().postMessage({
            message: "UpdateFriendRank",
            value: JSON.stringify(gameScoreData)
          });
        } //更新总排行榜数据
        ;

        _proto.UpdatetotallFriendRank = function UpdatetotallFriendRank(score) {
          var gameScoreData = {
            wxgame: {
              levelId: score,
              update_time: new Date().getTime()
            }
          };
          wx.getOpenDataContext().postMessage({
            message: "UpdatetotallFriendRank",
            value: JSON.stringify(gameScoreData)
          });
        } //历史（总）通关次数排行榜
        ;

        _proto.UpdateLevelDoneCnt = function UpdateLevelDoneCnt(levelId, maxLevel) {
          if (levelId == maxLevel) {
            wx.getOpenDataContext().postMessage({
              message: "LevelDoneCnt"
            });
          }
        } //历史（总）通关时间排行榜：按通关时间由短至长排序
        ;

        _proto.UpdateLevelDoneMinTime = function UpdateLevelDoneMinTime(levelId, time, maxLevel) {
          console.log("最大的关卡数：" + maxLevel);

          if (levelId == maxLevel) {
            wx.getOpenDataContext().postMessage({
              message: "LevelDonetime",
              value: time
            });
          }
        };

        return WXRank;
      }()) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Zebra.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnclosureChild.ts', './Entity.ts', './Fence.ts', './GameManager.ts', './SdkManager.ts', './DataManager.ts', './GameCfg.ts', './AudioManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCFloat, v3, Vec3, randomRange, EnclosureChild, MapSacle, AtkFactor, TotallAtkFactor, Entity, Fence, GameManager, SdkManager, vibrateType, DataManager, GameCfg, AudioManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
      v3 = module.v3;
      Vec3 = module.Vec3;
      randomRange = module.randomRange;
    }, function (module) {
      EnclosureChild = module.EnclosureChild;
    }, function (module) {
      MapSacle = module.MapSacle;
      AtkFactor = module.AtkFactor;
      TotallAtkFactor = module.TotallAtkFactor;
      Entity = module.Entity;
    }, function (module) {
      Fence = module.Fence;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      SdkManager = module.SdkManager;
      vibrateType = module.vibrateType;
    }, function (module) {
      DataManager = module.DataManager;
    }, function (module) {
      GameCfg = module.GameCfg;
    }, function (module) {
      AudioManager = module.AudioManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "4d340bP/A9MRKQD1rEnEyuY", "Zebra", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Zebra = exports('Zebra', (_dec = ccclass('Zebra'), _dec2 = property({
        type: CCFloat,
        visible: true,
        displayName: "基础攻击力"
      }), _dec3 = property({
        type: [MapSacle],
        visible: true,
        displayName: "放大系数"
      }), _dec4 = property({
        type: [AtkFactor],
        visible: true,
        displayName: "攻击力个数加成系数"
      }), _dec5 = property({
        type: [TotallAtkFactor],
        visible: true,
        displayName: "总攻击力个数加成系数"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Entity) {
        _inheritsLoose(Zebra, _Entity);

        function Zebra() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Entity.call.apply(_Entity, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "baseAtk", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scale", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "atkFactor", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "totallAtk", _descriptor4, _assertThisInitialized(_this));

          _this.isAtk = false;
          _this.cfgs = void 0;
          return _this;
        }

        var _proto = Zebra.prototype;

        _proto.initCfg = function initCfg() {
          this.scale = new Array();
          this.atkFactor = new Array();
          this.totallAtk = new Array();
          this.cfgs = GameManager.getInstance().animalCfg.Zebra;
          this.baseAtk = this.cfgs[0].BaseAtk;

          for (var index = 0; index < this.cfgs.length; index++) {
            var element = this.cfgs[index];
            var sacle = new MapSacle();
            sacle.lv = index;
            sacle.sacle = element.MapSacle;
            this.scale.push(sacle);
            var atkfactor = new AtkFactor();
            atkfactor.lv = index;
            atkfactor.factor = element.AtkFactor;
            this.atkFactor.push(atkfactor);
            var totallatk = new TotallAtkFactor();
            totallatk.lv = index;
            totallatk.factor = element.TotallAtkFactor;
            this.totallAtk.push(totallatk);
          }
        };

        _proto.start = function start() {//    this.node.getComponent(SphereCollider).on('onCollisionEnter',this.onCollsEnter,this);
          //  this.node.getComponent(SphereCollider).on('onCollisionStay', this.onTriggerStay, this);
          //this.initCfg();
        };

        _proto.onCollsEnter = function onCollsEnter(collider) {
          var other = collider.otherCollider.node;

          if (other) {
            var point = v3();
            var box = other.getComponent(Fence);

            if (!this.isAtk && !this.isNomalAnimal && box) {
              collider.contacts[0].getWorldPointOnA(point);
              this.skeletal.play("behit");
              SdkManager.getInstance().VibrateShort(DataManager.getInstance().playerData.vibrateSet, vibrateType.light);
              box.onHit(this.getAtkFactor(), point);
              this.isAtk = true;
              this.stopMove();
              var dir = new Vec3(randomRange(-10, 10), randomRange(20, 60), 1).normalize(); //方向

              dir = dir.multiplyScalar(GameCfg.AnimalReboundForce); //长度

              this.rg.useGravity = true;
              this.rg.applyForce(dir);
              this.delayDestroy(800);
              this.isLastAtk();
              return;
            }

            var enc = other.getComponent(EnclosureChild);

            if (!this.isAtk && enc) {
              collider.contacts[0].getWorldPointOnA(point);
              this.skeletal.play("behit");
              SdkManager.getInstance().VibrateShort(DataManager.getInstance().playerData.vibrateSet, vibrateType.light);
              enc.onHit(this.getAtkFactor(), point);
              this.isAtk = true;
              this.stopMove();

              var _dir = new Vec3(randomRange(-10, 10), randomRange(20, 60), 1).normalize(); //方向


              _dir = _dir.multiplyScalar(GameCfg.AnimalReboundForce); //长度

              this.rg.useGravity = true;
              this.rg.applyForce(_dir);
              this.delayDestroy(1500);
              this.isLastAtk();
              return;
            }

            if (this.isAtk && other.name == "Dimian") {
              AudioManager.instance.playSound("down");

              var _dir2 = new Vec3(randomRange(-10, 10), randomRange(20, 60), 0).normalize(); //方向


              _dir2 = _dir2.multiplyScalar(GameCfg.AnimalReboundForce); //长度

              this.rg.applyForce(_dir2);
            }
          }
        };

        _proto.onTriggerStay = function onTriggerStay(collider) {
          var other = collider.otherCollider.node;

          if (other) {
            var box = other.getComponent(Fence);

            if (this.isNomalAnimal && box) {
              this.node.setPosition(this.node.position.add3f(0, 0.1, 0));
            }
          }
        };

        _proto.isLastAtk = function isLastAtk() {
          if (this.step == this.totallStep) ;
        };

        _proto.getAtkFactor = function getAtkFactor() {
          var atk;
          var step = this.step >= this.atkFactor.length ? this.atkFactor.length - 1 : this.step;
          atk = this.baseAtk * this.atkFactor[step].factor * this.totallAtk[step].factor;
          return atk;
        };

        _proto.setBigState = function setBigState(step) {
          step = step >= this.scale.length ? this.scale.length - 1 : step;
          var sacle = this.scale[step].sacle;

          _Entity.prototype.setBigState.call(this, sacle);
        };

        _proto.update = function update(deltaTime) {
          _Entity.prototype.update.call(this, deltaTime);
        };

        return Zebra;
      }(Entity), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "baseAtk", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "scale", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "atkFactor", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "totallAtk", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

(function(r) {
  r('virtual:///prerequisite-imports/main', 'chunks:///_virtual/main'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});