[1,["ce5c9320-6f74-469f-b6b6-c02cea1af7af@34d45","10974643-6b6d-4cd6-b1bd-d48619dac1ac","9aaf1b0b-ea8b-400f-ba5c-a30d75b19292","d6355d52-0c98-48ef-8243-b5b6f774d68d","f648964e-8d32-41fc-9ac9-7a1e714dd17b","9d36cc0e-1453-4326-8db7-0cb9a0b7075f@2d2d5","72ab5d72-0839-4663-8aa3-c2b444085f7e@08b1b","07d1cdc7-606e-4e3b-a91f-cbedd348d023","5a9e34b8-bc49-4af9-846b-a16022dd2287","c7af4409-cf8b-4db4-9a0d-264fa8d93f13","8f635463-cd7a-47b8-8eb2-053addc79b7c","82d0f880-8391-4df1-85f3-f5b5119d7680","e43f7d81-4350-4d6c-8b36-affb627cba10","d8b40c30-488d-4d3e-a2fb-e1c96d3c0f41","4e9ae1fa-5349-43ba-8e86-c74f69ea6005","2e42420b-2e18-46c2-8960-62b1cd57feb4","07a49b87-e3ec-41fc-aaf3-c4249abbbe37","6516a98c-19de-4362-b727-e63949502104","c167817b-f266-48d5-92e1-5359b4a41509","7bc0aae7-0ef9-4e5a-a895-4499e99debe0","0a5cd4ef-149b-4349-b0f3-53e695dbb0a3","18f2b1e3-b268-44d1-b9ec-bb3473a41585","ea13e8e5-581c-4437-b331-8c8becd372bf","9424f767-6dd7-474b-ab66-e6ea92579e09@f5efe","9b20a514-6cc3-49de-b216-b6b863046249","21e3d304-a4f0-4f6c-a47a-3fca5429deab@6871f","e0d8e43d-fa5d-4afb-bb14-2aac35d33cc0@5e69c","602c7c4e-6c90-4feb-9203-61d508b32c91@6c48a","4d9a2b08-90dd-410b-80c8-6deea848aad8@ccf2e","510b45b7-fd95-487e-a2ff-74edf507cb14@bda99","1c4a1968-e938-41ff-bf1b-d7236fd61c3a@f983e","d109e902-d060-43e7-b32b-b94f8158c648@0bfbe","a7612b54-35e3-4238-a1a9-4a7b54635839","2212e7f8-897f-4526-85a7-d7daebd240e8","869733d5-8c69-48a5-9795-a98d0344cd24","4d9a2b08-90dd-410b-80c8-6deea848aad8@3c6b6","1c4a1968-e938-41ff-bf1b-d7236fd61c3a@4ecdc","510b45b7-fd95-487e-a2ff-74edf507cb14@08357","d109e902-d060-43e7-b32b-b94f8158c648@79480","a178495e-aff1-4161-80b6-a7bc1f1d2a8f@81bb9","481eb6f7-463f-44bf-be71-619a66b9879f","5bdded1d-6d41-4213-858b-57eb75323691@73abc","4c8c4690-e511-49cf-8b26-f6850a27e234@c5f0e","011aa825-5a49-4530-bd63-82be0f56e294@91078","df494ac7-bf5a-4f3f-971f-5e7f64dba86b@6f730","16f76883-e45b-4a6d-b7e4-1151875ce50b@44236","15b7529d-1186-4ddd-8a96-093a72abbcf9@919bb","afe6e61f-6fba-4847-b39d-0640454d16d4@4a1f3","487ca076-b9b8-4eaa-895c-8d19e800f04f@c4539","2c94bbab-ebc4-4748-8972-ddc93c5b40fd@5e2b0","4509b078-c9fd-4fe5-9043-5d736ab997c0@d9ad4","dc6c564c-1c07-4d59-b53d-59458eca881c@8916c","4b8996ba-1c41-46b6-a1b9-0e97bee3b1b2@75373","f985dade-17ff-4a18-8ada-af6f63581e73@990b1","96df9d34-3a36-41b3-b03c-d364f04cd970@40acd","705ab795-5e9f-47f7-b2ca-b4df82e8db20@df94a","81c28732-858e-4f73-b92f-56cef885654e@d9853","394ebac1-85a2-4c65-b209-cbcde501050f@94742","0ec9a5da-0368-475e-a7d3-77818813802f@ea33c","d4aad91f-5ad1-45d0-91cf-e8e4911deab5@ea00b","738d8d61-f64b-4c87-992b-7d6e0355660b@56bc1","13f8e31d-57fa-4390-81ed-793b5a9df93d@58f02","1c01491a-5c3b-43c5-9228-d7a05312c158@b17a6","d1346436-ac96-4271-b863-1f4fdead95b0","7d33b582-c590-46f5-8b31-3d420300abb7@d0390","712fe454-925e-4f4f-9e44-91eea5b81e40@b074b","93219227-5123-474a-bf73-f6b1408b73d5@a9fb9","c109562b-ebcb-455a-9e9a-4546e8524ff1@8e2df","6683e85d-7c35-447a-a47b-2e3c253b6117@ef9c8","33505a62-0697-4011-a79f-ed256d8ab4ee@3e4db","59449979-be8b-4ca3-bab2-5f2973580168@1635f","6e991b73-7b69-4338-a2df-a84bbda602f3@84aab","7952ff11-c67e-4fa3-ac47-beb3c336128e@7cd2f","fe9102ad-4cd3-4a4e-a685-1086e81c8183@31fcd","c896690d-8e12-48af-b5ae-36255fa5ca44@53271","cfe29abe-1404-41b0-9f2b-87df64dbc634@38e4b","e2a64e41-a425-4ce3-80ce-330b53109357@dbdd1","2a5670d6-1b20-4dba-b64f-352fa29fcbee@865b3","c1e29127-7568-4e60-ad51-14df36aff157@9dfc3","22671da8-fd7c-4b87-a8a3-2a0d3307ca01@d195a","cd843552-6caa-48e6-8c3e-9aaddbff8d5a@2fdca","f8c5a20f-2232-4eac-a6a5-7f6d8bf70c37","487d88df-bc54-47a9-ad4f-e3eee76466b2@4b669","e83fb066-9b32-40dd-85d2-001d8bb462ff","dfa71981-16fe-446f-a04a-3eee623e7eee","89d231aa-0ab6-47ca-a9d7-eef5c37a4602@6c48a","bad08031-973f-464a-8a5e-ec9e086e0304@6c48a","64f128e1-1d95-435c-8e56-93c7d475e9f8@6c48a","ac3344af-2b23-4c5d-95ae-548d9f37142a","264bde66-fa2f-4f78-8eea-1d6354921c05","2b14248e-1c69-4fd3-bd38-60aeafc74dfc","023df49b-3b47-4924-8bb9-a17a1ad57e90","f618d030-f966-4b32-b9a6-882d573fc18c","85b7ed41-8147-4e10-999f-bd8fd387a78e","482f8483-80a6-41c3-a193-604defc18548","ee350be5-90fe-43d5-91f0-0a065dffd1c5","b4564222-36e2-41ef-9551-6d2b28aadc5a","57956b7d-ff7e-41d4-850f-333e088ba3c0","b0ddf14e-d9f2-4998-9a0d-06cd55e6a2e5@6c48a","3e759266-2ea3-44ec-b624-8d98988a404b@7881a","11f25696-ff2b-451d-9c68-f7abe61ab258@6c48a","75758815-8aad-48f0-b375-b8b909bb11df@6c48a","56ede280-d4a3-4738-8a64-0d6e31ca4704@31c25","8755dd98-861b-4f8d-aea7-f308feb99f18@6c48a","ede8a77f-7dd7-4166-9103-866bcca5a052@6c48a","2883580f-b0b4-4ae5-bbf1-2bd2acad9023@6c48a","f7f029ad-3b38-4846-ad5b-9960a75724d1","d5c5b127-ae70-4b6b-9eed-10100f34ed8a@6c48a","9b740c7a-c5b6-4c5e-9e52-db63f803b99d","323f5250-c96a-4a28-bc19-eb25e45b9abb@6c48a","b045138a-fe9a-4b38-8cbe-81702eb38baf","d910e87d-a538-4712-826a-d296b92b157e@6c48a","6bc5d981-b904-4160-9f11-7aa30c2aecbc","5c645bc6-0ed5-4be7-bcd0-db15e70253a4@6c48a","88d8fc49-6082-4f40-9f4d-6421c0f51b18@6c48a","a836b7c4-e2ff-4623-881d-704ef5b8fea2","a7aeb648-b93e-4e0c-9e7d-bdbb8cd83116","53d936e5-6118-4e46-9bd8-7735e0ee08a6","d0236866-fb48-4c28-b6aa-72d3d578e962","57ad69b1-0109-411d-9c65-a7a04bc2e21a@6c48a","c493e62d-fdc1-4622-b0b0-12179818a5fd","57d548ff-a0a4-4b1e-af50-ac2d595702d8","73c29d1e-bcdd-460d-8895-28c9b5d96d1f","347b02fb-ddd7-49b9-9427-7d446108660f","8540ea68-f355-4253-807f-0ddfd9a16b83","0ec9a5da-0368-475e-a7d3-77818813802f@b7aff","0ec9a5da-0368-475e-a7d3-77818813802f@29593","3de46e35-04e4-4ed6-9df8-79d2663482ab@3da1b","3de46e35-04e4-4ed6-9df8-79d2663482ab@31681","3de46e35-04e4-4ed6-9df8-79d2663482ab@0d8f9","94fc32f6-0c9b-43f3-a445-4f117506cd0d@799a4","94fc32f6-0c9b-43f3-a445-4f117506cd0d@b2737","90e03345-f945-4a52-a57f-f5be6e682428@ba6d6","90e03345-f945-4a52-a57f-f5be6e682428@4ffd0","56ede280-d4a3-4738-8a64-0d6e31ca4704@fca07","a54649c4-1d5a-49c1-8edf-4409b4cdf95d","3e759266-2ea3-44ec-b624-8d98988a404b@e450c","fa698f24-0534-473d-b923-7eebfd15ce3a","13f8e31d-57fa-4390-81ed-793b5a9df93d@0c0dc","13f8e31d-57fa-4390-81ed-793b5a9df93d@dc135","15b7529d-1186-4ddd-8a96-093a72abbcf9@5ad75","15b7529d-1186-4ddd-8a96-093a72abbcf9@15f57","15b7529d-1186-4ddd-8a96-093a72abbcf9@68a3f","1c4a1968-e938-41ff-bf1b-d7236fd61c3a@b41ab","1c4a1968-e938-41ff-bf1b-d7236fd61c3a@8b71c","21e3d304-a4f0-4f6c-a47a-3fca5429deab@4e055","21e3d304-a4f0-4f6c-a47a-3fca5429deab@57cf7","21e3d304-a4f0-4f6c-a47a-3fca5429deab@46d5d","e08e9c56-14fb-45e0-aadb-1beb80340fd0","23930e5d-5cbc-475a-97a0-03429c8fa9a4@6c48a","2a5670d6-1b20-4dba-b64f-352fa29fcbee@958b3","2a5670d6-1b20-4dba-b64f-352fa29fcbee@d86bc","2a5670d6-1b20-4dba-b64f-352fa29fcbee@a96a6","2c94bbab-ebc4-4748-8972-ddc93c5b40fd@0c0dc","2c94bbab-ebc4-4748-8972-ddc93c5b40fd@5ae24","33505a62-0697-4011-a79f-ed256d8ab4ee@0c0dc","33505a62-0697-4011-a79f-ed256d8ab4ee@49e4f","3e759266-2ea3-44ec-b624-8d98988a404b@f04b5","3e759266-2ea3-44ec-b624-8d98988a404b@723d1","3e759266-2ea3-44ec-b624-8d98988a404b@f64cb","54ebf0df-6fc4-4206-901d-68c3ed6e2348@6c48a","4c8c4690-e511-49cf-8b26-f6850a27e234@4e055","4c8c4690-e511-49cf-8b26-f6850a27e234@57cf7","4c8c4690-e511-49cf-8b26-f6850a27e234@86424","4d9a2b08-90dd-410b-80c8-6deea848aad8@6230f","510b45b7-fd95-487e-a2ff-74edf507cb14@d7de2","510b45b7-fd95-487e-a2ff-74edf507cb14@6ce2e","56ede280-d4a3-4738-8a64-0d6e31ca4704@3670b","56ede280-d4a3-4738-8a64-0d6e31ca4704@2a382","56ede280-d4a3-4738-8a64-0d6e31ca4704@665a3","6683e85d-7c35-447a-a47b-2e3c253b6117@a96a6","6683e85d-7c35-447a-a47b-2e3c253b6117@958b3","6683e85d-7c35-447a-a47b-2e3c253b6117@8541e","6e991b73-7b69-4338-a2df-a84bbda602f3@958b3","6e991b73-7b69-4338-a2df-a84bbda602f3@13a21","6e991b73-7b69-4338-a2df-a84bbda602f3@a96a6","712fe454-925e-4f4f-9e44-91eea5b81e40@4e055","712fe454-925e-4f4f-9e44-91eea5b81e40@57cf7","712fe454-925e-4f4f-9e44-91eea5b81e40@c6d6a","72ab5d72-0839-4663-8aa3-c2b444085f7e@b7aff","72ab5d72-0839-4663-8aa3-c2b444085f7e@3b8c8","e227c95c-aa64-4fb5-a12c-f9699292f268","64e2eb72-05b7-4de9-97c4-92faaa786878","b353edde-920f-4a51-aceb-f9a0cee284ef","93a25e87-0aad-43b9-a65b-88b3c723a77a","3a2ac780-998e-489d-9241-53bcc29c9d4e","81c28732-858e-4f73-b92f-56cef885654e@b7aff","81c28732-858e-4f73-b92f-56cef885654e@101d3","79732a41-62f0-4fb4-8a5e-4f65ea927078@4e9b1","1263d74c-8167-4928-91a6-4e2672411f47@fc873","a30b0003-b03b-4b71-9b71-c4947b416886","780ea91a-79a1-4c93-95d3-c11dcda5c39d","d96e994d-d4ba-45f0-a3ed-08a1a70a24e3","24edd08d-9edd-437d-bda2-e2dab6301e24","353524d9-fb4a-49fb-b134-dd3fb1a488f7","a5d5dd6a-c39d-4948-abb5-239783626fc4","d1ad490f-0958-443e-8a6f-e7d4461f876e","d6a8f90a-4716-4c09-93c7-4cc23e9580a3","554491bc-1f7b-40af-8d24-284471a3227c","8758d48d-edfa-4515-923a-5b15f0f77ac2@0c0dc","07af887f-cd49-4c40-89e4-59a2ccbd9f45","d41206e3-fff1-4b14-8d3a-d9bb7781ae9c","cd13b883-3fa2-4d05-9849-b756113074c3","6f505925-a594-4c9b-a776-3bb7133eb449","68bfb4f7-747a-4773-b7bc-d890e67cae38","0703a1dd-f7b6-412b-9546-a2360871ce84","698fdcba-5c15-43ba-b226-b4ac86e49946","5d2993ae-1e39-43a9-b533-79d028586b68","15ca70ec-e1c1-4c34-8bb8-c08354a7220b","7ffe99b2-9b1f-4070-8a09-be3eb104c1bc","475059a9-78e8-42c4-85c7-17742efe3375","2c5c8a36-b261-42e5-9fd9-f93b62ee2e5a","abfc9fab-ecde-43e1-93d9-6f7baf2039e0","a3ff2e9e-5985-4a95-97cc-238445ab9d0c","a1f5308b-40f9-4e5c-a768-d31d3d54e77e","eab59c13-eebd-4c8d-ad9c-b11a3e77487e","98eb9055-3b07-41ad-be4d-12a00c3ffcce","8d77ca04-275a-40cb-988c-dba45e919cae","74a7500a-b183-4c60-946f-499d5c07074b","16eea4dc-623b-45aa-affd-a0c0dd4c97b5","1909a17f-808f-4649-ad89-625c54887d25","a34897db-60ff-43f8-a248-86deaa676c18","dee3189c-83f7-4b1f-ba6a-70aa4a57ff5b","e63b398a-f1c5-4f72-bce3-c2c352dde2ed","c4b57dc0-3c9a-44b2-93b1-91593ac0e3ba","cc37b531-6ff4-4284-b5bd-f08a258c0796","2770c473-5e8d-4091-a1e6-d1dd0b4b9876","c72eca04-ad46-4d08-a3b8-5ceda78cb907","af29f7d6-767e-4eee-b06d-2fbe8113ff5d","e2a24cdd-d1ab-46bd-86de-b3e1fc5cbb4d","f0d1f145-1525-4d78-b85f-84d60a7fc5a4","fb80d9a6-17eb-4446-b4cb-112b3fb4d805","649cccec-856d-4c60-940d-2298e9c2b9d6","2065ae0a-c77a-4618-974d-86ce584ebf49","b9a985a0-f53a-4a3a-b30d-dc94679a5ae0","90ee1b33-5e33-44ff-9dff-87d9c5784aec","93219227-5123-474a-bf73-f6b1408b73d5@5ad75","93219227-5123-474a-bf73-f6b1408b73d5@15f57","93219227-5123-474a-bf73-f6b1408b73d5@fb46f","9424f767-6dd7-474b-ab66-e6ea92579e09@bc797","9424f767-6dd7-474b-ab66-e6ea92579e09@52481","9424f767-6dd7-474b-ab66-e6ea92579e09@902e1","9d36cc0e-1453-4326-8db7-0cb9a0b7075f@0c0dc","9d36cc0e-1453-4326-8db7-0cb9a0b7075f@0845f","a178495e-aff1-4161-80b6-a7bc1f1d2a8f@5ad75","a178495e-aff1-4161-80b6-a7bc1f1d2a8f@15f57","a178495e-aff1-4161-80b6-a7bc1f1d2a8f@d4587","d17f8461-3c49-4536-94c0-53248e9d7b24","029e08c3-abf0-4d79-bb43-ec7fcb618d06","3106cf12-fdcf-4c23-ae08-c5d1da79e9df","f300d556-dd70-4314-86ba-5c5a2a76876b","a479c51c-fe6f-4d81-a783-bc4525604787","afe6e61f-6fba-4847-b39d-0640454d16d4@b7aff","afe6e61f-6fba-4847-b39d-0640454d16d4@ec23a","366bc4a2-62de-48b7-8a73-5469babdbc6f@6c48a","c1e29127-7568-4e60-ad51-14df36aff157@4e055","c1e29127-7568-4e60-ad51-14df36aff157@57cf7","c1e29127-7568-4e60-ad51-14df36aff157@df1c3","1259f026-8319-4a1b-8807-f4621bd40171","8ab346dc-c374-4456-9dba-a76aad9264b1","00ab1370-1a05-4964-b1bd-aa4aa2c9d9a4","cd843552-6caa-48e6-8c3e-9aaddbff8d5a@5ad75","cd843552-6caa-48e6-8c3e-9aaddbff8d5a@15f57","cd843552-6caa-48e6-8c3e-9aaddbff8d5a@88d0a","ce5c9320-6f74-469f-b6b6-c02cea1af7af@4c7e0","ce5c9320-6f74-469f-b6b6-c02cea1af7af@2a9b8","ce5c9320-6f74-469f-b6b6-c02cea1af7af@5e361","d109e902-d060-43e7-b32b-b94f8158c648@8c96e","d109e902-d060-43e7-b32b-b94f8158c648@18c91","dc6c564c-1c07-4d59-b53d-59458eca881c@b7aff","dc6c564c-1c07-4d59-b53d-59458eca881c@43627","df494ac7-bf5a-4f3f-971f-5e7f64dba86b@958b3","df494ac7-bf5a-4f3f-971f-5e7f64dba86b@a2992","df494ac7-bf5a-4f3f-971f-5e7f64dba86b@a96a6","e0d8e43d-fa5d-4afb-bb14-2aac35d33cc0@958b3","e0d8e43d-fa5d-4afb-bb14-2aac35d33cc0@0aee6","e0d8e43d-fa5d-4afb-bb14-2aac35d33cc0@a96a6","e2a64e41-a425-4ce3-80ce-330b53109357@4e055","e2a64e41-a425-4ce3-80ce-330b53109357@57cf7","e2a64e41-a425-4ce3-80ce-330b53109357@6ce0e","f985dade-17ff-4a18-8ada-af6f63581e73@0c0dc","f985dade-17ff-4a18-8ada-af6f63581e73@7bc81"],["targetInfo","value","root","asset","node","data","_effectAsset","_mesh","mainTexture","emissiveMap","target","source","shadeMap1","_parent","_defaultClip","_particleSystem","_cpuMaterial","_mainTexture","prefabRootNode","skele","houseViewPrefab","fenceViewPrefab","_sleeper"],[["cc.Node",["_name","_active","_objFlags","__editorExtras__","_prefab","_children","_parent","_components","_lpos","_lrot","_euler","_lscale"],-1,4,2,1,9,5,5,5,5],["cc.CurveRange",["mode","constantMin","constantMax","constant","spline","splineMin","splineMax"],-1,4,4,4],["cc.RealKeyframeValue",["value","rightTangent","leftTangent","interpolationMode","rightTangentWeight","leftTangentWeight"],-3],["cc.ColorKey",["time","color"],2,5],["cc.MeshRenderer",["_shadowCastingMode","_shadowReceivingMode","node","__prefab","_materials","bakeSettings","_mesh"],1,1,4,3,4,6],["cc.ParticleSystem",["duration","loop","_capacity","startSize3D","node","__prefab","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_noiseModule","_trailModule","renderer","bursts"],-1,1,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,9],["cc.GradientRange",["_mode","gradient","color"],2,4,5],["cc.SizeOvertimeModule",["_enable","separateAxes","size","x","y","z"],1,4,4,4,4],["cc.LimitVelocityOvertimeModule",["_enable","dampen","limitX","limitY","limitZ","limit"],1,4,4,4,4],["cc.Prefab",["_name"],2],["cc.PrefabInfo",["fileId","targetOverrides","nestedPrefabInstanceRoots","root","instance","asset"],0,1,4,6],["cc.Animation",["playOnLoad","node","__prefab","_clips","_defaultClip"],2,1,4,3,6],["cc.Material",["_name","_states","_defines","_techIdx","_props"],-1,12],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides","mountedComponents"],2,1,9,9],["cc.AlphaKey",["alpha","time"],1],["cc.ShapeModule",["emitFrom","_enable","radius","_angle","arcSpeed"],-1,4],["cc.ParticleSystemRenderer",["_renderMode","_alignSpace","_cpuMaterial","_mainTexture","_mesh"],1,6,6,6],["cc.Node",["_name","_parent","_children","_components","_prefab","_lpos","_lrot","_lscale","_euler"],2,1,2,12,4,5,5,5,5],["cc.Node",["_name","_parent","_components","_prefab","_lpos","_lrot","_euler"],2,1,2,4,5,5,5],["d740bp3pY1JfY57xasH6F5E",["node","__prefab","skele"],3,1,4,1],["cc.CompPrefabInfo",["fileId"],2],["cc.PrefabInfo",["fileId","instance","targetOverrides","nestedPrefabInstanceRoots","root","asset"],-1,1,1],["cc.PrefabInfo",["fileId","instance","targetOverrides","root","asset","nestedPrefabInstanceRoots"],0,1,1,2],["cc.PrefabInfo",["fileId","instance","root","asset","targetOverrides","nestedPrefabInstanceRoots"],1,1,1,9,2],["cc.PrefabInfo",["fileId","targetOverrides","root","instance","nestedPrefabInstanceRoots","asset"],1,1,4,2,6],["c3be7rt58BCEJDLPRIBrq3k",["node","__prefab"],3,1,4],["cc.ModelBakeSettings",[],3],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.Material",["_name","_defines","_states","_props"],1,12,12],["cc.TargetInfo",["localID"],2],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,6],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,6],["cc.TargetOverrideInfo",["propertyPath","source","sourceInfo","target","targetInfo"],2,1,4,1,4],["cc.MountedComponentsInfo",["targetInfo","components"],3,4,9],["cc.BoxCollider",["node","__prefab","_center","_size"],3,1,4,5,5],["cc.RigidBody",["_group","_type","node","__prefab"],1,1,4],["4cb091Xq1xLK5d2NI1aPRdF",["node","__prefab"],3,1,4],["cc.Burst",["count"],3,4],["cc.RealCurve",["_times","_values"],2,9],["cc.ColorOvertimeModule",["_enable","color"],2,4],["cc.Gradient",["colorKeys","alphaKeys"],3,9,9],["cc.VelocityOvertimeModule",["x","y","z","speedModifier"],3,4,4,4,4],["cc.ForceOvertimeModule",["x","y","z"],3,4,4,4],["cc.RotationOvertimeModule",["x","y","z"],3,4,4,4],["cc.TextureAnimationModule",["frameOverTime","startFrame"],3,4,4],["cc.NoiseModule",[],3],["cc.TrailModule",["lifeTime","widthRatio","colorOverTrail","colorOvertime","_particleSystem"],3,4,4,4,4,1],["cc.EffectAsset",["_name","shaders","techniques"],0],["eeeefTVZjdDRbr/mw6i4aR+",["node","__prefab","houseViewPrefab","fenceViewPrefab","_sleeper"],3,1,4,6,6,6]],[[31,0,1,2,2],[29,0,2],[30,0,1,2,3],[0,2,3,6,4,3],[10,0,1,2,3,4,5,4],[32,0,1,2,2],[20,0,2],[13,0,1,2,2],[35,0,1,2,2],[37,0,1,1],[38,0,1,2,3,1],[39,0,1,2,3,3],[21,0,1,2,3,4,5,5],[13,0,1,3,2,2],[1,1],[9,0,2],[22,0,1,2,3,4,5,4],[27,0,1,2,3],[0,0,5,4,11,2],[12,0,1,2,4,4],[0,0,5,4,2],[26,1],[4,2,3,4,5,6,1],[0,0,6,7,4,9,10,2],[9,1],[2,3,0,3],[33,0,1,2,3],[1,3,2],[24,0,1,2,3,4,5,3],[42,0,1,2],[36,0,1,2,3,4,2],[1,0,4,2],[28,0,1,2,3,3],[4,0,1,2,3,4,5,6,3],[41,0,1],[2,3,0,1,2,5],[0,2,3,4,3],[0,0,1,6,5,4,3],[6,1],[11,0,1,2,3,4,2],[34,0,1,2,2],[0,0,6,7,4,8,2],[14,0,1,3],[0,0,1,6,5,4,8,11,3],[0,0,6,5,7,4,2],[0,0,6,5,7,4,9,10,2],[18,0,1,2,3,4,5,6,2],[12,0,3,1,2,4,5],[6,0,1,2],[1,0,1,2,4],[43,0,1,2],[44,0,1,1],[14,0,2],[45,0,1,2,3,1],[46,0,1,2,1],[47,0,1,2,1],[48,0,1,1],[49,1],[50,0,1,2,3,4,1],[51,0,1,2,4],[0,0,5,7,4,2],[0,0,5,4,8,2],[0,0,6,5,4,2],[6,2,1],[3,1],[15,0,4,2],[16,0,1,4,2,3,3],[0,0,6,5,4,8,11,2],[0,0,5,7,4,9,10,2],[0,0,6,7,4,8,9,10,2],[0,0,1,5,7,4,8,11,3],[0,0,7,4,2],[17,0,1,2,3,4,5,6,7,8,2],[19,0,1,2,1],[10,0,2,1,3,4,5,4],[23,0,1,2,3,4,5,3],[25,0,1,1],[4,0,2,3,4,5,6,2],[11,0,1,2,3,2],[40,0,1,1],[5,0,1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,31,20,21,22,23,24,25,26,27,28,29,30,4],[5,3,0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,31,20,21,22,23,24,25,26,27,28,29,30,4],[5,0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,3],[1,0,5,6,2],[2,1,4,2,5,5],[2,0,1,4,2,5,6],[3,1,1],[3,0,1,2],[3,0,2],[15,1,0,2,3,4,5],[7,0,2,3,4,5,2],[7,0,1,2,3,4,5,3],[7,2,3,4,5,1],[8,0,1,2,3,4,5,3],[8,2,3,4,5,1],[8,0,2,3,4,5,2],[16,2,3,1],[52,0,1,2,3,4,1]],[[[[15,"Fix_Chuizi"],[60,"Fix_Chuizi",[-4],[[73,-3,[6,"d8ziBJ+rNPpYUZguzcZXkG"],-2]],[12,"68XQjXRMZGLro4sG/aE4L5",null,null,null,-1,0]],[72,"modle_chuizi",1,[-7],[[-5,[76,-6,[6,"99SCMltghKD7huotLdiQfc"]]],1,4],[12,"13yPBx/FxEYZT3fa36cZXj",null,null,null,1,0],[1,0,0.6,0],[3,0,0.871020966495838,0,0.4912458406181738],[1,2,2,2],[1,0,121.155,0]],[23,"model_chuizi",2,[[33,1,0,-8,[6,"46COfB4CxBYrKRwtVvj5V4"],[0],[21],1]],[12,"68pd3TeFJAwoaZCdogYyYf",null,null,null,1,0],[3,-0.7071068407911877,-8.3653156945392e-8,-4.117704647782568e-8,0.707106721581896],[1,-90.00000965934602,-0.000010114799910082132,0.0000034417750296896375]],[78,true,2,[6,"a1XlJi3zpGd7u0bTpsX4Uq"],[2,3,4,5,6]]],0,[0,2,1,0,19,4,0,4,1,0,-1,2,0,-1,4,0,4,2,0,-1,3,0,4,3,0,5,1,8],[0,0,0,0,0,0,0,4],[-1,7,-1,-2,-3,-4,-5,14],[81,82,115,116,117,83,118,83]],[[[17,".bin",811559992,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":63120,"length":3240,"count":1620,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":63120,"count":1315,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9480456709861755,-0.5196108222007751,-0.031445108354091644],"maxPosition",8,[1,0.9442007541656494,0.3035227656364441,0.856243908405304]]],-1],0,0,[],[],[]],[[[19,"New_model_fangzi_03",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{},[{"baseStep":0.9,"baseFeather":0.3,"shadeStep":0.6,"shadeFeather":-0.3,"shadowCover":0},"mainColor",8,[4,4290822336],"shadeColor1",8,[4,4285624697],"shadeColor2",8,[4,4287006342],"specular",8,[4,4278190080],"mainTexture",6,0,"emissiveMap",6,1],{},{}],0,11,0,0]]],0,0,[0,0,0],[8,9,6],[119,27,24]],[[[15,"Men01_b"],[18,"Men01_b",[-5,-6,-7],[16,"2528bcjHxGyoaX2sBBSCjb",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["a6N7F52v9VKIDPEqehEty3"]],[1,["a6N7F52v9VKIDPEqehEty3"]],[1,["a6N7F52v9VKIDPEqehEty3"]],[3,0,null,1,[4,"a6N7F52v9VKIDPEqehEty3",null,null,-11,[7,"b1uVB4xJtKQaz+y/GglUd6",1,[[2,"zhalan_01_b",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],-8],[2,0,["_shadowReceivingMode"],-9],[5,["_materials","0"],-10,1]]],0]],[1,["c7v0XdX41ZRL3QzOKKifEt"]],[3,0,null,1,[4,"a6N7F52v9VKIDPEqehEty3",null,null,-15,[7,"f5XqEv059EK7Ih5oV3rcbL",1,[[2,"zhalan_01_b-001",["_name"],3],[0,["_lpos"],3,[1,0,0,4.13]],[0,["_lrot"],3,[3,0,0,0,1]],[0,["_euler"],3,[1,0,0,0]],[2,1,["_shadowCastingMode"],-12],[2,0,["_shadowReceivingMode"],-13],[5,["_materials","0"],-14,3]]],2]],[1,["c7v0XdX41ZRL3QzOKKifEt"]],[3,0,null,1,[4,"a6N7F52v9VKIDPEqehEty3",null,null,-19,[7,"e296Q9w5lCx7FKv4QT1JpL",1,[[2,"zhalan_01_b-002",["_name"],4],[0,["_lpos"],4,[1,1.86,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],-16],[2,0,["_shadowReceivingMode"],-17],[5,["_materials","0"],-18,5]]],4]],[1,["c7v0XdX41ZRL3QzOKKifEt"]]],0,[0,-1,9,0,-2,7,0,-3,5,0,2,1,0,-1,5,0,-2,7,0,-3,9,0,0,6,0,0,6,0,0,6,0,2,5,0,0,8,0,0,8,0,0,8,0,2,7,0,0,10,0,0,10,0,0,10,0,2,9,0,5,1,19],[0,0,0,0,0,0],[3,1,3,1,3,1],[39,1,39,1,39,1]],[[[15,"zhanlas02"],[20,"zhanlas02",[-8,-9,-10,-11,-12,-13],[16,"15nA224mJAV6BWgbgwboGo",null,null,-7,0,[-1,-2,-3,-4,-5,-6]]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["7d8Oc5TAxJZIQ9dYSUGrm5"]],[1,["83YLvoWUVIwJazpNju6bCd"]],[1,["c57uWvNyVNdrybkH9yuPl9"]],[1,["f5Crz/W5xCRpcO8MeMlG+z"]],[1,["74Q/+eW7pBZb4pv7SQdvyV"]],[3,0,{},1,[4,"f5Crz/W5xCRpcO8MeMlG+z",null,null,-16,[7,"30Eu4/M7FIcK2po+E620Hg",1,[[2,"homezhalan02",["_name"],6],[0,["_lpos"],6,[1,0,0,0]],[0,["_lrot"],6,[3,0,0,0,1]],[0,["_euler"],6,[1,0,0,0]],[0,["_lrot"],-14,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-15,[1,0,-90,0]]]],0]],[3,0,{},1,[4,"1e9ratialCZLquo15/R7/1",null,null,-17,[7,"068BLnYv5BArVujjwP3ElT",1,[[2,"Men03_a",["_name"],2],[0,["_lpos"],2,[1,0,0,0]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,false,["_active"],2]]],1]],[3,0,{},1,[4,"74Q/+eW7pBZb4pv7SQdvyV",null,null,-18,[7,"3bPN4xLlVNv41weTNtTPae",1,[[2,"Men03_b",["_name"],7],[0,["_lpos"],7,[1,0,0,0]],[0,["_lrot"],7,[3,0,0,0,1]],[0,["_euler"],7,[1,0,0,0]]]],2]],[3,0,{},1,[4,"7d8Oc5TAxJZIQ9dYSUGrm5",null,null,-19,[7,"75ToHNzsJPMqtTMmn6Y5qy",1,[[2,"Men03_c",["_name"],3],[0,["_lpos"],3,[1,0,0,0]],[0,["_lrot"],3,[3,0,0,0,1]],[0,["_euler"],3,[1,0,0,0]],[2,false,["_active"],3]]],3]],[3,0,{},1,[4,"83YLvoWUVIwJazpNju6bCd",null,null,-20,[7,"b9KiZItsdIy7QoN/Ad+9xc",1,[[2,"Men03_d",["_name"],4],[0,["_lpos"],4,[1,0,0,0]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,false,["_active"],4]]],4]],[3,0,{},1,[4,"c57uWvNyVNdrybkH9yuPl9",null,null,-21,[7,"a7QTpLLR1CfpBfDHH0VVTn",1,[[2,"Men03_e",["_name"],5],[0,["_lpos"],5,[1,0,0,0]],[0,["_lrot"],5,[3,0,0,0,1]],[0,["_euler"],5,[1,0,0,0]],[2,false,["_active"],5]]],5]],[1,["a5qQZie7dGFZpqKKOy8+t3","f7f/SnzaFeKKwX9YRIdClj"]]],0,[0,-1,13,0,-2,12,0,-3,11,0,-4,10,0,-5,9,0,-6,8,0,2,1,0,-1,8,0,-2,9,0,-3,10,0,-4,11,0,-5,12,0,-6,13,0,0,14,0,0,14,0,2,8,0,2,9,0,2,10,0,2,11,0,2,12,0,2,13,0,5,1,21],[0,0,0,0,0,0],[3,3,3,3,3,3],[84,120,121,122,123,124]],[[[19,"New_zhalan_09",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{"lineWidth":25},[{"baseStep":0.9,"baseFeather":0.3,"shadeStep":0.6,"shadeFeather":-0.3,"shadowCover":0},"mainColor",8,[4,4290822336],"shadeColor1",8,[4,4285624697],"shadeColor2",8,[4,4287006342],"specular",8,[4,4278190080],"mainTexture",6,0,"emissiveMap",6,1],{},{}],0,11,0,0]]],0,0,[0,0,0],[8,9,6],[85,27,24]],[[[15,"Men08_a"],[18,"Men08_a",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-8,[7,"9ekJsc5PtOlY5FFlsdntOk",1,[[2,"zhanlan_06_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],3],[2,0,["_shadowReceivingMode"],3],[5,["_materials","0"],3,1],[5,["_mesh"],3,2]]],0]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-9,[7,"davd4Bt4NB3blVYs0NtRRA",1,[[2,"zhanlan_06_a-001",["_name"],4],[0,["_lpos"],4,[1,0,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],5],[2,0,["_shadowReceivingMode"],5],[5,["_materials","0"],5,4],[5,["_mesh"],5,5]]],3]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-10,[7,"93jUXOLRpHdLf/e5IlkA9S",1,[[2,"zhanlan_06_a-002",["_name"],6],[0,["_lpos"],6,[1,1.86,0,4.13]],[0,["_lrot"],6,[3,0,0,0,1]],[0,["_euler"],6,[1,0,0,0]],[2,1,["_shadowCastingMode"],7],[2,0,["_shadowReceivingMode"],7],[5,["_materials","0"],7,7],[5,["_mesh"],7,8]]],6]]],0,[0,-1,10,0,-2,9,0,-3,8,0,2,1,0,-1,8,0,-2,9,0,-3,10,0,2,8,0,2,9,0,2,10,0,5,1,10],[0,0,0,0,0,0,0,0,0],[3,1,1,3,1,1,3,1,1],[0,7,35,0,7,35,0,7,35]],[[[32,"zhalan_08",[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_1ST_SHADE_MAP":true,"SHADE_MAP_1_AS_SHADE_MAP_2":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{"rasterizerState":{"polygonMode":2,"lineWidth":0},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},[{"rasterizerState":{"depthBias":1.9,"depthBiasClamp":-2.4,"lineWidth":5.2},"depthStencilState":{}},"blendState",11,[{"targets":[{}]},"blendColor",8,[4,4292072403]]],{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],0,0,11,0],[[[{"lineWidth":25},"baseColor",8,[4,4279637526]],[{"baseStep":1.9,"baseFeather":0.2,"shadeStep":2.6,"shadeFeather":2.101,"shadowCover":0.622},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4294967295],"shadeColor2",8,[4,4283058766],"specular",8,[4,1275068416],"shadeMap1",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[12,6],[86,32]],[[[32,"zhalan_09",[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_1ST_SHADE_MAP":true,"SHADE_MAP_1_AS_SHADE_MAP_2":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{"rasterizerState":{"polygonMode":2,"lineWidth":0},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},[{"rasterizerState":{"depthBias":1.9,"depthBiasClamp":-2.4,"lineWidth":5.2},"depthStencilState":{}},"blendState",11,[{"targets":[{}]},"blendColor",8,[4,4292072403]]],{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],0,0,11,0],[[[{"lineWidth":25},"baseColor",8,[4,4279637526]],[{"baseStep":1.9,"baseFeather":0.2,"shadeStep":2.6,"shadeFeather":2.101,"shadowCover":0.622},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4294967295],"shadeColor2",8,[4,4283058766],"specular",8,[4,1275068416],"shadeMap1",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[12,6],[85,32]],[[[17,".bin",2563346358,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":71472,"length":3348,"count":1674,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":71472,"count":1489,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.044071078300476,-0.5305119752883911,-0.024665413424372673],"maxPosition",8,[1,1.033291220664978,0.6255223751068115,0.3589133024215698]]],-1],0,0,[],[],[]],[[[19,"22 - Default",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":1.9999998807907104,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[6],[4]],[[[24],[20,"zhalan_03_e",[-2],[12,"1evKlEhR9ckIYLhneWiCl5",null,null,null,-1,0]],[23,"zhalan_03_e",1,[[22,-3,[6,"aclBJwbcdda78gfCcLd6R0"],[0],[21],1]],[12,"85Il5KK+lXErTpgq5y6+3o",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[125,126]],[[[32,"zhalan_01new",[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_1ST_SHADE_MAP":true,"SHADE_MAP_1_AS_SHADE_MAP_2":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{"rasterizerState":{"polygonMode":2,"lineWidth":0},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},[{"rasterizerState":{"depthBias":1.9,"depthBiasClamp":-2.4,"lineWidth":5.2},"depthStencilState":{}},"blendState",11,[{"targets":[{}]},"blendColor",8,[4,4292072403]]],{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],0,0,11,0],[[[{"lineWidth":30},"baseColor",8,[4,4279637526]],[{"baseStep":1.9,"baseFeather":0.2,"shadeStep":2.6,"shadeFeather":2.101,"shadowCover":0.622},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4294967295],"shadeColor2",8,[4,4283058766],"specular",8,[4,1275068416],"shadeMap1",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[12,6],[87,32]],[[[15,"fangzis"],[60,"fangzis",[-39,-40,-41,-42,-43],[[39,true,-38,[6,"5cQey8TuZIB7k8+iLi2hPG"],[42,43],44]],[75,"0aJQ6v2dxET4SJ3gmLI5Fs",null,-37,0,[[30,["_trailModule","_particleSystem"],-14,[1,["8cjWDXz0ZD1JlVtH388tNj"]],-13,[1,["8cjWDXz0ZD1JlVtH388tNj"]]],[30,["_trailModule","_particleSystem"],-16,[1,["f604lHF7RP9oj3VFqFf5gy"]],-15,[1,["f604lHF7RP9oj3VFqFf5gy"]]],[30,["_trailModule","_particleSystem"],-18,[1,["59fKC0sk9JTZmsDocnSXep"]],-17,[1,["59fKC0sk9JTZmsDocnSXep"]]],[30,["_trailModule","_particleSystem"],-20,[1,["f604lHF7RP9oj3VFqFf5gy"]],-19,[1,["f604lHF7RP9oj3VFqFf5gy"]]],[30,["_trailModule","_particleSystem"],-22,[1,["59fKC0sk9JTZmsDocnSXep"]],-21,[1,["59fKC0sk9JTZmsDocnSXep"]]],[30,["_trailModule","_particleSystem"],-24,[1,["8cjWDXz0ZD1JlVtH388tNj"]],-23,[1,["8cjWDXz0ZD1JlVtH388tNj"]]],[30,["_trailModule","_particleSystem"],-26,[1,["f604lHF7RP9oj3VFqFf5gy"]],-25,[1,["f604lHF7RP9oj3VFqFf5gy"]]],[30,["_trailModule","_particleSystem"],-28,[1,["59fKC0sk9JTZmsDocnSXep"]],-27,[1,["59fKC0sk9JTZmsDocnSXep"]]],[30,["_trailModule","_particleSystem"],-30,[1,["8cjWDXz0ZD1JlVtH388tNj"]],-29,[1,["8cjWDXz0ZD1JlVtH388tNj"]]],[30,["_trailModule","_particleSystem"],-32,[1,["f604lHF7RP9oj3VFqFf5gy"]],-31,[1,["f604lHF7RP9oj3VFqFf5gy"]]],[30,["_trailModule","_particleSystem"],-34,[1,["8cjWDXz0ZD1JlVtH388tNj"]],-33,[1,["8cjWDXz0ZD1JlVtH388tNj"]]],[30,["_trailModule","_particleSystem"],-36,[1,["f604lHF7RP9oj3VFqFf5gy"]],-35,[1,["f604lHF7RP9oj3VFqFf5gy"]]]],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[36,0,{},[4,"e2MCyqYkhADoP3mvHlgpuV",null,null,-53,[7,"520wW3oSdPtKf36g5qbD67",1,[[2,"FX_LevelUp",["_name"],-44],[0,["_lpos"],-45,[1,0,0.024999999627470976,0]],[0,["_lrot"],-46,[3,0,0,0,1]],[0,["_euler"],-47,[1,0,0,0]],[2,false,["_active"],-48],[2,3.7,["startSizeX","constant"],-49],[2,3.7,["startSizeY","constant"],-50],[26,6,["startSizeX","constant"],[1,["f604lHF7RP9oj3VFqFf5gy"]]],[2,5,["startSpeed","constantMin"],-51],[2,0.05,["_limitVelocityOvertimeModule","dampen"],-52]]],17]],[36,0,{},[4,"e2MCyqYkhADoP3mvHlgpuV",null,null,-64,[7,"abD9LalwNCaK5ZfOS4BpM4",1,[[2,"FX_LevelUp",["_name"],-54],[0,["_lpos"],-55,[1,0,0.024999999627470976,0]],[0,["_lrot"],-56,[3,0,0,0,1]],[0,["_euler"],-57,[1,0,0,0]],[2,false,["_active"],-58],[2,4.2,["startSizeX","constant"],-59],[2,4.2,["startSizeY","constant"],-60],[26,6.55,["startSizeX","constant"],[1,["f604lHF7RP9oj3VFqFf5gy"]]],[2,2,["startSpeed","constantMin"],-61],[2,15,["startSpeed","constantMax"],-62],[2,0.05,["_limitVelocityOvertimeModule","dampen"],-63]]],25]],[36,0,{},[4,"e2MCyqYkhADoP3mvHlgpuV",null,null,-72,[7,"3aW0ZKdydBUpCu9QHx5mDY",1,[[2,"FX_LevelUp",["_name"],-65],[0,["_lpos"],-66,[1,0,0.024999999627470976,0]],[0,["_lrot"],-67,[3,0,0,0,1]],[0,["_euler"],-68,[1,0,0,0]],[2,false,["_active"],-69],[2,3.5,["startSizeX","constant"],-70],[2,3.5,["startSizeY","constant"],-71],[26,5.5,["startSizeX","constant"],[1,["f604lHF7RP9oj3VFqFf5gy"]]]]],9]],[36,0,{},[4,"e2MCyqYkhADoP3mvHlgpuV",null,null,-78,[7,"7d5gPHCflG9LXBHof/Xd72",1,[[2,"FX_LevelUp",["_name"],-73],[0,["_lpos"],-74,[1,0,0.024999999627470976,0]],[0,["_lrot"],-75,[3,0,0,0,1]],[0,["_euler"],-76,[1,0,0,0]],[2,false,["_active"],-77],[26,7.2,["startSizeX","constant"],[1,["f604lHF7RP9oj3VFqFf5gy"]]],[26,0.04,["_limitVelocityOvertimeModule","dampen"],[1,["8cjWDXz0ZD1JlVtH388tNj"]]]]],33]],[36,0,{},[4,"e2MCyqYkhADoP3mvHlgpuV",null,null,-84,[7,"31e4wOMilLDLaInabDw7z7",1,[[2,"FX_LevelUp",["_name"],-79],[0,["_lpos"],-80,[1,0,0.024999999627470976,0]],[0,["_lrot"],-81,[3,0,0,0,1]],[0,["_euler"],-82,[1,0,0,0]],[2,false,["_active"],-83],[26,7.2,["startSizeX","constant"],[1,["f604lHF7RP9oj3VFqFf5gy"]]],[26,0.03,["_limitVelocityOvertimeModule","dampen"],[1,["8cjWDXz0ZD1JlVtH388tNj"]]]]],41]],[1,["84B/b6BllDrJ+xHL6OZESC"]],[1,["84B/b6BllDrJ+xHL6OZESC"]],[1,["84B/b6BllDrJ+xHL6OZESC"]],[1,["84B/b6BllDrJ+xHL6OZESC"]],[1,["84B/b6BllDrJ+xHL6OZESC"]],[1,["e2MCyqYkhADoP3mvHlgpuV"]],[1,["e2MCyqYkhADoP3mvHlgpuV"]],[1,["e2MCyqYkhADoP3mvHlgpuV"]],[1,["38Bjqc4IZX34+L49bFqrjt"]],[1,["e2MCyqYkhADoP3mvHlgpuV"]],[1,["e2MCyqYkhADoP3mvHlgpuV"]],[67,"Fangzi_01",1,[-85,-86,4],[12,"74UlPdy15H3KbySnQ4Keqb",null,null,null,1,0],[1,0,-0.02,0],[1,0.800000011920929,0.800000011920929,0.800000011920929]],[68,"model_fangzi_01",[-88,-89],[[33,1,0,-87,[6,"9dX5axc6RIzIx2YUU5GHui"],[4],[21],5]],[12,"ccrVg4GptBOJqW1czLEHiU",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[43,"Fangzi_02",false,1,[-90,-91,2],[12,"53w0PiEBJKX7FM6gFkkko+",null,null,null,1,0],[1,0,-0.02,0],[1,0.800000011920929,0.800000011920929,0.800000011920929]],[43,"Fangzi_03",false,1,[-92,-93,3],[12,"4fAcn6W+VJkK2609/F9Q7f",null,null,null,1,0],[1,0,-0.02,0],[1,0.800000011920929,0.800000011920929,0.800000011920929]],[44,"fangzi03",21,[-95,-96],[[39,true,-94,[6,"dfrfnnnENDOJ6YxqKC5pHu"],[22],23]],[12,"c9O6usbZpKzqsp7lDgY1h1",null,null,null,1,0]],[43,"Fangzi_04",false,1,[-97,-98,5],[12,"ada9zTXhVAFqhs8HaIUB8W",null,null,null,1,0],[1,0,-0.02,0],[1,0.800000011920929,0.800000011920929,0.800000011920929]],[3,0,null,23,[4,"b9TNoeKHtctL5oNg+fG7fi",null,null,-107,[13,"4fAynMOgRP4LbXA7Vxlyf7",1,[[9,[1,["b9TNoeKHtctL5oNg+fG7fi"]],[[39,true,-106,[6,"4awK1rZ6BImbYqanlLcEWX"],[27],28]]]],[[2,"fangzi04",["_name"],-99],[0,["_lpos"],-100,[1,0,0,0]],[0,["_lrot"],-101,[3,0,0,0,1]],[0,["_euler"],-102,[1,0,0,0]],[2,1,["_materials","length"],15],[5,["_materials","1"],15,29],[5,["_materials","0"],15,30],[5,["_materials","0"],-103,31],[2,1,["_shadowCastingMode"],15],[2,1,["_shadowCastingMode"],-104],[2,0,["_shadowReceivingMode"],-105],[2,0,["_shadowReceivingMode"],15],[26,true,["playOnLoad"],[1,["4awK1rZ6BImbYqanlLcEWX"]]]]],26]],[1,["b9TNoeKHtctL5oNg+fG7fi"]],[43,"Fangzi_05",false,1,[-108,-109,6],[12,"caIR1hj+5C9LIH1/ia47i2",null,null,null,1,0],[1,0,-0.02,0],[1,0.800000011920929,0.800000011920929,0.800000011920929]],[3,0,null,26,[4,"abJWVDwvlRk7cz1QQV5O/o",null,null,-121,[13,"ecq4ajvwVBErkHld2SVB6q",1,[[9,[1,["abJWVDwvlRk7cz1QQV5O/o"]],[[39,true,-120,[6,"53Vz3qlHtPOreUGOITFdAq"],[35],36]]]],[[2,"fangzi05",["_name"],-110],[0,["_lpos"],-111,[1,0,0,0]],[0,["_lrot"],-112,[3,0,0,0,1]],[0,["_euler"],-113,[1,0,0,0]],[5,["_materials","0"],-114,37],[5,["_materials","0"],-115,38],[2,1,["_shadowCastingMode"],-116],[2,1,["_shadowCastingMode"],-117],[2,0,["_shadowReceivingMode"],-118],[2,0,["_shadowReceivingMode"],-119],[26,true,["playOnLoad"],[1,["53Vz3qlHtPOreUGOITFdAq"]]]]],34]],[1,["abJWVDwvlRk7cz1QQV5O/o"]],[44,"fangzi01",18,[19],[[39,true,-122,[6,"f16el6viRG3oL+tru7SJ+P"],[6],7]],[12,"c2sGNX6aNDDboAH4jBPyNY",null,null,null,1,0]],[3,0,{},18,[4,"84B/b6BllDrJ+xHL6OZESC",null,null,-125,[7,"77L/Gf3gZAC7d8jZ8IhkcB",1,[[2,"ChuiZi",["_name"],7],[0,["_lpos"],7,[1,0,0.024999999627470976,2.4974999627843504]],[0,["_lrot"],7,[3,0,0,0,1]],[0,["_euler"],7,[1,0,0,0]],[2,0.5,["startSizeX","constant"],-123],[2,0.4,["_limitVelocityOvertimeModule","dampen"],-124],[40,["_lpos"],[1,["95RnlBq6lLHI9xBQkhhVxB"]],[1,0,0.26,0]],[2,true,["_active"],7],[26,false,["_active"],[1,["20LZLOSrJBzZch1QLHrn9T"]]],[0,["_lscale"],7,[1,1.6,1.6,1.6]]]],8]],[44,"fangzi02",20,[-127],[[39,true,-126,[6,"22wVG+F49FbKNLSgdgYmsn"],[14],15]],[12,"b52MbhL6xGdrX2Sa4jrjRo",null,null,null,1,0]],[45,"model_fangzi_02",31,[-129],[[33,1,0,-128,[6,"38zjlhcUJNtKDg0ii+zG6X"],[12],[21],13]],[12,"75n3QBpC1BU6oK8+he162O",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[3,0,{},20,[4,"84B/b6BllDrJ+xHL6OZESC",null,null,-132,[7,"6eC6O9zktIQ6yepDtefKA7",1,[[2,"ChuiZi",["_name"],8],[0,["_lpos"],8,[1,0,0.024999999627470976,2.4974999627843504]],[0,["_lrot"],8,[3,0,0,0,1]],[0,["_euler"],8,[1,0,0,0]],[2,0.5,["startSizeX","constant"],-130],[2,0.4,["_limitVelocityOvertimeModule","dampen"],-131],[40,["_lpos"],[1,["95RnlBq6lLHI9xBQkhhVxB"]],[1,0,0.26,0]],[2,true,["_active"],8],[26,false,["_active"],[1,["20LZLOSrJBzZch1QLHrn9T"]]],[0,["_lscale"],8,[1,1.6,1.6,1.6]]]],16]],[3,0,{},21,[4,"84B/b6BllDrJ+xHL6OZESC",null,null,-135,[7,"93razXS9FOXaMO8InfFwXg",1,[[2,"ChuiZi",["_name"],9],[0,["_lpos"],9,[1,0,0.024999999627470976,2.4974999627843504]],[0,["_lrot"],9,[3,0,0,0,1]],[0,["_euler"],9,[1,0,0,0]],[2,0.5,["startSizeX","constant"],-133],[2,0.4,["_limitVelocityOvertimeModule","dampen"],-134],[40,["_lpos"],[1,["95RnlBq6lLHI9xBQkhhVxB"]],[1,0,0.26,0]],[2,true,["_active"],9],[26,false,["_active"],[1,["20LZLOSrJBzZch1QLHrn9T"]]],[0,["_lscale"],9,[1,1.6,1.6,1.6]]]],24]],[1,["8cjWDXz0ZD1JlVtH388tNj"]],[1,["89LzGL4EpSPap64ovqDyEQ"]],[3,0,{},23,[4,"84B/b6BllDrJ+xHL6OZESC",null,null,-138,[7,"18KnGrc3lMu7lGkQVOBSqS",1,[[2,"ChuiZi",["_name"],10],[0,["_lpos"],10,[1,0,0.024999999627470976,2.4974999627843504]],[0,["_lrot"],10,[3,0,0,0,1]],[0,["_euler"],10,[1,0,0,0]],[2,0.5,["startSizeX","constant"],-136],[2,0.4,["_limitVelocityOvertimeModule","dampen"],-137],[40,["_lpos"],[1,["95RnlBq6lLHI9xBQkhhVxB"]],[1,0,0.26,0]],[2,true,["_active"],10],[26,false,["_active"],[1,["20LZLOSrJBzZch1QLHrn9T"]]],[0,["_lscale"],10,[1,1.6,1.6,1.6]]]],32]],[1,["d1GXv0CppQcoSPsKJZj8bD"]],[1,["600U23ufRYB6GBBkrHhYFm"]],[3,0,{},26,[4,"84B/b6BllDrJ+xHL6OZESC",null,null,-141,[7,"dfaqtTHYFN6bYrWvovyJkH",1,[[2,"ChuiZi",["_name"],11],[0,["_lpos"],11,[1,0,0.024999999627470976,2.4974999627843504]],[0,["_lrot"],11,[3,0,0,0,1]],[0,["_euler"],11,[1,0,0,0]],[2,0.5,["startSizeX","constant"],-139],[2,0.4,["_limitVelocityOvertimeModule","dampen"],-140],[40,["_lpos"],[1,["95RnlBq6lLHI9xBQkhhVxB"]],[1,0,0.26,0]],[2,true,["_active"],11],[26,false,["_active"],[1,["20LZLOSrJBzZch1QLHrn9T"]]],[0,["_lscale"],11,[1,1.6,1.6,1.6]],[8,["_materials","0"],[1,["a62kk6R1RE0bgvwvB0IC3l"]],40]]],39]],[41,"model_fangzi_01_door2",19,[[33,1,0,-142,[6,"541AJFNshG9YeA+K75otlb"],[0],[21],1]],[12,"1cUW448ntGsLuDjIxxwQFd",null,null,null,1,0],[1,0.5330305695533752,-1.1736512184143066,0.5362362861633301]],[41,"model_fangzi_01_door1",19,[[33,1,0,-143,[6,"08jSILItNBBog4AQZU75sv"],[2],[21],3]],[12,"e6TtmvTrlN/qZMMEjmjRsf",null,null,null,1,0],[1,-0.5420789122581482,-1.1736512184143066,0.5362362861633301]],[1,["ednRrFa8dANYZYf1XlxzyB"]],[1,["59fKC0sk9JTZmsDocnSXep"]],[41,"model_fangzi_02_door",32,[[77,1,-144,[6,"1fvi7chQVF4pMuKasvPn/L"],[10],[21],11]],[12,"36hjyaWj5HPK9/sp8pO1EE",null,null,null,1,0],[1,-0.4737064838409424,-1.1881037950515747,0.4267670512199402]],[1,["ednRrFa8dANYZYf1XlxzyB"]],[1,["59fKC0sk9JTZmsDocnSXep"]],[1,["8cjWDXz0ZD1JlVtH388tNj"]],[23,"model_fangzi_03",22,[[33,1,0,-145,[6,"28k1x/6sZMLYfpUOfLiyAE"],[18],[21],19]],[12,"5dnqWWPsBIeq7VUoFl/tef",null,null,null,1,0],[3,-0.7071067215818992,0,0,0.7071068407911908],[1,-89.9999903406537,0,0]],[69,"model_fangzi_03_door",22,[[33,1,0,-146,[6,"084DTf8FFJYqMgjoG12GTA"],[20],[21],21]],[12,"6cqKNoOepF+JqPAoFkny2T",null,null,null,1,0],[1,0.5728282928466797,0.507427990436554,1.2247576713562012],[3,-0.7071067215818992,0,0,0.7071068407911908],[1,-89.9999903406537,0,0]],[1,["ednRrFa8dANYZYf1XlxzyB"]],[1,["59fKC0sk9JTZmsDocnSXep"]],[1,["ednRrFa8dANYZYf1XlxzyB"]],[1,["ednRrFa8dANYZYf1XlxzyB"]]],0,[0,-1,6,0,-2,40,0,-3,27,0,-4,5,0,-5,37,0,-6,24,0,-7,3,0,-8,34,0,-9,2,0,-10,33,0,-11,4,0,-12,30,0,10,2,0,11,2,0,10,2,0,11,2,0,10,2,0,11,2,0,10,4,0,11,4,0,10,4,0,11,4,0,10,3,0,11,3,0,10,3,0,11,3,0,10,3,0,11,3,0,10,5,0,11,5,0,10,5,0,11,5,0,10,6,0,11,6,0,10,6,0,11,6,0,2,1,0,4,1,0,-1,18,0,-2,20,0,-3,21,0,-4,23,0,-5,26,0,0,13,0,0,13,0,0,13,0,0,13,0,0,13,0,0,47,0,0,47,0,0,48,0,0,48,0,2,2,0,0,14,0,0,14,0,0,14,0,0,14,0,0,14,0,0,52,0,0,52,0,0,35,0,0,35,0,0,35,0,2,3,0,0,12,0,0,12,0,0,12,0,0,12,0,0,12,0,0,44,0,0,44,0,2,4,0,0,16,0,0,16,0,0,16,0,0,16,0,0,16,0,2,5,0,0,17,0,0,17,0,0,17,0,0,17,0,0,17,0,2,6,0,-1,29,0,-2,30,0,4,19,0,-1,41,0,-2,42,0,-1,31,0,-2,33,0,-1,22,0,-2,34,0,4,22,0,-1,49,0,-2,50,0,-1,24,0,-2,37,0,0,25,0,0,25,0,0,25,0,0,25,0,0,36,0,0,36,0,0,36,0,4,24,0,2,24,0,-1,27,0,-2,40,0,0,28,0,0,28,0,0,28,0,0,28,0,0,38,0,0,39,0,0,38,0,0,39,0,0,39,0,0,38,0,4,27,0,2,27,0,4,29,0,0,43,0,0,43,0,2,30,0,4,31,0,-1,32,0,4,32,0,-1,45,0,0,46,0,0,46,0,2,33,0,0,51,0,0,51,0,2,34,0,0,53,0,0,53,0,2,37,0,0,54,0,0,54,0,2,40,0,4,41,0,4,42,0,4,45,0,4,49,0,4,50,0,5,1,2,13,20,3,13,21,4,13,18,5,13,23,6,13,26,19,13,29,146],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,7,-1,7,-1,7,-1,14,3,3,-1,7,-1,7,-1,14,3,3,-1,7,-1,7,-1,14,3,3,3,-1,14,1,1,1,3,3,3,-1,14,1,1,3,1,3,-1,-2,14],[40,127,40,128,40,129,88,88,33,34,89,130,89,131,90,90,33,34,91,132,91,133,92,92,33,34,134,93,93,135,94,94,33,34,136,95,95,96,96,33,81,34,137,97,97]],[[[17,".bin",3476720256,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":224,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":224,"count":4,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,0],"maxPosition",8,[1,0.5,0.5,0]]],-1],0,0,[],[],[]],[[[19,"_aa11猪牛羊\\objzhuM_Pig",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[6],[4]],[[[24],[20,"zhalan_02_d",[-2],[12,"02Jc7VFfFX0pRlUhMa3q08",null,null,null,-1,0]],[23,"zhalan_02_d",1,[[22,-3,[6,"1fvD2apadfm7WvNbp6FDTl"],[0],[21],1]],[12,"4aBh5nDr9ciKGZSA0o0A8F",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[138,139]],[[[17,".bin",3082370507,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":25344,"length":1068,"count":534,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":25344,"count":528,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9815658330917358,-0.3333160877227783,-0.009774049744009972],"maxPosition",8,[1,0.925670325756073,0.4093046486377716,0.6712205410003662]]],-1],0,0,[],[],[]],[[[19,"Material #9",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[8,6],[140,4]],[[[17,".bin",2577922118,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":18384,"length":888,"count":444,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":18384,"count":383,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9815658926963806,-0.3306732177734375,-0.008967017754912376],"maxPosition",8,[1,0.9759644865989685,0.4093046486377716,0.8127769231796265]]],-1],0,0,[],[],[]],[[[24],[20,"zhalan_01_c",[-2],[12,"f1ExwHZHNVA7TAsBFOrsHd",null,null,null,-1,0]],[23,"zhalan_01_c",1,[[22,-3,[6,"c7tmBiuoFbH4IuZNLyhOLH"],[0],[21],1]],[12,"251ujNwzJR6JRLm1S+u9eZ",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[141,142]],[[[15,"Men07_b"],[18,"Men07_b",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-8,[7,"9ekJsc5PtOlY5FFlsdntOk",1,[[2,"zhanlan_06_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],3],[2,0,["_shadowReceivingMode"],3],[5,["_materials","0"],3,1],[5,["_mesh"],3,2]]],0]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-9,[7,"davd4Bt4NB3blVYs0NtRRA",1,[[2,"zhanlan_06_a-001",["_name"],4],[0,["_lpos"],4,[1,0,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],5],[2,0,["_shadowReceivingMode"],5],[5,["_materials","0"],5,4],[5,["_mesh"],5,5]]],3]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-10,[7,"93jUXOLRpHdLf/e5IlkA9S",1,[[2,"zhanlan_06_a-002",["_name"],6],[0,["_lpos"],6,[1,1.86,0,4.13]],[0,["_lrot"],6,[3,0,0,0,1]],[0,["_euler"],6,[1,0,0,0]],[2,1,["_shadowCastingMode"],7],[2,0,["_shadowReceivingMode"],7],[5,["_materials","0"],7,7],[5,["_mesh"],7,8]]],6]]],0,[0,-1,10,0,-2,9,0,-3,8,0,2,1,0,-1,8,0,-2,9,0,-3,10,0,2,8,0,2,9,0,2,10,0,5,1,10],[0,0,0,0,0,0,0,0,0],[3,1,1,3,1,1,3,1,1],[0,8,41,0,8,41,0,8,41]],[[[15,"Men05_a"],[18,"Men05_a",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["d4y2zovTdaaoJRElZ3SjzF"]],[1,["d4y2zovTdaaoJRElZ3SjzF"]],[1,["d4y2zovTdaaoJRElZ3SjzF"]],[3,0,{},1,[4,"d4y2zovTdaaoJRElZ3SjzF",null,null,-11,[7,"6blvlY6zVHQ7WgGWiI3xzJ",1,[[2,"zhalan_05_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],-8],[2,0,["_shadowReceivingMode"],-9],[5,["_materials","0"],-10,1]]],0]],[1,["c0UtYOaENdFZyy6UA7RCBB"]],[3,0,{},1,[4,"d4y2zovTdaaoJRElZ3SjzF",null,null,-15,[7,"772yolbAtKc7fOYTrDTnLb",1,[[2,"zhalan_05_a-001",["_name"],3],[0,["_lpos"],3,[1,0,0,4.13]],[0,["_lrot"],3,[3,0,0,0,1]],[0,["_euler"],3,[1,0,0,0]],[2,1,["_shadowCastingMode"],-12],[2,0,["_shadowReceivingMode"],-13],[5,["_materials","0"],-14,3]]],2]],[1,["c0UtYOaENdFZyy6UA7RCBB"]],[3,0,{},1,[4,"d4y2zovTdaaoJRElZ3SjzF",null,null,-19,[7,"48i1WKEp9NA5VfoUCRVQkc",1,[[2,"zhalan_05_a-002",["_name"],4],[0,["_lpos"],4,[1,1.86,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],-16],[2,0,["_shadowReceivingMode"],-17],[5,["_materials","0"],-18,5]]],4]],[1,["c0UtYOaENdFZyy6UA7RCBB"]]],0,[0,-1,9,0,-2,7,0,-3,5,0,2,1,0,-1,5,0,-2,7,0,-3,9,0,0,6,0,0,6,0,0,6,0,2,5,0,0,8,0,0,8,0,0,8,0,2,7,0,0,10,0,0,10,0,0,10,0,2,9,0,5,1,19],[0,0,0,0,0,0],[3,1,3,1,3,1],[25,9,25,9,25,9]],[[[17,".bin",1972148354,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":96672,"length":5052,"count":2526,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":96672,"count":2014,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9480433464050293,-0.643125593662262,-0.024665413424372673],"maxPosition",8,[1,1.0698601007461548,0.4093046486377716,0.3589133024215698]]],-1],0,0,[],[],[]],[[[19,"New_zhalan_08",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{"lineWidth":25},[{"baseStep":0.9,"baseFeather":0.3,"shadeStep":0.6,"shadeFeather":-0.3,"shadowCover":0},"mainColor",8,[4,4290822336],"shadeColor1",8,[4,4285624697],"shadeColor2",8,[4,4287006342],"specular",8,[4,4278190080],"mainTexture",6,0,"emissiveMap",6,1],{},{}],0,11,0,0]]],0,0,[0,0,0],[8,9,6],[86,27,24]],[[[15,"Men05_b"],[18,"Men05_b",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["c7UCQU9lVS0qSSTIa6jBNG"]],[1,["c7UCQU9lVS0qSSTIa6jBNG"]],[1,["c7UCQU9lVS0qSSTIa6jBNG"]],[3,0,{},1,[4,"c7UCQU9lVS0qSSTIa6jBNG",null,null,-11,[7,"3cHO3AC1hKNb3MelcR/n9c",1,[[2,"zhalan_05_b",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[5,["_materials","0"],-8,1],[2,1,["_shadowCastingMode"],-9],[2,0,["_shadowReceivingMode"],-10]]],0]],[1,["18ZSWJ27RXA5mb/8S3Azm1"]],[3,0,{},1,[4,"c7UCQU9lVS0qSSTIa6jBNG",null,null,-15,[7,"4b4o/ALd9Pk7B8XE48RR8E",1,[[2,"zhalan_05_b-001",["_name"],3],[0,["_lpos"],3,[1,0,0,4.13]],[0,["_lrot"],3,[3,0,0,0,1]],[0,["_euler"],3,[1,0,0,0]],[5,["_materials","0"],-12,3],[2,1,["_shadowCastingMode"],-13],[2,0,["_shadowReceivingMode"],-14]]],2]],[1,["18ZSWJ27RXA5mb/8S3Azm1"]],[3,0,{},1,[4,"c7UCQU9lVS0qSSTIa6jBNG",null,null,-19,[7,"e4g5wEOsFGjoDMlTzhWc2+",1,[[2,"zhalan_05_b-002",["_name"],4],[0,["_lpos"],4,[1,1.86,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[5,["_materials","0"],-16,5],[2,1,["_shadowCastingMode"],-17],[2,0,["_shadowReceivingMode"],-18]]],4]],[1,["18ZSWJ27RXA5mb/8S3Azm1"]]],0,[0,-1,9,0,-2,7,0,-3,5,0,2,1,0,-1,5,0,-2,7,0,-3,9,0,0,6,0,0,6,0,0,6,0,2,5,0,0,8,0,0,8,0,0,8,0,2,7,0,0,10,0,0,10,0,0,10,0,2,9,0,5,1,19],[0,0,0,0,0,0],[3,1,3,1,3,1],[42,9,42,9,42,9]],[[[17,".bin",1891671991,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":77760,"length":3372,"count":1686,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":77760,"count":1620,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9465771317481995,-0.5383027791976929,-0.006296138744801283],"maxPosition",8,[1,0.9427271485328674,0.5064343810081482,0.5440377593040466]]],-1],0,0,[],[],[]],[[[17,".bin",62965286,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":72,"count":36,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9348569512367249,-0.13764682412147522,0],"maxPosition",8,[1,0.9348569512367249,0.13764682412147522,0.9171366095542908]]],-1],0,0,[],[],[]],[[[19,"Material #213",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[8,6],[143,4]],[[[24],[20,"zhanlan_09_a",[-2],[12,"16oY9Vv+JddK539oGRK/NK",null,null,null,-1,0]],[23,"zhalan_09_a",1,[[22,-3,[6,"dfz9JygylfHIjzmZOkzi0p"],[0],[21],1]],[12,"59GNGgoBBYpJZVfz4YkRlQ",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[144,36]],[[[15,"Men10_c"],[18,"Men10_c",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-8,[7,"9ekJsc5PtOlY5FFlsdntOk",1,[[2,"zhanlan_06_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],3],[2,0,["_shadowReceivingMode"],3],[5,["_materials","0"],3,1],[5,["_mesh"],3,2]]],0]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-9,[7,"davd4Bt4NB3blVYs0NtRRA",1,[[2,"zhanlan_06_a-001",["_name"],4],[0,["_lpos"],4,[1,0,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],5],[2,0,["_shadowReceivingMode"],5],[5,["_materials","0"],5,4],[5,["_mesh"],5,5]]],3]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-10,[7,"93jUXOLRpHdLf/e5IlkA9S",1,[[2,"zhanlan_06_a-002",["_name"],6],[0,["_lpos"],6,[1,1.86,0,4.13]],[0,["_lrot"],6,[3,0,0,0,1]],[0,["_euler"],6,[1,0,0,0]],[2,1,["_shadowCastingMode"],7],[2,0,["_shadowReceivingMode"],7],[5,["_materials","0"],7,7],[5,["_mesh"],7,8]]],6]]],0,[0,-1,10,0,-2,9,0,-3,8,0,2,1,0,-1,8,0,-2,9,0,-3,10,0,2,8,0,2,9,0,2,10,0,5,1,10],[0,0,0,0,0,0,0,0,0],[3,1,1,3,1,1,3,1,1],[0,10,43,0,10,43,0,10,43]],[[[17,".bin",281316150,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8448,"length":696,"count":348,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":8448,"count":176,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9210249185562134,-0.1645948439836502,0],"maxPosition",8,[1,0.9210249185562134,0.1645948439836502,0.9145961999893188]]],-1],0,0,[],[],[]],[[[19,"Material #179",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[8,6],[145,4]],[[[24],[20,"zhalan_05_a",[-2],[12,"d4y2zovTdaaoJRElZ3SjzF",null,null,null,-1,0]],[23,"zhalan_05_a",1,[[22,-3,[6,"c0UtYOaENdFZyy6UA7RCBB"],[0],[21],1]],[12,"b6rHjDglhTuKFHy5oZo1HF",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[146,147]],[[[15,"ChuiZi"],[61,"ChuiZi",[-2],[12,"84B/b6BllDrJ+xHL6OZESC",null,null,null,-1,0],[1,0,0,1.998]],[23,"model_chuizi",1,[[33,1,0,-3,[6,"a62kk6R1RE0bgvwvB0IC3l"],[0],[21],1]],[12,"08yoiITdRD1rDXXfhtcAIr",null,null,null,1,0],[3,-0.7071068407911877,-8.3653156945392e-8,-4.117704647782568e-8,0.707106721581896],[1,-90.00000965934602,-0.000010114799910082132,0.0000034417750296896375]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[148,82]],[[[17,".bin",2869443270,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":45984,"length":2148,"count":1074,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":45984,"count":958,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9465771317481995,-0.5383027791976929,-0.006296138744801283],"maxPosition",8,[1,0.9803726077079773,0.19966301321983337,0.9171366095542908]]],-1],0,0,[],[],[]],[[[15,"Men06_a"],[18,"Men06_a",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-11,[7,"9ekJsc5PtOlY5FFlsdntOk",1,[[2,"zhanlan_06_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],-8],[2,0,["_shadowReceivingMode"],-9],[5,["_materials","0"],-10,1]]],0]],[1,["afYWuJCeVfJofWrNDAty6k"]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-15,[7,"davd4Bt4NB3blVYs0NtRRA",1,[[2,"zhanlan_06_a-001",["_name"],3],[0,["_lpos"],3,[1,0,0,4.13]],[0,["_lrot"],3,[3,0,0,0,1]],[0,["_euler"],3,[1,0,0,0]],[2,1,["_shadowCastingMode"],-12],[2,0,["_shadowReceivingMode"],-13],[5,["_materials","0"],-14,3]]],2]],[1,["afYWuJCeVfJofWrNDAty6k"]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-19,[7,"93jUXOLRpHdLf/e5IlkA9S",1,[[2,"zhanlan_06_a-002",["_name"],4],[0,["_lpos"],4,[1,1.86,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],-16],[2,0,["_shadowReceivingMode"],-17],[5,["_materials","0"],-18,5]]],4]],[1,["afYWuJCeVfJofWrNDAty6k"]]],0,[0,-1,9,0,-2,7,0,-3,5,0,2,1,0,-1,5,0,-2,7,0,-3,9,0,0,6,0,0,6,0,0,6,0,2,5,0,0,8,0,0,8,0,0,8,0,2,7,0,0,10,0,0,10,0,0,10,0,2,9,0,5,1,19],[0,0,0,0,0,0],[3,1,3,1,3,1],[0,11,0,11,0,11]],[[[19,"New_model_fangzi_02",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{},[{"baseStep":0.9,"baseFeather":0.3,"shadeStep":0.6,"shadeFeather":-0.3,"shadowCover":0},"mainColor",8,[4,4290822336],"shadeColor1",8,[4,4285624697],"shadeColor2",8,[4,4287006342],"specular",8,[4,4278190080],"mainTexture",6,0,"emissiveMap",6,1],{},{}],0,11,0,0]]],0,0,[0,0,0],[8,9,6],[149,27,24]],[[[15,"Men04_b"],[18,"Men04_b",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["f9+UWHyvlen7L1mpphFtbv"]],[1,["f9+UWHyvlen7L1mpphFtbv"]],[1,["f9+UWHyvlen7L1mpphFtbv"]],[3,0,{},1,[4,"f9+UWHyvlen7L1mpphFtbv",null,null,-8,[7,"56RW9AGzhKhqglY/tOsRSv",1,[[2,"zhalan_04_b",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[8,["_materials","0"],[1,["a1wZSQjC5VQbS9ai+P4oFM"]],1]]],0]],[3,0,{},1,[4,"f9+UWHyvlen7L1mpphFtbv",null,null,-9,[7,"5ayCmiLwVHrKx82m/yuXYv",1,[[2,"zhalan_04_b-001",["_name"],3],[0,["_lpos"],3,[1,0,0,4.13]],[0,["_lrot"],3,[3,0,0,0,1]],[0,["_euler"],3,[1,0,0,0]],[8,["_materials","0"],[1,["a1wZSQjC5VQbS9ai+P4oFM"]],3]]],2]],[3,0,{},1,[4,"f9+UWHyvlen7L1mpphFtbv",null,null,-10,[7,"1fLNK/8UFGw4SctkLXZ/nu",1,[[2,"zhalan_04_b-002",["_name"],4],[0,["_lpos"],4,[1,1.86,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[8,["_materials","0"],[1,["a1wZSQjC5VQbS9ai+P4oFM"]],5]]],4]]],0,[0,-1,7,0,-2,6,0,-3,5,0,2,1,0,-1,5,0,-2,6,0,-3,7,0,2,5,0,2,6,0,2,7,0,5,1,10],[0,0,0,0,0,0],[3,1,3,1,3,1],[44,12,44,12,44,12]],[[[24],[20,"zhalan_04_e",[-2],[12,"a5PuLsQJlQaYt+8CB5+42o",null,null,null,-1,0]],[23,"zhalan_04_e",1,[[22,-3,[6,"9d4TQ4OghWAJIiv0HwiTFI"],[0],[21],1]],[12,"69+Dhe/KtZLIHvOs8uUfAa",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[150,151]],[[[19,"Material #1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[8,6],[152,4]],[[[17,".bin",465097491,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":88416,"length":4476,"count":2238,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":88416,"count":1842,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9656937122344971,-0.42742133140563965,-0.03508274257183075],"maxPosition",8,[1,0.9753319025039673,0.43724724650382996,0.35551193356513977]]],-1],0,0,[],[],[]],[[[15,"Men07_e"],[18,"Men07_e",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-8,[7,"9ekJsc5PtOlY5FFlsdntOk",1,[[2,"zhanlan_06_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],3],[2,0,["_shadowReceivingMode"],3],[5,["_materials","0"],3,1],[5,["_mesh"],3,2]]],0]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-9,[7,"davd4Bt4NB3blVYs0NtRRA",1,[[2,"zhanlan_06_a-001",["_name"],4],[0,["_lpos"],4,[1,0,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],5],[2,0,["_shadowReceivingMode"],5],[5,["_materials","0"],5,4],[5,["_mesh"],5,5]]],3]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-10,[7,"93jUXOLRpHdLf/e5IlkA9S",1,[[2,"zhanlan_06_a-002",["_name"],6],[0,["_lpos"],6,[1,1.86,0,4.13]],[0,["_lrot"],6,[3,0,0,0,1]],[0,["_euler"],6,[1,0,0,0]],[2,1,["_shadowCastingMode"],7],[2,0,["_shadowReceivingMode"],7],[5,["_materials","0"],7,7],[5,["_mesh"],7,8]]],6]]],0,[0,-1,10,0,-2,9,0,-3,8,0,2,1,0,-1,8,0,-2,9,0,-3,10,0,2,8,0,2,9,0,2,10,0,5,1,10],[0,0,0,0,0,0,0,0,0],[3,1,1,3,1,1,3,1,1],[0,8,45,0,8,45,0,8,45]],[[[19,"_aa11猪牛羊\\objzhuM_Pig",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[6],[4]],[[[17,".bin",3901580605,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":40896,"length":1704,"count":852,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":40896,"count":852,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9480433464050293,-0.31791752576828003,-0.01243008952587843],"maxPosition",8,[1,1.0890811681747437,0.43724724650382996,0.28627684712409973]]],-1],0,0,[],[],[]],[[[24],[20,"zhalan_02_e",[-2],[12,"ceTBN6Cj5W6rqoYEpvt0+i",null,null,null,-1,0]],[23,"zhalan_02_e",1,[[22,-3,[6,"2bc0KRZtxVZrgJfYbqdygf"],[0],[21],1]],[12,"e19w9HEsxWs63fBz9mQAeV",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[153,154]],[[[19,"New_zhalan_07",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{"lineWidth":25},[{"baseStep":0.9,"baseFeather":0.3,"shadeStep":0.6,"shadeFeather":-0.3,"shadowCover":0},"mainColor",8,[4,4290822336],"shadeColor1",8,[4,4285624697],"shadeColor2",8,[4,4287006342],"specular",8,[4,4278190080],"mainTexture",6,0,"emissiveMap",6,1],{},{}],0,11,0,0]]],0,0,[0,0,0],[8,9,6],[98,27,24]],[[[15,"Men01_c"],[18,"Men01_c",[-5,-6,-7],[16,"baY6GC6LtN7Z4o5lu+orYp",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["f1ExwHZHNVA7TAsBFOrsHd"]],[1,["f1ExwHZHNVA7TAsBFOrsHd"]],[1,["f1ExwHZHNVA7TAsBFOrsHd"]],[3,0,null,1,[4,"f1ExwHZHNVA7TAsBFOrsHd",null,null,-11,[7,"b0wK1rjP5IkKUU2tQcmm5m",1,[[2,"zhalan_01_c",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],-8],[2,0,["_shadowReceivingMode"],-9],[5,["_materials","0"],-10,1]]],0]],[1,["c7tmBiuoFbH4IuZNLyhOLH"]],[3,0,null,1,[4,"f1ExwHZHNVA7TAsBFOrsHd",null,null,-15,[7,"22ivRwkH5Nq4PIuQ8BkJgS",1,[[2,"zhalan_01_c-001",["_name"],3],[0,["_lpos"],3,[1,0,0,4.13]],[0,["_lrot"],3,[3,0,0,0,1]],[0,["_euler"],3,[1,0,0,0]],[2,1,["_shadowCastingMode"],-12],[2,0,["_shadowReceivingMode"],-13],[5,["_materials","0"],-14,3]]],2]],[1,["c7tmBiuoFbH4IuZNLyhOLH"]],[3,0,null,1,[4,"f1ExwHZHNVA7TAsBFOrsHd",null,null,-19,[7,"925JKT7Z5E9rtLBn8vsabP",1,[[2,"zhalan_01_c-002",["_name"],4],[0,["_lpos"],4,[1,1.86,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],-16],[2,0,["_shadowReceivingMode"],-17],[5,["_materials","0"],-18,5]]],4]],[1,["c7tmBiuoFbH4IuZNLyhOLH"]]],0,[0,-1,9,0,-2,7,0,-3,5,0,2,1,0,-1,5,0,-2,7,0,-3,9,0,0,6,0,0,6,0,0,6,0,2,5,0,0,8,0,0,8,0,0,8,0,2,7,0,0,10,0,0,10,0,0,10,0,2,9,0,5,1,19],[0,0,0,0,0,0],[3,1,3,1,3,1],[46,1,46,1,46,1]],[[[19,"_aa11猪牛羊\\objzhuM_Pig",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[6],[4]],[[[24],[20,"zhalan_02_c",[-2],[12,"89abcTDktWI64Iko02iR6G",null,null,null,-1,0]],[23,"zhalan_02_c",1,[[22,-3,[6,"90M2fI5lpdUbAbGFsZPNCt"],[0],[21],1]],[12,"51Q6SmxGZbGprbMwntoETj",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[155,156]],[[[17,".bin",222180874,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":21696,"length":1032,"count":516,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":21696,"count":452,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9815658330917358,-0.37414637207984924,-0.009774049744009972],"maxPosition",8,[1,0.9759644865989685,0.4093046486377716,0.8859269022941589]]],-1],0,0,[],[],[]],[[[15,"Men03_d"],[18,"Men03_d",[-5,-6,-7],[16,"83YLvoWUVIwJazpNju6bCd",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["5exdgynE1adLaAcgeQMC0s"]],[1,["5exdgynE1adLaAcgeQMC0s"]],[1,["5exdgynE1adLaAcgeQMC0s"]],[3,0,null,1,[4,"5exdgynE1adLaAcgeQMC0s",null,null,-11,[7,"80h3voE9BCPIudgG4Mic8J",1,[[2,"zhalan_03_d",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[5,["_materials","0"],-8,1],[2,1,["_shadowCastingMode"],-9],[2,0,["_shadowReceivingMode"],-10]]],0]],[1,["58GGU9Wa5Y1IPE3HdkhHAJ"]],[3,0,null,1,[4,"5exdgynE1adLaAcgeQMC0s",null,null,-15,[7,"053l7immtPwb6tXM4ST1vX",1,[[2,"zhalan_03_d-001",["_name"],3],[0,["_lpos"],3,[1,0,0,4.13]],[0,["_lrot"],3,[3,0,0,0,1]],[0,["_euler"],3,[1,0,0,0]],[5,["_materials","0"],-12,3],[2,1,["_shadowCastingMode"],-13],[2,0,["_shadowReceivingMode"],-14]]],2]],[1,["58GGU9Wa5Y1IPE3HdkhHAJ"]],[3,0,null,1,[4,"5exdgynE1adLaAcgeQMC0s",null,null,-19,[7,"caFksUGzdO35VhianHj9A6",1,[[2,"zhalan_03_d-002",["_name"],4],[0,["_lpos"],4,[1,1.86,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[5,["_materials","0"],-16,5],[2,1,["_shadowCastingMode"],-17],[2,0,["_shadowReceivingMode"],-18]]],4]],[1,["58GGU9Wa5Y1IPE3HdkhHAJ"]]],0,[0,-1,9,0,-2,7,0,-3,5,0,2,1,0,-1,5,0,-2,7,0,-3,9,0,0,6,0,0,6,0,0,6,0,2,5,0,0,8,0,0,8,0,0,8,0,2,7,0,0,10,0,0,10,0,0,10,0,2,9,0,5,1,19],[0,0,0,0,0,0],[3,1,3,1,3,1],[47,3,47,3,47,3]],[[[15,"Men06_b"],[18,"Men06_b",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-8,[7,"9ekJsc5PtOlY5FFlsdntOk",1,[[2,"zhanlan_06_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],3],[2,0,["_shadowReceivingMode"],3],[5,["_materials","0"],3,1],[5,["_mesh"],3,2]]],0]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-9,[7,"davd4Bt4NB3blVYs0NtRRA",1,[[2,"zhanlan_06_a-001",["_name"],4],[0,["_lpos"],4,[1,0,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],5],[2,0,["_shadowReceivingMode"],5],[5,["_materials","0"],5,4],[5,["_mesh"],5,5]]],3]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-10,[7,"93jUXOLRpHdLf/e5IlkA9S",1,[[2,"zhanlan_06_a-002",["_name"],6],[0,["_lpos"],6,[1,1.86,0,4.13]],[0,["_lrot"],6,[3,0,0,0,1]],[0,["_euler"],6,[1,0,0,0]],[2,1,["_shadowCastingMode"],7],[2,0,["_shadowReceivingMode"],7],[5,["_materials","0"],7,7],[5,["_mesh"],7,8]]],6]]],0,[0,-1,10,0,-2,9,0,-3,8,0,2,1,0,-1,8,0,-2,9,0,-3,10,0,2,8,0,2,9,0,2,10,0,5,1,10],[0,0,0,0,0,0,0,0,0],[3,1,1,3,1,1,3,1,1],[0,11,48,0,11,48,0,11,48]],[[[17,".bin",584469506,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":47424,"length":3756,"count":1878,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":47424,"count":988,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9461026787757874,-0.5963388085365295,-0.029316388070583344],"maxPosition",8,[1,0.8538022041320801,0.24063044786453247,0.9938458800315857]]],-1],0,0,[],[],[]],[[[15,"Men02_e"],[18,"Men02_e",[-5,-6,-7],[16,"44SiDVKK5OMLxY6A4vp4Wz",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["ceTBN6Cj5W6rqoYEpvt0+i"]],[1,["ceTBN6Cj5W6rqoYEpvt0+i"]],[1,["ceTBN6Cj5W6rqoYEpvt0+i"]],[3,0,null,1,[4,"ceTBN6Cj5W6rqoYEpvt0+i",null,null,-11,[7,"c1f+K5aG1OQZ2F6vmgyXZl",1,[[2,"zhalan_02_e",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],-8],[2,0,["_shadowReceivingMode"],-9],[5,["_materials","0"],-10,1]]],0]],[1,["2bc0KRZtxVZrgJfYbqdygf"]],[3,0,null,1,[4,"ceTBN6Cj5W6rqoYEpvt0+i",null,null,-15,[7,"e79eDeIMVFlqhAMe3nnr91",1,[[2,"zhalan_02_e-001",["_name"],3],[0,["_lpos"],3,[1,0,0,4.13]],[0,["_lrot"],3,[3,0,0,0,1]],[0,["_euler"],3,[1,0,0,0]],[2,1,["_shadowCastingMode"],-12],[2,0,["_shadowReceivingMode"],-13],[5,["_materials","0"],-14,3]]],2]],[1,["2bc0KRZtxVZrgJfYbqdygf"]],[3,0,null,1,[4,"ceTBN6Cj5W6rqoYEpvt0+i",null,null,-19,[7,"0eKzG2sZhKfJ4XGBxl+RZt",1,[[2,"zhalan_02_e-002",["_name"],4],[0,["_lpos"],4,[1,1.86,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],-16],[2,0,["_shadowReceivingMode"],-17],[5,["_materials","0"],-18,5]]],4]],[1,["2bc0KRZtxVZrgJfYbqdygf"]]],0,[0,-1,9,0,-2,7,0,-3,5,0,2,1,0,-1,5,0,-2,7,0,-3,9,0,0,6,0,0,6,0,0,6,0,2,5,0,0,8,0,0,8,0,0,8,0,2,7,0,0,10,0,0,10,0,0,10,0,2,9,0,5,1,19],[0,0,0,0,0,0],[3,1,3,1,3,1],[49,1,49,1,49,1]],[[[17,".bin",1008773606,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7200,"length":480,"count":240,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":7200,"count":150,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.543423056602478,-1.2569148540496826,5.692243476573822e-8],"maxPosition",8,[1,1.576908826828003,1.2569148540496826,2.120565414428711]]],-1],0,0,[],[],[]],[[[17,".bin",2032253771,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":72,"count":36,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.010190353728830814,-0.032679442316293716,-0.5153347253799438],"maxPosition",8,[1,0.5279674530029297,0.032679442316293716,0.5153347253799438]]],-1],0,0,[],[],[]],[[[17,".bin",773669310,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":72,"count":36,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5192103981971741,-0.032679442316293716,-0.5153347253799438],"maxPosition",8,[1,-0.001433296245522797,0.032679442316293716,0.5153347253799438]]],-1],0,0,[],[],[]],[[[17,".bin",1640807799,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":72,"count":36,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.0012389755574986339,-0.04151756316423416,-0.7353367805480957],"maxPosition",8,[1,1.1422051191329956,0.04151756316423416,0.7353367805480957]]],-1],0,0,[],[],[]],[[[19,"Material #311",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[8,6],[157,4]],[[[24],[20,"fangzi05",[-2],[12,"abJWVDwvlRk7cz1QQV5O/o",null,null,null,-1,0]],[45,"model_fangzi_05",1,[-4],[[22,-3,[6,"d1GXv0CppQcoSPsKJZj8bD"],[2],[21],3]],[12,"e9udTzEL9Uir5CqEamAGi1",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[41,"model_fangzi_05_door",2,[[22,-5,[6,"600U23ufRYB6GBBkrHhYFm"],[0],[21],1]],[12,"50ZSykv7RfP6tvMD6F+oSf",null,null,null,1,0],[1,-0.5717220306396484,-1.275667667388916,0.7353368997573853]]],0,[0,2,1,0,-1,2,0,4,2,0,-1,3,0,4,3,0,5,1,5],[0,0,0,0],[-1,7,-1,7],[99,158,99,159]],[[[17,".bin",3846498384,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":18768,"length":1488,"count":744,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":18768,"count":391,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.2257072925567627,-1.370087742805481,-1.3218408412285498e-7],"maxPosition",8,[1,2.2257072925567627,1.3700882196426392,5.0417351722717285]]],-1],0,0,[],[],[]],[[[17,".bin",2168982058,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":69792,"length":4716,"count":2358,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":69792,"count":1454,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9041078090667725,-0.5963388085365295,-0.029316388070583344],"maxPosition",8,[1,0.8538022041320801,0.3533547520637512,0.7348652482032776]]],-1],0,0,[],[],[]],[[[15,"Men07_d"],[18,"Men07_d",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-8,[7,"9ekJsc5PtOlY5FFlsdntOk",1,[[2,"zhanlan_06_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],3],[2,0,["_shadowReceivingMode"],3],[5,["_materials","0"],3,1],[5,["_mesh"],3,2]]],0]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-9,[7,"davd4Bt4NB3blVYs0NtRRA",1,[[2,"zhanlan_06_a-001",["_name"],4],[0,["_lpos"],4,[1,0,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],5],[2,0,["_shadowReceivingMode"],5],[5,["_materials","0"],5,4],[5,["_mesh"],5,5]]],3]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-10,[7,"93jUXOLRpHdLf/e5IlkA9S",1,[[2,"zhanlan_06_a-002",["_name"],6],[0,["_lpos"],6,[1,1.86,0,4.13]],[0,["_lrot"],6,[3,0,0,0,1]],[0,["_euler"],6,[1,0,0,0]],[2,1,["_shadowCastingMode"],7],[2,0,["_shadowReceivingMode"],7],[5,["_materials","0"],7,7],[5,["_mesh"],7,8]]],6]]],0,[0,-1,10,0,-2,9,0,-3,8,0,2,1,0,-1,8,0,-2,9,0,-3,10,0,2,8,0,2,9,0,2,10,0,5,1,10],[0,0,0,0,0,0,0,0,0],[3,1,1,3,1,1,3,1,1],[0,8,50,0,8,50,0,8,50]],[[[19,"New_model_fangzi_01",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{},[{"baseStep":0.9,"baseFeather":0.3,"shadeStep":0.6,"shadeFeather":-0.3,"shadowCover":0},"mainColor",8,[4,4290822336],"shadeColor1",8,[4,4285624697],"shadeColor2",8,[4,4287006342],"specular",8,[4,4278190080],"mainTexture",6,0,"emissiveMap",6,1],{},{}],0,11,0,0]]],0,0,[0,0,0],[8,9,6],[160,27,24]],[[[19,"New_model_fangzi_04",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{},[{"baseStep":0.9,"baseFeather":0.3,"shadeStep":0.6,"shadeFeather":-0.3,"shadowCover":0},"mainColor",8,[4,4290822336],"shadeColor1",8,[4,4285624697],"shadeColor2",8,[4,4287006342],"specular",8,[4,4278190080],"mainTexture",6,0,"emissiveMap",6,1],{},{}],0,11,0,0]]],0,0,[0,0,0],[8,9,6],[100,27,24]],[[[17,".bin",2730078481,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":24816,"length":1500,"count":750,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":24816,"count":517,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9394773840904236,-0.2876381576061249,-0.023100165650248528],"maxPosition",8,[1,0.9232850670814514,0.4093046486377716,0.9300007820129395]]],-1],0,0,[],[],[]],[[[17,".bin",2079991354,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2592,"length":264,"count":132,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":2592,"count":54,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.17671018838882446,-0.11752718687057495,-0.133140429854393],"maxPosition",8,[1,0.17671048641204834,0.11752734333276749,0.3997121751308441]]],-1],0,0,[],[],[]],[[[17,".bin",3203125852,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27888,"length":1740,"count":870,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":27888,"count":581,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9442005753517151,-0.47730958461761475,-0.031445108354091644],"maxPosition",8,[1,0.9442007541656494,0.3035227656364441,1.0209487676620483]]],-1],0,0,[],[],[]],[[[19,"Material #179",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[8,6],[161,4]],[[[17,".bin",4045329098,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":21792,"length":1428,"count":714,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":21792,"count":454,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9466809630393982,-0.3343130052089691,-0.01394372433423996],"maxPosition",8,[1,0.9616844058036804,0.3167673945426941,0.9285399913787842]]],-1],0,0,[],[],[]],[[[24],[20,"zhalan_05_b",[-2],[12,"c7UCQU9lVS0qSSTIa6jBNG",null,null,null,-1,0]],[23,"zhalan_05_b",1,[[22,-3,[6,"18ZSWJ27RXA5mb/8S3Azm1"],[0],[21],1]],[12,"74fXzny79V/JnUrw55zLvI",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[162,163]],[[[17,".bin",2771774401,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":22560,"length":2184,"count":1092,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":22560,"count":470,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9628222584724426,-0.1399526745080948,2.3841858265427618e-8],"maxPosition",8,[1,0.9628221392631531,0.13995268940925598,0.9403678774833679]]],-1],0,0,[],[],[]],[[[19,"21 - Default",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":1.9999998807907104,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[6],[4]],[[[24],[20,"zhanlan_08_a",[-2],[12,"e7ghOZA45RcoEOtHWTiB2y",null,null,null,-1,0]],[23,"zhanlan_08_a",1,[[22,-3,[6,"96WMc0CRRReJabzDxicy9z"],[0],[21],1]],[12,"81dFLuAkVZ+rH8kDvoUfE/",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[164,35]],[[[19,"New_zhalan_02",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{"lineWidth":25},[{"baseStep":0.9,"baseFeather":0.3,"shadeStep":0.6,"shadeFeather":-0.3,"shadowCover":0},"mainColor",8,[4,4290822336],"shadeColor1",8,[4,4285624697],"shadeColor2",8,[4,4287006342],"specular",8,[4,4278190080],"mainTexture",6,0,"emissiveMap",6,1],{},{}],0,11,0,0]]],0,0,[0,0,0],[8,9,6],[101,27,24]],[[[17,".bin",1174055644,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":33168,"length":3024,"count":1512,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":33168,"count":691,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.930133581161499,-0.2261335253715515,0],"maxPosition",8,[1,0.9301335215568542,0.2261335253715515,1.0304120779037476]]],-1],0,0,[],[],[]],[[[19,"Material #209",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[8,6],[165,4]],[[[24],[20,"zhalan_07_a",[-2],[12,"a0c93u1slRvJv+EmeLgy75",null,null,null,-1,0]],[23,"zhalan_07_a",1,[[22,-3,[6,"cffCiody5UT6pdhU9Gy+sB"],[0],[21],1]],[12,"1bXu6EUo1YAaIyNaG3s0QL",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[166,37]],[[[15,"homezhalan07"],[20,"homezhalan07",[-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27],[16,"f5Crz/W5xCRpcO8MeMlG+z",null,null,-14,0,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[3,0,null,1,[4,"e7ghOZA45RcoEOtHWTiB2y",null,null,-37,[13,"77+9rN6HpL+r51T23dcwWE",1,[[9,[1,["e7ghOZA45RcoEOtHWTiB2y"]],[[10,-35,[6,"546Wo+NERNKrT4ssTLC/Il"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-36,[6,"a8CzWFyUNN2Kg/jm8KI8gX"]]]]],[[2,"zhanlan_08_a",["_name"],-28],[0,["_lpos"],-29,[1,3,0,1.429]],[0,["_lrot"],-30,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-31,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-32],[2,0,["_shadowReceivingMode"],-33],[5,["_materials","0"],-34,1]]],0]],[3,0,null,1,[4,"e7ghOZA45RcoEOtHWTiB2y",null,null,-47,[13,"addiU+zxdGu6NmuxEOwXzr",1,[[9,[1,["e7ghOZA45RcoEOtHWTiB2y"]],[[10,-45,[6,"37Odnu7EpMSpPt+/UU6xQV"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-46,[6,"a9ZRMHRSdHaL8nZlV0rgGs"]]]]],[[2,"zhanlan_08_a-001",["_name"],-38],[0,["_lpos"],-39,[1,3,0,-0.486]],[0,["_lrot"],-40,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-41,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-42],[2,0,["_shadowReceivingMode"],-43],[5,["_materials","0"],-44,3]]],2]],[3,0,null,1,[4,"e7ghOZA45RcoEOtHWTiB2y",null,null,-57,[13,"5enQUm/sZBAaiZnlwpBM+h",1,[[9,[1,["e7ghOZA45RcoEOtHWTiB2y"]],[[10,-55,[6,"95kd2CIMFABqgReqdz1vZD"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-56,[6,"b94IpT5zhPIamAGL8KpAIJ"]]]]],[[2,"zhanlan_08_a-002",["_name"],-48],[0,["_lpos"],-49,[1,3,0,-2.388]],[0,["_lrot"],-50,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-51,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-52],[2,0,["_shadowReceivingMode"],-53],[5,["_materials","0"],-54,5]]],4]],[3,0,null,1,[4,"e7ghOZA45RcoEOtHWTiB2y",null,null,-67,[13,"cfHC8UVB5CMJD4AGvqNcwv",1,[[9,[1,["e7ghOZA45RcoEOtHWTiB2y"]],[[10,-65,[6,"fcdFsCKUxP+oML6EntU/27"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-66,[6,"98wczqeB5PMKza67tfQ/qy"]]]]],[[2,"zhanlan_08_a-003",["_name"],-58],[0,["_lpos"],-59,[1,3,0,-4.29]],[0,["_lrot"],-60,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-61,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-62],[2,0,["_shadowReceivingMode"],-63],[5,["_materials","0"],-64,7]]],6]],[3,0,null,1,[4,"e7ghOZA45RcoEOtHWTiB2y",null,null,-77,[13,"6f36tr9FNPeZ/G/yay49KS",1,[[9,[1,["e7ghOZA45RcoEOtHWTiB2y"]],[[10,-75,[6,"96ZWNYTTJD44qEZAKjj8SH"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-76,[6,"3bvd+J73lHwbBn3XXslHh1"]]]]],[[2,"zhanlan_08_a-004",["_name"],-68],[0,["_lpos"],-69,[1,-3,0,-0.486]],[0,["_lrot"],-70,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-71,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-72],[2,0,["_shadowReceivingMode"],-73],[5,["_materials","0"],-74,9]]],8]],[3,0,null,1,[4,"e7ghOZA45RcoEOtHWTiB2y",null,null,-87,[13,"d2b+XCIVZACYuzBwW8TYCG",1,[[9,[1,["e7ghOZA45RcoEOtHWTiB2y"]],[[10,-85,[6,"b8iXay21RE9Kd8bsdAqyFi"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-86,[6,"4eiaV0d/ZMV6kICoj5B3ke"]]]]],[[2,"zhanlan_08_a-005",["_name"],-78],[0,["_lpos"],-79,[1,-3,0,-2.388]],[0,["_lrot"],-80,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-81,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-82],[2,0,["_shadowReceivingMode"],-83],[5,["_materials","0"],-84,11]]],10]],[3,0,null,1,[4,"e7ghOZA45RcoEOtHWTiB2y",null,null,-97,[13,"f12zHMOBNFkKQOtNAIiz+Y",1,[[9,[1,["e7ghOZA45RcoEOtHWTiB2y"]],[[10,-95,[6,"28bduEDbZAKoHQw9AYpogS"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-96,[6,"9akLPt4z1FGpHt0Z83luAY"]]]]],[[2,"zhanlan_08_a-006",["_name"],-88],[0,["_lpos"],-89,[1,-3,0,-4.29]],[0,["_lrot"],-90,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-91,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-92],[2,0,["_shadowReceivingMode"],-93],[5,["_materials","0"],-94,13]]],12]],[3,0,null,1,[4,"e7ghOZA45RcoEOtHWTiB2y",null,null,-107,[13,"3ccDdJZPVDc55/hdAoWrbb",1,[[9,[1,["e7ghOZA45RcoEOtHWTiB2y"]],[[10,-105,[6,"b1Jo8rbxRGK4kkGPfprYG4"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-106,[6,"fdX9/3uI1CErkITivtbP6I"]]]]],[[2,"zhanlan_08_a-007",["_name"],-98],[0,["_lpos"],-99,[1,-3,0,1.429]],[0,["_lrot"],-100,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-101,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-102],[2,0,["_shadowReceivingMode"],-103],[5,["_materials","0"],-104,15]]],14]],[3,0,null,1,[4,"e7ghOZA45RcoEOtHWTiB2y",null,null,-117,[13,"68aYImQjZCibfwjVexZvOW",1,[[9,[1,["e7ghOZA45RcoEOtHWTiB2y"]],[[10,-115,[6,"3bC1WkQkpDuoUoTUq2VFnb"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-116,[6,"a2WAolUzBPlr+eC9PXBCO/"]]]]],[[2,"zhanlan_08_a-008",["_name"],-108],[0,["_lpos"],-109,[1,1.86,0,-5.122]],[0,["_lrot"],-110,[3,0,0,0,1]],[0,["_euler"],-111,[1,0,0,0]],[2,1,["_shadowCastingMode"],-112],[2,0,["_shadowReceivingMode"],-113],[5,["_materials","0"],-114,17]]],16]],[3,0,null,1,[4,"e7ghOZA45RcoEOtHWTiB2y",null,null,-127,[13,"63FtW6ikRMwJQfgkb1Bdrp",1,[[9,[1,["e7ghOZA45RcoEOtHWTiB2y"]],[[10,-125,[6,"1d3tW/YWBNqJcsqusin7ji"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-126,[6,"a1dyUWab5NY7Kt67BqIlS1"]]]]],[[2,"zhanlan_08_a-009",["_name"],-118],[0,["_lpos"],-119,[1,0,0,-5.122]],[0,["_lrot"],-120,[3,0,0,0,1]],[0,["_euler"],-121,[1,0,0,0]],[2,1,["_shadowCastingMode"],-122],[2,0,["_shadowReceivingMode"],-123],[5,["_materials","0"],-124,19]]],18]],[3,0,null,1,[4,"e7ghOZA45RcoEOtHWTiB2y",null,null,-137,[13,"88PucTS7NDarn68Bi0MXQb",1,[[9,[1,["e7ghOZA45RcoEOtHWTiB2y"]],[[10,-135,[6,"6dCnL3/05Ohr+rB45TOwAd"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-136,[6,"cdn7ofF0xF/b+KGZZ6879W"]]]]],[[2,"zhanlan_08_a-010",["_name"],-128],[0,["_lpos"],-129,[1,-1.86,0,-5.122]],[0,["_lrot"],-130,[3,0,0,0,1]],[0,["_euler"],-131,[1,0,0,0]],[2,1,["_shadowCastingMode"],-132],[2,0,["_shadowReceivingMode"],-133],[5,["_materials","0"],-134,21]]],20]],[3,0,null,1,[4,"e7ghOZA45RcoEOtHWTiB2y",null,null,-147,[13,"6cfuIiyIdMSYsNznEbdbqF",1,[[9,[1,["e7ghOZA45RcoEOtHWTiB2y"]],[[10,-145,[6,"65UvD/LEhNK5IAiM+DufF4"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-146,[6,"b3VDiFs61GLII+BMJ2eyJ/"]]]]],[[2,"zhanlan_08_a-011",["_name"],-138],[0,["_lpos"],-139,[1,3,0,3.316]],[0,["_lrot"],-140,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-141,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-142],[2,0,["_shadowReceivingMode"],-143],[5,["_materials","0"],-144,23]]],22]],[3,0,null,1,[4,"e7ghOZA45RcoEOtHWTiB2y",null,null,-157,[13,"87bWqV2xFKZY+M7+Pdc4L1",1,[[9,[1,["e7ghOZA45RcoEOtHWTiB2y"]],[[10,-155,[6,"1fF6xDbgFPwqeOY3MSbKev"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-156,[6,"b9gnptbptPk51XIb+FmHza"]]]]],[[2,"zhanlan_08_a-012",["_name"],-148],[0,["_lpos"],-149,[1,-3,0,3.316]],[0,["_lrot"],-150,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-151,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-152],[2,0,["_shadowReceivingMode"],-153],[5,["_materials","0"],-154,25]]],24]],[1,["e7ghOZA45RcoEOtHWTiB2y"]],[1,["e7ghOZA45RcoEOtHWTiB2y"]],[1,["e7ghOZA45RcoEOtHWTiB2y"]],[1,["e7ghOZA45RcoEOtHWTiB2y"]],[1,["e7ghOZA45RcoEOtHWTiB2y"]],[1,["e7ghOZA45RcoEOtHWTiB2y"]],[1,["e7ghOZA45RcoEOtHWTiB2y"]],[1,["e7ghOZA45RcoEOtHWTiB2y"]],[1,["e7ghOZA45RcoEOtHWTiB2y"]],[1,["e7ghOZA45RcoEOtHWTiB2y"]],[1,["e7ghOZA45RcoEOtHWTiB2y"]],[1,["e7ghOZA45RcoEOtHWTiB2y"]],[1,["e7ghOZA45RcoEOtHWTiB2y"]],[1,["96WMc0CRRReJabzDxicy9z"]],[1,["96WMc0CRRReJabzDxicy9z"]],[1,["96WMc0CRRReJabzDxicy9z"]],[1,["96WMc0CRRReJabzDxicy9z"]],[1,["96WMc0CRRReJabzDxicy9z"]],[1,["96WMc0CRRReJabzDxicy9z"]],[1,["96WMc0CRRReJabzDxicy9z"]],[1,["96WMc0CRRReJabzDxicy9z"]],[1,["96WMc0CRRReJabzDxicy9z"]],[1,["96WMc0CRRReJabzDxicy9z"]],[1,["96WMc0CRRReJabzDxicy9z"]],[1,["96WMc0CRRReJabzDxicy9z"]],[1,["96WMc0CRRReJabzDxicy9z"]]],0,[0,-1,14,0,-2,13,0,-3,12,0,-4,11,0,-5,10,0,-6,9,0,-7,8,0,-8,7,0,-9,6,0,-10,5,0,-11,4,0,-12,3,0,-13,2,0,2,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,-5,6,0,-6,7,0,-7,8,0,-8,9,0,-9,10,0,-10,11,0,-11,12,0,-12,13,0,-13,14,0,0,15,0,0,15,0,0,15,0,0,15,0,0,28,0,0,28,0,0,28,0,4,2,0,4,2,0,2,2,0,0,16,0,0,16,0,0,16,0,0,16,0,0,29,0,0,29,0,0,29,0,4,3,0,4,3,0,2,3,0,0,17,0,0,17,0,0,17,0,0,17,0,0,30,0,0,30,0,0,30,0,4,4,0,4,4,0,2,4,0,0,18,0,0,18,0,0,18,0,0,18,0,0,31,0,0,31,0,0,31,0,4,5,0,4,5,0,2,5,0,0,19,0,0,19,0,0,19,0,0,19,0,0,32,0,0,32,0,0,32,0,4,6,0,4,6,0,2,6,0,0,20,0,0,20,0,0,20,0,0,20,0,0,33,0,0,33,0,0,33,0,4,7,0,4,7,0,2,7,0,0,21,0,0,21,0,0,21,0,0,21,0,0,34,0,0,34,0,0,34,0,4,8,0,4,8,0,2,8,0,0,22,0,0,22,0,0,22,0,0,22,0,0,35,0,0,35,0,0,35,0,4,9,0,4,9,0,2,9,0,0,23,0,0,23,0,0,23,0,0,23,0,0,36,0,0,36,0,0,36,0,4,10,0,4,10,0,2,10,0,0,24,0,0,24,0,0,24,0,0,24,0,0,37,0,0,37,0,0,37,0,4,11,0,4,11,0,2,11,0,0,25,0,0,25,0,0,25,0,0,25,0,0,38,0,0,38,0,0,38,0,4,12,0,4,12,0,2,12,0,0,26,0,0,26,0,0,26,0,0,26,0,0,39,0,0,39,0,0,39,0,4,13,0,4,13,0,2,13,0,0,27,0,0,27,0,0,27,0,0,27,0,0,40,0,0,40,0,0,40,0,4,14,0,4,14,0,2,14,0,5,1,157],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1],[28,7,28,7,28,7,28,7,28,7,28,7,28,7,28,7,28,7,28,7,28,7,28,7,28,7]],[[[17,".bin",1867360723,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3888,"length":240,"count":120,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":3888,"count":81,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.1376208066940308,-0.031828153878450394,-0.7268924713134766],"maxPosition",8,[1,-0.002435836708173156,0.031828153878450394,0.7268924117088318]]],-1],0,0,[],[],[]],[[[19,"Material #310",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[8,6],[167,4]],[[[17,".bin",3782553851,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":40320,"length":2694,"count":1347,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":40320,"count":840,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.1164281368255615,-1.6912736892700195,0.004636459518224001],"maxPosition",8,[1,2.1164281368255615,1.691272258758545,4.171549320220947]]],-1],0,0,[],[],[]],[[[24],[20,"fangzi04",[-2],[12,"b9TNoeKHtctL5oNg+fG7fi",null,null,null,-1,0]],[45,"model_fangzi_04",1,[-4],[[22,-3,[6,"38Bjqc4IZX34+L49bFqrjt"],[2],[21],3]],[12,"25o3pxEO9dnJiVVPMEpEpA",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[41,"model_fangzi_04_door",2,[[22,-5,[6,"89LzGL4EpSPap64ovqDyEQ"],[0],[21],1]],[12,"beWToG+iJdA6b5al0UPU72",null,null,null,1,0],[1,0.5750293731689453,-1.29616117477417,0.7315290570259094]]],0,[0,2,1,0,-1,2,0,4,2,0,-1,3,0,4,3,0,5,1,5],[0,0,0,0],[-1,7,-1,7],[102,168,102,169]],[[[15,"Men03_b"],[18,"Men03_b",[-5,-6,-7],[16,"74Q/+eW7pBZb4pv7SQdvyV",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["48bkQEunpQQa6Yc62O21+M"]],[1,["48bkQEunpQQa6Yc62O21+M"]],[1,["48bkQEunpQQa6Yc62O21+M"]],[3,0,null,1,[4,"48bkQEunpQQa6Yc62O21+M",null,null,-11,[7,"c87iyx+DxKx6nJk2NEn7p5",1,[[2,"zhalan_03_b",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],-8],[2,0,["_shadowReceivingMode"],-9],[5,["_materials","0"],-10,1]]],0]],[1,["a0Z33SV9hZf4umhR0sEIOw"]],[3,0,null,1,[4,"48bkQEunpQQa6Yc62O21+M",null,null,-15,[7,"a4xZml1EdFaoRjw/EgUI0l",1,[[2,"zhalan_03_b-001",["_name"],3],[0,["_lpos"],3,[1,0,0,4.13]],[0,["_lrot"],3,[3,0,0,0,1]],[0,["_euler"],3,[1,0,0,0]],[2,1,["_shadowCastingMode"],-12],[2,0,["_shadowReceivingMode"],-13],[5,["_materials","0"],-14,3]]],2]],[1,["a0Z33SV9hZf4umhR0sEIOw"]],[3,0,null,1,[4,"48bkQEunpQQa6Yc62O21+M",null,null,-19,[7,"bdiXeF1OpJcI9sYbI1Ka0j",1,[[2,"zhalan_03_b-002",["_name"],4],[0,["_lpos"],4,[1,1.86,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],-16],[2,0,["_shadowReceivingMode"],-17],[5,["_materials","0"],-18,5]]],4]],[1,["a0Z33SV9hZf4umhR0sEIOw"]]],0,[0,-1,9,0,-2,7,0,-3,5,0,2,1,0,-1,5,0,-2,7,0,-3,9,0,0,6,0,0,6,0,0,6,0,2,5,0,0,8,0,0,8,0,0,8,0,2,7,0,0,10,0,0,10,0,0,10,0,2,9,0,5,1,19],[0,0,0,0,0,0],[3,1,3,1,3,1],[51,3,51,3,51,3]],[[[17,".bin",3591342860,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":81456,"length":4020,"count":2010,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":81456,"count":1697,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9480456709861755,-0.5948740243911743,-0.031445108354091644],"maxPosition",8,[1,0.9442007541656494,0.3035227954387665,0.5598769187927246]]],-1],0,0,[],[],[]],[[[32,"zhalan_07",[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_1ST_SHADE_MAP":true,"SHADE_MAP_1_AS_SHADE_MAP_2":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{"rasterizerState":{"polygonMode":2,"lineWidth":0},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},[{"rasterizerState":{"depthBias":1.9,"depthBiasClamp":-2.4,"lineWidth":5.2},"depthStencilState":{}},"blendState",11,[{"targets":[{}]},"blendColor",8,[4,4292072403]]],{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],0,0,11,0],[[[{"lineWidth":25},"baseColor",8,[4,4279637526]],[{"baseStep":1.9,"baseFeather":0.2,"shadeStep":2.6,"shadeFeather":2.101,"shadowCover":0.622},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4294967295],"shadeColor2",8,[4,4283058766],"specular",8,[4,1275068416],"shadeMap1",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[12,6],[98,32]],[[[17,".bin",1205814434,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":36720,"length":3228,"count":1614,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":36720,"count":765,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9461026787757874,-0.2451358437538147,-0.029316388070583344],"maxPosition",8,[1,0.9485872387886047,0.24513667821884155,1.050154209136963]]],-1],0,0,[],[],[]],[[[15,"Men07_a"],[18,"Men07_a",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-8,[7,"9ekJsc5PtOlY5FFlsdntOk",1,[[2,"zhanlan_06_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],3],[2,0,["_shadowReceivingMode"],3],[5,["_materials","0"],3,1],[5,["_mesh"],3,2]]],0]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-9,[7,"davd4Bt4NB3blVYs0NtRRA",1,[[2,"zhanlan_06_a-001",["_name"],4],[0,["_lpos"],4,[1,0,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],5],[2,0,["_shadowReceivingMode"],5],[5,["_materials","0"],5,4],[5,["_mesh"],5,5]]],3]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-10,[7,"93jUXOLRpHdLf/e5IlkA9S",1,[[2,"zhanlan_06_a-002",["_name"],6],[0,["_lpos"],6,[1,1.86,0,4.13]],[0,["_lrot"],6,[3,0,0,0,1]],[0,["_euler"],6,[1,0,0,0]],[2,1,["_shadowCastingMode"],7],[2,0,["_shadowReceivingMode"],7],[5,["_materials","0"],7,7],[5,["_mesh"],7,8]]],6]]],0,[0,-1,10,0,-2,9,0,-3,8,0,2,1,0,-1,8,0,-2,9,0,-3,10,0,2,8,0,2,9,0,2,10,0,5,1,10],[0,0,0,0,0,0,0,0,0],[3,1,1,3,1,1,3,1,1],[0,8,37,0,8,37,0,8,37]],[[[15,"Men10_b"],[18,"Men10_b",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-8,[7,"9ekJsc5PtOlY5FFlsdntOk",1,[[2,"zhanlan_06_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],3],[2,0,["_shadowReceivingMode"],3],[5,["_materials","0"],3,1],[5,["_mesh"],3,2]]],0]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-9,[7,"davd4Bt4NB3blVYs0NtRRA",1,[[2,"zhanlan_06_a-001",["_name"],4],[0,["_lpos"],4,[1,0,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],5],[2,0,["_shadowReceivingMode"],5],[5,["_materials","0"],5,4],[5,["_mesh"],5,5]]],3]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-10,[7,"93jUXOLRpHdLf/e5IlkA9S",1,[[2,"zhanlan_06_a-002",["_name"],6],[0,["_lpos"],6,[1,1.86,0,4.13]],[0,["_lrot"],6,[3,0,0,0,1]],[0,["_euler"],6,[1,0,0,0]],[2,1,["_shadowCastingMode"],7],[2,0,["_shadowReceivingMode"],7],[5,["_materials","0"],7,7],[5,["_mesh"],7,8]]],6]]],0,[0,-1,10,0,-2,9,0,-3,8,0,2,1,0,-1,8,0,-2,9,0,-3,10,0,2,8,0,2,9,0,2,10,0,5,1,10],[0,0,0,0,0,0,0,0,0],[3,1,1,3,1,1,3,1,1],[0,10,52,0,10,52,0,10,52]],[[[15,"Men02_b"],[18,"Men02_b",[-5,-6,-7],[16,"5fWtOn69xABruBopjqLYYp",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["f6JaaY2oRcPYbaFzdlYz+9"]],[1,["f6JaaY2oRcPYbaFzdlYz+9"]],[1,["f6JaaY2oRcPYbaFzdlYz+9"]],[3,0,null,1,[4,"f6JaaY2oRcPYbaFzdlYz+9",null,null,-11,[7,"00b2Pl4y1B0aHQkIWdKkBw",1,[[2,"zhalan_02_b",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],-8],[2,0,["_shadowReceivingMode"],-9],[5,["_materials","0"],-10,1]]],0]],[1,["5aYFgI82pSLL8wV8GdmS7H"]],[3,0,null,1,[4,"f6JaaY2oRcPYbaFzdlYz+9",null,null,-15,[7,"b5v/shjBdKkopxcqHMzkp2",1,[[2,"zhalan_02_b-001",["_name"],3],[0,["_lpos"],3,[1,0,0,4.13]],[0,["_lrot"],3,[3,0,0,0,1]],[0,["_euler"],3,[1,0,0,0]],[2,1,["_shadowCastingMode"],-12],[2,0,["_shadowReceivingMode"],-13],[5,["_materials","0"],-14,3]]],2]],[1,["5aYFgI82pSLL8wV8GdmS7H"]],[3,0,null,1,[4,"f6JaaY2oRcPYbaFzdlYz+9",null,null,-19,[7,"8ai33i5k9E55EN72MaFxmy",1,[[2,"zhalan_02_b-002",["_name"],4],[0,["_lpos"],4,[1,1.86,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],-16],[2,0,["_shadowReceivingMode"],-17],[5,["_materials","0"],-18,5]]],4]],[1,["5aYFgI82pSLL8wV8GdmS7H"]]],0,[0,-1,9,0,-2,7,0,-3,5,0,2,1,0,-1,5,0,-2,7,0,-3,9,0,0,6,0,0,6,0,0,6,0,2,5,0,0,8,0,0,8,0,0,8,0,2,7,0,0,10,0,0,10,0,0,10,0,2,9,0,5,1,19],[0,0,0,0,0,0],[3,1,3,1,3,1],[53,1,53,1,53,1]],[[[19,"New_zhalan_05",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{"lineWidth":25},[{"baseStep":0.9,"baseFeather":0.3,"shadeStep":0.6,"shadeFeather":-0.3,"shadowCover":0},"mainColor",8,[4,4290822336],"shadeColor1",8,[4,4285624697],"shadeColor2",8,[4,4287006342],"specular",8,[4,4278190080],"mainTexture",6,0,"emissiveMap",6,1],{},{}],0,11,0,0]]],0,0,[0,0,0],[8,9,6],[103,27,24]],[[[17,".bin",734068874,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":77856,"length":4020,"count":2010,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":77856,"count":1622,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9656937122344971,-0.42742133140563965,-0.010131320916116238],"maxPosition",8,[1,0.9753319025039673,0.4770684540271759,0.7460997104644775]]],-1],0,0,[],[],[]],[[[19,"Material #1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[8,6],[170,4]],[[[24],[20,"zhalan_04_d",[-2],[12,"b8takYNC9YoaGJ9OhV7IcA",null,null,null,-1,0]],[23,"zhalan_04_d",1,[[22,-3,[6,"1ctjuxOeJdurJTAsVMsgXI"],[0],[21],1]],[12,"f8bwABW3ZeBoHE0MROY0CX",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[171,172]],[[[15,"Men08_e"],[18,"Men08_e",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-8,[7,"9ekJsc5PtOlY5FFlsdntOk",1,[[2,"zhanlan_06_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],3],[2,0,["_shadowReceivingMode"],3],[5,["_materials","0"],3,1],[5,["_mesh"],3,2]]],0]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-9,[7,"davd4Bt4NB3blVYs0NtRRA",1,[[2,"zhanlan_06_a-001",["_name"],4],[0,["_lpos"],4,[1,0,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],5],[2,0,["_shadowReceivingMode"],5],[5,["_materials","0"],5,4],[5,["_mesh"],5,5]]],3]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-10,[7,"93jUXOLRpHdLf/e5IlkA9S",1,[[2,"zhanlan_06_a-002",["_name"],6],[0,["_lpos"],6,[1,1.86,0,4.13]],[0,["_lrot"],6,[3,0,0,0,1]],[0,["_euler"],6,[1,0,0,0]],[2,1,["_shadowCastingMode"],7],[2,0,["_shadowReceivingMode"],7],[5,["_materials","0"],7,7],[5,["_mesh"],7,8]]],6]]],0,[0,-1,10,0,-2,9,0,-3,8,0,2,1,0,-1,8,0,-2,9,0,-3,10,0,2,8,0,2,9,0,2,10,0,5,1,10],[0,0,0,0,0,0,0,0,0],[3,1,1,3,1,1,3,1,1],[0,7,54,0,7,54,0,7,54]],[[[15,"homezhalan06"],[20,"homezhalan06",[-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27],[16,"f5Crz/W5xCRpcO8MeMlG+z",null,null,-14,0,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[3,0,null,1,[4,"a0c93u1slRvJv+EmeLgy75",null,null,-37,[13,"7dVd2j4WxLALdyGO6P0WjK",1,[[9,[1,["a0c93u1slRvJv+EmeLgy75"]],[[10,-35,[6,"acsqpDCMFA25nxyiKqjoQe"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-36,[6,"43ji9xqs1CL6xssNI/wf43"]]]]],[[2,"zhalan_07_a",["_name"],-28],[0,["_lpos"],-29,[1,3,0,1.429]],[0,["_lrot"],-30,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-31,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-32],[2,0,["_shadowReceivingMode"],-33],[5,["_materials","0"],-34,1]]],0]],[3,0,null,1,[4,"a0c93u1slRvJv+EmeLgy75",null,null,-47,[13,"73LhJI7ZpPB6Ae8OU3l4yz",1,[[9,[1,["a0c93u1slRvJv+EmeLgy75"]],[[10,-45,[6,"deIKy28aZI/7LzQyzIzg5s"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-46,[6,"73U/aKSchGZpsoEyTz7t/U"]]]]],[[2,"zhalan_07_a-001",["_name"],-38],[0,["_lpos"],-39,[1,3,0,-0.486]],[0,["_lrot"],-40,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-41,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-42],[2,0,["_shadowReceivingMode"],-43],[5,["_materials","0"],-44,3]]],2]],[3,0,null,1,[4,"a0c93u1slRvJv+EmeLgy75",null,null,-57,[13,"bfqHGcpjBJzZTHnsddRq61",1,[[9,[1,["a0c93u1slRvJv+EmeLgy75"]],[[10,-55,[6,"67aNik3PRA4I6QqJWBM46p"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-56,[6,"b4yLzh5zBImKcUorhzVkx8"]]]]],[[2,"zhalan_07_a-002",["_name"],-48],[0,["_lpos"],-49,[1,3,0,-2.388]],[0,["_lrot"],-50,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-51,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-52],[2,0,["_shadowReceivingMode"],-53],[5,["_materials","0"],-54,5]]],4]],[3,0,null,1,[4,"a0c93u1slRvJv+EmeLgy75",null,null,-67,[13,"4cB1OGCEZGi6rEgvDtg068",1,[[9,[1,["a0c93u1slRvJv+EmeLgy75"]],[[10,-65,[6,"44UgQCNY9KL5YEPO/k6tAE"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-66,[6,"796PLpIvxB1bsfopjEpws2"]]]]],[[2,"zhalan_07_a-003",["_name"],-58],[0,["_lpos"],-59,[1,3,0,-4.29]],[0,["_lrot"],-60,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-61,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-62],[2,0,["_shadowReceivingMode"],-63],[5,["_materials","0"],-64,7]]],6]],[3,0,null,1,[4,"a0c93u1slRvJv+EmeLgy75",null,null,-77,[13,"18xlMR6MRNMIrnpQQMiXx4",1,[[9,[1,["a0c93u1slRvJv+EmeLgy75"]],[[10,-75,[6,"b7d+aVeixDv7BKVnxyRQZA"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-76,[6,"80vtZ8/AxHVJoCzy8GvtII"]]]]],[[2,"zhalan_07_a-004",["_name"],-68],[0,["_lpos"],-69,[1,-3,0,-0.486]],[0,["_lrot"],-70,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-71,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-72],[2,0,["_shadowReceivingMode"],-73],[5,["_materials","0"],-74,9]]],8]],[3,0,null,1,[4,"a0c93u1slRvJv+EmeLgy75",null,null,-87,[13,"fc30cTfj1Ih7l5Dmymwio5",1,[[9,[1,["a0c93u1slRvJv+EmeLgy75"]],[[10,-85,[6,"32qBZhd55J+qtfjYeVe1XN"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-86,[6,"d8AQ/LLepCDI73NjajiBWC"]]]]],[[2,"zhalan_07_a-005",["_name"],-78],[0,["_lpos"],-79,[1,-3,0,-2.388]],[0,["_lrot"],-80,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-81,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-82],[2,0,["_shadowReceivingMode"],-83],[5,["_materials","0"],-84,11]]],10]],[3,0,null,1,[4,"a0c93u1slRvJv+EmeLgy75",null,null,-97,[13,"f1dzkCiqFCsJIN1WM2eAd5",1,[[9,[1,["a0c93u1slRvJv+EmeLgy75"]],[[10,-95,[6,"f9HDPZPhVICYCpf9+sO0Ud"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-96,[6,"2dxgAVckhFdLAC8EdN1tG2"]]]]],[[2,"zhalan_07_a-006",["_name"],-88],[0,["_lpos"],-89,[1,-3,0,-4.29]],[0,["_lrot"],-90,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-91,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-92],[2,0,["_shadowReceivingMode"],-93],[5,["_materials","0"],-94,13]]],12]],[3,0,null,1,[4,"a0c93u1slRvJv+EmeLgy75",null,null,-107,[13,"70dvLYnNhAtaxb1VALIjr0",1,[[9,[1,["a0c93u1slRvJv+EmeLgy75"]],[[10,-105,[6,"5dL/3/FntHTbfKVZOlBE2W"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-106,[6,"16VjjzEp9HhqajFChmCm/I"]]]]],[[2,"zhalan_07_a-007",["_name"],-98],[0,["_lpos"],-99,[1,-3,0,1.429]],[0,["_lrot"],-100,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-101,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-102],[2,0,["_shadowReceivingMode"],-103],[5,["_materials","0"],-104,15]]],14]],[3,0,null,1,[4,"a0c93u1slRvJv+EmeLgy75",null,null,-117,[13,"fdMmRh3dVAfoTbOlw2TnOU",1,[[9,[1,["a0c93u1slRvJv+EmeLgy75"]],[[10,-115,[6,"a1F712icNGI6uCtZ8okVUW"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-116,[6,"2eHLDxsENJfqv7Rm6HfEFc"]]]]],[[2,"zhalan_07_a-008",["_name"],-108],[0,["_lpos"],-109,[1,1.86,0,-5.122]],[0,["_lrot"],-110,[3,0,0,0,1]],[0,["_euler"],-111,[1,0,0,0]],[2,1,["_shadowCastingMode"],-112],[2,0,["_shadowReceivingMode"],-113],[5,["_materials","0"],-114,17]]],16]],[3,0,null,1,[4,"a0c93u1slRvJv+EmeLgy75",null,null,-127,[13,"dapcHghjZC8rzqxbzssgnA",1,[[9,[1,["a0c93u1slRvJv+EmeLgy75"]],[[10,-125,[6,"7bVPjsZwdNZpqRzXCAEJFp"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-126,[6,"ab6ywocTVBdZSGlv5yYnqq"]]]]],[[2,"zhalan_07_a-009",["_name"],-118],[0,["_lpos"],-119,[1,0,0,-5.122]],[0,["_lrot"],-120,[3,0,0,0,1]],[0,["_euler"],-121,[1,0,0,0]],[2,1,["_shadowCastingMode"],-122],[2,0,["_shadowReceivingMode"],-123],[5,["_materials","0"],-124,19]]],18]],[3,0,null,1,[4,"a0c93u1slRvJv+EmeLgy75",null,null,-137,[13,"0azmY2YkJFzLQmwK+3wNbG",1,[[9,[1,["a0c93u1slRvJv+EmeLgy75"]],[[10,-135,[6,"fewQ6z7VpM4qHwkDX49IRb"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-136,[6,"7e94b2/BBOFoCxtzLEp645"]]]]],[[2,"zhalan_07_a-010",["_name"],-128],[0,["_lpos"],-129,[1,-1.86,0,-5.122]],[0,["_lrot"],-130,[3,0,0,0,1]],[0,["_euler"],-131,[1,0,0,0]],[2,1,["_shadowCastingMode"],-132],[2,0,["_shadowReceivingMode"],-133],[5,["_materials","0"],-134,21]]],20]],[3,0,null,1,[4,"a0c93u1slRvJv+EmeLgy75",null,null,-147,[13,"fei/BPEVBKIYn5fuMLMfde",1,[[9,[1,["a0c93u1slRvJv+EmeLgy75"]],[[10,-145,[6,"a2HPr8CFJPbr/iJRi3pfqN"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-146,[6,"63LYrSE/dJ+6+cE6YS5MXP"]]]]],[[2,"zhalan_07_a-011",["_name"],-138],[0,["_lpos"],-139,[1,3,0,3.316]],[0,["_lrot"],-140,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-141,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-142],[2,0,["_shadowReceivingMode"],-143],[5,["_materials","0"],-144,23]]],22]],[3,0,null,1,[4,"a0c93u1slRvJv+EmeLgy75",null,null,-157,[13,"68A6wDliBGg60pOiV0upOL",1,[[9,[1,["a0c93u1slRvJv+EmeLgy75"]],[[10,-155,[6,"8cm6f2HhJJpJbWp+n4leTF"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-156,[6,"9cK+RbAIJK+pP/AYmOLi3y"]]]]],[[2,"zhalan_07_a-012",["_name"],-148],[0,["_lpos"],-149,[1,-3,0,3.316]],[0,["_lrot"],-150,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-151,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-152],[2,0,["_shadowReceivingMode"],-153],[5,["_materials","0"],-154,25]]],24]],[1,["a0c93u1slRvJv+EmeLgy75"]],[1,["a0c93u1slRvJv+EmeLgy75"]],[1,["a0c93u1slRvJv+EmeLgy75"]],[1,["a0c93u1slRvJv+EmeLgy75"]],[1,["a0c93u1slRvJv+EmeLgy75"]],[1,["a0c93u1slRvJv+EmeLgy75"]],[1,["a0c93u1slRvJv+EmeLgy75"]],[1,["a0c93u1slRvJv+EmeLgy75"]],[1,["a0c93u1slRvJv+EmeLgy75"]],[1,["a0c93u1slRvJv+EmeLgy75"]],[1,["a0c93u1slRvJv+EmeLgy75"]],[1,["a0c93u1slRvJv+EmeLgy75"]],[1,["a0c93u1slRvJv+EmeLgy75"]],[1,["cffCiody5UT6pdhU9Gy+sB"]],[1,["cffCiody5UT6pdhU9Gy+sB"]],[1,["cffCiody5UT6pdhU9Gy+sB"]],[1,["cffCiody5UT6pdhU9Gy+sB"]],[1,["cffCiody5UT6pdhU9Gy+sB"]],[1,["cffCiody5UT6pdhU9Gy+sB"]],[1,["cffCiody5UT6pdhU9Gy+sB"]],[1,["cffCiody5UT6pdhU9Gy+sB"]],[1,["cffCiody5UT6pdhU9Gy+sB"]],[1,["cffCiody5UT6pdhU9Gy+sB"]],[1,["cffCiody5UT6pdhU9Gy+sB"]],[1,["cffCiody5UT6pdhU9Gy+sB"]],[1,["cffCiody5UT6pdhU9Gy+sB"]]],0,[0,-1,14,0,-2,13,0,-3,12,0,-4,11,0,-5,10,0,-6,9,0,-7,8,0,-8,7,0,-9,6,0,-10,5,0,-11,4,0,-12,3,0,-13,2,0,2,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,-5,6,0,-6,7,0,-7,8,0,-8,9,0,-9,10,0,-10,11,0,-11,12,0,-12,13,0,-13,14,0,0,15,0,0,15,0,0,15,0,0,15,0,0,28,0,0,28,0,0,28,0,4,2,0,4,2,0,2,2,0,0,16,0,0,16,0,0,16,0,0,16,0,0,29,0,0,29,0,0,29,0,4,3,0,4,3,0,2,3,0,0,17,0,0,17,0,0,17,0,0,17,0,0,30,0,0,30,0,0,30,0,4,4,0,4,4,0,2,4,0,0,18,0,0,18,0,0,18,0,0,18,0,0,31,0,0,31,0,0,31,0,4,5,0,4,5,0,2,5,0,0,19,0,0,19,0,0,19,0,0,19,0,0,32,0,0,32,0,0,32,0,4,6,0,4,6,0,2,6,0,0,20,0,0,20,0,0,20,0,0,20,0,0,33,0,0,33,0,0,33,0,4,7,0,4,7,0,2,7,0,0,21,0,0,21,0,0,21,0,0,21,0,0,34,0,0,34,0,0,34,0,4,8,0,4,8,0,2,8,0,0,22,0,0,22,0,0,22,0,0,22,0,0,35,0,0,35,0,0,35,0,4,9,0,4,9,0,2,9,0,0,23,0,0,23,0,0,23,0,0,23,0,0,36,0,0,36,0,0,36,0,4,10,0,4,10,0,2,10,0,0,24,0,0,24,0,0,24,0,0,24,0,0,37,0,0,37,0,0,37,0,4,11,0,4,11,0,2,11,0,0,25,0,0,25,0,0,25,0,0,25,0,0,38,0,0,38,0,0,38,0,4,12,0,4,12,0,2,12,0,0,26,0,0,26,0,0,26,0,0,26,0,0,39,0,0,39,0,0,39,0,4,13,0,4,13,0,2,13,0,0,27,0,0,27,0,0,27,0,0,27,0,0,40,0,0,40,0,0,40,0,4,14,0,4,14,0,2,14,0,5,1,157],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1],[29,8,29,8,29,8,29,8,29,8,29,8,29,8,29,8,29,8,29,8,29,8,29,8,29,8]],[[[15,"homezhalan"],[20,"homezhalan",[-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27],[16,"f5Crz/W5xCRpcO8MeMlG+z",null,[],-14,0,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[1,["9fT+84QgpFN4gCa6OjIgxF"]],[1,["9fT+84QgpFN4gCa6OjIgxF"]],[1,["9fT+84QgpFN4gCa6OjIgxF"]],[1,["9fT+84QgpFN4gCa6OjIgxF"]],[1,["9fT+84QgpFN4gCa6OjIgxF"]],[1,["9fT+84QgpFN4gCa6OjIgxF"]],[1,["9fT+84QgpFN4gCa6OjIgxF"]],[1,["9fT+84QgpFN4gCa6OjIgxF"]],[1,["9fT+84QgpFN4gCa6OjIgxF"]],[1,["9fT+84QgpFN4gCa6OjIgxF"]],[1,["9fT+84QgpFN4gCa6OjIgxF"]],[1,["9fT+84QgpFN4gCa6OjIgxF"]],[1,["9fT+84QgpFN4gCa6OjIgxF"]],[3,0,{},1,[4,"9fT+84QgpFN4gCa6OjIgxF",null,null,-28,[7,"baXrlpA2ZMAofCHQG4EbuX",1,[[2,"Deco_zhalan_14",["_name"],2],[0,["_lpos"],2,[1,3,0,1.429]],[0,["_lrot"],2,[3,0,0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],2,[1,0,89.99999999999999,0]]]],0]],[3,0,{},1,[4,"9fT+84QgpFN4gCa6OjIgxF",null,null,-29,[7,"e9KFXQfipBebNY5cTqOmTQ",1,[[2,"Deco_zhalan_15",["_name"],3],[0,["_lpos"],3,[1,3,0,-0.486]],[0,["_lrot"],3,[3,0,0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],3,[1,0,89.99999999999999,0]]]],1]],[3,0,{},1,[4,"9fT+84QgpFN4gCa6OjIgxF",null,null,-30,[7,"f9bVI+N/dItIBez+1LCLsa",1,[[2,"Deco_zhalan_16",["_name"],4],[0,["_lpos"],4,[1,3,0,-2.388]],[0,["_lrot"],4,[3,0,0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],4,[1,0,89.99999999999999,0]]]],2]],[3,0,{},1,[4,"9fT+84QgpFN4gCa6OjIgxF",null,null,-31,[7,"f6+0XR0rdBNJ7N9+jtuoAu",1,[[2,"Deco_zhalan_17",["_name"],5],[0,["_lpos"],5,[1,3,0,-4.29]],[0,["_lrot"],5,[3,0,0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],5,[1,0,89.99999999999999,0]]]],3]],[3,0,{},1,[4,"9fT+84QgpFN4gCa6OjIgxF",null,null,-32,[7,"944nYNUMJJi78tW54vF+jJ",1,[[2,"Deco_zhalan_18",["_name"],6],[0,["_lpos"],6,[1,-3,0,-0.486]],[0,["_lrot"],6,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],6,[1,0,89.99999999999999,0]]]],4]],[3,0,{},1,[4,"9fT+84QgpFN4gCa6OjIgxF",null,null,-33,[7,"ccX4F/7hxJzKnwocHFNSUg",1,[[2,"Deco_zhalan_19",["_name"],7],[0,["_lpos"],7,[1,-3,0,-2.388]],[0,["_lrot"],7,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],7,[1,0,89.99999999999999,0]]]],5]],[3,0,{},1,[4,"9fT+84QgpFN4gCa6OjIgxF",null,null,-34,[7,"bctI5PrPVOnb9O+NYVQYR+",1,[[2,"Deco_zhalan_20",["_name"],8],[0,["_lpos"],8,[1,-3,0,-4.29]],[0,["_lrot"],8,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],8,[1,0,89.99999999999999,0]]]],6]],[3,0,{},1,[4,"9fT+84QgpFN4gCa6OjIgxF",null,null,-35,[7,"8eq+OcmcpOW4YvFrAMXVJQ",1,[[2,"Deco_zhalan_21",["_name"],9],[0,["_lpos"],9,[1,-3,0,1.429]],[0,["_lrot"],9,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],9,[1,0,89.99999999999999,0]]]],7]],[3,0,{},1,[4,"9fT+84QgpFN4gCa6OjIgxF",null,null,-36,[7,"31T7Sk9BtLj6xGr1kIUmrv",1,[[2,"Deco_zhalan_24",["_name"],10],[0,["_lpos"],10,[1,1.86,0,-5.122]],[0,["_lrot"],10,[3,0,0,0,1]],[0,["_euler"],10,[1,0,0,0]]]],8]],[3,0,{},1,[4,"9fT+84QgpFN4gCa6OjIgxF",null,null,-37,[7,"fb1PmGAQpOu6EQBkjBUVNt",1,[[2,"Deco_zhalan_25",["_name"],11],[0,["_lpos"],11,[1,0,0,-5.122]],[0,["_lrot"],11,[3,0,0,0,1]],[0,["_euler"],11,[1,0,0,0]]]],9]],[3,0,{},1,[4,"9fT+84QgpFN4gCa6OjIgxF",null,null,-38,[7,"13i+iL5s1EsY8od8VFptgj",1,[[2,"Deco_zhalan_26",["_name"],12],[0,["_lpos"],12,[1,-1.86,0,-5.122]],[0,["_lrot"],12,[3,0,0,0,1]],[0,["_euler"],12,[1,0,0,0]]]],10]],[3,0,{},1,[4,"9fT+84QgpFN4gCa6OjIgxF",null,null,-39,[7,"662qjqJwxHSomb2QOvJPcy",1,[[2,"Deco_zhalan_22",["_name"],13],[0,["_lpos"],13,[1,3,0,3.316]],[0,["_lrot"],13,[3,0,0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],13,[1,0,89.99999999999999,0]]]],11]],[3,0,{},1,[4,"9fT+84QgpFN4gCa6OjIgxF",null,null,-40,[7,"35bY/StidOy7cvxVTaR18o",1,[[2,"Deco_zhalan_23",["_name"],14],[0,["_lpos"],14,[1,-3,0,3.316]],[0,["_lrot"],14,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],14,[1,0,89.99999999999999,0]]]],12]]],0,[0,-1,27,0,-2,26,0,-3,25,0,-4,24,0,-5,23,0,-6,22,0,-7,21,0,-8,20,0,-9,19,0,-10,18,0,-11,17,0,-12,16,0,-13,15,0,2,1,0,-1,15,0,-2,16,0,-3,17,0,-4,18,0,-5,19,0,-6,20,0,-7,21,0,-8,22,0,-9,23,0,-10,24,0,-11,25,0,-12,26,0,-13,27,0,2,15,0,2,16,0,2,17,0,2,18,0,2,19,0,2,20,0,2,21,0,2,22,0,2,23,0,2,24,0,2,25,0,2,26,0,2,27,0,5,1,40],[0,0,0,0,0,0,0,0,0,0,0,0,0],[3,3,3,3,3,3,3,3,3,3,3,3,3],[22,22,22,22,22,22,22,22,22,22,22,22,22]],[[[17,".bin",3437778388,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":48384,"length":2748,"count":1374,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":48384,"count":1008,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9509111046791077,-0.42742133140563965,-0.010131320916116238],"maxPosition",8,[1,0.9753319025039673,0.4770684540271759,0.8863824605941772]]],-1],0,0,[],[],[]],[[[24],[20,"zhalan_04_c",[-2],[12,"8a0/zKUVVWtq7cJDzFxdH9",null,null,null,-1,0]],[23,"zhalan_04_c",1,[[22,-3,[6,"56EON+NUBaqa92wWGAM9f8"],[0],[21],1]],[12,"87L5gK6DdeNprYbtbhAu1n",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[173,174]],[[[19,"Material #1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[8,6],[175,4]],[[[15,"Men08_d"],[18,"Men08_d",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-8,[7,"9ekJsc5PtOlY5FFlsdntOk",1,[[2,"zhanlan_06_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],3],[2,0,["_shadowReceivingMode"],3],[5,["_materials","0"],3,1],[5,["_mesh"],3,2]]],0]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-9,[7,"davd4Bt4NB3blVYs0NtRRA",1,[[2,"zhanlan_06_a-001",["_name"],4],[0,["_lpos"],4,[1,0,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],5],[2,0,["_shadowReceivingMode"],5],[5,["_materials","0"],5,4],[5,["_mesh"],5,5]]],3]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-10,[7,"93jUXOLRpHdLf/e5IlkA9S",1,[[2,"zhanlan_06_a-002",["_name"],6],[0,["_lpos"],6,[1,1.86,0,4.13]],[0,["_lrot"],6,[3,0,0,0,1]],[0,["_euler"],6,[1,0,0,0]],[2,1,["_shadowCastingMode"],7],[2,0,["_shadowReceivingMode"],7],[5,["_materials","0"],7,7],[5,["_mesh"],7,8]]],6]]],0,[0,-1,10,0,-2,9,0,-3,8,0,2,1,0,-1,8,0,-2,9,0,-3,10,0,2,8,0,2,9,0,2,10,0,5,1,10],[0,0,0,0,0,0,0,0,0],[3,1,1,3,1,1,3,1,1],[0,7,55,0,7,55,0,7,55]],[[[17,".bin",3609386708,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":64608,"length":3684,"count":1842,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":64608,"count":1346,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.052916407585144,-0.5305119752883911,-0.08714824914932251],"maxPosition",8,[1,1.033291220664978,0.5094037652015686,0.6995307803153992]]],-1],0,0,[],[],[]],[[[19,"Material #179",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[8,6],[176,4]],[[[24],[20,"zhalan_05_c",[-2],[12,"0e665R7r9cWJ1jpLbW/1XB",null,null,null,-1,0]],[23,"zhalan_05_c",1,[[22,-3,[6,"2aUzrLrn5QLY9hBePph5oy"],[0],[21],1]],[12,"c9opYPEyRfBqfgN2MiymIO",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[177,178]],[[[17,".bin",3352083662,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":33600,"length":2124,"count":1062,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":33600,"count":700,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9537605047225952,-0.45646917819976807,-0.011725694872438908],"maxPosition",8,[1,0.9616844058036804,0.3167673945426941,0.7368144989013672]]],-1],0,0,[],[],[]],[[[24],[20,"zhalan_03_a",[-2],[12,"f7f/SnzaFeKKwX9YRIdClj",null,null,null,-1,0]],[23,"zhalan_03_a",1,[[22,-3,[6,"14cUAMsiRZQrJAuHxu8aso"],[0],[21],1]],[12,"17o87Oa75SI5mR3xmldB2w",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[179,180]],[[[17,".bin",360067913,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10416,"length":720,"count":360,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":10416,"count":217,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9219583868980408,-0.08136002719402313,0.010128086432814598],"maxPosition",8,[1,0.921958327293396,0.08136002719402313,0.9180463552474976]]],-1],0,0,[],[],[]],[[[19,"22 - Default",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":1.9999998807907104,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[6],[4]],[[[17,".bin",1090287443,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":148128,"length":7440,"count":3720,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":148128,"count":3086,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9656937122344971,-0.45646917819976807,-0.03508274257183075],"maxPosition",8,[1,1.0698601007461548,0.43724724650382996,0.35551193356513977]]],-1],0,0,[],[],[]],[[[15,"Men03_c"],[18,"Men03_c",[-5,-6,-7],[16,"7d8Oc5TAxJZIQ9dYSUGrm5",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["4e8P+g53xc3YOAXPCiTlBQ"]],[1,["4e8P+g53xc3YOAXPCiTlBQ"]],[1,["4e8P+g53xc3YOAXPCiTlBQ"]],[3,0,null,1,[4,"4e8P+g53xc3YOAXPCiTlBQ",null,null,-11,[7,"52EXboTtJKt4Hr5rHxYVsn",1,[[2,"zhalan_03_c",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],-8],[2,0,["_shadowReceivingMode"],-9],[5,["_materials","0"],-10,1]]],0]],[1,["0fvY7P0stXdaPWa+0ixFyY"]],[3,0,null,1,[4,"4e8P+g53xc3YOAXPCiTlBQ",null,null,-15,[7,"8fEEEbvU1Mqok9SJrBeAjr",1,[[2,"zhalan_03_c-001",["_name"],3],[0,["_lpos"],3,[1,0,0,4.13]],[0,["_lrot"],3,[3,0,0,0,1]],[0,["_euler"],3,[1,0,0,0]],[2,1,["_shadowCastingMode"],-12],[2,0,["_shadowReceivingMode"],-13],[5,["_materials","0"],-14,3]]],2]],[1,["0fvY7P0stXdaPWa+0ixFyY"]],[3,0,null,1,[4,"4e8P+g53xc3YOAXPCiTlBQ",null,null,-19,[7,"bdEXz/fylC4JQHNdwKsSRW",1,[[2,"zhalan_03_c-002",["_name"],4],[0,["_lpos"],4,[1,1.86,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],-16],[2,0,["_shadowReceivingMode"],-17],[5,["_materials","0"],-18,5]]],4]],[1,["0fvY7P0stXdaPWa+0ixFyY"]]],0,[0,-1,9,0,-2,7,0,-3,5,0,2,1,0,-1,5,0,-2,7,0,-3,9,0,0,6,0,0,6,0,0,6,0,2,5,0,0,8,0,0,8,0,0,8,0,2,7,0,0,10,0,0,10,0,0,10,0,2,9,0,5,1,19],[0,0,0,0,0,0],[3,1,3,1,3,1],[56,3,56,3,56,3]],[[[15,"homezhalan04"],[20,"homezhalan04",[-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27],[16,"f5Crz/W5xCRpcO8MeMlG+z",null,null,-14,0,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[3,0,{},1,[4,"d4y2zovTdaaoJRElZ3SjzF",null,null,-37,[13,"3dgVOobzVDtINDp2PPFWPf",1,[[9,[1,["d4y2zovTdaaoJRElZ3SjzF"]],[[10,-35,[6,"85rkgJZ/RMr4lHYtBHp8xw"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-36,[6,"42jhyiD59EfK1U+cVdRit7"]]]]],[[2,"zhalan_05_a",["_name"],-28],[0,["_lpos"],-29,[1,3,0,1.429]],[0,["_lrot"],-30,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-31,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-32],[2,0,["_shadowReceivingMode"],-33],[5,["_materials","0"],-34,1]]],0]],[3,0,{},1,[4,"d4y2zovTdaaoJRElZ3SjzF",null,null,-47,[13,"dc1IAoiwZKZKtlTD9+KfBf",1,[[9,[1,["d4y2zovTdaaoJRElZ3SjzF"]],[[10,-45,[6,"40RsBxUFpONLzXaAoUMY8i"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-46,[6,"f4gAv9yz9GE7l4p6KdhZ1u"]]]]],[[2,"zhalan_05_a-001",["_name"],-38],[0,["_lpos"],-39,[1,3,0,-0.486]],[0,["_lrot"],-40,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-41,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-42],[2,0,["_shadowReceivingMode"],-43],[5,["_materials","0"],-44,3]]],2]],[3,0,{},1,[4,"d4y2zovTdaaoJRElZ3SjzF",null,null,-57,[13,"ab7+0UrjpOJ7PC0Jb84dYx",1,[[9,[1,["d4y2zovTdaaoJRElZ3SjzF"]],[[10,-55,[6,"d40PVpMqRHnqBVdfPYd7NB"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-56,[6,"d8wdn4X4pBqrENHH/BxqNt"]]]]],[[2,"zhalan_05_a-002",["_name"],-48],[0,["_lpos"],-49,[1,3,0,-2.388]],[0,["_lrot"],-50,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-51,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-52],[2,0,["_shadowReceivingMode"],-53],[5,["_materials","0"],-54,5]]],4]],[3,0,{},1,[4,"d4y2zovTdaaoJRElZ3SjzF",null,null,-67,[13,"c2CFzgQ+BHYrEZ6xd3tuS2",1,[[9,[1,["d4y2zovTdaaoJRElZ3SjzF"]],[[10,-65,[6,"19u2hz2GFKv5yZsPHWsb1k"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-66,[6,"79AWztytFM15cm+Ga7+/40"]]]]],[[2,"zhalan_05_a-003",["_name"],-58],[0,["_lpos"],-59,[1,3,0,-4.29]],[0,["_lrot"],-60,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-61,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-62],[2,0,["_shadowReceivingMode"],-63],[5,["_materials","0"],-64,7]]],6]],[3,0,{},1,[4,"d4y2zovTdaaoJRElZ3SjzF",null,null,-77,[13,"34Y5p4WgZCLqIMTRATHYmF",1,[[9,[1,["d4y2zovTdaaoJRElZ3SjzF"]],[[10,-75,[6,"6c1Dlp60JE0bacypSgYtd2"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-76,[6,"1biff/m25KsY/mlbjAferu"]]]]],[[2,"zhalan_05_a-004",["_name"],-68],[0,["_lpos"],-69,[1,-3,0,-0.486]],[0,["_lrot"],-70,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-71,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-72],[2,0,["_shadowReceivingMode"],-73],[5,["_materials","0"],-74,9]]],8]],[3,0,{},1,[4,"d4y2zovTdaaoJRElZ3SjzF",null,null,-87,[13,"0f4v2qOVNLGoOntyNzrTrf",1,[[9,[1,["d4y2zovTdaaoJRElZ3SjzF"]],[[10,-85,[6,"3cbTRco3ZB4Z2+eyLkB1Zw"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-86,[6,"90ux3RywBAQKvYPcgsJFyU"]]]]],[[2,"zhalan_05_a-005",["_name"],-78],[0,["_lpos"],-79,[1,-3,0,-2.388]],[0,["_lrot"],-80,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-81,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-82],[2,0,["_shadowReceivingMode"],-83],[5,["_materials","0"],-84,11]]],10]],[3,0,{},1,[4,"d4y2zovTdaaoJRElZ3SjzF",null,null,-97,[13,"7akfAN3ztMrrrAwx95+CJ5",1,[[9,[1,["d4y2zovTdaaoJRElZ3SjzF"]],[[10,-95,[6,"66MjHqiPpJkbe4mm5+A445"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-96,[6,"5fG+tJg6hCl4N/BOpItwb6"]]]]],[[2,"zhalan_05_a-006",["_name"],-88],[0,["_lpos"],-89,[1,-3,0,-4.29]],[0,["_lrot"],-90,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-91,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-92],[2,0,["_shadowReceivingMode"],-93],[5,["_materials","0"],-94,13]]],12]],[3,0,{},1,[4,"d4y2zovTdaaoJRElZ3SjzF",null,null,-107,[13,"b6Of0Jnq1P0Ln2JoYUhJJU",1,[[9,[1,["d4y2zovTdaaoJRElZ3SjzF"]],[[10,-105,[6,"e1dMvEnhpDXI0x1Mz6qrCj"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-106,[6,"1drHCeBeVGe4rodCSwN85T"]]]]],[[2,"zhalan_05_a-007",["_name"],-98],[0,["_lpos"],-99,[1,-3,0,1.429]],[0,["_lrot"],-100,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-101,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-102],[2,0,["_shadowReceivingMode"],-103],[5,["_materials","0"],-104,15]]],14]],[3,0,{},1,[4,"d4y2zovTdaaoJRElZ3SjzF",null,null,-117,[13,"cacKz7PThCx6cTAJiyC/lV",1,[[9,[1,["d4y2zovTdaaoJRElZ3SjzF"]],[[10,-115,[6,"44JMV/VtFKOKMnMADa4Ur9"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-116,[6,"70MPJLAKlG6p2v5lh3Q4aA"]]]]],[[2,"zhalan_05_a-008",["_name"],-108],[0,["_lpos"],-109,[1,1.86,0,-5.122]],[0,["_lrot"],-110,[3,0,0,0,1]],[0,["_euler"],-111,[1,0,0,0]],[2,1,["_shadowCastingMode"],-112],[2,0,["_shadowReceivingMode"],-113],[5,["_materials","0"],-114,17]]],16]],[3,0,{},1,[4,"d4y2zovTdaaoJRElZ3SjzF",null,null,-127,[13,"10w953rVRJspiqnKCbEmun",1,[[9,[1,["d4y2zovTdaaoJRElZ3SjzF"]],[[10,-125,[6,"188dxjJK9J+r7dyW2aT0Yq"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-126,[6,"a7x34o4iNCsJtuE7btzHrt"]]]]],[[2,"zhalan_05_a-009",["_name"],-118],[0,["_lpos"],-119,[1,0,0,-5.122]],[0,["_lrot"],-120,[3,0,0,0,1]],[0,["_euler"],-121,[1,0,0,0]],[2,1,["_shadowCastingMode"],-122],[2,0,["_shadowReceivingMode"],-123],[5,["_materials","0"],-124,19]]],18]],[3,0,{},1,[4,"d4y2zovTdaaoJRElZ3SjzF",null,null,-137,[13,"61WwYmsoJOnKFQoYMiLA2N",1,[[9,[1,["d4y2zovTdaaoJRElZ3SjzF"]],[[10,-135,[6,"31NWkyJUxO0IhvH4Cp3gzs"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-136,[6,"a03rNyai1LUIH+nbn83hUi"]]]]],[[2,"zhalan_05_a-010",["_name"],-128],[0,["_lpos"],-129,[1,-1.86,0,-5.122]],[0,["_lrot"],-130,[3,0,0,0,1]],[0,["_euler"],-131,[1,0,0,0]],[2,1,["_shadowCastingMode"],-132],[2,0,["_shadowReceivingMode"],-133],[5,["_materials","0"],-134,21]]],20]],[3,0,{},1,[4,"d4y2zovTdaaoJRElZ3SjzF",null,null,-147,[13,"25O8k7eBVKlI6t1ZOJiEcS",1,[[9,[1,["d4y2zovTdaaoJRElZ3SjzF"]],[[10,-145,[6,"54gjsMX6BMQ5pvTEA2VVvR"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-146,[6,"c6bG5Tl1BN6Kyjl4sqg7Z4"]]]]],[[2,"zhalan_05_a-011",["_name"],-138],[0,["_lpos"],-139,[1,3,0,3.316]],[0,["_lrot"],-140,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-141,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-142],[2,0,["_shadowReceivingMode"],-143],[5,["_materials","0"],-144,23]]],22]],[3,0,{},1,[4,"d4y2zovTdaaoJRElZ3SjzF",null,null,-157,[13,"f9JLzq5+xIGL5ejktwP+LR",1,[[9,[1,["d4y2zovTdaaoJRElZ3SjzF"]],[[10,-155,[6,"1aVD6ZEvtDA6cNJ3NaBg63"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-156,[6,"00ve/j+m5HYq7xKHSzOaRk"]]]]],[[2,"zhalan_05_a-012",["_name"],-148],[0,["_lpos"],-149,[1,-3,0,3.316]],[0,["_lrot"],-150,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-151,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-152],[2,0,["_shadowReceivingMode"],-153],[5,["_materials","0"],-154,25]]],24]],[1,["d4y2zovTdaaoJRElZ3SjzF"]],[1,["d4y2zovTdaaoJRElZ3SjzF"]],[1,["d4y2zovTdaaoJRElZ3SjzF"]],[1,["d4y2zovTdaaoJRElZ3SjzF"]],[1,["d4y2zovTdaaoJRElZ3SjzF"]],[1,["d4y2zovTdaaoJRElZ3SjzF"]],[1,["d4y2zovTdaaoJRElZ3SjzF"]],[1,["d4y2zovTdaaoJRElZ3SjzF"]],[1,["d4y2zovTdaaoJRElZ3SjzF"]],[1,["d4y2zovTdaaoJRElZ3SjzF"]],[1,["d4y2zovTdaaoJRElZ3SjzF"]],[1,["d4y2zovTdaaoJRElZ3SjzF"]],[1,["d4y2zovTdaaoJRElZ3SjzF"]],[1,["c0UtYOaENdFZyy6UA7RCBB"]],[1,["c0UtYOaENdFZyy6UA7RCBB"]],[1,["c0UtYOaENdFZyy6UA7RCBB"]],[1,["c0UtYOaENdFZyy6UA7RCBB"]],[1,["c0UtYOaENdFZyy6UA7RCBB"]],[1,["c0UtYOaENdFZyy6UA7RCBB"]],[1,["c0UtYOaENdFZyy6UA7RCBB"]],[1,["c0UtYOaENdFZyy6UA7RCBB"]],[1,["c0UtYOaENdFZyy6UA7RCBB"]],[1,["c0UtYOaENdFZyy6UA7RCBB"]],[1,["c0UtYOaENdFZyy6UA7RCBB"]],[1,["c0UtYOaENdFZyy6UA7RCBB"]],[1,["c0UtYOaENdFZyy6UA7RCBB"]]],0,[0,-1,14,0,-2,13,0,-3,12,0,-4,11,0,-5,10,0,-6,9,0,-7,8,0,-8,7,0,-9,6,0,-10,5,0,-11,4,0,-12,3,0,-13,2,0,2,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,-5,6,0,-6,7,0,-7,8,0,-8,9,0,-9,10,0,-10,11,0,-11,12,0,-12,13,0,-13,14,0,0,15,0,0,15,0,0,15,0,0,15,0,0,28,0,0,28,0,0,28,0,4,2,0,4,2,0,2,2,0,0,16,0,0,16,0,0,16,0,0,16,0,0,29,0,0,29,0,0,29,0,4,3,0,4,3,0,2,3,0,0,17,0,0,17,0,0,17,0,0,17,0,0,30,0,0,30,0,0,30,0,4,4,0,4,4,0,2,4,0,0,18,0,0,18,0,0,18,0,0,18,0,0,31,0,0,31,0,0,31,0,4,5,0,4,5,0,2,5,0,0,19,0,0,19,0,0,19,0,0,19,0,0,32,0,0,32,0,0,32,0,4,6,0,4,6,0,2,6,0,0,20,0,0,20,0,0,20,0,0,20,0,0,33,0,0,33,0,0,33,0,4,7,0,4,7,0,2,7,0,0,21,0,0,21,0,0,21,0,0,21,0,0,34,0,0,34,0,0,34,0,4,8,0,4,8,0,2,8,0,0,22,0,0,22,0,0,22,0,0,22,0,0,35,0,0,35,0,0,35,0,4,9,0,4,9,0,2,9,0,0,23,0,0,23,0,0,23,0,0,23,0,0,36,0,0,36,0,0,36,0,4,10,0,4,10,0,2,10,0,0,24,0,0,24,0,0,24,0,0,24,0,0,37,0,0,37,0,0,37,0,4,11,0,4,11,0,2,11,0,0,25,0,0,25,0,0,25,0,0,25,0,0,38,0,0,38,0,0,38,0,4,12,0,4,12,0,2,12,0,0,26,0,0,26,0,0,26,0,0,26,0,0,39,0,0,39,0,0,39,0,4,13,0,4,13,0,2,13,0,0,27,0,0,27,0,0,27,0,0,27,0,0,40,0,0,40,0,0,40,0,4,14,0,4,14,0,2,14,0,5,1,157],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1],[25,9,25,9,25,9,25,9,25,9,25,9,25,9,25,9,25,9,25,9,25,9,25,9,25,9]],[[[15,"zhanlas01"],[20,"zhanlas01",[-20,-21,-22,-23,-24,-25],[16,"15nA224mJAV6BWgbgwboGo",null,null,-19,0,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]]],[62,"homezhalan01",1,[-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38],[12,"d3z+V5pLZFtoIanSwNDUDp",null,null,null,1,0]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[1,["66JYNjkVZI3pdh7qeqg2K1"]],[1,["5fWtOn69xABruBopjqLYYp"]],[1,["00Mirw4mNHH5il8BwgdBkJ"]],[1,["16OAjpi2lBGI8jne5BJN6U"]],[1,["44SiDVKK5OMLxY6A4vp4Wz"]],[3,0,{},2,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-42,[7,"1cLXeMrT1Ap7ytKdxD1PNI",1,[[2,"zhalan_02_a",["_name"],3],[0,["_lpos"],3,[1,3,0,1.429]],[0,["_lrot"],3,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],3,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-39],[2,0,["_shadowReceivingMode"],-40],[5,["_materials","0"],-41,1]]],0]],[1,["edqsqthixXaZPkhrcRbztd"]],[3,0,{},2,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-46,[7,"84gK5xJSpCzr31/sWU7B9R",1,[[2,"zhalan_02_a-001",["_name"],4],[0,["_lpos"],4,[1,3,0,-0.486]],[0,["_lrot"],4,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],4,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-43],[2,0,["_shadowReceivingMode"],-44],[5,["_materials","0"],-45,3]]],2]],[1,["edqsqthixXaZPkhrcRbztd"]],[3,0,{},2,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-50,[7,"eaZpEmnhJJiqZpk8nEAbys",1,[[2,"zhalan_02_a-002",["_name"],5],[0,["_lpos"],5,[1,3,0,-2.388]],[0,["_lrot"],5,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],5,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-47],[2,0,["_shadowReceivingMode"],-48],[5,["_materials","0"],-49,5]]],4]],[1,["edqsqthixXaZPkhrcRbztd"]],[3,0,{},2,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-54,[7,"97uNZkdq9GALrBsMOpySLr",1,[[2,"zhalan_02_a-003",["_name"],6],[0,["_lpos"],6,[1,3,0,-4.29]],[0,["_lrot"],6,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],6,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-51],[2,0,["_shadowReceivingMode"],-52],[5,["_materials","0"],-53,7]]],6]],[1,["edqsqthixXaZPkhrcRbztd"]],[3,0,{},2,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-58,[7,"d9RbEffqlEWbjdm5WenO9O",1,[[2,"zhalan_02_a-004",["_name"],7],[0,["_lpos"],7,[1,-3,0,-0.486]],[0,["_lrot"],7,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],7,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-55],[2,0,["_shadowReceivingMode"],-56],[5,["_materials","0"],-57,9]]],8]],[1,["edqsqthixXaZPkhrcRbztd"]],[3,0,{},2,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-62,[7,"0ckoyf+cBGaoLsYNfJVshv",1,[[2,"zhalan_02_a-005",["_name"],8],[0,["_lpos"],8,[1,-3,0,-2.388]],[0,["_lrot"],8,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],8,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-59],[2,0,["_shadowReceivingMode"],-60],[5,["_materials","0"],-61,11]]],10]],[1,["edqsqthixXaZPkhrcRbztd"]],[3,0,{},2,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-66,[7,"6a6R7nmotJj4jRhM2rh1qv",1,[[2,"zhalan_02_a-006",["_name"],9],[0,["_lpos"],9,[1,-3,0,-4.29]],[0,["_lrot"],9,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],9,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-63],[2,0,["_shadowReceivingMode"],-64],[5,["_materials","0"],-65,13]]],12]],[1,["edqsqthixXaZPkhrcRbztd"]],[3,0,{},2,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-70,[7,"34IN2+An1NVpCVcKlY5RD+",1,[[2,"zhalan_02_a-007",["_name"],10],[0,["_lpos"],10,[1,-3,0,1.429]],[0,["_lrot"],10,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],10,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-67],[2,0,["_shadowReceivingMode"],-68],[5,["_materials","0"],-69,15]]],14]],[1,["edqsqthixXaZPkhrcRbztd"]],[3,0,{},2,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-74,[7,"f8AON6pHdOMJ/PJ0wESj67",1,[[2,"zhalan_02_a-008",["_name"],11],[0,["_lpos"],11,[1,1.86,0,-5.122]],[0,["_lrot"],11,[3,0,0,0,1]],[0,["_euler"],11,[1,0,0,0]],[2,1,["_shadowCastingMode"],-71],[2,0,["_shadowReceivingMode"],-72],[5,["_materials","0"],-73,17]]],16]],[1,["edqsqthixXaZPkhrcRbztd"]],[3,0,{},2,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-78,[7,"a3BCZzHQdLOISIei0S4g48",1,[[2,"zhalan_02_a-009",["_name"],12],[0,["_lpos"],12,[1,0,0,-5.122]],[0,["_lrot"],12,[3,0,0,0,1]],[0,["_euler"],12,[1,0,0,0]],[2,1,["_shadowCastingMode"],-75],[2,0,["_shadowReceivingMode"],-76],[5,["_materials","0"],-77,19]]],18]],[1,["edqsqthixXaZPkhrcRbztd"]],[3,0,{},2,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-82,[7,"4aPojtNR9PcopjetioxKyw",1,[[2,"zhalan_02_a-010",["_name"],13],[0,["_lpos"],13,[1,-1.86,0,-5.122]],[0,["_lrot"],13,[3,0,0,0,1]],[0,["_euler"],13,[1,0,0,0]],[2,1,["_shadowCastingMode"],-79],[2,0,["_shadowReceivingMode"],-80],[5,["_materials","0"],-81,21]]],20]],[1,["edqsqthixXaZPkhrcRbztd"]],[3,0,{},2,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-86,[7,"639KagrgFBVrmNd7WswyC3",1,[[2,"zhalan_02_a-011",["_name"],14],[0,["_lpos"],14,[1,3,0,3.316]],[0,["_lrot"],14,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],14,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-83],[2,0,["_shadowReceivingMode"],-84],[5,["_materials","0"],-85,23]]],22]],[1,["edqsqthixXaZPkhrcRbztd"]],[3,0,{},2,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-90,[7,"25tgZT/eNEfqv7M6AkLCeA",1,[[2,"zhalan_02_a-012",["_name"],15],[0,["_lpos"],15,[1,-3,0,3.316]],[0,["_lrot"],15,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],15,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-87],[2,0,["_shadowReceivingMode"],-88],[5,["_materials","0"],-89,25]]],24]],[1,["edqsqthixXaZPkhrcRbztd"]],[3,0,{},1,[4,"66JYNjkVZI3pdh7qeqg2K1",null,null,-91,[7,"37gpvigcdIqJEvMRDSF418",1,[[2,"Men02_a",["_name"],16],[0,["_lpos"],16,[1,0,0,0]],[0,["_lrot"],16,[3,0,0,0,1]],[0,["_euler"],16,[1,0,0,0]]]],26]],[3,0,{},1,[4,"5fWtOn69xABruBopjqLYYp",null,null,-92,[7,"07NX2GIUZKM5PBO89NH5WD",1,[[2,"Men02_b",["_name"],17],[0,["_lpos"],17,[1,0,0,0]],[0,["_lrot"],17,[3,0,0,0,1]],[0,["_euler"],17,[1,0,0,0]]]],27]],[3,0,{},1,[4,"00Mirw4mNHH5il8BwgdBkJ",null,null,-93,[7,"b6qEAkul1GvrN1h+CDWKvP",1,[[2,"Men02_c",["_name"],18],[0,["_lpos"],18,[1,0,0,0]],[0,["_lrot"],18,[3,0,0,0,1]],[0,["_euler"],18,[1,0,0,0]]]],28]],[3,0,{},1,[4,"16OAjpi2lBGI8jne5BJN6U",null,null,-94,[7,"fcfXrJxjpJuo91Onj3I+0N",1,[[2,"Men02_d",["_name"],19],[0,["_lpos"],19,[1,0,0,0]],[0,["_lrot"],19,[3,0,0,0,1]],[0,["_euler"],19,[1,0,0,0]]]],29]],[3,0,{},1,[4,"44SiDVKK5OMLxY6A4vp4Wz",null,null,-95,[7,"25B2piXG9OjYpfVcHGnkWZ",1,[[2,"Men02_e",["_name"],20],[0,["_lpos"],20,[1,0,0,0]],[0,["_lrot"],20,[3,0,0,0,1]],[0,["_euler"],20,[1,0,0,0]]]],30]]],0,[0,-1,51,0,-2,50,0,-3,49,0,-4,48,0,-5,47,0,-6,45,0,-7,43,0,-8,41,0,-9,39,0,-10,37,0,-11,35,0,-12,33,0,-13,31,0,-14,29,0,-15,27,0,-16,25,0,-17,23,0,-18,21,0,2,1,0,-1,2,0,-2,47,0,-3,48,0,-4,49,0,-5,50,0,-6,51,0,-1,21,0,-2,23,0,-3,25,0,-4,27,0,-5,29,0,-6,31,0,-7,33,0,-8,35,0,-9,37,0,-10,39,0,-11,41,0,-12,43,0,-13,45,0,0,22,0,0,22,0,0,22,0,2,21,0,0,24,0,0,24,0,0,24,0,2,23,0,0,26,0,0,26,0,0,26,0,2,25,0,0,28,0,0,28,0,0,28,0,2,27,0,0,30,0,0,30,0,0,30,0,2,29,0,0,32,0,0,32,0,0,32,0,2,31,0,0,34,0,0,34,0,0,34,0,2,33,0,0,36,0,0,36,0,0,36,0,2,35,0,0,38,0,0,38,0,0,38,0,2,37,0,0,40,0,0,40,0,0,40,0,2,39,0,0,42,0,0,42,0,0,42,0,2,41,0,0,44,0,0,44,0,0,44,0,2,43,0,0,46,0,0,46,0,0,46,0,2,45,0,2,47,0,2,48,0,2,49,0,2,50,0,2,51,0,5,1,95],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,3,3],[5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,181,182,183,184,185]],[[[17,".bin",2892595136,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":41184,"length":2532,"count":1266,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":41184,"count":858,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9648911952972412,-0.4741883873939514,-0.038527604192495346],"maxPosition",8,[1,0.8791553974151611,0.3984696865081787,0.8366652131080627]]],-1],0,0,[],[],[]],[[[17,".bin",4017475643,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3168,"length":384,"count":192,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":3168,"count":66,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5120202898979187,-0.5120201706886292,0],"maxPosition",8,[1,0.5120200514793396,0.5120202302932739,0.5931107401847839]]],-1],0,0,[],[],[]],[[[19,"New_zhalan_10",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{"lineWidth":25},[{"baseStep":0.9,"baseFeather":0.3,"shadeStep":0.6,"shadeFeather":-0.3,"shadowCover":0},"mainColor",8,[4,4290822336],"shadeColor1",8,[4,4285624697],"shadeColor2",8,[4,4287006342],"specular",8,[4,4278190080],"mainTexture",6,0,"emissiveMap",6,1],{},{}],0,11,0,0]]],0,0,[0,0,0],[8,9,6],[104,27,24]],[[[17,".bin",3005118071,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":23520,"length":1224,"count":612,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":23520,"count":490,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9930923581123352,-0.5095416903495789,-0.006296138744801283],"maxPosition",8,[1,0.983839750289917,0.21837513148784637,0.9171366691589355]]],-1],0,0,[],[],[]],[[[15,"Men07_c"],[18,"Men07_c",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-8,[7,"9ekJsc5PtOlY5FFlsdntOk",1,[[2,"zhanlan_06_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],3],[2,0,["_shadowReceivingMode"],3],[5,["_materials","0"],3,1],[5,["_mesh"],3,2]]],0]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-9,[7,"davd4Bt4NB3blVYs0NtRRA",1,[[2,"zhanlan_06_a-001",["_name"],4],[0,["_lpos"],4,[1,0,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],5],[2,0,["_shadowReceivingMode"],5],[5,["_materials","0"],5,4],[5,["_mesh"],5,5]]],3]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-10,[7,"93jUXOLRpHdLf/e5IlkA9S",1,[[2,"zhanlan_06_a-002",["_name"],6],[0,["_lpos"],6,[1,1.86,0,4.13]],[0,["_lrot"],6,[3,0,0,0,1]],[0,["_euler"],6,[1,0,0,0]],[2,1,["_shadowCastingMode"],7],[2,0,["_shadowReceivingMode"],7],[5,["_materials","0"],7,7],[5,["_mesh"],7,8]]],6]]],0,[0,-1,10,0,-2,9,0,-3,8,0,2,1,0,-1,8,0,-2,9,0,-3,10,0,2,8,0,2,9,0,2,10,0,5,1,10],[0,0,0,0,0,0,0,0,0],[3,1,1,3,1,1,3,1,1],[0,8,57,0,8,57,0,8,57]],[[[17,".bin",3627639386,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":31920,"length":1692,"count":846,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":31920,"count":665,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.044071078300476,-0.5148395299911499,-0.00998876616358757],"maxPosition",8,[1,1.042006015777588,0.5206038951873779,0.8762184381484985]]],-1],0,0,[],[],[]],[[[19,"22 - Default",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":1.9999998807907104,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[6],[4]],[[[24],[20,"zhalan_03_c",[-2],[12,"4e8P+g53xc3YOAXPCiTlBQ",null,null,null,-1,0]],[23,"zhalan_03_c",1,[[22,-3,[6,"0fvY7P0stXdaPWa+0ixFyY"],[0],[21],1]],[12,"44GjLkqEFcYplD1fq87Ac5",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[186,187]],[[[32,"zhalan_06",[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_1ST_SHADE_MAP":true,"SHADE_MAP_1_AS_SHADE_MAP_2":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{"rasterizerState":{"polygonMode":2,"lineWidth":0},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},[{"rasterizerState":{"depthBias":1.9,"depthBiasClamp":-2.4,"lineWidth":5.2},"depthStencilState":{}},"blendState",11,[{"targets":[{}]},"blendColor",8,[4,4292072403]]],{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],0,0,11,0],[[[{"lineWidth":25},"baseColor",8,[4,4279637526]],[{"baseStep":1.9,"baseFeather":0.2,"shadeStep":2.6,"shadeFeather":2.101,"shadowCover":0.622},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4294967295],"shadeColor2",8,[4,4283058766],"specular",8,[4,1275068416],"shadeMap1",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[12,6],[105,32]],[[[15,"Men03_e"],[18,"Men03_e",[-5,-6,-7],[16,"c57uWvNyVNdrybkH9yuPl9",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["1evKlEhR9ckIYLhneWiCl5"]],[1,["1evKlEhR9ckIYLhneWiCl5"]],[1,["1evKlEhR9ckIYLhneWiCl5"]],[3,0,null,1,[4,"1evKlEhR9ckIYLhneWiCl5",null,null,-11,[7,"35bY3NwNBB55PXvltD61jb",1,[[2,"zhalan_03_e",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],-8],[2,0,["_shadowReceivingMode"],-9],[5,["_materials","0"],-10,1]]],0]],[1,["aclBJwbcdda78gfCcLd6R0"]],[3,0,null,1,[4,"1evKlEhR9ckIYLhneWiCl5",null,null,-15,[7,"e5CF23HIBAnbUFQCAD2ysz",1,[[2,"zhalan_03_e-001",["_name"],3],[0,["_lpos"],3,[1,0,0,4.13]],[0,["_lrot"],3,[3,0,0,0,1]],[0,["_euler"],3,[1,0,0,0]],[2,1,["_shadowCastingMode"],-12],[2,0,["_shadowReceivingMode"],-13],[5,["_materials","0"],-14,3]]],2]],[1,["aclBJwbcdda78gfCcLd6R0"]],[3,0,null,1,[4,"1evKlEhR9ckIYLhneWiCl5",null,null,-19,[7,"92KTYqr8NAY7EII0cHGV0w",1,[[2,"zhalan_03_e-002",["_name"],4],[0,["_lpos"],4,[1,1.86,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],-16],[2,0,["_shadowReceivingMode"],-17],[5,["_materials","0"],-18,5]]],4]],[1,["aclBJwbcdda78gfCcLd6R0"]]],0,[0,-1,9,0,-2,7,0,-3,5,0,2,1,0,-1,5,0,-2,7,0,-3,9,0,0,6,0,0,6,0,0,6,0,2,5,0,0,8,0,0,8,0,0,8,0,2,7,0,0,10,0,0,10,0,0,10,0,2,9,0,5,1,19],[0,0,0,0,0,0],[3,1,3,1,3,1],[58,3,58,3,58,3]],[[[15,"FX_LevelUp"],[70,"FX_LevelUp",false,[-3,-4,-5],[[79,-2,[6,"68eEuEYTFDn6foOk3tMjbB"]]],[12,"e2MCyqYkhADoP3mvHlgpuV",null,null,null,-1,0],[1,0,0.024999999627470976,0],[1,1.2499999813735487,1.2499999813735487,1.2499999813735487]],[46,"Spark",1,[-6],[12,"acg7xGBTRM86UBw04aM0kn",null,null,null,1,0],[1,0,0.1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[80,1,false,15,2,[6,"8cjWDXz0ZD1JlVtH388tNj"],[0],[38],[49,3,0.6,0.3],[14],[14],[49,3,1,10],[14],[14],[14],[14],[49,3,0.6,1],[14],[14],[14],[[34,[27,15]],[34,[27,6]],[34,[31,1,[29,[0,1],[[25,2,1],[25,2,1]]]]],[34,[31,1,[29,[0,1],[[25,2,1],[25,2,1]]]]],[34,[31,1,[29,[0,1],[[25,2,1],[25,2,1]]]]],[34,[31,1,[29,[0,1],[[25,2,1],[25,2,1]]]]],[34,[31,1,[29,[0,1],[[25,2,1],[25,2,1]]]]]],[50,true,[48,1,[51,[[86,[4,4294309365]],[87,1,[4,4282445301]]],[[52,255],[42,255,0.6919642857142857],[42,0,1]]]]],[89,true,0,2,0,[27,1]],[90,true,[83,2,[29,[0,0.2282051282051282,0.35384615384615387,0.5692307692307692,0.7051282051282052,0.9948717948717949],[[35,2,1,-2.0222222222222226,-2.0222222222222226],[25,2,0.26666666666666666],[35,2,0.9407407407407408,0.7015873015873019,0.7015873015873019],[25,2,0.2814814814814815],[25,2,0.9629629629629629],[35,2,0.4925925925925926,-1.083333333333333,-1.083333333333333]]],[29,[0.007692307692307693,0.15384615384615385,0.2948717948717949,0.4666666666666667,0.6076923076923076,0.7256410256410256,0.8717948717948718,0.9923076923076923],[[35,2,0.6444444444444445,-3.164021164021164,-3.164021164021164],[35,2,0.18888888888888888,0.03209876543209881,0.03209876543209881],[35,2,0.8777777777777778,-0.030732860520094142,-0.030732860520094142],[35,2,0.24074074074074073,0.03523035230352306,0.03523035230352306],[25,2,0.8925925925925926],[25,2,0.22962962962962963],[25,2,0.8851851851851852],[35,2,0.3592592592592593,-5.145833333333324,-5.145833333333324]]]],[14],[14],[14]],[53,[14],[14],[14],[27,1]],[54,[14],[14],[14]],[93,true,0.1,[14],[14],[14],[14]],[55,[14],[14],[14]],[56,[31,1,[29,[0,1],[[25,2,1],[25,2,1]]]],[14]],[57],[58,[27,1],[14],[38],[38],-7],[96,1,2]],[46,"Gradient",1,[-8],[12,"f5cMkuMnBHXKXN/sQhIbmH",null,null,null,1,0],[1,0,0.059,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,-89.99999999999999,0,0]],[81,true,0.4,false,4,[6,"59fKC0sk9JTZmsDocnSXep"],[3],[63,[4,4280135925]],[27,4.5],[27,4.5],[27,10],[14],[14],[14],[14],[14],[27,0.4],[14],[27,2],[14],[[34,[31,1,[29,[0,1],[[25,2,1],[25,2,1]]]]]],[50,true,[48,1,[51,[[64]],[[52,255],[42,0,1]]]]],[65,0,[27,1]],[91,true,true,[14],[31,1,[29,[0,1],[[25,2,1],[25,2,1]]]],[31,1,[29,[0,1],[[25,2,1],[25,2,1]]]],[31,1,[29,[0,1],[[84,1,1,1,1],[85,1,1,1,1,1]]]]],[53,[14],[14],[14],[27,1]],[54,[14],[14],[14]],[94,[14],[14],[14],[14]],[55,[14],[14],[14]],[56,[31,1,[29,[0,1],[[25,2,1],[25,2,1]]]],[14]],[57],[58,[27,1],[14],[38],[38],-9],[66,4,1,4,5,6]],[46,"Ring",1,[-10],[12,"07ChkRjMRK4L2/ECFZMfAM",null,null,null,1,0],[1,0,0.087,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[82,0.4,false,6,[6,"f604lHF7RP9oj3VFqFf5gy"],[7],[63,[4,2099097845]],[27,7],[14],[14],[27,5],[14],[14],[14],[14],[27,0.2],[14],[27,10],[14],[50,true,[48,1,[51,[[64],[88,1]],[[52,0],[42,255,0.47098214285714285],[42,0,1]]]]],[65,0,[27,1]],[92,[14],[14],[14],[14]],[53,[14],[14],[14],[27,1]],[54,[14],[14],[14]],[95,true,[14],[14],[14],[14]],[55,[14],[14],[14]],[56,[31,1,[29,[0,1],[[25,2,1],[25,2,1]]]],[14]],[57],[58,[27,1],[14],[38],[38],-11],[66,4,1,8,9,10]]],0,[0,2,1,0,4,1,0,-1,2,0,-2,4,0,-3,6,0,-1,3,0,15,3,0,-1,5,0,15,5,0,-1,7,0,15,7,0,5,1,11],[0,0,0,0,0,0,0,0,0,0,0],[-1,16,17,-1,7,16,17,-1,7,16,17],[106,106,107,108,188,108,109,110,189,110,111]],[[[19,"_aa11猪牛羊\\objzhuM_Pig",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[6],[4]],[[[15,"zhanlanParent"],[61,"zhanlanParent",[-47,-48,-49,-50,-51,-52,-53,-54,-55,-56],[16,"da+0eF+8xHFY+xPjBvK6qL",null,null,-46,0,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45]],[1,0,0,-9.548]],[36,0,{},[28,"f5Crz/W5xCRpcO8MeMlG+z",[],-75,[7,"9aKQaZXBtD/5a2qShgrm+H",-74,[[2,"homezhalan",["_name"],-70],[0,["_lpos"],-71,[1,0,0,0]],[0,["_lrot"],-72,[3,0,0,0,1]],[0,["_euler"],-73,[1,0,0,0]],[26,false,["_active"],[1,["0fLHK7jgpKLq2Xk0Zu1lbP"]]]]],[-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69],1]],[36,0,{},[28,"f5Crz/W5xCRpcO8MeMlG+z",null,-96,[7,"30Eu4/M7FIcK2po+E620Hg",-95,[[2,"homezhalan02",["_name"],-89],[0,["_lpos"],-90,[1,0,0,0]],[0,["_lrot"],-91,[3,0,0,0,1]],[0,["_euler"],-92,[1,0,0,0]],[0,["_lrot"],-93,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-94,[1,0,-90,0]]]],[-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88],194]],[3,0,{},1,[4,"15nA224mJAV6BWgbgwboGo",null,null,-128,[13,"30ZPPahU5FrarMZHkQ7xfe",1,[[9,[1,["1cLXeMrT1Ap7ytKdxD1PNI","21IRP2nUhYMpRrWKiVCdHa"]],[[10,-102,[6,"ccYbz/WzdE1pUuWtLTUZcy"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-103,[6,"2boRF1titMYIGgPQvNcHqx"]]]],[9,[1,["84gK5xJSpCzr31/sWU7B9R","21IRP2nUhYMpRrWKiVCdHa"]],[[10,-104,[6,"9eD4nr/RNPdL2WiZT/smx/"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-105,[6,"f9fUzHls1DSLjfjA8EDwPD"]]]],[9,[1,["eaZpEmnhJJiqZpk8nEAbys","21IRP2nUhYMpRrWKiVCdHa"]],[[10,-106,[6,"81mmM3IlBOzqt4VSQYXSr5"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-107,[6,"bdr3c2g4ZNzbx5ZbWBgahN"]]]],[9,[1,["97uNZkdq9GALrBsMOpySLr","21IRP2nUhYMpRrWKiVCdHa"]],[[10,-108,[6,"44FAyVO8FDXYcjRCFbSNLT"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-109,[6,"caDxnYB35L7p7PLrBDk1zc"]]]],[9,[1,["d9RbEffqlEWbjdm5WenO9O","21IRP2nUhYMpRrWKiVCdHa"]],[[10,-110,[6,"76Ur6UgmJHz69w9M1qtb9N"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-111,[6,"de4zULC39O87/fWzokeD54"]]]],[9,[1,["0ckoyf+cBGaoLsYNfJVshv","21IRP2nUhYMpRrWKiVCdHa"]],[[10,-112,[6,"d7Fnl/Vn1FCpcQV70BgQ0A"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-113,[6,"62vL1SV19NDama8WSLGUVX"]]]],[9,[1,["6a6R7nmotJj4jRhM2rh1qv","21IRP2nUhYMpRrWKiVCdHa"]],[[10,-114,[6,"b2SBY5s41M2KAlHP0RHcRD"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-115,[6,"6crT7QxElDj4sm6v3AcvqY"]]]],[9,[1,["34IN2+An1NVpCVcKlY5RD+","21IRP2nUhYMpRrWKiVCdHa"]],[[10,-116,[6,"488vMHVwBN1JK7OwJGZBTN"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-117,[6,"62QymcZ1tPWIhyNrZUAE0f"]]]],[9,[1,["f8AON6pHdOMJ/PJ0wESj67","21IRP2nUhYMpRrWKiVCdHa"]],[[10,-118,[6,"707ISC87tK6b/eMDdRzOLZ"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-119,[6,"43EVWN3ZdHVokjPYNQef/i"]]]],[9,[1,["a3BCZzHQdLOISIei0S4g48","21IRP2nUhYMpRrWKiVCdHa"]],[[10,-120,[6,"144SIyB5JPDZeM7ymRwivL"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-121,[6,"a1vaSeAm5Ne6D8wylj3Zdo"]]]],[9,[1,["4aPojtNR9PcopjetioxKyw","21IRP2nUhYMpRrWKiVCdHa"]],[[10,-122,[6,"de+V5akedI6ZUrqmah5Bnf"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-123,[6,"e9nxpTRY9AV6ecq2uK5zmG"]]]],[9,[1,["639KagrgFBVrmNd7WswyC3","21IRP2nUhYMpRrWKiVCdHa"]],[[10,-124,[6,"d9D03C2aJKyb2UQjquc34F"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-125,[6,"e6UAwTjklOsJ+aOqAw2c2M"]]]],[9,[1,["25tgZT/eNEfqv7M6AkLCeA","21IRP2nUhYMpRrWKiVCdHa"]],[[10,-126,[6,"ff9BnmhopEiYaaOXy8rCuE"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-127,[6,"72TT6NothIc5jkTgEGFpN6"]]]]],[[2,"zhanlas01",["_name"],-97],[0,["_lpos"],-98,[1,0,0,0]],[0,["_lrot"],-99,[3,0,0,0,1]],[0,["_euler"],-100,[1,0,0,0]],[2,false,["_active"],-101],[26,true,["_active"],[1,["07NX2GIUZKM5PBO89NH5WD","5fWtOn69xABruBopjqLYYp"]]],[26,false,["_active"],[1,["b6qEAkul1GvrN1h+CDWKvP","00Mirw4mNHH5il8BwgdBkJ"]]],[26,false,["_active"],[1,["fcfXrJxjpJuo91Onj3I+0N","16OAjpi2lBGI8jne5BJN6U"]]],[26,false,["_active"],[1,["25B2piXG9OjYpfVcHGnkWZ","44SiDVKK5OMLxY6A4vp4Wz"]]],[26,false,["_active"],[1,["37gpvigcdIqJEvMRDSF418","66JYNjkVZI3pdh7qeqg2K1"]]],[40,["_lpos"],[1,["d3z+V5pLZFtoIanSwNDUDp"]],[1,0,0,0]],[8,["_materials","0"],[1,["25B2piXG9OjYpfVcHGnkWZ","0eKzG2sZhKfJ4XGBxl+RZt","2bc0KRZtxVZrgJfYbqdygf"]],97],[8,["_materials","0"],[1,["25B2piXG9OjYpfVcHGnkWZ","e79eDeIMVFlqhAMe3nnr91","2bc0KRZtxVZrgJfYbqdygf"]],98],[8,["_materials","0"],[1,["25B2piXG9OjYpfVcHGnkWZ","c1f+K5aG1OQZ2F6vmgyXZl","2bc0KRZtxVZrgJfYbqdygf"]],99],[8,["_materials","0"],[1,["fcfXrJxjpJuo91Onj3I+0N","6e4n8+meRLn4mC2k8vHbcF","1fvD2apadfm7WvNbp6FDTl"]],100],[8,["_materials","0"],[1,["fcfXrJxjpJuo91Onj3I+0N","99qCLyYvlMLrT/s37tdxT3","1fvD2apadfm7WvNbp6FDTl"]],101],[8,["_materials","0"],[1,["fcfXrJxjpJuo91Onj3I+0N","a04uu7ZEdD8JzaUZPdqziA","1fvD2apadfm7WvNbp6FDTl"]],102],[8,["_materials","0"],[1,["b6qEAkul1GvrN1h+CDWKvP","f3MxPApvBOl7jrLzKOwX3e","90M2fI5lpdUbAbGFsZPNCt"]],103],[8,["_materials","0"],[1,["b6qEAkul1GvrN1h+CDWKvP","45kgwqfS5KXb+3N1uGMp8+","90M2fI5lpdUbAbGFsZPNCt"]],104],[8,["_materials","0"],[1,["b6qEAkul1GvrN1h+CDWKvP","072apmIt9PT5y3zTJrDKUc","90M2fI5lpdUbAbGFsZPNCt"]],105],[8,["_materials","0"],[1,["07NX2GIUZKM5PBO89NH5WD","8ai33i5k9E55EN72MaFxmy","5aYFgI82pSLL8wV8GdmS7H"]],106],[8,["_materials","0"],[1,["07NX2GIUZKM5PBO89NH5WD","b5v/shjBdKkopxcqHMzkp2","5aYFgI82pSLL8wV8GdmS7H"]],107],[8,["_materials","0"],[1,["07NX2GIUZKM5PBO89NH5WD","00b2Pl4y1B0aHQkIWdKkBw","5aYFgI82pSLL8wV8GdmS7H"]],108],[8,["_materials","0"],[1,["37gpvigcdIqJEvMRDSF418","dcrPq4wX1CdJu9PWR7FVWp","edqsqthixXaZPkhrcRbztd"]],109],[8,["_materials","0"],[1,["37gpvigcdIqJEvMRDSF418","74vYX3NARH456pbdFkAFu0","edqsqthixXaZPkhrcRbztd"]],110],[8,["_materials","0"],[1,["37gpvigcdIqJEvMRDSF418","46awh1OChHHZ2GudadJrnL","edqsqthixXaZPkhrcRbztd"]],111],[8,["_materials","0"],[1,["25tgZT/eNEfqv7M6AkLCeA","edqsqthixXaZPkhrcRbztd"]],112],[8,["_materials","0"],[1,["639KagrgFBVrmNd7WswyC3","edqsqthixXaZPkhrcRbztd"]],113],[8,["_materials","0"],[1,["4aPojtNR9PcopjetioxKyw","edqsqthixXaZPkhrcRbztd"]],114],[8,["_materials","0"],[1,["a3BCZzHQdLOISIei0S4g48","edqsqthixXaZPkhrcRbztd"]],115],[8,["_materials","0"],[1,["f8AON6pHdOMJ/PJ0wESj67","edqsqthixXaZPkhrcRbztd"]],116],[8,["_materials","0"],[1,["34IN2+An1NVpCVcKlY5RD+","edqsqthixXaZPkhrcRbztd"]],117],[8,["_materials","0"],[1,["6a6R7nmotJj4jRhM2rh1qv","edqsqthixXaZPkhrcRbztd"]],118],[8,["_materials","0"],[1,["0ckoyf+cBGaoLsYNfJVshv","edqsqthixXaZPkhrcRbztd"]],119],[8,["_materials","0"],[1,["d9RbEffqlEWbjdm5WenO9O","edqsqthixXaZPkhrcRbztd"]],120],[8,["_materials","0"],[1,["97uNZkdq9GALrBsMOpySLr","edqsqthixXaZPkhrcRbztd"]],121],[8,["_materials","0"],[1,["eaZpEmnhJJiqZpk8nEAbys","edqsqthixXaZPkhrcRbztd"]],122],[8,["_materials","0"],[1,["84gK5xJSpCzr31/sWU7B9R","edqsqthixXaZPkhrcRbztd"]],123],[8,["_materials","0"],[1,["1cLXeMrT1Ap7ytKdxD1PNI","edqsqthixXaZPkhrcRbztd"]],124]]],70]],[62,"homezhalan01",4,[-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141],[12,"d3z+V5pLZFtoIanSwNDUDp",null,null,null,1,0]],[37,"zhanlas05",false,1,[-142,-143,-144,-145,-146,-147],[12,"2dU7mNeChMOY+eG1X9SdBR",null,null,null,1,0]],[37,"zhanlas07",false,1,[-148,-149,-150,-151,-152,-153],[12,"3ekb5jmKhEy4SFMnrMWU9+",null,null,null,1,0]],[37,"zhanlas06",false,1,[-154,-155,-156,-157,-158,-159],[12,"34MLFhxdpALqq0yGy/zDOn",null,null,null,1,0]],[37,"zhanlas08",false,1,[-160,-161,-162,-163,-164,-165],[12,"dePWE4tYBGV4GHSO2jd1YC",null,null,null,1,0]],[37,"zhanlas04",false,1,[-166,-167,-168,-169,-170,-171],[12,"10km2r8BFIj41tb6ijmlq5",null,null,null,1,0]],[37,"zhanlas03",false,1,[-172,-173,-174,-175,-176,-177],[12,"a9EbUcImFPR4LvFh7M0SGI",null,null,null,1,0]],[37,"zhanlas09",false,1,[-178,-179,-180,-181,-182,-183],[12,"6aG4rO+09Ob5YDWjRj3I31",null,null,null,1,0]],[3,0,{},2,[28,"9fT+84QgpFN4gCa6OjIgxF",null,-189,[7,"baXrlpA2ZMAofCHQG4EbuX",2,[[2,"Deco_zhalan_14",["_name"],-185],[0,["_lpos"],-186,[1,3,0,1.429]],[0,["_lrot"],-187,[3,0,0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-188,[1,0,89.99999999999999,0]]]],[-184],38]],[3,0,{},2,[28,"9fT+84QgpFN4gCa6OjIgxF",null,-195,[7,"35bY/StidOy7cvxVTaR18o",2,[[2,"Deco_zhalan_23",["_name"],-191],[0,["_lpos"],-192,[1,-3,0,3.316]],[0,["_lrot"],-193,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-194,[1,0,89.99999999999999,0]]]],[-190],2]],[3,0,{},2,[28,"9fT+84QgpFN4gCa6OjIgxF",null,-201,[7,"662qjqJwxHSomb2QOvJPcy",2,[[2,"Deco_zhalan_22",["_name"],-197],[0,["_lpos"],-198,[1,3,0,3.316]],[0,["_lrot"],-199,[3,0,0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-200,[1,0,89.99999999999999,0]]]],[-196],5]],[3,0,{},2,[28,"9fT+84QgpFN4gCa6OjIgxF",null,-207,[7,"13i+iL5s1EsY8od8VFptgj",2,[[2,"Deco_zhalan_26",["_name"],-203],[0,["_lpos"],-204,[1,-1.86,0,-5.122]],[0,["_lrot"],-205,[3,0,0,0,1]],[0,["_euler"],-206,[1,0,0,0]]]],[-202],8]],[3,0,{},2,[28,"9fT+84QgpFN4gCa6OjIgxF",null,-213,[7,"fb1PmGAQpOu6EQBkjBUVNt",2,[[2,"Deco_zhalan_25",["_name"],-209],[0,["_lpos"],-210,[1,0,0,-5.122]],[0,["_lrot"],-211,[3,0,0,0,1]],[0,["_euler"],-212,[1,0,0,0]]]],[-208],11]],[3,0,{},2,[28,"9fT+84QgpFN4gCa6OjIgxF",null,-219,[7,"31T7Sk9BtLj6xGr1kIUmrv",2,[[2,"Deco_zhalan_24",["_name"],-215],[0,["_lpos"],-216,[1,1.86,0,-5.122]],[0,["_lrot"],-217,[3,0,0,0,1]],[0,["_euler"],-218,[1,0,0,0]]]],[-214],14]],[3,0,{},2,[28,"9fT+84QgpFN4gCa6OjIgxF",null,-225,[7,"8eq+OcmcpOW4YvFrAMXVJQ",2,[[2,"Deco_zhalan_21",["_name"],-221],[0,["_lpos"],-222,[1,-3,0,1.429]],[0,["_lrot"],-223,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-224,[1,0,89.99999999999999,0]]]],[-220],17]],[3,0,{},2,[28,"9fT+84QgpFN4gCa6OjIgxF",null,-231,[7,"bctI5PrPVOnb9O+NYVQYR+",2,[[2,"Deco_zhalan_20",["_name"],-227],[0,["_lpos"],-228,[1,-3,0,-4.29]],[0,["_lrot"],-229,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-230,[1,0,89.99999999999999,0]]]],[-226],20]],[3,0,{},2,[28,"9fT+84QgpFN4gCa6OjIgxF",null,-237,[7,"ccX4F/7hxJzKnwocHFNSUg",2,[[2,"Deco_zhalan_19",["_name"],-233],[0,["_lpos"],-234,[1,-3,0,-2.388]],[0,["_lrot"],-235,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-236,[1,0,89.99999999999999,0]]]],[-232],23]],[3,0,{},2,[28,"9fT+84QgpFN4gCa6OjIgxF",null,-243,[7,"944nYNUMJJi78tW54vF+jJ",2,[[2,"Deco_zhalan_18",["_name"],-239],[0,["_lpos"],-240,[1,-3,0,-0.486]],[0,["_lrot"],-241,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-242,[1,0,89.99999999999999,0]]]],[-238],26]],[3,0,{},2,[28,"9fT+84QgpFN4gCa6OjIgxF",null,-249,[7,"f6+0XR0rdBNJ7N9+jtuoAu",2,[[2,"Deco_zhalan_17",["_name"],-245],[0,["_lpos"],-246,[1,3,0,-4.29]],[0,["_lrot"],-247,[3,0,0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-248,[1,0,89.99999999999999,0]]]],[-244],29]],[3,0,{},2,[28,"9fT+84QgpFN4gCa6OjIgxF",null,-255,[7,"f9bVI+N/dItIBez+1LCLsa",2,[[2,"Deco_zhalan_16",["_name"],-251],[0,["_lpos"],-252,[1,3,0,-2.388]],[0,["_lrot"],-253,[3,0,0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-254,[1,0,89.99999999999999,0]]]],[-250],32]],[3,0,{},2,[28,"9fT+84QgpFN4gCa6OjIgxF",null,-261,[7,"e9KFXQfipBebNY5cTqOmTQ",2,[[2,"Deco_zhalan_15",["_name"],-257],[0,["_lpos"],-258,[1,3,0,-0.486]],[0,["_lrot"],-259,[3,0,0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-260,[1,0,89.99999999999999,0]]]],[-256],35]],[3,0,{},1,[4,"15nA224mJAV6BWgbgwboGo",null,null,-270,[13,"25a38a4DdLKJYy3lf7cGph",1,[[9,[1,["9aKQaZXBtD/5a2qShgrm+H","baXrlpA2ZMAofCHQG4EbuX","9fT+84QgpFN4gCa6OjIgxF"]],[[10,13,[6,"1f6aAWDu5BWYVCrM5WZrgx"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,13,[6,"72Px1KG6FH+JDRhVpEOb2c"]]]],[9,[1,["9aKQaZXBtD/5a2qShgrm+H","e9KFXQfipBebNY5cTqOmTQ","9fT+84QgpFN4gCa6OjIgxF"]],[[10,25,[6,"64+TuA/HBIi4BS2lS+22QA"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,25,[6,"e2tJv60L1GLLpW2hCEh34E"]]]],[9,[1,["9aKQaZXBtD/5a2qShgrm+H","f9bVI+N/dItIBez+1LCLsa","9fT+84QgpFN4gCa6OjIgxF"]],[[10,24,[6,"35cuTYlaVG4o4PqpRRn+KO"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,24,[6,"ddScUlfihG14GTxMZXqKrK"]]]],[9,[1,["9aKQaZXBtD/5a2qShgrm+H","f6+0XR0rdBNJ7N9+jtuoAu","9fT+84QgpFN4gCa6OjIgxF"]],[[10,23,[6,"01AFejZSxPx6xhLwAOfsl9"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,23,[6,"6fiLp4FJpJeYwjHP5ycyq2"]]]],[9,[1,["9aKQaZXBtD/5a2qShgrm+H","944nYNUMJJi78tW54vF+jJ","9fT+84QgpFN4gCa6OjIgxF"]],[[10,22,[6,"9cY0iPKmZLXoTlsdmd2hIQ"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,22,[6,"80EIJa/R9LQKfYcPrM44RT"]]]],[9,[1,["9aKQaZXBtD/5a2qShgrm+H","ccX4F/7hxJzKnwocHFNSUg","9fT+84QgpFN4gCa6OjIgxF"]],[[10,21,[6,"4es6bq6UNJ8oSnJhItVwxg"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,21,[6,"a1Ms8N6NdHyq1+uurk0swD"]]]],[9,[1,["9aKQaZXBtD/5a2qShgrm+H","bctI5PrPVOnb9O+NYVQYR+","9fT+84QgpFN4gCa6OjIgxF"]],[[10,20,[6,"780sd6qAFAUJ8iP9nTrZZi"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,20,[6,"e2nuxN5bxNs6tZxLYlkvvb"]]]],[9,[1,["9aKQaZXBtD/5a2qShgrm+H","8eq+OcmcpOW4YvFrAMXVJQ","9fT+84QgpFN4gCa6OjIgxF"]],[[10,19,[6,"8dMHuLxUBPMLdIYxeyAohg"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,19,[6,"8bp1o/pfZCzodiOuPH7lET"]]]],[9,[1,["9aKQaZXBtD/5a2qShgrm+H","31T7Sk9BtLj6xGr1kIUmrv","9fT+84QgpFN4gCa6OjIgxF"]],[[10,18,[6,"c5EYu0wgBE15oK76+aZyC5"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,18,[6,"08e6Vqy1hMeqqvcQpVyi/e"]]]],[9,[1,["9aKQaZXBtD/5a2qShgrm+H","fb1PmGAQpOu6EQBkjBUVNt","9fT+84QgpFN4gCa6OjIgxF"]],[[10,17,[6,"6eOlu4p0BM0qpLIjEbKUEb"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,17,[6,"f99Lw8V2JDTYxLvnKrhDro"]]]],[9,[1,["9aKQaZXBtD/5a2qShgrm+H","13i+iL5s1EsY8od8VFptgj","9fT+84QgpFN4gCa6OjIgxF"]],[[10,16,[6,"a0zqELYzdK2a7RBy4zjizd"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,16,[6,"45McQcCchFhpuGGTj45g0s"]]]],[9,[1,["9aKQaZXBtD/5a2qShgrm+H","662qjqJwxHSomb2QOvJPcy","9fT+84QgpFN4gCa6OjIgxF"]],[[10,15,[6,"1dSFBt0QpFGLjLL7ecbP43"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,15,[6,"aaeW/rADdCrI+39mzVqhT1"]]]],[9,[1,["9aKQaZXBtD/5a2qShgrm+H","35bY/StidOy7cvxVTaR18o","9fT+84QgpFN4gCa6OjIgxF"]],[[10,14,[6,"08wLjoo3ZCP7WGSyOCBeqQ"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,14,[6,"7afcujwghL5L9QM0uOTq6e"]]]]],[[2,"zhanlas",["_name"],-262],[0,["_lpos"],-263,[1,0,0,0]],[0,["_lrot"],-264,[3,0,0,0,1]],[0,["_euler"],-265,[1,0,0,0]],[26,true,["_active"],[1,["e7AT5eM29KOJVIxN8YKD9t","8a17anT+FClJ+7NgD4Cuav"]]],[2,true,["_active"],-266],[2,1,["_materials","length"],-267],[5,["_materials","1"],-268,41],[5,["_materials","0"],-269,42],[8,["_materials","0"],[1,["1fycsOT5JBD5s8Ja1JpqpU","437ld2GFFK3It5zs9IH9t5","fc8g7MtpRSU7QoA2Hxy/h9"]],43],[8,["_materials","0"],[1,["1fycsOT5JBD5s8Ja1JpqpU","90wXuNsx1FB6vtSCuHJkmk","fc8g7MtpRSU7QoA2Hxy/h9"]],44],[8,["_materials","0"],[1,["aaKRkS9O5E6KuER0wX7LZp","70DBcJ7yZEyK/ppRA58DRt","60GV/aqoxS95YInC+CaR7t"]],45],[8,["_materials","0"],[1,["aaKRkS9O5E6KuER0wX7LZp","e3FK8apxtBb7AAfy78zmnP","60GV/aqoxS95YInC+CaR7t"]],46],[8,["_materials","0"],[1,["aaKRkS9O5E6KuER0wX7LZp","6aZJUvVJRCzIu5u3H+L5io","60GV/aqoxS95YInC+CaR7t"]],47],[8,["_materials","0"],[1,["affDzEXgBAFIgsh13W4Tdn","925JKT7Z5E9rtLBn8vsabP","c7tmBiuoFbH4IuZNLyhOLH"]],48],[8,["_materials","0"],[1,["affDzEXgBAFIgsh13W4Tdn","22ivRwkH5Nq4PIuQ8BkJgS","c7tmBiuoFbH4IuZNLyhOLH"]],49],[8,["_materials","0"],[1,["affDzEXgBAFIgsh13W4Tdn","b0wK1rjP5IkKUU2tQcmm5m","c7tmBiuoFbH4IuZNLyhOLH"]],50],[8,["_materials","0"],[1,["29jds6OUZNCqMi/3rSeFgM","e296Q9w5lCx7FKv4QT1JpL","c7v0XdX41ZRL3QzOKKifEt"]],51],[8,["_materials","0"],[1,["29jds6OUZNCqMi/3rSeFgM","f5XqEv059EK7Ih5oV3rcbL","c7v0XdX41ZRL3QzOKKifEt"]],52],[8,["_materials","0"],[1,["29jds6OUZNCqMi/3rSeFgM","b1uVB4xJtKQaz+y/GglUd6","c7v0XdX41ZRL3QzOKKifEt"]],53],[8,["_materials","0"],[1,["e7AT5eM29KOJVIxN8YKD9t","848KKM0KBFLZzm0iHj5xJv","c5qgfp+7hUy71DslW1Gvp8"]],54],[8,["_materials","0"],[1,["e7AT5eM29KOJVIxN8YKD9t","e38u5BPxFFQ4W+f8yX7cWp","c5qgfp+7hUy71DslW1Gvp8"]],55],[8,["_materials","0"],[1,["e7AT5eM29KOJVIxN8YKD9t","65PBg5AkRD45iAjR8nmqhK","c5qgfp+7hUy71DslW1Gvp8"]],56],[8,["_materials","0"],[1,["9aKQaZXBtD/5a2qShgrm+H","35bY/StidOy7cvxVTaR18o","9dvh7Pw6RA27Uq2L/F9ZzN","c5qgfp+7hUy71DslW1Gvp8"]],57],[8,["_materials","0"],[1,["9aKQaZXBtD/5a2qShgrm+H","662qjqJwxHSomb2QOvJPcy","9dvh7Pw6RA27Uq2L/F9ZzN","c5qgfp+7hUy71DslW1Gvp8"]],58],[8,["_materials","0"],[1,["9aKQaZXBtD/5a2qShgrm+H","13i+iL5s1EsY8od8VFptgj","9dvh7Pw6RA27Uq2L/F9ZzN","c5qgfp+7hUy71DslW1Gvp8"]],59],[8,["_materials","0"],[1,["9aKQaZXBtD/5a2qShgrm+H","fb1PmGAQpOu6EQBkjBUVNt","9dvh7Pw6RA27Uq2L/F9ZzN","c5qgfp+7hUy71DslW1Gvp8"]],60],[8,["_materials","0"],[1,["9aKQaZXBtD/5a2qShgrm+H","31T7Sk9BtLj6xGr1kIUmrv","9dvh7Pw6RA27Uq2L/F9ZzN","c5qgfp+7hUy71DslW1Gvp8"]],61],[8,["_materials","0"],[1,["9aKQaZXBtD/5a2qShgrm+H","8eq+OcmcpOW4YvFrAMXVJQ","9dvh7Pw6RA27Uq2L/F9ZzN","c5qgfp+7hUy71DslW1Gvp8"]],62],[8,["_materials","0"],[1,["9aKQaZXBtD/5a2qShgrm+H","bctI5PrPVOnb9O+NYVQYR+","9dvh7Pw6RA27Uq2L/F9ZzN","c5qgfp+7hUy71DslW1Gvp8"]],63],[8,["_materials","0"],[1,["9aKQaZXBtD/5a2qShgrm+H","ccX4F/7hxJzKnwocHFNSUg","9dvh7Pw6RA27Uq2L/F9ZzN","c5qgfp+7hUy71DslW1Gvp8"]],64],[8,["_materials","0"],[1,["9aKQaZXBtD/5a2qShgrm+H","944nYNUMJJi78tW54vF+jJ","9dvh7Pw6RA27Uq2L/F9ZzN","c5qgfp+7hUy71DslW1Gvp8"]],65],[8,["_materials","0"],[1,["9aKQaZXBtD/5a2qShgrm+H","f6+0XR0rdBNJ7N9+jtuoAu","9dvh7Pw6RA27Uq2L/F9ZzN","c5qgfp+7hUy71DslW1Gvp8"]],66],[8,["_materials","0"],[1,["9aKQaZXBtD/5a2qShgrm+H","f9bVI+N/dItIBez+1LCLsa","9dvh7Pw6RA27Uq2L/F9ZzN","c5qgfp+7hUy71DslW1Gvp8"]],67],[8,["_materials","0"],[1,["9aKQaZXBtD/5a2qShgrm+H","e9KFXQfipBebNY5cTqOmTQ","9dvh7Pw6RA27Uq2L/F9ZzN","c5qgfp+7hUy71DslW1Gvp8"]],68],[8,["_materials","0"],[1,["9aKQaZXBtD/5a2qShgrm+H","baXrlpA2ZMAofCHQG4EbuX","9dvh7Pw6RA27Uq2L/F9ZzN","c5qgfp+7hUy71DslW1Gvp8"]],69]]],0]],[1,["15nA224mJAV6BWgbgwboGo"]],[1,["15nA224mJAV6BWgbgwboGo"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["1e9ratialCZLquo15/R7/1"]],[3,0,{},1,[4,"15nA224mJAV6BWgbgwboGo",null,null,-302,[13,"4adfLpBt5CEYFDvbRjXAgI",1,[[9,[1,["30Eu4/M7FIcK2po+E620Hg","27p+PnyXJPg43LHtf2BSzf","f7f/SnzaFeKKwX9YRIdClj"]],[[10,-276,[6,"7di8buPJNMLq0C3hdGcBaL"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-277,[6,"1aI97xWpFB6Y7XRA5JQsck"]]]],[9,[1,["30Eu4/M7FIcK2po+E620Hg","3byPkltYpHU73IWYztu/RB","f7f/SnzaFeKKwX9YRIdClj"]],[[10,-278,[6,"96gaODwU1HOpN5ZU4Xnf6X"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-279,[6,"7cvT0PRARMG57EQflXYCmY"]]]],[9,[1,["30Eu4/M7FIcK2po+E620Hg","b3kV1JK/RBmYl0ybNWaMJo","f7f/SnzaFeKKwX9YRIdClj"]],[[10,-280,[6,"64Mw63mXZK+pki0XIEEcXp"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-281,[6,"c8t2fk6wZO24UhnvbzYFR1"]]]],[9,[1,["30Eu4/M7FIcK2po+E620Hg","3cjEuwCrFKv4Ao100Cics7","f7f/SnzaFeKKwX9YRIdClj"]],[[10,-282,[6,"11BAfyslxLyJs82D0JbNNh"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-283,[6,"b0k+H85FtEurG+KuPn+vNB"]]]],[9,[1,["30Eu4/M7FIcK2po+E620Hg","64uhCzcNxLtJ3L0u1tKM7L","f7f/SnzaFeKKwX9YRIdClj"]],[[10,-284,[6,"1a8qNX93dO3YtW9fi6Lyh+"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-285,[6,"38EvmpqH9Lnq7amUjJnCkU"]]]],[9,[1,["30Eu4/M7FIcK2po+E620Hg","b472U6RPxHjJI8bZ2PNjFh","f7f/SnzaFeKKwX9YRIdClj"]],[[10,-286,[6,"128JLnv/1CU4043WP84nL9"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-287,[6,"behEWeEwVIwJjcBNBwEwtE"]]]],[9,[1,["30Eu4/M7FIcK2po+E620Hg","27s92O0QhPhrfJx8Gks+hs","f7f/SnzaFeKKwX9YRIdClj"]],[[10,-288,[6,"a5aGLa8cZODrIEZw6V4lXc"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-289,[6,"dbITMmne1LlpDZ/9nGcTNb"]]]],[9,[1,["30Eu4/M7FIcK2po+E620Hg","89FJTzcLJCcKUG8aRKWQSD","f7f/SnzaFeKKwX9YRIdClj"]],[[10,-290,[6,"adjfpPL/JFJIognhxjb9VH"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-291,[6,"0bmh+0Vy1KiYQcwF8BfeuQ"]]]],[9,[1,["30Eu4/M7FIcK2po+E620Hg","23Pn+WQe9Phpja1i3pggd/","f7f/SnzaFeKKwX9YRIdClj"]],[[10,-292,[6,"fewfTWe6lEA4xuom5wiHmi"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-293,[6,"4ec+drTjNIPZ6PpAYPsmhy"]]]],[9,[1,["30Eu4/M7FIcK2po+E620Hg","3cRm1/6axIXrQDAhq7GzJc","f7f/SnzaFeKKwX9YRIdClj"]],[[10,-294,[6,"c8K809SVRNsZLbb8z51nV6"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-295,[6,"dbwL+U2n9KB7FPnOyNXFPq"]]]],[9,[1,["30Eu4/M7FIcK2po+E620Hg","44Ey4gmqFHy52qJDZCLFdk","f7f/SnzaFeKKwX9YRIdClj"]],[[10,-296,[6,"2b8ediQaRCUYtwCSDXklZJ"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-297,[6,"c1Rtr42jRJZL0A2wnYQvCz"]]]],[9,[1,["30Eu4/M7FIcK2po+E620Hg","85H6s7wPhAd7XlGcQt4ShI","f7f/SnzaFeKKwX9YRIdClj"]],[[10,-298,[6,"d3wee2dxlAdKlMzpRMju9x"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-299,[6,"bbMPBuWlZHMYbBpzGX+dHY"]]]],[9,[1,["30Eu4/M7FIcK2po+E620Hg","e3AAbz0o1OqbM85bh6TAiE","f7f/SnzaFeKKwX9YRIdClj"]],[[10,-300,[6,"6cjyy7Se5KmbFehuI9IiRW"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-301,[6,"a2EZy9gN1GC6lLae6KZTB4"]]]]],[[2,"zhanlas02",["_name"],-271],[0,["_lpos"],-272,[1,0,0,0]],[0,["_lrot"],-273,[3,0,0,0,1]],[0,["_euler"],-274,[1,0,0,0]],[2,false,["_active"],-275],[8,["_materials","0"],[1,["a7QTpLLR1CfpBfDHH0VVTn","92KTYqr8NAY7EII0cHGV0w","aclBJwbcdda78gfCcLd6R0"]],221],[8,["_materials","0"],[1,["a7QTpLLR1CfpBfDHH0VVTn","e5CF23HIBAnbUFQCAD2ysz","aclBJwbcdda78gfCcLd6R0"]],222],[8,["_materials","0"],[1,["a7QTpLLR1CfpBfDHH0VVTn","35bY3NwNBB55PXvltD61jb","aclBJwbcdda78gfCcLd6R0"]],223],[8,["_materials","0"],[1,["b9KiZItsdIy7QoN/Ad+9xc","caFksUGzdO35VhianHj9A6","58GGU9Wa5Y1IPE3HdkhHAJ"]],224],[8,["_materials","0"],[1,["b9KiZItsdIy7QoN/Ad+9xc","053l7immtPwb6tXM4ST1vX","58GGU9Wa5Y1IPE3HdkhHAJ"]],225],[8,["_materials","0"],[1,["b9KiZItsdIy7QoN/Ad+9xc","80h3voE9BCPIudgG4Mic8J","58GGU9Wa5Y1IPE3HdkhHAJ"]],226],[8,["_materials","0"],[1,["75ToHNzsJPMqtTMmn6Y5qy","bdEXz/fylC4JQHNdwKsSRW","0fvY7P0stXdaPWa+0ixFyY"]],227],[8,["_materials","0"],[1,["75ToHNzsJPMqtTMmn6Y5qy","8fEEEbvU1Mqok9SJrBeAjr","0fvY7P0stXdaPWa+0ixFyY"]],228],[8,["_materials","0"],[1,["75ToHNzsJPMqtTMmn6Y5qy","52EXboTtJKt4Hr5rHxYVsn","0fvY7P0stXdaPWa+0ixFyY"]],229],[8,["_materials","0"],[1,["3bPN4xLlVNv41weTNtTPae","bdiXeF1OpJcI9sYbI1Ka0j","a0Z33SV9hZf4umhR0sEIOw"]],230],[8,["_materials","0"],[1,["3bPN4xLlVNv41weTNtTPae","a4xZml1EdFaoRjw/EgUI0l","a0Z33SV9hZf4umhR0sEIOw"]],231],[8,["_materials","0"],[1,["3bPN4xLlVNv41weTNtTPae","c87iyx+DxKx6nJk2NEn7p5","a0Z33SV9hZf4umhR0sEIOw"]],232],[8,["_materials","0"],[1,["068BLnYv5BArVujjwP3ElT","09cCZ8bx5O67k8d6E1ii6e","14cUAMsiRZQrJAuHxu8aso"]],233],[8,["_materials","0"],[1,["068BLnYv5BArVujjwP3ElT","b4BcgkVLhOioWaA885zDof","14cUAMsiRZQrJAuHxu8aso"]],234],[8,["_materials","0"],[1,["068BLnYv5BArVujjwP3ElT","04XXBRjlxIpY0RVGJu2dWU","14cUAMsiRZQrJAuHxu8aso"]],235],[8,["_materials","0"],[1,["30Eu4/M7FIcK2po+E620Hg","e3AAbz0o1OqbM85bh6TAiE","14cUAMsiRZQrJAuHxu8aso"]],236],[8,["_materials","0"],[1,["30Eu4/M7FIcK2po+E620Hg","85H6s7wPhAd7XlGcQt4ShI","14cUAMsiRZQrJAuHxu8aso"]],237],[8,["_materials","0"],[1,["30Eu4/M7FIcK2po+E620Hg","44Ey4gmqFHy52qJDZCLFdk","14cUAMsiRZQrJAuHxu8aso"]],238],[8,["_materials","0"],[1,["30Eu4/M7FIcK2po+E620Hg","3cRm1/6axIXrQDAhq7GzJc","14cUAMsiRZQrJAuHxu8aso"]],239],[8,["_materials","0"],[1,["30Eu4/M7FIcK2po+E620Hg","23Pn+WQe9Phpja1i3pggd/","14cUAMsiRZQrJAuHxu8aso"]],240],[8,["_materials","0"],[1,["30Eu4/M7FIcK2po+E620Hg","89FJTzcLJCcKUG8aRKWQSD","14cUAMsiRZQrJAuHxu8aso"]],241],[8,["_materials","0"],[1,["30Eu4/M7FIcK2po+E620Hg","27s92O0QhPhrfJx8Gks+hs","14cUAMsiRZQrJAuHxu8aso"]],242],[8,["_materials","0"],[1,["30Eu4/M7FIcK2po+E620Hg","b472U6RPxHjJI8bZ2PNjFh","14cUAMsiRZQrJAuHxu8aso"]],243],[8,["_materials","0"],[1,["30Eu4/M7FIcK2po+E620Hg","64uhCzcNxLtJ3L0u1tKM7L","14cUAMsiRZQrJAuHxu8aso"]],244],[8,["_materials","0"],[1,["30Eu4/M7FIcK2po+E620Hg","3cjEuwCrFKv4Ao100Cics7","14cUAMsiRZQrJAuHxu8aso"]],245],[8,["_materials","0"],[1,["30Eu4/M7FIcK2po+E620Hg","b3kV1JK/RBmYl0ybNWaMJo","14cUAMsiRZQrJAuHxu8aso"]],246],[8,["_materials","0"],[1,["30Eu4/M7FIcK2po+E620Hg","3byPkltYpHU73IWYztu/RB","14cUAMsiRZQrJAuHxu8aso"]],247],[8,["_materials","0"],[1,["30Eu4/M7FIcK2po+E620Hg","27p+PnyXJPg43LHtf2BSzf","14cUAMsiRZQrJAuHxu8aso"]],248]]],193]],[1,["15nA224mJAV6BWgbgwboGo"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["f5Crz/W5xCRpcO8MeMlG+z"]],[1,["9fT+84QgpFN4gCa6OjIgxF"]],[1,["d9OaTkBx1QTrjuVSbuMCXd"]],[1,["9fT+84QgpFN4gCa6OjIgxF"]],[1,["d9OaTkBx1QTrjuVSbuMCXd"]],[1,["9fT+84QgpFN4gCa6OjIgxF"]],[1,["d9OaTkBx1QTrjuVSbuMCXd"]],[1,["9fT+84QgpFN4gCa6OjIgxF"]],[1,["d9OaTkBx1QTrjuVSbuMCXd"]],[1,["9fT+84QgpFN4gCa6OjIgxF"]],[1,["d9OaTkBx1QTrjuVSbuMCXd"]],[1,["9fT+84QgpFN4gCa6OjIgxF"]],[1,["d9OaTkBx1QTrjuVSbuMCXd"]],[1,["9fT+84QgpFN4gCa6OjIgxF"]],[1,["d9OaTkBx1QTrjuVSbuMCXd"]],[1,["9fT+84QgpFN4gCa6OjIgxF"]],[1,["d9OaTkBx1QTrjuVSbuMCXd"]],[1,["9fT+84QgpFN4gCa6OjIgxF"]],[1,["d9OaTkBx1QTrjuVSbuMCXd"]],[1,["9fT+84QgpFN4gCa6OjIgxF"]],[1,["d9OaTkBx1QTrjuVSbuMCXd"]],[1,["9fT+84QgpFN4gCa6OjIgxF"]],[1,["d9OaTkBx1QTrjuVSbuMCXd"]],[1,["9fT+84QgpFN4gCa6OjIgxF"]],[1,["d9OaTkBx1QTrjuVSbuMCXd"]],[1,["9fT+84QgpFN4gCa6OjIgxF"]],[1,["d9OaTkBx1QTrjuVSbuMCXd"]],[3,0,{},5,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-310,[7,"1cLXeMrT1Ap7ytKdxD1PNI",4,[[2,"zhalan_02_a",["_name"],-303],[0,["_lpos"],-304,[1,3,0,1.429]],[0,["_lrot"],-305,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-306,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-307],[2,0,["_shadowReceivingMode"],-308],[5,["_materials","0"],-309,96]]],95]],[3,0,{},5,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-318,[7,"84gK5xJSpCzr31/sWU7B9R",4,[[2,"zhalan_02_a-001",["_name"],-311],[0,["_lpos"],-312,[1,3,0,-0.486]],[0,["_lrot"],-313,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-314,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-315],[2,0,["_shadowReceivingMode"],-316],[5,["_materials","0"],-317,72]]],71]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[3,0,{},5,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-326,[7,"eaZpEmnhJJiqZpk8nEAbys",4,[[2,"zhalan_02_a-002",["_name"],-319],[0,["_lpos"],-320,[1,3,0,-2.388]],[0,["_lrot"],-321,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-322,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-323],[2,0,["_shadowReceivingMode"],-324],[5,["_materials","0"],-325,74]]],73]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[3,0,{},5,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-334,[7,"97uNZkdq9GALrBsMOpySLr",4,[[2,"zhalan_02_a-003",["_name"],-327],[0,["_lpos"],-328,[1,3,0,-4.29]],[0,["_lrot"],-329,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-330,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-331],[2,0,["_shadowReceivingMode"],-332],[5,["_materials","0"],-333,76]]],75]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[3,0,{},5,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-342,[7,"d9RbEffqlEWbjdm5WenO9O",4,[[2,"zhalan_02_a-004",["_name"],-335],[0,["_lpos"],-336,[1,-3,0,-0.486]],[0,["_lrot"],-337,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-338,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-339],[2,0,["_shadowReceivingMode"],-340],[5,["_materials","0"],-341,78]]],77]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[3,0,{},5,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-350,[7,"0ckoyf+cBGaoLsYNfJVshv",4,[[2,"zhalan_02_a-005",["_name"],-343],[0,["_lpos"],-344,[1,-3,0,-2.388]],[0,["_lrot"],-345,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-346,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-347],[2,0,["_shadowReceivingMode"],-348],[5,["_materials","0"],-349,80]]],79]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[3,0,{},5,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-358,[7,"6a6R7nmotJj4jRhM2rh1qv",4,[[2,"zhalan_02_a-006",["_name"],-351],[0,["_lpos"],-352,[1,-3,0,-4.29]],[0,["_lrot"],-353,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-354,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-355],[2,0,["_shadowReceivingMode"],-356],[5,["_materials","0"],-357,82]]],81]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[3,0,{},5,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-366,[7,"34IN2+An1NVpCVcKlY5RD+",4,[[2,"zhalan_02_a-007",["_name"],-359],[0,["_lpos"],-360,[1,-3,0,1.429]],[0,["_lrot"],-361,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-362,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-363],[2,0,["_shadowReceivingMode"],-364],[5,["_materials","0"],-365,84]]],83]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[3,0,{},5,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-374,[7,"f8AON6pHdOMJ/PJ0wESj67",4,[[2,"zhalan_02_a-008",["_name"],-367],[0,["_lpos"],-368,[1,1.86,0,-5.122]],[0,["_lrot"],-369,[3,0,0,0,1]],[0,["_euler"],-370,[1,0,0,0]],[2,1,["_shadowCastingMode"],-371],[2,0,["_shadowReceivingMode"],-372],[5,["_materials","0"],-373,86]]],85]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[3,0,{},5,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-382,[7,"a3BCZzHQdLOISIei0S4g48",4,[[2,"zhalan_02_a-009",["_name"],-375],[0,["_lpos"],-376,[1,0,0,-5.122]],[0,["_lrot"],-377,[3,0,0,0,1]],[0,["_euler"],-378,[1,0,0,0]],[2,1,["_shadowCastingMode"],-379],[2,0,["_shadowReceivingMode"],-380],[5,["_materials","0"],-381,88]]],87]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[3,0,{},5,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-390,[7,"4aPojtNR9PcopjetioxKyw",4,[[2,"zhalan_02_a-010",["_name"],-383],[0,["_lpos"],-384,[1,-1.86,0,-5.122]],[0,["_lrot"],-385,[3,0,0,0,1]],[0,["_euler"],-386,[1,0,0,0]],[2,1,["_shadowCastingMode"],-387],[2,0,["_shadowReceivingMode"],-388],[5,["_materials","0"],-389,90]]],89]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[3,0,{},5,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-398,[7,"639KagrgFBVrmNd7WswyC3",4,[[2,"zhalan_02_a-011",["_name"],-391],[0,["_lpos"],-392,[1,3,0,3.316]],[0,["_lrot"],-393,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-394,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-395],[2,0,["_shadowReceivingMode"],-396],[5,["_materials","0"],-397,92]]],91]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[3,0,{},5,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-406,[7,"25tgZT/eNEfqv7M6AkLCeA",4,[[2,"zhalan_02_a-012",["_name"],-399],[0,["_lpos"],-400,[1,-3,0,3.316]],[0,["_lrot"],-401,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-402,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-403],[2,0,["_shadowReceivingMode"],-404],[5,["_materials","0"],-405,94]]],93]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[1,["f5Crz/W5xCRpcO8MeMlG+z"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["f5Crz/W5xCRpcO8MeMlG+z"]],[1,["1e9ratialCZLquo15/R7/1"]],[3,0,{},3,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-414,[7,"27p+PnyXJPg43LHtf2BSzf",3,[[2,"zhalan_03_a",["_name"],-407],[0,["_lpos"],-408,[1,3,0,1.429]],[0,["_lrot"],-409,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-410,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-411],[2,0,["_shadowReceivingMode"],-412],[5,["_materials","0"],-413,220]]],219]],[1,["f5Crz/W5xCRpcO8MeMlG+z"]],[3,0,{},3,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-422,[7,"e3AAbz0o1OqbM85bh6TAiE",3,[[2,"zhalan_03_a-012",["_name"],-415],[0,["_lpos"],-416,[1,-3,0,3.316]],[0,["_lrot"],-417,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-418,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-419],[2,0,["_shadowReceivingMode"],-420],[5,["_materials","0"],-421,196]]],195]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[3,0,{},3,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-430,[7,"85H6s7wPhAd7XlGcQt4ShI",3,[[2,"zhalan_03_a-011",["_name"],-423],[0,["_lpos"],-424,[1,3,0,3.316]],[0,["_lrot"],-425,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-426,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-427],[2,0,["_shadowReceivingMode"],-428],[5,["_materials","0"],-429,198]]],197]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[3,0,{},3,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-438,[7,"44Ey4gmqFHy52qJDZCLFdk",3,[[2,"zhalan_03_a-010",["_name"],-431],[0,["_lpos"],-432,[1,-1.86,0,-5.122]],[0,["_lrot"],-433,[3,0,0,0,1]],[0,["_euler"],-434,[1,0,0,0]],[2,1,["_shadowCastingMode"],-435],[2,0,["_shadowReceivingMode"],-436],[5,["_materials","0"],-437,200]]],199]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[3,0,{},3,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-446,[7,"3cRm1/6axIXrQDAhq7GzJc",3,[[2,"zhalan_03_a-009",["_name"],-439],[0,["_lpos"],-440,[1,0,0,-5.122]],[0,["_lrot"],-441,[3,0,0,0,1]],[0,["_euler"],-442,[1,0,0,0]],[2,1,["_shadowCastingMode"],-443],[2,0,["_shadowReceivingMode"],-444],[5,["_materials","0"],-445,202]]],201]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[3,0,{},3,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-454,[7,"23Pn+WQe9Phpja1i3pggd/",3,[[2,"zhalan_03_a-008",["_name"],-447],[0,["_lpos"],-448,[1,1.86,0,-5.122]],[0,["_lrot"],-449,[3,0,0,0,1]],[0,["_euler"],-450,[1,0,0,0]],[2,1,["_shadowCastingMode"],-451],[2,0,["_shadowReceivingMode"],-452],[5,["_materials","0"],-453,204]]],203]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[3,0,{},3,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-462,[7,"89FJTzcLJCcKUG8aRKWQSD",3,[[2,"zhalan_03_a-007",["_name"],-455],[0,["_lpos"],-456,[1,-3,0,1.429]],[0,["_lrot"],-457,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-458,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-459],[2,0,["_shadowReceivingMode"],-460],[5,["_materials","0"],-461,206]]],205]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[3,0,{},3,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-470,[7,"27s92O0QhPhrfJx8Gks+hs",3,[[2,"zhalan_03_a-006",["_name"],-463],[0,["_lpos"],-464,[1,-3,0,-4.29]],[0,["_lrot"],-465,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-466,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-467],[2,0,["_shadowReceivingMode"],-468],[5,["_materials","0"],-469,208]]],207]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[3,0,{},3,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-478,[7,"b472U6RPxHjJI8bZ2PNjFh",3,[[2,"zhalan_03_a-005",["_name"],-471],[0,["_lpos"],-472,[1,-3,0,-2.388]],[0,["_lrot"],-473,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-474,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-475],[2,0,["_shadowReceivingMode"],-476],[5,["_materials","0"],-477,210]]],209]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[3,0,{},3,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-486,[7,"64uhCzcNxLtJ3L0u1tKM7L",3,[[2,"zhalan_03_a-004",["_name"],-479],[0,["_lpos"],-480,[1,-3,0,-0.486]],[0,["_lrot"],-481,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-482,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-483],[2,0,["_shadowReceivingMode"],-484],[5,["_materials","0"],-485,212]]],211]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[3,0,{},3,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-494,[7,"3cjEuwCrFKv4Ao100Cics7",3,[[2,"zhalan_03_a-003",["_name"],-487],[0,["_lpos"],-488,[1,3,0,-4.29]],[0,["_lrot"],-489,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-490,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-491],[2,0,["_shadowReceivingMode"],-492],[5,["_materials","0"],-493,214]]],213]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[3,0,{},3,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-502,[7,"b3kV1JK/RBmYl0ybNWaMJo",3,[[2,"zhalan_03_a-002",["_name"],-495],[0,["_lpos"],-496,[1,3,0,-2.388]],[0,["_lrot"],-497,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-498,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-499],[2,0,["_shadowReceivingMode"],-500],[5,["_materials","0"],-501,216]]],215]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[3,0,{},3,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-510,[7,"3byPkltYpHU73IWYztu/RB",3,[[2,"zhalan_03_a-001",["_name"],-503],[0,["_lpos"],-504,[1,3,0,-0.486]],[0,["_lrot"],-505,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-506,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-507],[2,0,["_shadowReceivingMode"],-508],[5,["_materials","0"],-509,218]]],217]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[1,["f5Crz/W5xCRpcO8MeMlG+z"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["f5Crz/W5xCRpcO8MeMlG+z"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["f5Crz/W5xCRpcO8MeMlG+z"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["f5Crz/W5xCRpcO8MeMlG+z"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["f5Crz/W5xCRpcO8MeMlG+z"]],[1,["1e9ratialCZLquo15/R7/1"]],[1,["c5qgfp+7hUy71DslW1Gvp8"]],[1,["c5qgfp+7hUy71DslW1Gvp8"]],[1,["c5qgfp+7hUy71DslW1Gvp8"]],[1,["c5qgfp+7hUy71DslW1Gvp8"]],[1,["c5qgfp+7hUy71DslW1Gvp8"]],[1,["c5qgfp+7hUy71DslW1Gvp8"]],[1,["c5qgfp+7hUy71DslW1Gvp8"]],[1,["c5qgfp+7hUy71DslW1Gvp8"]],[1,["c5qgfp+7hUy71DslW1Gvp8"]],[1,["c5qgfp+7hUy71DslW1Gvp8"]],[1,["c5qgfp+7hUy71DslW1Gvp8"]],[1,["c5qgfp+7hUy71DslW1Gvp8"]],[1,["c5qgfp+7hUy71DslW1Gvp8"]],[1,["1fycsOT5JBD5s8Ja1JpqpU","76ZiWo+gtE1L0HgaYtFec0","fc8g7MtpRSU7QoA2Hxy/h9"]],[1,["edqsqthixXaZPkhrcRbztd"]],[1,["edqsqthixXaZPkhrcRbztd"]],[1,["edqsqthixXaZPkhrcRbztd"]],[1,["edqsqthixXaZPkhrcRbztd"]],[1,["edqsqthixXaZPkhrcRbztd"]],[1,["edqsqthixXaZPkhrcRbztd"]],[1,["edqsqthixXaZPkhrcRbztd"]],[1,["edqsqthixXaZPkhrcRbztd"]],[1,["edqsqthixXaZPkhrcRbztd"]],[1,["edqsqthixXaZPkhrcRbztd"]],[1,["edqsqthixXaZPkhrcRbztd"]],[1,["edqsqthixXaZPkhrcRbztd"]],[1,["edqsqthixXaZPkhrcRbztd"]],[3,0,{},6,[4,"f5Crz/W5xCRpcO8MeMlG+z",null,null,-511,[7,"d0lqpq8ElFA7KgH83wnxsf",1,[[2,"homezhalan05",["_name"],112],[0,["_lpos"],112,[1,0,0,0]],[0,["_lrot"],112,[3,0,0,0,1]],[0,["_euler"],112,[1,0,0,0]],[8,["_materials","0"],[1,["9dfMDsu7dLdLSgTrp0K9Bc","afYWuJCeVfJofWrNDAty6k"]],126],[8,["_materials","0"],[1,["3ax74ttC1BTYvLQ6l1LinP","afYWuJCeVfJofWrNDAty6k"]],127],[8,["_materials","0"],[1,["45iPEprcZG/I+068RhxYv0","afYWuJCeVfJofWrNDAty6k"]],128],[8,["_materials","0"],[1,["a9mOX1MUtLi5riOrORF/5m","afYWuJCeVfJofWrNDAty6k"]],129],[8,["_materials","0"],[1,["a2wqe9ivlFl6V3uZzGb54i","afYWuJCeVfJofWrNDAty6k"]],130],[8,["_materials","0"],[1,["a0P0BQ1DlHfKiMB8x6E7wl","afYWuJCeVfJofWrNDAty6k"]],131],[8,["_materials","0"],[1,["2bj2jAI2VK7I+3NK19EQ7j","afYWuJCeVfJofWrNDAty6k"]],132],[8,["_materials","0"],[1,["4fQrdwDNdJRovjMqJFDLgW","afYWuJCeVfJofWrNDAty6k"]],133],[8,["_materials","0"],[1,["9dJ6hfrCJK45hH2Svg5Bku","afYWuJCeVfJofWrNDAty6k"]],134],[8,["_materials","0"],[1,["2391j++TZEG6CkEq8sFu73","afYWuJCeVfJofWrNDAty6k"]],135],[8,["_materials","0"],[1,["a5XSaYPQxMRquRBbaTXMou","afYWuJCeVfJofWrNDAty6k"]],136],[8,["_materials","0"],[1,["b81q7VY05ELYpMit9iNxhW","afYWuJCeVfJofWrNDAty6k"]],137],[8,["_materials","0"],[1,["633bM3fepOP4PsFOOT18Zm","afYWuJCeVfJofWrNDAty6k"]],138]]],125]],[3,0,{},6,[4,"1e9ratialCZLquo15/R7/1",null,null,-512,[7,"32l8OCS3xBx7HrddAEaQ4m",1,[[2,"Men06_a",["_name"],113],[0,["_lpos"],113,[1,0,0,0]],[0,["_lrot"],113,[3,0,0,0,1]],[0,["_euler"],113,[1,0,0,0]],[8,["_materials","0"],[1,["9ekJsc5PtOlY5FFlsdntOk","afYWuJCeVfJofWrNDAty6k"]],140],[8,["_materials","0"],[1,["davd4Bt4NB3blVYs0NtRRA","afYWuJCeVfJofWrNDAty6k"]],141],[8,["_materials","0"],[1,["93jUXOLRpHdLf/e5IlkA9S","afYWuJCeVfJofWrNDAty6k"]],142]]],139]],[3,0,{},6,[4,"1e9ratialCZLquo15/R7/1",null,null,-513,[7,"2fy7cNt+xMZ4P04lqhZFv/",1,[[2,"Men06_b",["_name"],29],[0,["_lpos"],29,[1,0,0,0]],[0,["_lrot"],29,[3,0,0,0,1]],[0,["_euler"],29,[1,0,0,0]],[2,false,["_active"],29],[8,["_materials","0"],[1,["9ekJsc5PtOlY5FFlsdntOk","afYWuJCeVfJofWrNDAty6k"]],144],[8,["_materials","0"],[1,["davd4Bt4NB3blVYs0NtRRA","afYWuJCeVfJofWrNDAty6k"]],145],[8,["_materials","0"],[1,["93jUXOLRpHdLf/e5IlkA9S","afYWuJCeVfJofWrNDAty6k"]],146]]],143]],[3,0,{},6,[4,"1e9ratialCZLquo15/R7/1",null,null,-514,[7,"d1px8ifQdGSppbXAQvKtLM",1,[[2,"Men06_c",["_name"],30],[0,["_lpos"],30,[1,0,0,0]],[0,["_lrot"],30,[3,0,0,0,1]],[0,["_euler"],30,[1,0,0,0]],[2,false,["_active"],30],[8,["_materials","0"],[1,["9ekJsc5PtOlY5FFlsdntOk","afYWuJCeVfJofWrNDAty6k"]],148],[8,["_materials","0"],[1,["davd4Bt4NB3blVYs0NtRRA","afYWuJCeVfJofWrNDAty6k"]],149],[8,["_materials","0"],[1,["93jUXOLRpHdLf/e5IlkA9S","afYWuJCeVfJofWrNDAty6k"]],150]]],147]],[3,0,{},6,[4,"1e9ratialCZLquo15/R7/1",null,null,-515,[7,"7cHfCfsy5Ac7SAKICBT+vN",1,[[2,"Men06_d",["_name"],31],[0,["_lpos"],31,[1,0,0,0]],[0,["_lrot"],31,[3,0,0,0,1]],[0,["_euler"],31,[1,0,0,0]],[2,false,["_active"],31],[8,["_materials","0"],[1,["9ekJsc5PtOlY5FFlsdntOk","afYWuJCeVfJofWrNDAty6k"]],152],[8,["_materials","0"],[1,["davd4Bt4NB3blVYs0NtRRA","afYWuJCeVfJofWrNDAty6k"]],153],[8,["_materials","0"],[1,["93jUXOLRpHdLf/e5IlkA9S","afYWuJCeVfJofWrNDAty6k"]],154]]],151]],[3,0,{},6,[4,"1e9ratialCZLquo15/R7/1",null,null,-516,[7,"a2VwLJ1idE1aG6uS4zghRv",1,[[2,"Men06_e",["_name"],32],[0,["_lpos"],32,[1,0,0,0]],[0,["_lrot"],32,[3,0,0,0,1]],[0,["_euler"],32,[1,0,0,0]],[2,false,["_active"],32],[8,["_materials","0"],[1,["9ekJsc5PtOlY5FFlsdntOk","afYWuJCeVfJofWrNDAty6k"]],156],[8,["_materials","0"],[1,["davd4Bt4NB3blVYs0NtRRA","afYWuJCeVfJofWrNDAty6k"]],157],[8,["_materials","0"],[1,["93jUXOLRpHdLf/e5IlkA9S","afYWuJCeVfJofWrNDAty6k"]],158]]],155]],[3,0,{},7,[4,"f5Crz/W5xCRpcO8MeMlG+z",null,null,-517,[7,"55fdjZmB1B+JuZnFfbkLa1",1,[[2,"homezhalan07",["_name"],114],[0,["_lpos"],114,[1,0,0,0]],[0,["_lrot"],114,[3,0,0,0,1]],[0,["_euler"],114,[1,0,0,0]],[8,["_materials","0"],[1,["87bWqV2xFKZY+M7+Pdc4L1","96WMc0CRRReJabzDxicy9z"]],160],[8,["_materials","0"],[1,["6cfuIiyIdMSYsNznEbdbqF","96WMc0CRRReJabzDxicy9z"]],161],[8,["_materials","0"],[1,["88PucTS7NDarn68Bi0MXQb","96WMc0CRRReJabzDxicy9z"]],162],[8,["_materials","0"],[1,["63FtW6ikRMwJQfgkb1Bdrp","96WMc0CRRReJabzDxicy9z"]],163],[8,["_materials","0"],[1,["68aYImQjZCibfwjVexZvOW","96WMc0CRRReJabzDxicy9z"]],164],[8,["_materials","0"],[1,["3ccDdJZPVDc55/hdAoWrbb","96WMc0CRRReJabzDxicy9z"]],165],[8,["_materials","0"],[1,["f12zHMOBNFkKQOtNAIiz+Y","96WMc0CRRReJabzDxicy9z"]],166],[8,["_materials","0"],[1,["d2b+XCIVZACYuzBwW8TYCG","96WMc0CRRReJabzDxicy9z"]],167],[8,["_materials","0"],[1,["6f36tr9FNPeZ/G/yay49KS","96WMc0CRRReJabzDxicy9z"]],168],[8,["_materials","0"],[1,["cfHC8UVB5CMJD4AGvqNcwv","96WMc0CRRReJabzDxicy9z"]],169],[8,["_materials","0"],[1,["5enQUm/sZBAaiZnlwpBM+h","96WMc0CRRReJabzDxicy9z"]],170],[8,["_materials","0"],[1,["addiU+zxdGu6NmuxEOwXzr","96WMc0CRRReJabzDxicy9z"]],171],[8,["_materials","0"],[1,["77+9rN6HpL+r51T23dcwWE","96WMc0CRRReJabzDxicy9z"]],172]]],159]],[3,0,{},7,[4,"1e9ratialCZLquo15/R7/1",null,null,-518,[7,"4aIu67SsNOAKWdGChsQKs0",1,[[2,"Men08_a",["_name"],115],[0,["_lpos"],115,[1,0,0,0]],[0,["_lrot"],115,[3,0,0,0,1]],[0,["_euler"],115,[1,0,0,0]],[8,["_materials","0"],[1,["93jUXOLRpHdLf/e5IlkA9S","afYWuJCeVfJofWrNDAty6k"]],174],[8,["_materials","0"],[1,["davd4Bt4NB3blVYs0NtRRA","afYWuJCeVfJofWrNDAty6k"]],175],[8,["_materials","0"],[1,["9ekJsc5PtOlY5FFlsdntOk","afYWuJCeVfJofWrNDAty6k"]],176]]],173]],[3,0,{},7,[4,"1e9ratialCZLquo15/R7/1",null,null,-519,[7,"2cKkRuw+5LkJ70JlVNdMu4",1,[[2,"Men08_b",["_name"],33],[0,["_lpos"],33,[1,0,0,0]],[0,["_lrot"],33,[3,0,0,0,1]],[0,["_euler"],33,[1,0,0,0]],[2,false,["_active"],33],[8,["_materials","0"],[1,["93jUXOLRpHdLf/e5IlkA9S","afYWuJCeVfJofWrNDAty6k"]],178],[8,["_materials","0"],[1,["davd4Bt4NB3blVYs0NtRRA","afYWuJCeVfJofWrNDAty6k"]],179],[8,["_materials","0"],[1,["9ekJsc5PtOlY5FFlsdntOk","afYWuJCeVfJofWrNDAty6k"]],180]]],177]],[3,0,{},7,[4,"1e9ratialCZLquo15/R7/1",null,null,-520,[7,"245lQVZOVH37YligHFgwMv",1,[[2,"Men08_c",["_name"],34],[0,["_lpos"],34,[1,0,0,0]],[0,["_lrot"],34,[3,0,0,0,1]],[0,["_euler"],34,[1,0,0,0]],[2,false,["_active"],34],[8,["_materials","0"],[1,["93jUXOLRpHdLf/e5IlkA9S","afYWuJCeVfJofWrNDAty6k"]],182],[8,["_materials","0"],[1,["davd4Bt4NB3blVYs0NtRRA","afYWuJCeVfJofWrNDAty6k"]],183],[8,["_materials","0"],[1,["9ekJsc5PtOlY5FFlsdntOk","afYWuJCeVfJofWrNDAty6k"]],184]]],181]],[3,0,{},7,[4,"1e9ratialCZLquo15/R7/1",null,null,-521,[7,"01dv9mGvVDv57tMTCkyiyZ",1,[[2,"Men08_d",["_name"],35],[0,["_lpos"],35,[1,0,0,0]],[0,["_lrot"],35,[3,0,0,0,1]],[0,["_euler"],35,[1,0,0,0]],[2,false,["_active"],35],[8,["_materials","0"],[1,["93jUXOLRpHdLf/e5IlkA9S","afYWuJCeVfJofWrNDAty6k"]],186],[8,["_materials","0"],[1,["davd4Bt4NB3blVYs0NtRRA","afYWuJCeVfJofWrNDAty6k"]],187],[8,["_materials","0"],[1,["9ekJsc5PtOlY5FFlsdntOk","afYWuJCeVfJofWrNDAty6k"]],188]]],185]],[3,0,{},7,[4,"1e9ratialCZLquo15/R7/1",null,null,-522,[7,"90Ji1fVhJAD4sjIEsmMlE6",1,[[2,"Men08_e",["_name"],36],[0,["_lpos"],36,[1,0,0,0]],[0,["_lrot"],36,[3,0,0,0,1]],[0,["_euler"],36,[1,0,0,0]],[2,false,["_active"],36],[8,["_materials","0"],[1,["93jUXOLRpHdLf/e5IlkA9S","afYWuJCeVfJofWrNDAty6k"]],190],[8,["_materials","0"],[1,["davd4Bt4NB3blVYs0NtRRA","afYWuJCeVfJofWrNDAty6k"]],191],[8,["_materials","0"],[1,["9ekJsc5PtOlY5FFlsdntOk","afYWuJCeVfJofWrNDAty6k"]],192]]],189]],[1,["14cUAMsiRZQrJAuHxu8aso"]],[1,["14cUAMsiRZQrJAuHxu8aso"]],[1,["14cUAMsiRZQrJAuHxu8aso"]],[1,["14cUAMsiRZQrJAuHxu8aso"]],[1,["14cUAMsiRZQrJAuHxu8aso"]],[1,["14cUAMsiRZQrJAuHxu8aso"]],[1,["14cUAMsiRZQrJAuHxu8aso"]],[1,["14cUAMsiRZQrJAuHxu8aso"]],[1,["14cUAMsiRZQrJAuHxu8aso"]],[1,["14cUAMsiRZQrJAuHxu8aso"]],[1,["14cUAMsiRZQrJAuHxu8aso"]],[1,["14cUAMsiRZQrJAuHxu8aso"]],[1,["14cUAMsiRZQrJAuHxu8aso"]],[3,0,{},8,[4,"f5Crz/W5xCRpcO8MeMlG+z",null,null,-523,[7,"b461BilNJEP4t85GLaoJNO",1,[[2,"homezhalan06",["_name"],143],[0,["_lpos"],143,[1,0,0,0]],[0,["_lrot"],143,[3,0,0,0,1]],[0,["_euler"],143,[1,0,0,0]],[8,["_materials","0"],[1,["68A6wDliBGg60pOiV0upOL","cffCiody5UT6pdhU9Gy+sB"]],250],[8,["_materials","0"],[1,["fei/BPEVBKIYn5fuMLMfde","cffCiody5UT6pdhU9Gy+sB"]],251],[8,["_materials","0"],[1,["0azmY2YkJFzLQmwK+3wNbG","cffCiody5UT6pdhU9Gy+sB"]],252],[8,["_materials","0"],[1,["dapcHghjZC8rzqxbzssgnA","cffCiody5UT6pdhU9Gy+sB"]],253],[8,["_materials","0"],[1,["fdMmRh3dVAfoTbOlw2TnOU","cffCiody5UT6pdhU9Gy+sB"]],254],[8,["_materials","0"],[1,["70dvLYnNhAtaxb1VALIjr0","cffCiody5UT6pdhU9Gy+sB"]],255],[8,["_materials","0"],[1,["f1dzkCiqFCsJIN1WM2eAd5","cffCiody5UT6pdhU9Gy+sB"]],256],[8,["_materials","0"],[1,["fc30cTfj1Ih7l5Dmymwio5","cffCiody5UT6pdhU9Gy+sB"]],257],[8,["_materials","0"],[1,["18xlMR6MRNMIrnpQQMiXx4","cffCiody5UT6pdhU9Gy+sB"]],258],[8,["_materials","0"],[1,["4cB1OGCEZGi6rEgvDtg068","cffCiody5UT6pdhU9Gy+sB"]],259],[8,["_materials","0"],[1,["bfqHGcpjBJzZTHnsddRq61","cffCiody5UT6pdhU9Gy+sB"]],260],[8,["_materials","0"],[1,["73LhJI7ZpPB6Ae8OU3l4yz","cffCiody5UT6pdhU9Gy+sB"]],261],[8,["_materials","0"],[1,["7dVd2j4WxLALdyGO6P0WjK","cffCiody5UT6pdhU9Gy+sB"]],262]]],249]],[3,0,{},8,[4,"1e9ratialCZLquo15/R7/1",null,null,-524,[7,"46j/wXMTRIhJG389Uzbaic",1,[[2,"Men07_a",["_name"],144],[0,["_lpos"],144,[1,0,0,0]],[0,["_lrot"],144,[3,0,0,0,1]],[0,["_euler"],144,[1,0,0,0]],[8,["_materials","0"],[1,["93jUXOLRpHdLf/e5IlkA9S","afYWuJCeVfJofWrNDAty6k"]],264],[8,["_materials","0"],[1,["davd4Bt4NB3blVYs0NtRRA","afYWuJCeVfJofWrNDAty6k"]],265],[8,["_materials","0"],[1,["9ekJsc5PtOlY5FFlsdntOk","afYWuJCeVfJofWrNDAty6k"]],266]]],263]],[3,0,{},8,[4,"1e9ratialCZLquo15/R7/1",null,null,-525,[7,"70wkA55spMkrydwFKA2PoU",1,[[2,"Men07_b",["_name"],39],[0,["_lpos"],39,[1,0,0,0]],[0,["_lrot"],39,[3,0,0,0,1]],[0,["_euler"],39,[1,0,0,0]],[2,false,["_active"],39],[8,["_materials","0"],[1,["93jUXOLRpHdLf/e5IlkA9S","afYWuJCeVfJofWrNDAty6k"]],268],[8,["_materials","0"],[1,["davd4Bt4NB3blVYs0NtRRA","afYWuJCeVfJofWrNDAty6k"]],269],[8,["_materials","0"],[1,["9ekJsc5PtOlY5FFlsdntOk","afYWuJCeVfJofWrNDAty6k"]],270]]],267]],[3,0,{},8,[4,"1e9ratialCZLquo15/R7/1",null,null,-526,[7,"c2MHFI3GdB9r+Rxpyv6hIN",1,[[2,"Men07_c",["_name"],40],[0,["_lpos"],40,[1,0,0,0]],[0,["_lrot"],40,[3,0,0,0,1]],[0,["_euler"],40,[1,0,0,0]],[2,false,["_active"],40],[8,["_materials","0"],[1,["93jUXOLRpHdLf/e5IlkA9S","afYWuJCeVfJofWrNDAty6k"]],272],[8,["_materials","0"],[1,["davd4Bt4NB3blVYs0NtRRA","afYWuJCeVfJofWrNDAty6k"]],273],[8,["_materials","0"],[1,["9ekJsc5PtOlY5FFlsdntOk","afYWuJCeVfJofWrNDAty6k"]],274]]],271]],[3,0,{},8,[4,"1e9ratialCZLquo15/R7/1",null,null,-527,[7,"d4DcPGyZlN3KP/RGslIvks",1,[[2,"Men07_d",["_name"],41],[0,["_lpos"],41,[1,0,0,0]],[0,["_lrot"],41,[3,0,0,0,1]],[0,["_euler"],41,[1,0,0,0]],[2,false,["_active"],41],[8,["_materials","0"],[1,["93jUXOLRpHdLf/e5IlkA9S","afYWuJCeVfJofWrNDAty6k"]],276],[8,["_materials","0"],[1,["davd4Bt4NB3blVYs0NtRRA","afYWuJCeVfJofWrNDAty6k"]],277],[8,["_materials","0"],[1,["9ekJsc5PtOlY5FFlsdntOk","afYWuJCeVfJofWrNDAty6k"]],278]]],275]],[3,0,{},8,[4,"1e9ratialCZLquo15/R7/1",null,null,-528,[7,"bb9V91PVhCwZiIxbkecy4t",1,[[2,"Men07_e",["_name"],42],[0,["_lpos"],42,[1,0,0,0]],[0,["_lrot"],42,[3,0,0,0,1]],[0,["_euler"],42,[1,0,0,0]],[2,false,["_active"],42],[8,["_materials","0"],[1,["93jUXOLRpHdLf/e5IlkA9S","afYWuJCeVfJofWrNDAty6k"]],280],[8,["_materials","0"],[1,["davd4Bt4NB3blVYs0NtRRA","afYWuJCeVfJofWrNDAty6k"]],281],[8,["_materials","0"],[1,["9ekJsc5PtOlY5FFlsdntOk","afYWuJCeVfJofWrNDAty6k"]],282]]],279]],[3,0,{},9,[4,"f5Crz/W5xCRpcO8MeMlG+z",null,null,-529,[7,"1cTNRCmclBSI6PwC/8/j4T",1,[[2,"homezhalan08",["_name"],145],[0,["_lpos"],145,[1,0,0,0]],[0,["_lrot"],145,[3,0,0,0,1]],[0,["_euler"],145,[1,0,0,0]],[8,["_materials","0"],[1,["fczhctct1Md5mN765EqwD0","dfz9JygylfHIjzmZOkzi0p"]],284],[8,["_materials","0"],[1,["0cRswcXgpGHq447sVzdIyi","dfz9JygylfHIjzmZOkzi0p"]],285],[8,["_materials","0"],[1,["50zfkGrohM14wLExjTvIj/","dfz9JygylfHIjzmZOkzi0p"]],286],[8,["_materials","0"],[1,["a6GyhzQaxGHoWtlzw3g5yu","dfz9JygylfHIjzmZOkzi0p"]],287],[8,["_materials","0"],[1,["abBdVXLllOMbzjuGtHLDaO","dfz9JygylfHIjzmZOkzi0p"]],288],[8,["_materials","0"],[1,["9cwYH0rBpPeL3uVUgytZqY","dfz9JygylfHIjzmZOkzi0p"]],289],[8,["_materials","0"],[1,["49DjWC5P1BTI1UWNeYStA6","dfz9JygylfHIjzmZOkzi0p"]],290],[8,["_materials","0"],[1,["d1LlmmGLNAjoXOdid4zNbl","dfz9JygylfHIjzmZOkzi0p"]],291],[8,["_materials","0"],[1,["d4nhquAUhCfpySonX2SVKQ","dfz9JygylfHIjzmZOkzi0p"]],292],[8,["_materials","0"],[1,["2fU/4iTqpPUYBtUpoAXhYg","dfz9JygylfHIjzmZOkzi0p"]],293],[8,["_materials","0"],[1,["7d06gAMEBOaoUiilk8dWXA","dfz9JygylfHIjzmZOkzi0p"]],294],[8,["_materials","0"],[1,["fbLDly+uRI06qhOKMh5a7W","dfz9JygylfHIjzmZOkzi0p"]],295],[8,["_materials","0"],[1,["e3PSC85PpP1rJ+1/TDgDln","dfz9JygylfHIjzmZOkzi0p"]],296]]],283]],[3,0,{},9,[4,"1e9ratialCZLquo15/R7/1",null,null,-530,[7,"2eCbL712NKlYYhO1hcuYDh",1,[[2,"Men09_a",["_name"],146],[0,["_lpos"],146,[1,0,0,0]],[0,["_lrot"],146,[3,0,0,0,1]],[0,["_euler"],146,[1,0,0,0]],[8,["_materials","0"],[1,["93jUXOLRpHdLf/e5IlkA9S","afYWuJCeVfJofWrNDAty6k"]],298],[8,["_materials","0"],[1,["davd4Bt4NB3blVYs0NtRRA","afYWuJCeVfJofWrNDAty6k"]],299],[8,["_materials","0"],[1,["9ekJsc5PtOlY5FFlsdntOk","afYWuJCeVfJofWrNDAty6k"]],300]]],297]],[3,0,{},9,[4,"1e9ratialCZLquo15/R7/1",null,null,-531,[7,"e1UBia7gtH04Cb8RuR7W6G",1,[[2,"Men09_b",["_name"],43],[0,["_lpos"],43,[1,0,0,0]],[0,["_lrot"],43,[3,0,0,0,1]],[0,["_euler"],43,[1,0,0,0]],[2,false,["_active"],43],[8,["_materials","0"],[1,["93jUXOLRpHdLf/e5IlkA9S","afYWuJCeVfJofWrNDAty6k"]],302],[8,["_materials","0"],[1,["davd4Bt4NB3blVYs0NtRRA","afYWuJCeVfJofWrNDAty6k"]],303],[8,["_materials","0"],[1,["9ekJsc5PtOlY5FFlsdntOk","afYWuJCeVfJofWrNDAty6k"]],304]]],301]],[3,0,{},9,[4,"1e9ratialCZLquo15/R7/1",null,null,-532,[7,"22WKVqcXhCAYc00tmBBy90",1,[[2,"Men09_c",["_name"],44],[0,["_lpos"],44,[1,0,0,0]],[0,["_lrot"],44,[3,0,0,0,1]],[0,["_euler"],44,[1,0,0,0]],[2,false,["_active"],44],[8,["_materials","0"],[1,["93jUXOLRpHdLf/e5IlkA9S","afYWuJCeVfJofWrNDAty6k"]],306],[8,["_materials","0"],[1,["davd4Bt4NB3blVYs0NtRRA","afYWuJCeVfJofWrNDAty6k"]],307],[8,["_materials","0"],[1,["9ekJsc5PtOlY5FFlsdntOk","afYWuJCeVfJofWrNDAty6k"]],308]]],305]],[3,0,{},9,[4,"1e9ratialCZLquo15/R7/1",null,null,-533,[7,"c0bc6rHXtKYoh8Lnp8Py27",1,[[2,"Men09_d",["_name"],45],[0,["_lpos"],45,[1,0,0,0]],[0,["_lrot"],45,[3,0,0,0,1]],[0,["_euler"],45,[1,0,0,0]],[2,false,["_active"],45],[8,["_materials","0"],[1,["93jUXOLRpHdLf/e5IlkA9S","afYWuJCeVfJofWrNDAty6k"]],310],[8,["_materials","0"],[1,["davd4Bt4NB3blVYs0NtRRA","afYWuJCeVfJofWrNDAty6k"]],311],[8,["_materials","0"],[1,["9ekJsc5PtOlY5FFlsdntOk","afYWuJCeVfJofWrNDAty6k"]],312]]],309]],[3,0,{},9,[4,"1e9ratialCZLquo15/R7/1",null,null,-534,[7,"60MjvxJO1EoonvA/XV5wFr",1,[[2,"Men09_e",["_name"],46],[0,["_lpos"],46,[1,0,0,0]],[0,["_lrot"],46,[3,0,0,0,1]],[0,["_euler"],46,[1,0,0,0]],[2,false,["_active"],46],[8,["_materials","0"],[1,["93jUXOLRpHdLf/e5IlkA9S","afYWuJCeVfJofWrNDAty6k"]],314],[8,["_materials","0"],[1,["davd4Bt4NB3blVYs0NtRRA","afYWuJCeVfJofWrNDAty6k"]],315],[8,["_materials","0"],[1,["9ekJsc5PtOlY5FFlsdntOk","afYWuJCeVfJofWrNDAty6k"]],316]]],313]],[3,0,{},10,[4,"f5Crz/W5xCRpcO8MeMlG+z",null,null,-535,[7,"39i8UK90pFormn7CHe9O0g",1,[[2,"homezhalan04",["_name"],147],[0,["_lpos"],147,[1,0,0,0]],[0,["_lrot"],147,[3,0,0,0,1]],[0,["_euler"],147,[1,0,0,0]],[8,["_materials","0"],[1,["f9JLzq5+xIGL5ejktwP+LR","c0UtYOaENdFZyy6UA7RCBB"]],318],[8,["_materials","0"],[1,["25O8k7eBVKlI6t1ZOJiEcS","c0UtYOaENdFZyy6UA7RCBB"]],319],[8,["_materials","0"],[1,["61WwYmsoJOnKFQoYMiLA2N","c0UtYOaENdFZyy6UA7RCBB"]],320],[8,["_materials","0"],[1,["10w953rVRJspiqnKCbEmun","c0UtYOaENdFZyy6UA7RCBB"]],321],[8,["_materials","0"],[1,["cacKz7PThCx6cTAJiyC/lV","c0UtYOaENdFZyy6UA7RCBB"]],322],[8,["_materials","0"],[1,["b6Of0Jnq1P0Ln2JoYUhJJU","c0UtYOaENdFZyy6UA7RCBB"]],323],[8,["_materials","0"],[1,["7akfAN3ztMrrrAwx95+CJ5","c0UtYOaENdFZyy6UA7RCBB"]],324],[8,["_materials","0"],[1,["0f4v2qOVNLGoOntyNzrTrf","c0UtYOaENdFZyy6UA7RCBB"]],325],[8,["_materials","0"],[1,["34Y5p4WgZCLqIMTRATHYmF","c0UtYOaENdFZyy6UA7RCBB"]],326],[8,["_materials","0"],[1,["c2CFzgQ+BHYrEZ6xd3tuS2","c0UtYOaENdFZyy6UA7RCBB"]],327],[8,["_materials","0"],[1,["ab7+0UrjpOJ7PC0Jb84dYx","c0UtYOaENdFZyy6UA7RCBB"]],328],[8,["_materials","0"],[1,["dc1IAoiwZKZKtlTD9+KfBf","c0UtYOaENdFZyy6UA7RCBB"]],329],[8,["_materials","0"],[1,["3dgVOobzVDtINDp2PPFWPf","c0UtYOaENdFZyy6UA7RCBB"]],330]]],317]],[3,0,{},10,[4,"1e9ratialCZLquo15/R7/1",null,null,-536,[7,"1bSKkW1bpMBKj8b/IK1QIN",1,[[2,"Men05_a",["_name"],148],[0,["_lpos"],148,[1,0,0,0]],[0,["_lrot"],148,[3,0,0,0,1]],[0,["_euler"],148,[1,0,0,0]],[8,["_materials","0"],[1,["48i1WKEp9NA5VfoUCRVQkc","c0UtYOaENdFZyy6UA7RCBB"]],332],[8,["_materials","0"],[1,["772yolbAtKc7fOYTrDTnLb","c0UtYOaENdFZyy6UA7RCBB"]],333],[8,["_materials","0"],[1,["6blvlY6zVHQ7WgGWiI3xzJ","c0UtYOaENdFZyy6UA7RCBB"]],334]]],331]],[3,0,{},10,[4,"1e9ratialCZLquo15/R7/1",null,null,-537,[7,"b91c3jz5lFJ4xhdJsii85P",1,[[2,"Men05_b",["_name"],47],[0,["_lpos"],47,[1,0,0,0]],[0,["_lrot"],47,[3,0,0,0,1]],[0,["_euler"],47,[1,0,0,0]],[2,false,["_active"],47],[8,["_materials","0"],[1,["e4g5wEOsFGjoDMlTzhWc2+","18ZSWJ27RXA5mb/8S3Azm1"]],336],[8,["_materials","0"],[1,["4b4o/ALd9Pk7B8XE48RR8E","18ZSWJ27RXA5mb/8S3Azm1"]],337],[8,["_materials","0"],[1,["3cHO3AC1hKNb3MelcR/n9c","18ZSWJ27RXA5mb/8S3Azm1"]],338]]],335]],[3,0,{},10,[4,"1e9ratialCZLquo15/R7/1",null,null,-538,[7,"ce+qkETrdLW5vC7+R3otIO",1,[[2,"Men05_c",["_name"],48],[0,["_lpos"],48,[1,0,0,0]],[0,["_lrot"],48,[3,0,0,0,1]],[0,["_euler"],48,[1,0,0,0]],[2,false,["_active"],48],[8,["_materials","0"],[1,["a9h2kBKxhL8KGGfYBoZsEb","2aUzrLrn5QLY9hBePph5oy"]],340],[8,["_materials","0"],[1,["4ftGfidoxKRrIKaxDCBJ6C","2aUzrLrn5QLY9hBePph5oy"]],341],[8,["_materials","0"],[1,["9bXG47LWlD6pp5HpQdKlKG","2aUzrLrn5QLY9hBePph5oy"]],342]]],339]],[3,0,{},10,[4,"1e9ratialCZLquo15/R7/1",null,null,-539,[7,"84xY82otNA4a3mQFYnvvf6",1,[[2,"Men05_d",["_name"],49],[0,["_lpos"],49,[1,0,0,0]],[0,["_lrot"],49,[3,0,0,0,1]],[0,["_euler"],49,[1,0,0,0]],[2,false,["_active"],49],[8,["_materials","0"],[1,["1bYQX9T65HY7kAvrNxgaQD","78ugr2twhS8KA3HFPmrZkr"]],344],[8,["_materials","0"],[1,["5axQ4c/ttNfIbIweZMkr6j","78ugr2twhS8KA3HFPmrZkr"]],345],[8,["_materials","0"],[1,["4ad0tamfZOjIPmu/JKMteK","78ugr2twhS8KA3HFPmrZkr"]],346]]],343]],[3,0,{},10,[4,"1e9ratialCZLquo15/R7/1",null,null,-540,[7,"00KcRy6S5Er6Hv/GYRv25m",1,[[2,"Men05_e",["_name"],50],[0,["_lpos"],50,[1,0,0,0]],[0,["_lrot"],50,[3,0,0,0,1]],[0,["_euler"],50,[1,0,0,0]],[2,false,["_active"],50],[8,["_materials","0"],[1,["c2MTGOZ7xIdJRSSsrpb5or","c2mcRBzKFXc6SqMvQx6qBx"]],348],[8,["_materials","0"],[1,["84S4v/eE9Noo14N3epXB30","c2mcRBzKFXc6SqMvQx6qBx"]],349],[8,["_materials","0"],[1,["bdo3k9UD9DRJGs58hkr8Jy","c2mcRBzKFXc6SqMvQx6qBx"]],350]]],347]],[3,0,{},11,[4,"f5Crz/W5xCRpcO8MeMlG+z",null,null,-541,[7,"81xXPv6dBI/4RvpvEw4Xfy",1,[[2,"homezhalan03",["_name"],149],[0,["_lpos"],149,[1,0,0,0]],[0,["_lrot"],149,[3,0,0,0,1]],[0,["_euler"],149,[1,0,0,0]],[8,["_materials","0"],[1,["fetXVCFjtLHL0ZntJk/Jyr","2dmx8bZVpf2qLwoCHchrnS"]],352],[8,["_materials","0"],[1,["e6+cMVxjNKU6PZ6MVClskb","2dmx8bZVpf2qLwoCHchrnS"]],353],[8,["_materials","0"],[1,["47KvpThvhIgJg7MFTltrEc","2dmx8bZVpf2qLwoCHchrnS"]],354],[8,["_materials","0"],[1,["48fhd5LRdN/ZlkgAntHgXs","2dmx8bZVpf2qLwoCHchrnS"]],355],[8,["_materials","0"],[1,["67Enj0fOhCq61WFlW60+dh","2dmx8bZVpf2qLwoCHchrnS"]],356],[8,["_materials","0"],[1,["6aE21g4GRGOYIDmGGlEmWc","2dmx8bZVpf2qLwoCHchrnS"]],357],[8,["_materials","0"],[1,["473D9CpNtPzql/m3GJ+Yvm","2dmx8bZVpf2qLwoCHchrnS"]],358],[8,["_materials","0"],[1,["eawelGG0NEuaapMW0cU3n8","2dmx8bZVpf2qLwoCHchrnS"]],359],[8,["_materials","0"],[1,["ecNLLc7cBO+6AG7Bu7u5mB","2dmx8bZVpf2qLwoCHchrnS"]],360],[8,["_materials","0"],[1,["caFnw2a01F5KImvx2sUf1D","2dmx8bZVpf2qLwoCHchrnS"]],361],[8,["_materials","0"],[1,["89Hh1YcjdFoo4OOxpbX+xR","2dmx8bZVpf2qLwoCHchrnS"]],362],[8,["_materials","0"],[1,["38saWD8J1NqbUoq3eg+yVQ","2dmx8bZVpf2qLwoCHchrnS"]],363],[8,["_materials","0"],[1,["bchJwg02xCs6mjui9olk8c","2dmx8bZVpf2qLwoCHchrnS"]],364]]],351]],[3,0,{},11,[4,"1e9ratialCZLquo15/R7/1",null,null,-542,[7,"efd3m+yLhHAp+/MqhG7/Kt",1,[[2,"Men04_a",["_name"],150],[0,["_lpos"],150,[1,0,0,0]],[0,["_lrot"],150,[3,0,0,0,1]],[0,["_euler"],150,[1,0,0,0]],[8,["_materials","0"],[1,["0ccxhXPdpHd4dEQHopokDz","2dmx8bZVpf2qLwoCHchrnS"]],366],[8,["_materials","0"],[1,["715snqShhFzrjf+NF1+3sh","2dmx8bZVpf2qLwoCHchrnS"]],367],[8,["_materials","0"],[1,["b3RGkIVDZPKIpX5LP93M4k","2dmx8bZVpf2qLwoCHchrnS"]],368]]],365]],[3,0,{},11,[4,"1e9ratialCZLquo15/R7/1",null,null,-543,[7,"dfzXv1gW5J4bD6D3SU5kZ/",1,[[2,"Men04_b",["_name"],51],[0,["_lpos"],51,[1,0,0,0]],[0,["_lrot"],51,[3,0,0,0,1]],[0,["_euler"],51,[1,0,0,0]],[2,false,["_active"],51],[8,["_materials","0"],[1,["1fLNK/8UFGw4SctkLXZ/nu","a1wZSQjC5VQbS9ai+P4oFM"]],370],[8,["_materials","0"],[1,["5ayCmiLwVHrKx82m/yuXYv","a1wZSQjC5VQbS9ai+P4oFM"]],371],[8,["_materials","0"],[1,["56RW9AGzhKhqglY/tOsRSv","a1wZSQjC5VQbS9ai+P4oFM"]],372]]],369]],[3,0,{},11,[4,"1e9ratialCZLquo15/R7/1",null,null,-544,[7,"54zUpJ9CVGw6vHYP/hmiAT",1,[[2,"Men04_c",["_name"],52],[0,["_lpos"],52,[1,0,0,0]],[0,["_lrot"],52,[3,0,0,0,1]],[0,["_euler"],52,[1,0,0,0]],[2,false,["_active"],52],[8,["_materials","0"],[1,["a9MKQbxpdBs5Ro1KW1wc+4","56EON+NUBaqa92wWGAM9f8"]],374],[8,["_materials","0"],[1,["3ebY5lIKBHtZUdmCwXe+vw","56EON+NUBaqa92wWGAM9f8"]],375],[8,["_materials","0"],[1,["72Vg/ctnlNDrmebtq1UtVq","56EON+NUBaqa92wWGAM9f8"]],376]]],373]],[3,0,{},11,[4,"1e9ratialCZLquo15/R7/1",null,null,-545,[7,"0fx1eUHKtORZih7qfoV9hs",1,[[2,"Men04_d",["_name"],53],[0,["_lpos"],53,[1,0,0,0]],[0,["_lrot"],53,[3,0,0,0,1]],[0,["_euler"],53,[1,0,0,0]],[2,false,["_active"],53],[8,["_materials","0"],[1,["7ayGbfCZNI8p8U3J+iV07q","1ctjuxOeJdurJTAsVMsgXI"]],378],[8,["_materials","0"],[1,["b8phE0lfRMi7jQUkA/Cy5J","1ctjuxOeJdurJTAsVMsgXI"]],379],[8,["_materials","0"],[1,["13gM0ic4VOjZB9w19ek3N5","1ctjuxOeJdurJTAsVMsgXI"]],380]]],377]],[3,0,{},11,[4,"1e9ratialCZLquo15/R7/1",null,null,-546,[7,"21itFwVelL8Zo+r4t6mb+E",1,[[2,"Men04_e",["_name"],54],[0,["_lpos"],54,[1,0,0,0]],[0,["_lrot"],54,[3,0,0,0,1]],[0,["_euler"],54,[1,0,0,0]],[2,false,["_active"],54],[8,["_materials","0"],[1,["a9OAwOY7NEt5yHjjbUYPgF","9d4TQ4OghWAJIiv0HwiTFI"]],382],[8,["_materials","0"],[1,["e648Cnnu9BmbZwVo8uAa+T","9d4TQ4OghWAJIiv0HwiTFI"]],383],[8,["_materials","0"],[1,["41uZdcT7hAtoGaQUlLHPKh","9d4TQ4OghWAJIiv0HwiTFI"]],384]]],381]],[3,0,{},12,[4,"f5Crz/W5xCRpcO8MeMlG+z",null,null,-547,[7,"923YjQvH1CJIBJk2GcZ7Jk",1,[[2,"homezhalan09",["_name"],151],[0,["_lpos"],151,[1,0,0,0]],[0,["_lrot"],151,[3,0,0,0,1]],[0,["_euler"],151,[1,0,0,0]],[8,["_materials","0"],[1,["9bGlSvGvVFp7LVv7bng88V","27+zJTmtRT2YEFA8eM/OvY"]],386],[8,["_materials","0"],[1,["79l5VqcI9KuIlRW5872Hvn","27+zJTmtRT2YEFA8eM/OvY"]],387],[8,["_materials","0"],[1,["c454jMtm1F9byTTae8+Lub","27+zJTmtRT2YEFA8eM/OvY"]],388],[8,["_materials","0"],[1,["d7La/t5BxDGLZnsEMGS4c3","27+zJTmtRT2YEFA8eM/OvY"]],389],[8,["_materials","0"],[1,["168BKUIv1OV7GZl4QtQSEW","27+zJTmtRT2YEFA8eM/OvY"]],390],[8,["_materials","0"],[1,["163ijckSFC5o1SzdR3vGxR","27+zJTmtRT2YEFA8eM/OvY"]],391],[8,["_materials","0"],[1,["80qz3sp7BN+4CFHNuwfWz5","27+zJTmtRT2YEFA8eM/OvY"]],392],[8,["_materials","0"],[1,["7f0qkqNDZCoIgm1tK9ztj3","27+zJTmtRT2YEFA8eM/OvY"]],393],[8,["_materials","0"],[1,["c79UNxoTBJNK/1LI/3co8R","27+zJTmtRT2YEFA8eM/OvY"]],394],[8,["_materials","0"],[1,["9b50OV4wtLi7T5B7nzkswJ","27+zJTmtRT2YEFA8eM/OvY"]],395],[8,["_materials","0"],[1,["06Qg9ywmJCU59TJA1B2F0g","27+zJTmtRT2YEFA8eM/OvY"]],396],[8,["_materials","0"],[1,["66H/v1mItCL6OPsvmQxsJa","27+zJTmtRT2YEFA8eM/OvY"]],397],[8,["_materials","0"],[1,["8bjDhNjVlIg7A1c/fepo1s","27+zJTmtRT2YEFA8eM/OvY"]],398]]],385]],[3,0,{},12,[4,"1e9ratialCZLquo15/R7/1",null,null,-548,[7,"86owhEg2VBCYL0qvOKGLZb",1,[[2,"Men10_a",["_name"],152],[0,["_lpos"],152,[1,0,0,0]],[0,["_lrot"],152,[3,0,0,0,1]],[0,["_euler"],152,[1,0,0,0]],[8,["_materials","0"],[1,["93jUXOLRpHdLf/e5IlkA9S","afYWuJCeVfJofWrNDAty6k"]],400],[8,["_materials","0"],[1,["davd4Bt4NB3blVYs0NtRRA","afYWuJCeVfJofWrNDAty6k"]],401],[8,["_materials","0"],[1,["9ekJsc5PtOlY5FFlsdntOk","afYWuJCeVfJofWrNDAty6k"]],402]]],399]],[3,0,{},12,[4,"1e9ratialCZLquo15/R7/1",null,null,-549,[7,"06+/o5M8BP+ZwvvwOY6SOS",1,[[2,"Men10_b",["_name"],55],[0,["_lpos"],55,[1,0,0,0]],[0,["_lrot"],55,[3,0,0,0,1]],[0,["_euler"],55,[1,0,0,0]],[2,false,["_active"],55],[8,["_materials","0"],[1,["93jUXOLRpHdLf/e5IlkA9S","afYWuJCeVfJofWrNDAty6k"]],404],[8,["_materials","0"],[1,["davd4Bt4NB3blVYs0NtRRA","afYWuJCeVfJofWrNDAty6k"]],405],[8,["_materials","0"],[1,["9ekJsc5PtOlY5FFlsdntOk","afYWuJCeVfJofWrNDAty6k"]],406]]],403]],[3,0,{},12,[4,"1e9ratialCZLquo15/R7/1",null,null,-550,[7,"4dBufJ0HNMfbcvoTRVaEd5",1,[[2,"Men10_c",["_name"],56],[0,["_lpos"],56,[1,0,0,0]],[0,["_lrot"],56,[3,0,0,0,1]],[0,["_euler"],56,[1,0,0,0]],[2,false,["_active"],56],[8,["_materials","0"],[1,["93jUXOLRpHdLf/e5IlkA9S","afYWuJCeVfJofWrNDAty6k"]],408],[8,["_materials","0"],[1,["davd4Bt4NB3blVYs0NtRRA","afYWuJCeVfJofWrNDAty6k"]],409],[8,["_materials","0"],[1,["9ekJsc5PtOlY5FFlsdntOk","afYWuJCeVfJofWrNDAty6k"]],410]]],407]],[3,0,{},12,[4,"1e9ratialCZLquo15/R7/1",null,null,-551,[7,"a7TW1Jx3xLrrTUmuypYKZ0",1,[[2,"Men10_d",["_name"],57],[0,["_lpos"],57,[1,0,0,0]],[0,["_lrot"],57,[3,0,0,0,1]],[0,["_euler"],57,[1,0,0,0]],[2,false,["_active"],57],[8,["_materials","0"],[1,["93jUXOLRpHdLf/e5IlkA9S","afYWuJCeVfJofWrNDAty6k"]],412],[8,["_materials","0"],[1,["davd4Bt4NB3blVYs0NtRRA","afYWuJCeVfJofWrNDAty6k"]],413],[8,["_materials","0"],[1,["9ekJsc5PtOlY5FFlsdntOk","afYWuJCeVfJofWrNDAty6k"]],414]]],411]],[3,0,{},12,[4,"1e9ratialCZLquo15/R7/1",null,null,-552,[7,"4cjhjt9bxFUpM8xzltzYnI",1,[[2,"Men10_e",["_name"],58],[0,["_lpos"],58,[1,0,0,0]],[0,["_lrot"],58,[3,0,0,0,1]],[0,["_euler"],58,[1,0,0,0]],[2,false,["_active"],58],[8,["_materials","0"],[1,["93jUXOLRpHdLf/e5IlkA9S","afYWuJCeVfJofWrNDAty6k"]],416],[8,["_materials","0"],[1,["davd4Bt4NB3blVYs0NtRRA","afYWuJCeVfJofWrNDAty6k"]],417],[8,["_materials","0"],[1,["9ekJsc5PtOlY5FFlsdntOk","afYWuJCeVfJofWrNDAty6k"]],418]]],415]],[3,0,null,14,[4,"d9OaTkBx1QTrjuVSbuMCXd",null,null,-553,[7,"9dvh7Pw6RA27Uq2L/F9ZzN",14,[[2,"zhalan_01_a",["_name"],61],[0,["_lpos"],61,[1,0,0,0]],[0,["_lrot"],61,[3,0,0,0,1]],[0,["_euler"],61,[1,0,0,0]],[2,1,["_shadowCastingMode"],153],[2,0,["_shadowReceivingMode"],153],[5,["_materials","0"],153,4]]],3]],[3,0,null,15,[4,"d9OaTkBx1QTrjuVSbuMCXd",null,null,-554,[7,"9dvh7Pw6RA27Uq2L/F9ZzN",15,[[2,"zhalan_01_a",["_name"],63],[0,["_lpos"],63,[1,0,0,0]],[0,["_lrot"],63,[3,0,0,0,1]],[0,["_euler"],63,[1,0,0,0]],[2,1,["_shadowCastingMode"],154],[2,0,["_shadowReceivingMode"],154],[5,["_materials","0"],154,7]]],6]],[3,0,null,16,[4,"d9OaTkBx1QTrjuVSbuMCXd",null,null,-555,[7,"9dvh7Pw6RA27Uq2L/F9ZzN",16,[[2,"zhalan_01_a",["_name"],65],[0,["_lpos"],65,[1,0,0,0]],[0,["_lrot"],65,[3,0,0,0,1]],[0,["_euler"],65,[1,0,0,0]],[2,1,["_shadowCastingMode"],155],[2,0,["_shadowReceivingMode"],155],[5,["_materials","0"],155,10]]],9]],[3,0,null,17,[4,"d9OaTkBx1QTrjuVSbuMCXd",null,null,-556,[7,"9dvh7Pw6RA27Uq2L/F9ZzN",17,[[2,"zhalan_01_a",["_name"],67],[0,["_lpos"],67,[1,0,0,0]],[0,["_lrot"],67,[3,0,0,0,1]],[0,["_euler"],67,[1,0,0,0]],[2,1,["_shadowCastingMode"],156],[2,0,["_shadowReceivingMode"],156],[5,["_materials","0"],156,13]]],12]],[3,0,null,18,[4,"d9OaTkBx1QTrjuVSbuMCXd",null,null,-557,[7,"9dvh7Pw6RA27Uq2L/F9ZzN",18,[[2,"zhalan_01_a",["_name"],69],[0,["_lpos"],69,[1,0,0,0]],[0,["_lrot"],69,[3,0,0,0,1]],[0,["_euler"],69,[1,0,0,0]],[2,1,["_shadowCastingMode"],157],[2,0,["_shadowReceivingMode"],157],[5,["_materials","0"],157,16]]],15]],[3,0,null,19,[4,"d9OaTkBx1QTrjuVSbuMCXd",null,null,-558,[7,"9dvh7Pw6RA27Uq2L/F9ZzN",19,[[2,"zhalan_01_a",["_name"],71],[0,["_lpos"],71,[1,0,0,0]],[0,["_lrot"],71,[3,0,0,0,1]],[0,["_euler"],71,[1,0,0,0]],[2,1,["_shadowCastingMode"],158],[2,0,["_shadowReceivingMode"],158],[5,["_materials","0"],158,19]]],18]],[3,0,null,20,[4,"d9OaTkBx1QTrjuVSbuMCXd",null,null,-559,[7,"9dvh7Pw6RA27Uq2L/F9ZzN",20,[[2,"zhalan_01_a",["_name"],73],[0,["_lpos"],73,[1,0,0,0]],[0,["_lrot"],73,[3,0,0,0,1]],[0,["_euler"],73,[1,0,0,0]],[2,1,["_shadowCastingMode"],159],[2,0,["_shadowReceivingMode"],159],[5,["_materials","0"],159,22]]],21]],[3,0,null,21,[4,"d9OaTkBx1QTrjuVSbuMCXd",null,null,-560,[7,"9dvh7Pw6RA27Uq2L/F9ZzN",21,[[2,"zhalan_01_a",["_name"],75],[0,["_lpos"],75,[1,0,0,0]],[0,["_lrot"],75,[3,0,0,0,1]],[0,["_euler"],75,[1,0,0,0]],[2,1,["_shadowCastingMode"],160],[2,0,["_shadowReceivingMode"],160],[5,["_materials","0"],160,25]]],24]],[3,0,null,22,[4,"d9OaTkBx1QTrjuVSbuMCXd",null,null,-561,[7,"9dvh7Pw6RA27Uq2L/F9ZzN",22,[[2,"zhalan_01_a",["_name"],77],[0,["_lpos"],77,[1,0,0,0]],[0,["_lrot"],77,[3,0,0,0,1]],[0,["_euler"],77,[1,0,0,0]],[2,1,["_shadowCastingMode"],161],[2,0,["_shadowReceivingMode"],161],[5,["_materials","0"],161,28]]],27]],[3,0,null,23,[4,"d9OaTkBx1QTrjuVSbuMCXd",null,null,-562,[7,"9dvh7Pw6RA27Uq2L/F9ZzN",23,[[2,"zhalan_01_a",["_name"],79],[0,["_lpos"],79,[1,0,0,0]],[0,["_lrot"],79,[3,0,0,0,1]],[0,["_euler"],79,[1,0,0,0]],[2,1,["_shadowCastingMode"],162],[2,0,["_shadowReceivingMode"],162],[5,["_materials","0"],162,31]]],30]],[3,0,null,24,[4,"d9OaTkBx1QTrjuVSbuMCXd",null,null,-563,[7,"9dvh7Pw6RA27Uq2L/F9ZzN",24,[[2,"zhalan_01_a",["_name"],81],[0,["_lpos"],81,[1,0,0,0]],[0,["_lrot"],81,[3,0,0,0,1]],[0,["_euler"],81,[1,0,0,0]],[2,1,["_shadowCastingMode"],163],[2,0,["_shadowReceivingMode"],163],[5,["_materials","0"],163,34]]],33]],[3,0,null,25,[4,"d9OaTkBx1QTrjuVSbuMCXd",null,null,-564,[7,"9dvh7Pw6RA27Uq2L/F9ZzN",25,[[2,"zhalan_01_a",["_name"],83],[0,["_lpos"],83,[1,0,0,0]],[0,["_lrot"],83,[3,0,0,0,1]],[0,["_euler"],83,[1,0,0,0]],[2,1,["_shadowCastingMode"],164],[2,0,["_shadowReceivingMode"],164],[5,["_materials","0"],164,37]]],36]],[3,0,null,13,[4,"d9OaTkBx1QTrjuVSbuMCXd",null,null,-565,[7,"9dvh7Pw6RA27Uq2L/F9ZzN",13,[[2,"zhalan_01_a",["_name"],85],[0,["_lpos"],85,[1,0,0,0]],[0,["_lrot"],85,[3,0,0,0,1]],[0,["_euler"],85,[1,0,0,0]],[2,1,["_shadowCastingMode"],165],[2,0,["_shadowReceivingMode"],165],[5,["_materials","0"],165,40]]],39]],[1,["a5qQZie7dGFZpqKKOy8+t3","f7f/SnzaFeKKwX9YRIdClj"]]],0,[0,-1,234,0,-2,233,0,-3,232,0,-4,231,0,-5,230,0,-6,229,0,-7,228,0,-8,227,0,-9,226,0,-10,225,0,-11,224,0,-12,223,0,-13,222,0,-14,221,0,-15,220,0,-16,219,0,-17,218,0,-18,217,0,-19,216,0,-20,215,0,-21,214,0,-22,213,0,-23,212,0,-24,211,0,-25,210,0,-26,209,0,-27,208,0,-28,207,0,-29,206,0,-30,205,0,-31,37,0,-32,191,0,-33,190,0,-34,189,0,-35,188,0,-36,187,0,-37,186,0,-38,185,0,-39,184,0,-40,183,0,-41,182,0,-42,181,0,-43,180,0,-44,4,0,-45,26,0,2,1,0,-1,26,0,-2,4,0,-3,6,0,-4,7,0,-5,37,0,-6,8,0,-7,9,0,-8,10,0,-9,11,0,-10,12,0,-1,14,0,-2,15,0,-3,16,0,-4,17,0,-5,18,0,-6,19,0,-7,20,0,-8,21,0,-9,22,0,-10,23,0,-11,24,0,-12,25,0,-13,13,0,0,59,0,0,59,0,0,59,0,0,59,0,18,26,0,2,2,0,-1,118,0,-2,120,0,-3,122,0,-4,124,0,-5,126,0,-6,128,0,-7,130,0,-8,132,0,-9,134,0,-10,136,0,-11,138,0,-12,140,0,-13,116,0,0,117,0,0,117,0,0,117,0,0,117,0,0,248,0,0,248,0,18,37,0,2,3,0,0,28,0,0,28,0,0,28,0,0,28,0,0,28,0,4,86,0,4,86,0,4,87,0,4,87,0,4,89,0,4,89,0,4,91,0,4,91,0,4,93,0,4,93,0,4,95,0,4,95,0,4,97,0,4,97,0,4,99,0,4,99,0,4,101,0,4,101,0,4,103,0,4,103,0,4,105,0,4,105,0,4,107,0,4,107,0,4,109,0,4,109,0,2,4,0,-1,86,0,-2,87,0,-3,89,0,-4,91,0,-5,93,0,-6,95,0,-7,97,0,-8,99,0,-9,101,0,-10,103,0,-11,105,0,-12,107,0,-13,109,0,-1,180,0,-2,181,0,-3,182,0,-4,183,0,-5,184,0,-6,185,0,-1,186,0,-2,187,0,-3,188,0,-4,189,0,-5,190,0,-6,191,0,-1,205,0,-2,206,0,-3,207,0,-4,208,0,-5,209,0,-6,210,0,-1,211,0,-2,212,0,-3,213,0,-4,214,0,-5,215,0,-6,216,0,-1,217,0,-2,218,0,-3,219,0,-4,220,0,-5,221,0,-6,222,0,-1,223,0,-2,224,0,-3,225,0,-4,226,0,-5,227,0,-6,228,0,-1,229,0,-2,230,0,-3,231,0,-4,232,0,-5,233,0,-6,234,0,-1,247,0,0,84,0,0,84,0,0,84,0,0,84,0,2,13,0,-1,235,0,0,60,0,0,60,0,0,60,0,0,60,0,2,14,0,-1,236,0,0,62,0,0,62,0,0,62,0,0,62,0,2,15,0,-1,237,0,0,64,0,0,64,0,0,64,0,0,64,0,2,16,0,-1,238,0,0,66,0,0,66,0,0,66,0,0,66,0,2,17,0,-1,239,0,0,68,0,0,68,0,0,68,0,0,68,0,2,18,0,-1,240,0,0,70,0,0,70,0,0,70,0,0,70,0,2,19,0,-1,241,0,0,72,0,0,72,0,0,72,0,0,72,0,2,20,0,-1,242,0,0,74,0,0,74,0,0,74,0,0,74,0,2,21,0,-1,243,0,0,76,0,0,76,0,0,76,0,0,76,0,2,22,0,-1,244,0,0,78,0,0,78,0,0,78,0,0,78,0,2,23,0,-1,245,0,0,80,0,0,80,0,0,80,0,0,80,0,2,24,0,-1,246,0,0,82,0,0,82,0,0,82,0,0,82,0,2,25,0,0,27,0,0,27,0,0,27,0,0,27,0,0,27,0,0,166,0,0,166,0,0,166,0,2,26,0,0,38,0,0,38,0,0,38,0,0,38,0,0,38,0,4,116,0,4,116,0,4,140,0,4,140,0,4,138,0,4,138,0,4,136,0,4,136,0,4,134,0,4,134,0,4,132,0,4,132,0,4,130,0,4,130,0,4,128,0,4,128,0,4,126,0,4,126,0,4,124,0,4,124,0,4,122,0,4,122,0,4,120,0,4,120,0,4,118,0,4,118,0,2,37,0,0,111,0,0,111,0,0,111,0,0,111,0,0,179,0,0,179,0,0,179,0,2,86,0,0,88,0,0,88,0,0,88,0,0,88,0,0,167,0,0,167,0,0,167,0,2,87,0,0,90,0,0,90,0,0,90,0,0,90,0,0,168,0,0,168,0,0,168,0,2,89,0,0,92,0,0,92,0,0,92,0,0,92,0,0,169,0,0,169,0,0,169,0,2,91,0,0,94,0,0,94,0,0,94,0,0,94,0,0,170,0,0,170,0,0,170,0,2,93,0,0,96,0,0,96,0,0,96,0,0,96,0,0,171,0,0,171,0,0,171,0,2,95,0,0,98,0,0,98,0,0,98,0,0,98,0,0,172,0,0,172,0,0,172,0,2,97,0,0,100,0,0,100,0,0,100,0,0,100,0,0,173,0,0,173,0,0,173,0,2,99,0,0,102,0,0,102,0,0,102,0,0,102,0,0,174,0,0,174,0,0,174,0,2,101,0,0,104,0,0,104,0,0,104,0,0,104,0,0,175,0,0,175,0,0,175,0,2,103,0,0,106,0,0,106,0,0,106,0,0,106,0,0,176,0,0,176,0,0,176,0,2,105,0,0,108,0,0,108,0,0,108,0,0,108,0,0,177,0,0,177,0,0,177,0,2,107,0,0,110,0,0,110,0,0,110,0,0,110,0,0,178,0,0,178,0,0,178,0,2,109,0,0,142,0,0,142,0,0,142,0,0,142,0,0,204,0,0,204,0,0,204,0,2,116,0,0,119,0,0,119,0,0,119,0,0,119,0,0,192,0,0,192,0,0,192,0,2,118,0,0,121,0,0,121,0,0,121,0,0,121,0,0,193,0,0,193,0,0,193,0,2,120,0,0,123,0,0,123,0,0,123,0,0,123,0,0,194,0,0,194,0,0,194,0,2,122,0,0,125,0,0,125,0,0,125,0,0,125,0,0,195,0,0,195,0,0,195,0,2,124,0,0,127,0,0,127,0,0,127,0,0,127,0,0,196,0,0,196,0,0,196,0,2,126,0,0,129,0,0,129,0,0,129,0,0,129,0,0,197,0,0,197,0,0,197,0,2,128,0,0,131,0,0,131,0,0,131,0,0,131,0,0,198,0,0,198,0,0,198,0,2,130,0,0,133,0,0,133,0,0,133,0,0,133,0,0,199,0,0,199,0,0,199,0,2,132,0,0,135,0,0,135,0,0,135,0,0,135,0,0,200,0,0,200,0,0,200,0,2,134,0,0,137,0,0,137,0,0,137,0,0,137,0,0,201,0,0,201,0,0,201,0,2,136,0,0,139,0,0,139,0,0,139,0,0,139,0,0,202,0,0,202,0,0,202,0,2,138,0,0,141,0,0,141,0,0,141,0,0,141,0,0,203,0,0,203,0,0,203,0,2,140,0,2,180,0,2,181,0,2,182,0,2,183,0,2,184,0,2,185,0,2,186,0,2,187,0,2,188,0,2,189,0,2,190,0,2,191,0,2,205,0,2,206,0,2,207,0,2,208,0,2,209,0,2,210,0,2,211,0,2,212,0,2,213,0,2,214,0,2,215,0,2,216,0,2,217,0,2,218,0,2,219,0,2,220,0,2,221,0,2,222,0,2,223,0,2,224,0,2,225,0,2,226,0,2,227,0,2,228,0,2,229,0,2,230,0,2,231,0,2,232,0,2,233,0,2,234,0,2,235,0,2,236,0,2,237,0,2,238,0,2,239,0,2,240,0,2,241,0,2,242,0,2,243,0,2,244,0,2,245,0,2,246,0,2,247,0,5,1,2,13,26,3,13,37,565],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[3,3,3,3,1,3,3,1,3,3,1,3,3,1,3,3,1,3,3,1,3,3,1,3,3,1,3,3,1,3,3,1,3,3,1,3,3,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,3,1,1,1,3,1,1,1,3,1,1,1,3,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,3,1,1,1,3,1,1,1,3,1,1,1,3,1,1,1,3,3,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,3,1,1,1,3,1,1,1,3,1,1,1,3,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,3,1,1,1,3,1,1,1,3,1,1,1,3,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,3,1,1,1,3,1,1,1,3,1,1,1,3,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,3,1,1,1,3,1,1,1,3,1,1,1,3,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,3,1,1,1,3,1,1,1,3,1,1,1,3,1,1,1],[190,112,22,23,1,22,23,1,22,23,1,22,23,1,22,23,1,22,23,1,22,23,1,22,23,1,22,23,1,22,23,1,22,23,1,22,23,1,22,23,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,191,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,192,13,13,13,13,13,13,13,13,13,13,13,13,13,193,13,13,13,194,13,13,13,195,13,13,13,196,13,13,13,197,13,13,13,198,21,21,21,21,199,21,21,21,21,21,21,21,21,200,21,21,21,201,21,21,21,202,21,21,21,203,21,21,21,204,21,21,21,205,84,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,206,15,15,15,15,15,15,15,15,15,15,15,15,15,207,15,15,15,208,15,15,15,209,15,15,15,210,15,15,15,211,15,15,15,212,16,16,16,16,16,16,16,16,16,16,16,16,16,213,16,16,16,214,16,16,16,215,16,16,16,216,16,16,16,217,16,16,16,218,17,17,17,17,17,17,17,17,17,17,17,17,17,219,17,17,17,220,17,17,17,221,17,17,17,222,17,17,17,223,17,17,17,224,18,18,18,18,18,18,18,18,18,18,18,18,18,225,18,18,18,226,18,18,18,227,18,18,18,228,18,18,18,229,18,18,18,230,19,19,19,19,19,19,19,19,19,19,19,19,19,231,19,19,19,232,19,19,19,233,19,19,19,234,19,19,19,235,19,19,19]],[[[15,"Men09_e"],[18,"Men09_e",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-8,[7,"9ekJsc5PtOlY5FFlsdntOk",1,[[2,"zhanlan_06_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],3],[2,0,["_shadowReceivingMode"],3],[5,["_materials","0"],3,1],[5,["_mesh"],3,2]]],0]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-9,[7,"davd4Bt4NB3blVYs0NtRRA",1,[[2,"zhanlan_06_a-001",["_name"],4],[0,["_lpos"],4,[1,0,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],5],[2,0,["_shadowReceivingMode"],5],[5,["_materials","0"],5,4],[5,["_mesh"],5,5]]],3]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-10,[7,"93jUXOLRpHdLf/e5IlkA9S",1,[[2,"zhanlan_06_a-002",["_name"],6],[0,["_lpos"],6,[1,1.86,0,4.13]],[0,["_lrot"],6,[3,0,0,0,1]],[0,["_euler"],6,[1,0,0,0]],[2,1,["_shadowCastingMode"],7],[2,0,["_shadowReceivingMode"],7],[5,["_materials","0"],7,7],[5,["_mesh"],7,8]]],6]]],0,[0,-1,10,0,-2,9,0,-3,8,0,2,1,0,-1,8,0,-2,9,0,-3,10,0,2,8,0,2,9,0,2,10,0,5,1,10],[0,0,0,0,0,0,0,0,0],[3,1,1,3,1,1,3,1,1],[0,20,59,0,20,59,0,20,59]],[[[32,"zhalan_10",[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_1ST_SHADE_MAP":true,"SHADE_MAP_1_AS_SHADE_MAP_2":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{"rasterizerState":{"polygonMode":2,"lineWidth":0},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},[{"rasterizerState":{"depthBias":1.9,"depthBiasClamp":-2.4,"lineWidth":5.2},"depthStencilState":{}},"blendState",11,[{"targets":[{}]},"blendColor",8,[4,4292072403]]],{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],0,0,11,0],[[[{"lineWidth":25},"baseColor",8,[4,4279637526]],[{"baseStep":1.9,"baseFeather":0.2,"shadeStep":2.6,"shadeFeather":2.101,"shadowCover":0.622},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4294967295],"shadeColor2",8,[4,4283058766],"specular",8,[4,1275068416],"shadeMap1",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[12,6],[104,32]],[[[17,".bin",2833231610,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":72,"count":36,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.158021330833435,-0.05226753279566765,-0.5075109004974365],"maxPosition",8,[1,0.012364731170237064,0.05226745456457138,0.5075108408927917]]],-1],0,0,[],[],[]],[[[17,".bin",2224089915,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14688,"length":984,"count":492,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":14688,"count":306,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.9830336570739746,-1.3784946203231812,0.00003250122244935483],"maxPosition",8,[1,1.9830336570739746,1.378495216369629,3.4422647953033447]]],-1],0,0,[],[],[]],[[[15,"Men10_e"],[18,"Men10_e",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-8,[7,"9ekJsc5PtOlY5FFlsdntOk",1,[[2,"zhanlan_06_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],3],[2,0,["_shadowReceivingMode"],3],[5,["_materials","0"],3,1],[5,["_mesh"],3,2]]],0]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-9,[7,"davd4Bt4NB3blVYs0NtRRA",1,[[2,"zhanlan_06_a-001",["_name"],4],[0,["_lpos"],4,[1,0,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],5],[2,0,["_shadowReceivingMode"],5],[5,["_materials","0"],5,4],[5,["_mesh"],5,5]]],3]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-10,[7,"93jUXOLRpHdLf/e5IlkA9S",1,[[2,"zhanlan_06_a-002",["_name"],6],[0,["_lpos"],6,[1,1.86,0,4.13]],[0,["_lrot"],6,[3,0,0,0,1]],[0,["_euler"],6,[1,0,0,0]],[2,1,["_shadowCastingMode"],7],[2,0,["_shadowReceivingMode"],7],[5,["_materials","0"],7,7],[5,["_mesh"],7,8]]],6]]],0,[0,-1,10,0,-2,9,0,-3,8,0,2,1,0,-1,8,0,-2,9,0,-3,10,0,2,8,0,2,9,0,2,10,0,5,1,10],[0,0,0,0,0,0,0,0,0],[3,1,1,3,1,1,3,1,1],[0,10,60,0,10,60,0,10,60]],[[[19,"Material #9",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[8,6],[236,4]],[[[24],[20,"zhalan_01_e",[-2],[12,"47U8MFkHdS2YN1QO0Ar7VF",null,null,null,-1,0]],[23,"zhalan_01_e",1,[[22,-3,[6,"fc8g7MtpRSU7QoA2Hxy/h9"],[0],[21],1]],[12,"9e8TIUxGhSXpypiJ/HwQo3",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[237,238]],[[[17,".bin",4202030904,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":40848,"length":1704,"count":852,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":40848,"count":851,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9480433464050293,-0.31791752576828003,-0.01140375155955553],"maxPosition",8,[1,1.0890811681747437,0.43724724650382996,0.2626393139362335]]],-1],0,0,[],[],[]],[[[15,"Men02_d"],[18,"Men02_d",[-5,-6,-7],[16,"16OAjpi2lBGI8jne5BJN6U",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["02Jc7VFfFX0pRlUhMa3q08"]],[1,["02Jc7VFfFX0pRlUhMa3q08"]],[1,["02Jc7VFfFX0pRlUhMa3q08"]],[3,0,null,1,[4,"02Jc7VFfFX0pRlUhMa3q08",null,null,-11,[7,"a04uu7ZEdD8JzaUZPdqziA",1,[[2,"zhalan_02_d",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[5,["_materials","0"],-8,1],[2,1,["_shadowCastingMode"],-9],[2,0,["_shadowReceivingMode"],-10]]],0]],[1,["1fvD2apadfm7WvNbp6FDTl"]],[3,0,null,1,[4,"02Jc7VFfFX0pRlUhMa3q08",null,null,-15,[7,"99qCLyYvlMLrT/s37tdxT3",1,[[2,"zhalan_02_d-001",["_name"],3],[0,["_lpos"],3,[1,0,0,4.13]],[0,["_lrot"],3,[3,0,0,0,1]],[0,["_euler"],3,[1,0,0,0]],[5,["_materials","0"],-12,3],[2,1,["_shadowCastingMode"],-13],[2,0,["_shadowReceivingMode"],-14]]],2]],[1,["1fvD2apadfm7WvNbp6FDTl"]],[3,0,null,1,[4,"02Jc7VFfFX0pRlUhMa3q08",null,null,-19,[7,"6e4n8+meRLn4mC2k8vHbcF",1,[[2,"zhalan_02_d-002",["_name"],4],[0,["_lpos"],4,[1,1.86,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[5,["_materials","0"],-16,5],[2,1,["_shadowCastingMode"],-17],[2,0,["_shadowReceivingMode"],-18]]],4]],[1,["1fvD2apadfm7WvNbp6FDTl"]]],0,[0,-1,9,0,-2,7,0,-3,5,0,2,1,0,-1,5,0,-2,7,0,-3,9,0,0,6,0,0,6,0,0,6,0,2,5,0,0,8,0,0,8,0,0,8,0,2,7,0,0,10,0,0,10,0,0,10,0,2,9,0,5,1,19],[0,0,0,0,0,0],[3,1,3,1,3,1],[61,1,61,1,61,1]],[[[19,"Material #8",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[8,6],[239,4]],[[[17,".bin",4221812411,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5760,"length":432,"count":216,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":5760,"count":120,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9191893339157104,-0.10751934349536896,0],"maxPosition",8,[1,0.9191893339157104,0.10751932859420776,0.8051367998123169]]],-1],0,0,[],[],[]],[[[24],[20,"zhalan_01_a",[-2],[12,"d9OaTkBx1QTrjuVSbuMCXd",null,null,null,-1,0]],[23,"zhalan_01_a",1,[[22,-3,[6,"c5qgfp+7hUy71DslW1Gvp8"],[0],[21],1]],[12,"d3szmtX+JV1L/xl+pINczJ",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[240,241]],[[[17,".bin",916950989,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":72,"count":36,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.000794258143287152,-0.02409202605485916,-0.44681668281555176],"maxPosition",8,[1,0.9482071995735168,0.024091949686408043,0.44681671261787415]]],-1],0,0,[],[],[]],[[[17,".bin",3442706199,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":20064,"length":1668,"count":834,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":20064,"count":418,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.8937408924102783,-1.406296968460083,-0.02004985138773918],"maxPosition",8,[1,1.8937411308288574,1.419983983039856,2.9282937049865723]]],-1],0,0,[],[],[]],[[[17,".bin",1374095154,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":74736,"length":3900,"count":1950,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":74736,"count":1557,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9634241461753845,-0.5305119752883911,-0.024665415287017822],"maxPosition",8,[1,1.1139380931854248,0.4093046486377716,0.3589133024215698]]],-1],0,0,[],[],[]],[[[15,"Men09_d"],[18,"Men09_d",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-8,[7,"9ekJsc5PtOlY5FFlsdntOk",1,[[2,"zhanlan_06_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],3],[2,0,["_shadowReceivingMode"],3],[5,["_materials","0"],3,1],[5,["_mesh"],3,2]]],0]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-9,[7,"davd4Bt4NB3blVYs0NtRRA",1,[[2,"zhanlan_06_a-001",["_name"],4],[0,["_lpos"],4,[1,0,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],5],[2,0,["_shadowReceivingMode"],5],[5,["_materials","0"],5,4],[5,["_mesh"],5,5]]],3]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-10,[7,"93jUXOLRpHdLf/e5IlkA9S",1,[[2,"zhanlan_06_a-002",["_name"],6],[0,["_lpos"],6,[1,1.86,0,4.13]],[0,["_lrot"],6,[3,0,0,0,1]],[0,["_euler"],6,[1,0,0,0]],[2,1,["_shadowCastingMode"],7],[2,0,["_shadowReceivingMode"],7],[5,["_materials","0"],7,7],[5,["_mesh"],7,8]]],6]]],0,[0,-1,10,0,-2,9,0,-3,8,0,2,1,0,-1,8,0,-2,9,0,-3,10,0,2,8,0,2,9,0,2,10,0,5,1,10],[0,0,0,0,0,0,0,0,0],[3,1,1,3,1,1,3,1,1],[0,20,62,0,20,62,0,20,62]],[[[19,"New_zhalan_01",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{"lineWidth":25},[{"baseStep":0.9,"baseFeather":0.3,"shadeStep":0.6,"shadeFeather":-0.3,"shadowCover":0},"mainColor",8,[4,4290822336],"shadeColor1",8,[4,4285624697],"shadeColor2",8,[4,4287006342],"specular",8,[4,4278190080],"mainTexture",6,0,"emissiveMap",6,1],{},{}],0,11,0,0]]],0,0,[0,0,0],[8,9,6],[87,27,24]],[[[59,"builtin-toon",[{"hash":1600085135,"name":"builtin-toon|silhouette-edge-vs|silhouette-edge-fs","blocks":[{"name":"OutlineVert","stageFlags":1,"binding":0,"members":[{"name":"outlineParams","type":16,"count":1}],"defines":[]},{"name":"OutlineFrag","stageFlags":16,"binding":1,"members":[{"name":"baseColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_BASE_COLOR_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_color","format":44,"location":6,"defines":[]},{"name":"a_texCoord1","format":21,"location":7,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":15,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":16,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":17,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":17,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["!USE_INSTANCING"]},{"name":"CCMorph","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_displacementWeights","typename":"vec4","type":16,"count":15,"isArray":true},{"name":"cc_displacementTextureInfo","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointTextureInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointAnimInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_joints","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true}],"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCForwardLight","stageFlags":16,"tags":{"builtin":"local"},"members":[{"name":"cc_lightPos","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true},{"name":"cc_lightColor","typename":"vec4","type":16,"count":0,"isArray":true},{"name":"cc_lightSizeRangeAngle","typename":"vec4","type":16,"count":0,"isArray":true},{"name":"cc_lightDir","typename":"vec4","type":16,"count":0,"isArray":true}],"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"CCSH","stageFlags":16,"tags":{"builtin":"local"},"members":[{"name":"cc_sh_linear_const_r","typename":"vec4","type":16,"count":1},{"name":"cc_sh_linear_const_g","typename":"vec4","type":16,"count":1},{"name":"cc_sh_linear_const_b","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_r","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_g","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_b","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_a","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_LIGHT_PROBE","!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_reflectionProbeCubemap","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbePlanarMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbeDataMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_lightingMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_LIGHTMAP","!CC_FORWARD_ADD"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"OutlineVert","stageFlags":1,"binding":0,"members":[{"name":"outlineParams","type":16,"count":1}],"defines":[]},{"name":"OutlineFrag","stageFlags":16,"binding":1,"members":[{"name":"baseColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_BASE_COLOR_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCShadow","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matLightView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matLightViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_shadowInvProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowNFLSInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowWHPBInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowLPNNInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowColor","typename":"vec4","type":16,"count":1,"precision":"lowp "},{"name":"cc_planarNDInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCSM","stageFlags":16,"tags":{"builtin":"global"},"members":[{"name":"cc_csmViewDir0","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir1","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir2","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmAtlas","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_matCSMViewProj","typename":"mat4","type":25,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjDepthInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmSplitsInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_environment","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"global"},"defines":[]},{"name":"cc_diffuseMap","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]},{"name":"cc_shadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl1":{"vert":"\nprecision highp float;\n#define CC_SURFACES_USE_TANGENT_SPACE 0\n#define CC_SURFACES_USE_VERTEX_COLOR 0\n#define CC_SURFACES_USE_SECOND_UV 0\n#define CC_SURFACES_USE_LIGHT_MAP 0\n#define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_CLIP_POS\n  #define CC_SURFACES_TRANSFER_CLIP_POS 0\n#endif\n#ifndef CC_SURFACES_USE_LIGHT_MAP\n  #ifdef CC_USE_LIGHTMAP\n    #define CC_SURFACES_USE_LIGHT_MAP CC_USE_LIGHTMAP\n  #else\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_FLIP_UV\n  #define CC_SURFACES_FLIP_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_FRESNEL\n  #define CC_SURFACES_LIGHTING_USE_FRESNEL 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  #define CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  #define CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n  #define CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRT\n  #define CC_SURFACES_LIGHTING_TRT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TT\n  #define CC_SURFACES_LIGHTING_TT 0\n#endif\n#ifndef CC_SURFACES_ENABLE_DEBUG_VIEW\n  #define CC_SURFACES_ENABLE_DEBUG_VIEW 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  #define CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  #define CC_SURFACES_LIGHTING_CALCULATE_SPECULAR 1\n#endif\n#define CC_USE_SURFACE_SHADER 1\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  attribute vec4 a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  attribute vec4 a_color;\n#endif\n#if CC_SURFACES_USE_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n    attribute vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n#endif\nvarying highp vec3 v_worldPos;\nvarying mediump vec4 v_normal;\nvarying vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  varying mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  varying mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  varying mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  varying mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  varying highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  varying highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    varying mediump vec4 v_sh_linear_const_r;\n    varying mediump vec4 v_sh_linear_const_g;\n    varying mediump vec4 v_sh_linear_const_b;\n  #endif\n#endif\n#define VSOutput_worldPos v_worldPos\n#define VSOutput_worldNormal v_normal.xyz\n#define VSOutput_faceSideSign v_normal.w\n#define VSOutput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define VSOutput_vertexColor v_color\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define VSOutput_worldTangent v_tangent.xyz\n  #define VSOutput_mirrorNormal v_tangent.w\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define VSOutput_texcoord1 v_uv1\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define VSOutput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define VSOutput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define VSOutput_reflectionProbeId v_shadowBiasAndProbeId.z\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define VSOutput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define VSOutput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define VSOutput_clipPos v_clipPos\n#endif\nstruct SurfacesStandardVertexIntermediate\n{\n  highp vec4 position;\n  vec3 normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  vec4 tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  vec4 color;\n#endif\n  vec2 texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  vec2 texCoord1;\n#endif\n  highp vec4 clipPos;\n  highp vec3 worldPos;\n  vec4 worldNormal;\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 worldTangent, worldBinormal;\n  #endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  vec4 shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  float fogFactor;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  vec3 lightmapUV;\n#endif\n};\n#if CC_USE_MORPH\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\nuniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n  uniform highp vec4 cc_localShadowBias;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #if CC_USE_FOG != 4\n    float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n        vec4 wPos = pos;\n        float cam_dis = distance(cameraPos, wPos.xyz);\n        return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n    }\n    float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n        vec4 wPos = pos;\n        float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n        float f = exp(-cam_dis * fogDensity);\n        return f;\n    }\n    float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n        vec4 wPos = pos;\n        float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n        float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n        return f;\n    }\n    float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n        vec4 wPos = pos;\n        vec3 camWorldProj = cameraPos.xyz;\n        camWorldProj.y = 0.;\n        vec3 worldPosProj = wPos.xyz;\n        worldPosProj.y = 0.;\n        float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n        float fDeltaY, fDensityIntegral;\n        if (cameraPos.y > fogTop) {\n            if (wPos.y < fogTop) {\n                fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n                fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n            }\n            else {\n                fDeltaY = 0.;\n                fDensityIntegral = 0.;\n            }\n        }\n        else {\n            if (wPos.y < fogTop) {\n                float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n                float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n                fDeltaY = abs(fDeltaA - fDeltaB);\n                fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n            }\n            else {\n                fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n                fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n            }\n        }\n        float fDensity;\n        if (fDeltaY != 0.) {\n            fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n        }\n        else {\n            fDensity = 0.;\n        }\n        float f = exp(-fDensity);\n        return f;\n    }\n  #endif\n  void CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n  {\n  #if CC_USE_FOG == 0\n  \tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n  #elif CC_USE_FOG == 1\n  \tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n  #elif CC_USE_FOG == 2\n  \tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n  #elif CC_USE_FOG == 3\n  \tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n  #else\n  \tfactor = 1.0;\n  #endif\n  }\n#endif\n        uniform vec4 outlineParams;\n  #define CC_SURFACES_VERTEX_MODIFY_LOCAL_POS\n  vec3 SurfacesVertexModifyLocalPos(in SurfacesStandardVertexIntermediate In)\n  {\n    float width = outlineParams.x * 0.001;\n    vec3 localPos = In.position.xyz;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(localPos);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    localPos += flip * dir * width * 2.0;\n  #else\n    localPos += normalize(In.normal) * width;\n  #endif\n    return localPos;\n  }\n  #define CC_SURFACES_VERTEX_MODIFY_CLIP_POS\n  vec4 SurfacesVertexModifyClipPos(in SurfacesStandardVertexIntermediate In)\n  {\n    vec4 clipPos = In.clipPos;\n    clipPos.z -= outlineParams.y * 0.002;\n    return clipPos;\n  }\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_POS\nvec3 SurfacesVertexModifyLocalPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.position.xyz;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_NORMAL\nvec3 SurfacesVertexModifyLocalNormal(in SurfacesStandardVertexIntermediate In)\n{\n  return In.normal.xyz;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_TANGENT\n  #if CC_SURFACES_USE_TANGENT_SPACE\n  vec4 SurfacesVertexModifyLocalTangent(in SurfacesStandardVertexIntermediate In)\n    {\n      return In.tangent;\n    }\n  #endif\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_SHARED_DATA\nvoid SurfacesVertexModifyLocalSharedData(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_POS\nvec3 SurfacesVertexModifyWorldPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.worldPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_CLIP_POS\nvec4 SurfacesVertexModifyClipPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.clipPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_NORMAL\nvec3 SurfacesVertexModifyWorldNormal(in SurfacesStandardVertexIntermediate In)\n{\n    vec3 worldNormal = In.worldNormal.xyz;\n  #if CC_SURFACES_USE_TWO_SIDED\n      worldNormal.xyz *= In.worldNormal.w;\n  #endif\n  return worldNormal;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_SHARED_DATA\nvoid SurfacesVertexModifySharedData(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\nvoid CCSurfacesVertexInput(out SurfacesStandardVertexIntermediate In)\n{\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  In.tangent = a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  In.color = a_color;\n#endif\n  In.texCoord = a_texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  In.texCoord1 = a_texCoord1;\n#endif\n}\nvoid CCSurfacesVertexOutput(in SurfacesStandardVertexIntermediate In)\n{\n  gl_Position = In.clipPos;\n  VSOutput_worldNormal = In.worldNormal.xyz;\n  VSOutput_faceSideSign = In.worldNormal.w;\n  VSOutput_worldPos = In.worldPos;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  VSOutput_worldTangent = In.worldTangent.xyz;\n  VSOutput_mirrorNormal = In.tangent.w > 0.0 ? 1.0 : -1.0;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  VSOutput_vertexColor = In.color;\n#endif\n  VSOutput_texcoord = In.texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  VSOutput_texcoord1 = In.texCoord1;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  VSOutput_fogFactor = In.fogFactor;\n#endif\n#if CC_RECEIVE_SHADOW\n  VSOutput_shadowBias = In.shadowBiasAndProbeId.xy;\n#endif\n#if CC_USE_REFLECTION_PROBE\n  VSOutput_reflectionProbeId = In.shadowBiasAndProbeId.z;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  VSOutput_lightMapUV = In.lightmapUV;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  VSOutput_localPos = In.position;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  VSOutput_clipPos = In.clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    v_sh_linear_const_r = a_sh_linear_const_r;\n    v_sh_linear_const_g = a_sh_linear_const_g;\n    v_sh_linear_const_b = a_sh_linear_const_b;\n  #endif\n#endif\n}\nvoid CCSurfacesVertexAnimation(inout SurfacesStandardVertexIntermediate In)\n{\nvec4 temp = vec4(0.0);\n#if CC_USE_MORPH\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    applyMorph(In.position, In.normal, In.tangent);\n  #else\n    applyMorph(In.position, In.normal, temp);\n  #endif\n#endif\n#if CC_USE_SKINNING\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    CCSkin(In.position, In.normal, In.tangent);\n  #else\n    CCSkin(In.position, In.normal, temp);\n  #endif\n#endif\n}\nvoid CCSurfacesVertexWorldTransform(inout SurfacesStandardVertexIntermediate In)\n{\n    mat4 matWorld, matWorldIT;\n    CCGetWorldMatrixFull(matWorld, matWorldIT);\n    In.worldPos = (matWorld * In.position).xyz;\n    In.worldNormal.xyz = normalize((matWorldIT * vec4(In.normal.xyz, 0.0)).xyz);\n    #if CC_SURFACES_USE_TANGENT_SPACE\n      In.worldTangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n      In.worldBinormal = cross(In.worldNormal.xyz, In.worldTangent) * In.tangent.w;\n    #endif\n}\nvoid CCSurfacesVertexTransformUV(inout SurfacesStandardVertexIntermediate In)\n{\n  #if CC_SURFACES_FLIP_UV\n    In.texCoord = cc_cameraPos.w > 1.0 ? vec2(In.texCoord.x, 1.0 - In.texCoord.y) : In.texCoord;\n    #if CC_SURFACES_USE_SECOND_UV\n      In.texCoord1 = cc_cameraPos.w > 1.0 ? vec2(In.texCoord1.x, 1.0 - In.texCoord1.y) : In.texCoord1;\n    #endif\n  #endif\n}\nvoid CCSurfacesVertexTransferFog(inout SurfacesStandardVertexIntermediate In)\n{\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(vec4(In.worldPos, 1.0), In.fogFactor);\n#endif\n}\nvoid CCSurfacesVertexTransferShadow(inout SurfacesStandardVertexIntermediate In)\n{\n  #if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n    In.shadowBiasAndProbeId = vec4(0.0);\n  #endif\n  #if CC_RECEIVE_SHADOW\n    In.shadowBiasAndProbeId.xy = vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n    #if USE_INSTANCING\n      In.shadowBiasAndProbeId.xy += a_localShadowBiasAndProbeId.xy;\n    #else\n      In.shadowBiasAndProbeId.xy += cc_localShadowBias.xy;\n    #endif\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    #if USE_INSTANCING\n      In.shadowBiasAndProbeId.zw = a_localShadowBiasAndProbeId.zw;\n    #else\n      In.shadowBiasAndProbeId.zw = cc_localShadowBias.zw;\n    #endif\n  #endif\n}\nvoid CCSurfacesVertexTransferLightMapUV(inout SurfacesStandardVertexIntermediate In)\n{\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #if USE_INSTANCING\n    In.lightmapUV.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    In.lightmapUV.z = a_lightingMapUVParam.w;\n  #else\n    In.lightmapUV.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    In.lightmapUV.z = cc_lightingMapUVParam.w;\n  #endif\n#endif\n}\nvoid main()\n{\n  SurfacesStandardVertexIntermediate In;\n  CCSurfacesVertexInput(In);\n  CCSurfacesVertexAnimation(In);\n  In.position.xyz = SurfacesVertexModifyLocalPos(In);\n  In.normal.xyz = SurfacesVertexModifyLocalNormal(In);\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    In.tangent = SurfacesVertexModifyLocalTangent(In);\n  #endif\n  SurfacesVertexModifyLocalSharedData(In);\n  CCSurfacesVertexWorldTransform(In);\n  In.worldPos = SurfacesVertexModifyWorldPos(In);\n  In.clipPos = cc_matProj * cc_matView * vec4(In.worldPos, 1.0);\n  In.clipPos = SurfacesVertexModifyClipPos(In);\n  vec3 viewDirect = normalize(cc_cameraPos.xyz - In.worldPos);\n  In.worldNormal.w = dot(In.worldNormal.xyz, viewDirect) < 0.0 ? -1.0 : 1.0;\n  In.worldNormal.xyz = SurfacesVertexModifyWorldNormal(In);\n  SurfacesVertexModifyUV(In);\n  SurfacesVertexModifySharedData(In);\n  CCSurfacesVertexTransformUV(In);\n  CCSurfacesVertexTransferFog(In);\n  CCSurfacesVertexTransferShadow(In);\n  CCSurfacesVertexTransferLightMapUV(In);\n  CCSurfacesVertexOutput(In);\n}","frag":"\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\n#define CC_SURFACES_USE_TANGENT_SPACE 0\n#define CC_SURFACES_USE_VERTEX_COLOR 0\n#define CC_SURFACES_USE_SECOND_UV 0\n#define CC_SURFACES_USE_LIGHT_MAP 0\n#define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_CLIP_POS\n  #define CC_SURFACES_TRANSFER_CLIP_POS 0\n#endif\n#ifndef CC_SURFACES_USE_LIGHT_MAP\n  #ifdef CC_USE_LIGHTMAP\n    #define CC_SURFACES_USE_LIGHT_MAP CC_USE_LIGHTMAP\n  #else\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_FLIP_UV\n  #define CC_SURFACES_FLIP_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_FRESNEL\n  #define CC_SURFACES_LIGHTING_USE_FRESNEL 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  #define CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  #define CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n  #define CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRT\n  #define CC_SURFACES_LIGHTING_TRT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TT\n  #define CC_SURFACES_LIGHTING_TT 0\n#endif\n#ifndef CC_SURFACES_ENABLE_DEBUG_VIEW\n  #define CC_SURFACES_ENABLE_DEBUG_VIEW 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  #define CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  #define CC_SURFACES_LIGHTING_CALCULATE_SPECULAR 1\n#endif\n#define CC_USE_SURFACE_SHADER 1\nvarying highp vec3 v_worldPos;\nvarying mediump vec4 v_normal;\nvarying vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  varying mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  varying mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  varying mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  varying mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  varying highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  varying highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    varying mediump vec4 v_sh_linear_const_r;\n    varying mediump vec4 v_sh_linear_const_g;\n    varying mediump vec4 v_sh_linear_const_b;\n  #endif\n#endif\n#define FSInput_worldPos v_worldPos\n#define FSInput_worldNormal v_normal.xyz\n#define FSInput_faceSideSign v_normal.w\n#define FSInput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define FSInput_vertexColor v_color\n#else\n  #define FSInput_vertexColor vec4(1.0)\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define FSInput_worldTangent v_tangent.xyz\n  #define FSInput_mirrorNormal v_tangent.w\n#else\n  #define FSInput_worldTangent vec3(0.0, 0.0, 0.0)\n  #define FSInput_mirrorNormal 1.0\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define FSInput_texcoord1 v_uv1\n#else\n  #define FSInput_texcoord1 vec2(0.0, 0.0)\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define FSInput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define FSInput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define FSInput_reflectionProbeId v_shadowBiasAndProbeId.z\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define FSInput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define FSInput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define FSInput_clipPos v_clipPos\n#endif\nuniform mediump vec4 cc_debug_view_mode;\nuniform mediump vec4 cc_surfaceTransform;\n  uniform mediump vec4 cc_mainLitColor;\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_DIRECT CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT CC_SURFACES_DEBUG_VIEW_TRT_DIRECT + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ALL CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_TRT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRT (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD\n    #if CC_PIPELINE_TYPE == 0\n      #define LIGHTS_PER_PASS 1\n    #else\n      #define LIGHTS_PER_PASS 10\n    #endif\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n    #endif\n  #endif\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if !USE_INSTANCING\n    #endif\n#endif\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\nuniform samplerCube cc_environment;\n#if CC_USE_IBL\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  uniform samplerCube cc_reflectionProbeCubemap;\n  uniform sampler2D cc_reflectionProbePlanarMap;\n  uniform sampler2D cc_reflectionProbeDataMap;\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n#endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_USE_FOG != 4\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if CC_USE_LIGHT_PROBE\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  uniform sampler2D cc_lightingMap;\n#endif\n    uniform vec4 baseColor;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\n#define CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TRANSPARENCY\nvec4 SurfacesFragmentModifyBaseColorAndTransparency()\n{\n  vec4 color = vec4(cc_mainLitColor.rgb, 1.0);\n  color.rgb = SRGBToLinear(baseColor.rgb);\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture2D(baseColorMap, FSInput_texcoord);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return color;\n}\nvoid main () {\n  vec4 color = SurfacesFragmentModifyBaseColorAndTransparency();\n#if CC_USE_HDR\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING)\n  #endif\n  color.rgb = ACESToneMap(color.rgb);\n#endif\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  if (IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION)\n#endif\n  color.rgb = LinearToSRGB(color.rgb);\n  gl_FragColor = color;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_environment","defines":[]},{"name":"cc_diffuseMap","defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]},{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["!USE_INSTANCING"]},{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"CCSH","defines":["CC_USE_LIGHT_PROBE","!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_reflectionProbeCubemap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbePlanarMap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbeDataMap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_lightingMap","defines":["CC_USE_LIGHTMAP","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":89,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":119}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean","default":0},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_FORWARD_ADD","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"USE_POSITION_SCALING","type":"boolean"},{"name":"CC_DISABLE_STRUCTURE_IN_FRAGMENT_SHADER","type":"number","range":[0,1]},{"name":"CC_PIPELINE_TYPE","type":"number","range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"CC_USE_IBL","type":"number","range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","range":[0,2]},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"USE_BASE_COLOR_MAP","type":"boolean"},{"name":"CC_USE_HDR","type":"boolean"}]},{"hash":2343048929,"name":"builtin-toon|toon-vs|toon-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"baseColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"shadeColor1","type":16,"count":1},{"name":"shadeColor2","type":16,"count":1},{"name":"specular","type":16,"count":1},{"name":"shadeParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleAndStrenth","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_BASE_COLOR_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"shadeMap1","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_1ST_SHADE_MAP"]},{"name":"shadeMap2","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_2ND_SHADE_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_SPECULAR_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":["USE_NORMAL_MAP"]},{"name":"a_color","format":44,"location":6,"defines":[]},{"name":"a_texCoord1","format":21,"location":7,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":15,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":16,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":17,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"tags":[],"defines":[]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"tags":["CC_PIPELINE_TYPE"],"defines":["CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["CC_PIPELINE_TYPE"]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":17,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["!USE_INSTANCING"]},{"name":"CCMorph","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_displacementWeights","typename":"vec4","type":16,"count":15,"isArray":true},{"name":"cc_displacementTextureInfo","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointTextureInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointAnimInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_joints","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true}],"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCForwardLight","stageFlags":16,"tags":{"builtin":"local"},"members":[{"name":"cc_lightPos","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true},{"name":"cc_lightColor","typename":"vec4","type":16,"count":0,"isArray":true},{"name":"cc_lightSizeRangeAngle","typename":"vec4","type":16,"count":0,"isArray":true},{"name":"cc_lightDir","typename":"vec4","type":16,"count":0,"isArray":true}],"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"CCSH","stageFlags":16,"tags":{"builtin":"local"},"members":[{"name":"cc_sh_linear_const_r","typename":"vec4","type":16,"count":1},{"name":"cc_sh_linear_const_g","typename":"vec4","type":16,"count":1},{"name":"cc_sh_linear_const_b","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_r","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_g","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_b","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_a","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_LIGHT_PROBE","!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_reflectionProbeCubemap","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbePlanarMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbeDataMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_lightingMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_LIGHTMAP","!CC_FORWARD_ADD"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"baseColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"shadeColor1","type":16,"count":1},{"name":"shadeColor2","type":16,"count":1},{"name":"specular","type":16,"count":1},{"name":"shadeParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleAndStrenth","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_BASE_COLOR_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"shadeMap1","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_1ST_SHADE_MAP"]},{"name":"shadeMap2","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_2ND_SHADE_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_SPECULAR_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCShadow","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matLightView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matLightViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_shadowInvProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowNFLSInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowWHPBInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowLPNNInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowColor","typename":"vec4","type":16,"count":1,"precision":"lowp "},{"name":"cc_planarNDInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCSM","stageFlags":16,"tags":{"builtin":"global"},"members":[{"name":"cc_csmViewDir0","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir1","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir2","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmAtlas","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_matCSMViewProj","typename":"mat4","type":25,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjDepthInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmSplitsInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_environment","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"global"},"defines":[]},{"name":"cc_diffuseMap","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]},{"name":"cc_shadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl1":{"vert":"\nprecision highp float;\n#define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING USE_COMPATIBLE_LIGHTING\n#define CC_SURFACES_USE_TANGENT_SPACE USE_NORMAL_MAP\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_CLIP_POS\n  #define CC_SURFACES_TRANSFER_CLIP_POS 0\n#endif\n#ifndef CC_SURFACES_USE_LIGHT_MAP\n  #ifdef CC_USE_LIGHTMAP\n    #define CC_SURFACES_USE_LIGHT_MAP CC_USE_LIGHTMAP\n  #else\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_FLIP_UV\n  #define CC_SURFACES_FLIP_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_FRESNEL\n  #define CC_SURFACES_LIGHTING_USE_FRESNEL 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  #define CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  #define CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n  #define CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRT\n  #define CC_SURFACES_LIGHTING_TRT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TT\n  #define CC_SURFACES_LIGHTING_TT 0\n#endif\n#ifndef CC_SURFACES_ENABLE_DEBUG_VIEW\n  #define CC_SURFACES_ENABLE_DEBUG_VIEW 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  #define CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  #define CC_SURFACES_LIGHTING_CALCULATE_SPECULAR 1\n#endif\n#define CC_USE_SURFACE_SHADER 1\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  attribute vec4 a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  attribute vec4 a_color;\n#endif\n#if CC_SURFACES_USE_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n    attribute vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n#endif\nvarying highp vec3 v_worldPos;\nvarying mediump vec4 v_normal;\nvarying vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  varying mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  varying mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  varying mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  varying mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  varying highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  varying highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    varying mediump vec4 v_sh_linear_const_r;\n    varying mediump vec4 v_sh_linear_const_g;\n    varying mediump vec4 v_sh_linear_const_b;\n  #endif\n#endif\n#define VSOutput_worldPos v_worldPos\n#define VSOutput_worldNormal v_normal.xyz\n#define VSOutput_faceSideSign v_normal.w\n#define VSOutput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define VSOutput_vertexColor v_color\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define VSOutput_worldTangent v_tangent.xyz\n  #define VSOutput_mirrorNormal v_tangent.w\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define VSOutput_texcoord1 v_uv1\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define VSOutput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define VSOutput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define VSOutput_reflectionProbeId v_shadowBiasAndProbeId.z\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define VSOutput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define VSOutput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define VSOutput_clipPos v_clipPos\n#endif\nstruct SurfacesStandardVertexIntermediate\n{\n  highp vec4 position;\n  vec3 normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  vec4 tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  vec4 color;\n#endif\n  vec2 texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  vec2 texCoord1;\n#endif\n  highp vec4 clipPos;\n  highp vec3 worldPos;\n  vec4 worldNormal;\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 worldTangent, worldBinormal;\n  #endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  vec4 shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  float fogFactor;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  vec3 lightmapUV;\n#endif\n};\n#if CC_USE_MORPH\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\nuniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n  uniform highp vec4 cc_localShadowBias;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #if CC_USE_FOG != 4\n    float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n        vec4 wPos = pos;\n        float cam_dis = distance(cameraPos, wPos.xyz);\n        return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n    }\n    float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n        vec4 wPos = pos;\n        float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n        float f = exp(-cam_dis * fogDensity);\n        return f;\n    }\n    float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n        vec4 wPos = pos;\n        float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n        float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n        return f;\n    }\n    float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n        vec4 wPos = pos;\n        vec3 camWorldProj = cameraPos.xyz;\n        camWorldProj.y = 0.;\n        vec3 worldPosProj = wPos.xyz;\n        worldPosProj.y = 0.;\n        float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n        float fDeltaY, fDensityIntegral;\n        if (cameraPos.y > fogTop) {\n            if (wPos.y < fogTop) {\n                fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n                fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n            }\n            else {\n                fDeltaY = 0.;\n                fDensityIntegral = 0.;\n            }\n        }\n        else {\n            if (wPos.y < fogTop) {\n                float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n                float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n                fDeltaY = abs(fDeltaA - fDeltaB);\n                fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n            }\n            else {\n                fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n                fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n            }\n        }\n        float fDensity;\n        if (fDeltaY != 0.) {\n            fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n        }\n        else {\n            fDensity = 0.;\n        }\n        float f = exp(-fDensity);\n        return f;\n    }\n  #endif\n  void CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n  {\n  #if CC_USE_FOG == 0\n  \tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n  #elif CC_USE_FOG == 1\n  \tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n  #elif CC_USE_FOG == 2\n  \tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n  #elif CC_USE_FOG == 3\n  \tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n  #else\n  \tfactor = 1.0;\n  #endif\n  }\n#endif\n    uniform vec4 tilingOffset;\n#define CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n  In.texCoord = In.texCoord * tilingOffset.xy + tilingOffset.zw;\n}\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_POS\nvec3 SurfacesVertexModifyLocalPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.position.xyz;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_NORMAL\nvec3 SurfacesVertexModifyLocalNormal(in SurfacesStandardVertexIntermediate In)\n{\n  return In.normal.xyz;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_TANGENT\n  #if CC_SURFACES_USE_TANGENT_SPACE\n  vec4 SurfacesVertexModifyLocalTangent(in SurfacesStandardVertexIntermediate In)\n    {\n      return In.tangent;\n    }\n  #endif\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_SHARED_DATA\nvoid SurfacesVertexModifyLocalSharedData(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_POS\nvec3 SurfacesVertexModifyWorldPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.worldPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_CLIP_POS\nvec4 SurfacesVertexModifyClipPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.clipPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_NORMAL\nvec3 SurfacesVertexModifyWorldNormal(in SurfacesStandardVertexIntermediate In)\n{\n    vec3 worldNormal = In.worldNormal.xyz;\n  #if CC_SURFACES_USE_TWO_SIDED\n      worldNormal.xyz *= In.worldNormal.w;\n  #endif\n  return worldNormal;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_SHARED_DATA\nvoid SurfacesVertexModifySharedData(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\nvoid CCSurfacesVertexInput(out SurfacesStandardVertexIntermediate In)\n{\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  In.tangent = a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  In.color = a_color;\n#endif\n  In.texCoord = a_texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  In.texCoord1 = a_texCoord1;\n#endif\n}\nvoid CCSurfacesVertexOutput(in SurfacesStandardVertexIntermediate In)\n{\n  gl_Position = In.clipPos;\n  VSOutput_worldNormal = In.worldNormal.xyz;\n  VSOutput_faceSideSign = In.worldNormal.w;\n  VSOutput_worldPos = In.worldPos;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  VSOutput_worldTangent = In.worldTangent.xyz;\n  VSOutput_mirrorNormal = In.tangent.w > 0.0 ? 1.0 : -1.0;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  VSOutput_vertexColor = In.color;\n#endif\n  VSOutput_texcoord = In.texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  VSOutput_texcoord1 = In.texCoord1;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  VSOutput_fogFactor = In.fogFactor;\n#endif\n#if CC_RECEIVE_SHADOW\n  VSOutput_shadowBias = In.shadowBiasAndProbeId.xy;\n#endif\n#if CC_USE_REFLECTION_PROBE\n  VSOutput_reflectionProbeId = In.shadowBiasAndProbeId.z;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  VSOutput_lightMapUV = In.lightmapUV;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  VSOutput_localPos = In.position;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  VSOutput_clipPos = In.clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    v_sh_linear_const_r = a_sh_linear_const_r;\n    v_sh_linear_const_g = a_sh_linear_const_g;\n    v_sh_linear_const_b = a_sh_linear_const_b;\n  #endif\n#endif\n}\nvoid CCSurfacesVertexAnimation(inout SurfacesStandardVertexIntermediate In)\n{\nvec4 temp = vec4(0.0);\n#if CC_USE_MORPH\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    applyMorph(In.position, In.normal, In.tangent);\n  #else\n    applyMorph(In.position, In.normal, temp);\n  #endif\n#endif\n#if CC_USE_SKINNING\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    CCSkin(In.position, In.normal, In.tangent);\n  #else\n    CCSkin(In.position, In.normal, temp);\n  #endif\n#endif\n}\nvoid CCSurfacesVertexWorldTransform(inout SurfacesStandardVertexIntermediate In)\n{\n    mat4 matWorld, matWorldIT;\n    CCGetWorldMatrixFull(matWorld, matWorldIT);\n    In.worldPos = (matWorld * In.position).xyz;\n    In.worldNormal.xyz = normalize((matWorldIT * vec4(In.normal.xyz, 0.0)).xyz);\n    #if CC_SURFACES_USE_TANGENT_SPACE\n      In.worldTangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n      In.worldBinormal = cross(In.worldNormal.xyz, In.worldTangent) * In.tangent.w;\n    #endif\n}\nvoid CCSurfacesVertexTransformUV(inout SurfacesStandardVertexIntermediate In)\n{\n  #if CC_SURFACES_FLIP_UV\n    In.texCoord = cc_cameraPos.w > 1.0 ? vec2(In.texCoord.x, 1.0 - In.texCoord.y) : In.texCoord;\n    #if CC_SURFACES_USE_SECOND_UV\n      In.texCoord1 = cc_cameraPos.w > 1.0 ? vec2(In.texCoord1.x, 1.0 - In.texCoord1.y) : In.texCoord1;\n    #endif\n  #endif\n}\nvoid CCSurfacesVertexTransferFog(inout SurfacesStandardVertexIntermediate In)\n{\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(vec4(In.worldPos, 1.0), In.fogFactor);\n#endif\n}\nvoid CCSurfacesVertexTransferShadow(inout SurfacesStandardVertexIntermediate In)\n{\n  #if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n    In.shadowBiasAndProbeId = vec4(0.0);\n  #endif\n  #if CC_RECEIVE_SHADOW\n    In.shadowBiasAndProbeId.xy = vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n    #if USE_INSTANCING\n      In.shadowBiasAndProbeId.xy += a_localShadowBiasAndProbeId.xy;\n    #else\n      In.shadowBiasAndProbeId.xy += cc_localShadowBias.xy;\n    #endif\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    #if USE_INSTANCING\n      In.shadowBiasAndProbeId.zw = a_localShadowBiasAndProbeId.zw;\n    #else\n      In.shadowBiasAndProbeId.zw = cc_localShadowBias.zw;\n    #endif\n  #endif\n}\nvoid CCSurfacesVertexTransferLightMapUV(inout SurfacesStandardVertexIntermediate In)\n{\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #if USE_INSTANCING\n    In.lightmapUV.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    In.lightmapUV.z = a_lightingMapUVParam.w;\n  #else\n    In.lightmapUV.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    In.lightmapUV.z = cc_lightingMapUVParam.w;\n  #endif\n#endif\n}\nvoid main()\n{\n  SurfacesStandardVertexIntermediate In;\n  CCSurfacesVertexInput(In);\n  CCSurfacesVertexAnimation(In);\n  In.position.xyz = SurfacesVertexModifyLocalPos(In);\n  In.normal.xyz = SurfacesVertexModifyLocalNormal(In);\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    In.tangent = SurfacesVertexModifyLocalTangent(In);\n  #endif\n  SurfacesVertexModifyLocalSharedData(In);\n  CCSurfacesVertexWorldTransform(In);\n  In.worldPos = SurfacesVertexModifyWorldPos(In);\n  In.clipPos = cc_matProj * cc_matView * vec4(In.worldPos, 1.0);\n  In.clipPos = SurfacesVertexModifyClipPos(In);\n  vec3 viewDirect = normalize(cc_cameraPos.xyz - In.worldPos);\n  In.worldNormal.w = dot(In.worldNormal.xyz, viewDirect) < 0.0 ? -1.0 : 1.0;\n  In.worldNormal.xyz = SurfacesVertexModifyWorldNormal(In);\n  SurfacesVertexModifyUV(In);\n  SurfacesVertexModifySharedData(In);\n  CCSurfacesVertexTransformUV(In);\n  CCSurfacesVertexTransferFog(In);\n  CCSurfacesVertexTransferShadow(In);\n  CCSurfacesVertexTransferLightMapUV(In);\n  CCSurfacesVertexOutput(In);\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\n#define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING USE_COMPATIBLE_LIGHTING\n#define CC_SURFACES_USE_TANGENT_SPACE USE_NORMAL_MAP\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_CLIP_POS\n  #define CC_SURFACES_TRANSFER_CLIP_POS 0\n#endif\n#ifndef CC_SURFACES_USE_LIGHT_MAP\n  #ifdef CC_USE_LIGHTMAP\n    #define CC_SURFACES_USE_LIGHT_MAP CC_USE_LIGHTMAP\n  #else\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_FLIP_UV\n  #define CC_SURFACES_FLIP_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_FRESNEL\n  #define CC_SURFACES_LIGHTING_USE_FRESNEL 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  #define CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  #define CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n  #define CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRT\n  #define CC_SURFACES_LIGHTING_TRT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TT\n  #define CC_SURFACES_LIGHTING_TT 0\n#endif\n#ifndef CC_SURFACES_ENABLE_DEBUG_VIEW\n  #define CC_SURFACES_ENABLE_DEBUG_VIEW 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  #define CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  #define CC_SURFACES_LIGHTING_CALCULATE_SPECULAR 1\n#endif\n#define CC_USE_SURFACE_SHADER 1\nvarying highp vec3 v_worldPos;\nvarying mediump vec4 v_normal;\nvarying vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  varying mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  varying mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  varying mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  varying mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  varying highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  varying highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    varying mediump vec4 v_sh_linear_const_r;\n    varying mediump vec4 v_sh_linear_const_g;\n    varying mediump vec4 v_sh_linear_const_b;\n  #endif\n#endif\n#define FSInput_worldPos v_worldPos\n#define FSInput_worldNormal v_normal.xyz\n#define FSInput_faceSideSign v_normal.w\n#define FSInput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define FSInput_vertexColor v_color\n#else\n  #define FSInput_vertexColor vec4(1.0)\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define FSInput_worldTangent v_tangent.xyz\n  #define FSInput_mirrorNormal v_tangent.w\n#else\n  #define FSInput_worldTangent vec3(0.0, 0.0, 0.0)\n  #define FSInput_mirrorNormal 1.0\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define FSInput_texcoord1 v_uv1\n#else\n  #define FSInput_texcoord1 vec2(0.0, 0.0)\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define FSInput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define FSInput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define FSInput_reflectionProbeId v_shadowBiasAndProbeId.z\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define FSInput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define FSInput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define FSInput_clipPos v_clipPos\n#endif\nuniform highp vec4 cc_time;\n  uniform mediump vec4 cc_debug_view_mode;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_surfaceTransform;\n  uniform mediump vec4 cc_exposure;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_DIRECT CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT CC_SURFACES_DEBUG_VIEW_TRT_DIRECT + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ALL CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_TRT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRT (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD\n    #if CC_PIPELINE_TYPE == 0\n      #define LIGHTS_PER_PASS 1\n    #else\n      #define LIGHTS_PER_PASS 10\n    #endif\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n    uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n    #endif\n  #endif\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if !USE_INSTANCING\n    #endif\n#endif\nuniform highp mat4 cc_matLightView;\n  uniform highp mat4 cc_matLightViewProj;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  uniform highp vec4 cc_csmViewDir0[4];\n  uniform highp vec4 cc_csmViewDir1[4];\n  uniform highp vec4 cc_csmViewDir2[4];\n  uniform highp vec4 cc_csmAtlas[4];\n  uniform highp mat4 cc_matCSMViewProj[4];\n  uniform highp vec4 cc_csmProjDepthInfo[4];\n  uniform highp vec4 cc_csmProjInfo[4];\n  uniform highp vec4 cc_csmSplitsInfo;\n#endif\nuniform samplerCube cc_environment;\n#if CC_USE_IBL\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  uniform samplerCube cc_reflectionProbeCubemap;\n  uniform sampler2D cc_reflectionProbePlanarMap;\n  uniform sampler2D cc_reflectionProbeDataMap;\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nvec4 packRGBE (vec3 rgb) {\n  highp float maxComp = max(max(rgb.r, rgb.g), rgb.b);\n  highp float e = 128.0;\n  if (maxComp > 0.0001) {\n    e = log(maxComp) / log(1.1);\n    e = ceil(e);\n    e = clamp(e + 128.0, 0.0, 255.0);\n  }\n  highp float sc = 1.0 / pow(1.1, e - 128.0);\n  vec3 encode = clamp(rgb * sc, vec3(0.0), vec3(1.0)) * 255.0;\n  vec3 encode_rounded = floor(encode) + step(encode - floor(encode), vec3(0.5));\n  return vec4(encode_rounded, e) / 255.0;\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nbool isnan(float val) {\n  return (val < 0.0 || 0.0 < val || val == 0.0) ? false : true;\n}\nbool isinf(float x) {\n  return x == x * 2.0 && x != 0.0;\n}\nbool isnans(vec2 val) {\n    return isnan(val.x) || isnan(val.y);\n}\nbool isnans(vec3 val) {\n    return isnan(val.x) || isnan(val.y) || isnan(val.z);\n}\nbool isnans(vec4 val) {\n    return isnan(val.x) || isnan(val.y) || isnan(val.z) || isnan(val.w);\n}\nbool isinfs(vec2 val) {\n    return isinf(val.x) || isinf(val.y);\n}\nbool isinfs(vec3 val) {\n    return isinf(val.x) || isinf(val.y) || isinf(val.z);\n}\nbool isinfs(vec4 val) {\n    return isinf(val.x) || isinf(val.y) || isinf(val.z) || isinf(val.w);\n}\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nvec3 CalculateBinormal(vec3 normal, vec3 tangent, float mirrorNormal)\n{\n    return cross(normal.xyz, tangent) * mirrorNormal;\n}\nvec3 CalculateNormalFromTangentSpace(vec3 normalFromTangentSpace, float normalStrength, vec3 normal, vec3 tangent, float mirrorNormal)\n{\n    vec3 binormal = CalculateBinormal(normal, tangent, mirrorNormal);\n    return (normalFromTangentSpace.x * normalStrength) * normalize(tangent) +\n           (normalFromTangentSpace.y * normalStrength) * normalize(binormal) +\n            normalFromTangentSpace.z * normalize(normal);\n}\nvec2 signNotZero(vec2 v) {\n  return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n}\nvec2 float32x3_to_oct(in vec3 v) {\n  vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n  return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n}\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n#endif\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  float SampleShadowMap (vec3 shadowNDCPos, highp sampler2D shadowMap)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return dot(texture2D(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    #else\n      return texture2D(shadowMap, shadowNDCPos.xy).x;\n    #endif\n  }\n  float NativePCFShadowFactorHard (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return step(shadowNDCPos.z, dot(texture2D(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      return step(shadowNDCPos.z, texture2D(shadowMap, shadowNDCPos.xy).x);\n    #endif\n  }\n  float NativePCFShadowFactorSoft (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n    #endif\n    float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n    float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n    float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n    float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n      block4 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block5 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n      block6 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n      block7 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n      block8 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n    #endif\n    float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float NativePCFShadowFactorSoft5X (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 twoTap = oneTap * 2.0;\n    vec2 offset1 = shadowNDCPos.xy + vec2(-twoTap.x, -twoTap.y);\n    vec2 offset2 = shadowNDCPos.xy + vec2(-oneTap.x, -twoTap.y);\n    vec2 offset3 = shadowNDCPos.xy + vec2(0.0, -twoTap.y);\n    vec2 offset4 = shadowNDCPos.xy + vec2(oneTap.x, -twoTap.y);\n    vec2 offset5 = shadowNDCPos.xy + vec2(twoTap.x, -twoTap.y);\n    vec2 offset6 = shadowNDCPos.xy + vec2(-twoTap.x, -oneTap.y);\n    vec2 offset7 = shadowNDCPos.xy + vec2(-oneTap.x, -oneTap.y);\n    vec2 offset8 = shadowNDCPos.xy + vec2(0.0, -oneTap.y);\n    vec2 offset9 = shadowNDCPos.xy + vec2(oneTap.x, -oneTap.y);\n    vec2 offset10 = shadowNDCPos.xy + vec2(twoTap.x, -oneTap.y);\n    vec2 offset11 = shadowNDCPos.xy + vec2(-twoTap.x, 0.0);\n    vec2 offset12 = shadowNDCPos.xy + vec2(-oneTap.x, 0.0);\n    vec2 offset13 = shadowNDCPos.xy + vec2(0.0, 0.0);\n    vec2 offset14 = shadowNDCPos.xy + vec2(oneTap.x, 0.0);\n    vec2 offset15 = shadowNDCPos.xy + vec2(twoTap.x, 0.0);\n    vec2 offset16 = shadowNDCPos.xy + vec2(-twoTap.x, oneTap.y);\n    vec2 offset17 = shadowNDCPos.xy + vec2(-oneTap.x, oneTap.y);\n    vec2 offset18 = shadowNDCPos.xy + vec2(0.0, oneTap.y);\n    vec2 offset19 = shadowNDCPos.xy + vec2(oneTap.x, oneTap.y);\n    vec2 offset20 = shadowNDCPos.xy + vec2(twoTap.x, oneTap.y);\n    vec2 offset21 = shadowNDCPos.xy + vec2(-twoTap.x, twoTap.y);\n    vec2 offset22 = shadowNDCPos.xy + vec2(-oneTap.x, twoTap.y);\n    vec2 offset23 = shadowNDCPos.xy + vec2(0.0, twoTap.y);\n    vec2 offset24 = shadowNDCPos.xy + vec2(oneTap.x, twoTap.y);\n    vec2 offset25 = shadowNDCPos.xy + vec2(twoTap.x, twoTap.y);\n    float block1, block2, block3, block4, block5, block6, block7, block8, block9, block10, block11, block12, block13, block14, block15, block16, block17, block18, block19, block20, block21, block22, block23, block24, block25;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset1), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset2), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset3), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset4), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset5), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset6), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset7), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset8), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block9 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset9), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block10 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset10), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block11 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset11), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block12 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset12), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block13 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset13), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block14 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset14), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block15 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset15), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block16 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset16), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block17 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset17), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block18 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset18), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block19 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset19), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block20 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset20), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block21 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset21), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block22 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset22), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block23 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset23), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block24 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset24), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block25 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset25), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, offset1).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, offset2).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, offset3).x);\n      block4 = step(shadowNDCPos.z, texture2D(shadowMap, offset4).x);\n      block5 = step(shadowNDCPos.z, texture2D(shadowMap, offset5).x);\n      block6 = step(shadowNDCPos.z, texture2D(shadowMap, offset6).x);\n      block7 = step(shadowNDCPos.z, texture2D(shadowMap, offset7).x);\n      block8 = step(shadowNDCPos.z, texture2D(shadowMap, offset8).x);\n      block9 = step(shadowNDCPos.z, texture2D(shadowMap, offset9).x);\n      block10 = step(shadowNDCPos.z, texture2D(shadowMap, offset10).x);\n      block11 = step(shadowNDCPos.z, texture2D(shadowMap, offset11).x);\n      block12 = step(shadowNDCPos.z, texture2D(shadowMap, offset12).x);\n      block13 = step(shadowNDCPos.z, texture2D(shadowMap, offset13).x);\n      block14 = step(shadowNDCPos.z, texture2D(shadowMap, offset14).x);\n      block15 = step(shadowNDCPos.z, texture2D(shadowMap, offset15).x);\n      block16 = step(shadowNDCPos.z, texture2D(shadowMap, offset16).x);\n      block17 = step(shadowNDCPos.z, texture2D(shadowMap, offset17).x);\n      block18 = step(shadowNDCPos.z, texture2D(shadowMap, offset18).x);\n      block19 = step(shadowNDCPos.z, texture2D(shadowMap, offset19).x);\n      block20 = step(shadowNDCPos.z, texture2D(shadowMap, offset20).x);\n      block21 = step(shadowNDCPos.z, texture2D(shadowMap, offset21).x);\n      block22 = step(shadowNDCPos.z, texture2D(shadowMap, offset22).x);\n      block23 = step(shadowNDCPos.z, texture2D(shadowMap, offset23).x);\n      block24 = step(shadowNDCPos.z, texture2D(shadowMap, offset24).x);\n      block25 = step(shadowNDCPos.z, texture2D(shadowMap, offset25).x);\n    #endif\n    vec2 coef = fract(shadowNDCPos.xy * shadowMapResolution);\n    vec2 v1X1 = mix(vec2(block1, block6), vec2(block2, block7), coef.xx);\n    vec2 v1X2 = mix(vec2(block2, block7), vec2(block3, block8), coef.xx);\n    vec2 v1X3 = mix(vec2(block3, block8), vec2(block4, block9), coef.xx);\n    vec2 v1X4 = mix(vec2(block4, block9), vec2(block5, block10), coef.xx);\n    float v1 = mix(v1X1.x, v1X1.y, coef.y) + mix(v1X2.x, v1X2.y, coef.y) + mix(v1X3.x, v1X3.y, coef.y) + mix(v1X4.x, v1X4.y, coef.y);\n    vec2 v2X1 = mix(vec2(block6, block11), vec2(block7, block12), coef.xx);\n    vec2 v2X2 = mix(vec2(block7, block12), vec2(block8, block13), coef.xx);\n    vec2 v2X3 = mix(vec2(block8, block13), vec2(block9, block14), coef.xx);\n    vec2 v2X4 = mix(vec2(block9, block14), vec2(block10, block15), coef.xx);\n    float v2 = mix(v2X1.x, v2X1.y, coef.y) + mix(v2X2.x, v2X2.y, coef.y) + mix(v2X3.x, v2X3.y, coef.y) + mix(v2X4.x, v2X4.y, coef.y);\n    vec2 v3X1 = mix(vec2(block11, block16), vec2(block12, block17), coef.xx);\n    vec2 v3X2 = mix(vec2(block12, block17), vec2(block13, block18), coef.xx);\n    vec2 v3X3 = mix(vec2(block13, block18), vec2(block14, block19), coef.xx);\n    vec2 v3X4 = mix(vec2(block14, block19), vec2(block15, block20), coef.xx);\n    float v3 = mix(v3X1.x, v3X1.y, coef.y) + mix(v3X2.x, v3X2.y, coef.y) + mix(v3X3.x, v3X3.y, coef.y) + mix(v3X4.x, v3X4.y, coef.y);\n    vec2 v4X1 = mix(vec2(block16, block21), vec2(block17, block22), coef.xx);\n    vec2 v4X2 = mix(vec2(block17, block22), vec2(block18, block23), coef.xx);\n    vec2 v4X3 = mix(vec2(block18, block23), vec2(block19, block24), coef.xx);\n    vec2 v4X4 = mix(vec2(block19, block24), vec2(block20, block25), coef.xx);\n    float v4 = mix(v4X1.x, v4X1.y, coef.y) + mix(v4X2.x, v4X2.y, coef.y) + mix(v4X3.x, v4X3.y, coef.y) + mix(v4X4.x, v4X4.y, coef.y);\n    float fAvg = (v1 + v2 + v3 + v4) * 0.0625;\n    return fAvg;\n  }\n  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n  {\n  \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n  \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n  \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n  \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n  \t\treturn false;\n  \t}\n  \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n  \treturn true;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n  {\n    vec4 newShadowPos = shadowPos;\n    if (normalBias > EPSILON_LOWP)\n    {\n      vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n      if (viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n  {\n  \tvec4 newShadowPos = shadowPos;\n  \tif (normalBias > EPSILON_LOWP)\n  \t{\n  \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n  \t\tif (viewNormal.z < 0.1)\n  \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n  \t}\n  \treturn newShadowPos;\n  }\n  float GetViewSpaceDepthFromNDCDepth_Orthgraphic(float NDCDepth, float projScaleZ, float projBiasZ)\n  {\n  \treturn (NDCDepth - projBiasZ) / projScaleZ;\n  }\n  float GetViewSpaceDepthFromNDCDepth_Perspective(float NDCDepth, float homogenousDividW, float invProjScaleZ, float invProjBiasZ)\n  {\n  \treturn NDCDepth * invProjScaleZ + homogenousDividW * invProjBiasZ;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n  \tvec3 viewSpacePos;\n  \tviewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n  \tviewSpacePos.z = GetViewSpaceDepthFromNDCDepth_Perspective(shadowPos.z, shadowPos.w, cc_shadowInvProjDepthInfo.x, cc_shadowInvProjDepthInfo.y);\n  \tviewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n  \tvec4 clipSpacePos;\n  \tclipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n  \tclipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n  \t#if CC_SHADOWMAP_USE_LINEAR_DEPTH\n  \t\tclipSpacePos.z = GetLinearDepthFromViewSpace(viewSpacePos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n  \t\tclipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n  \t#endif\n  \treturn clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n  {\n  \tfloat coeffA = projScaleZ;\n  \tfloat coeffB = projBiasZ;\n  \tfloat viewSpacePos_z = GetViewSpaceDepthFromNDCDepth_Orthgraphic(shadowPos.z, projScaleZ, projBiasZ);\n  \tviewSpacePos_z += viewspaceDepthBias;\n  \tvec4 result = shadowPos;\n  \tresult.z = viewSpacePos_z * coeffA + coeffB;\n  \treturn result;\n  }\n  vec4 ApplyShadowDepthBias_PerspectiveLinearDepth(vec4 shadowPos, float viewspaceDepthBias, vec3 worldPos)\n  {\n    shadowPos.z = CCGetLinearDepth(worldPos, viewspaceDepthBias) * 2.0 - 1.0;\n    shadowPos.z *= shadowPos.w;\n    return shadowPos;\n  }\n  float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCSpotShadowFactorBase(out vec4 shadowNDCPosWithBias, vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    vec4 pos = vec4(1.0);\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      pos = ApplyShadowDepthBias_PerspectiveLinearDepth(shadowPos, shadowBias.x, worldPos);\n    #else\n      pos = ApplyShadowDepthBias_Perspective(shadowPos, shadowBias.x);\n    #endif\n    float realtimeShadow = 1.0;\n    if (pcf > 2.9) {\n      realtimeShadow = CCGetSpotLightShadowFactorSoft5X(pos, worldPos);\n    }else if (pcf > 1.9) {\n      realtimeShadow = CCGetSpotLightShadowFactorSoft3X(pos, worldPos);\n    }else if (pcf > 0.9) {\n      realtimeShadow = CCGetSpotLightShadowFactorSoft(pos, worldPos);\n    }else {\n      realtimeShadow = CCGetSpotLightShadowFactorHard(pos, worldPos);\n    }\n    shadowNDCPosWithBias = pos;\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  float CCShadowFactorBase(out vec4 shadowNDCPosWithBias, vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n    float realtimeShadow = 1.0;\n    #if CC_DIR_SHADOW_PCF_TYPE == 3\n      realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 2\n      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 1\n      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 0\n      realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n    #endif\n    shadowNDCPosWithBias = pos;\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n    bool CCGetCSMLevelWithTransition(out highp float ratio, vec3 clipPos) {\n      highp float maxRange = 1.0 - cc_csmSplitsInfo.x;\n      highp float minRange = cc_csmSplitsInfo.x;\n      highp float thresholdInvert = 1.0 / cc_csmSplitsInfo.x;\n      ratio = 0.0;\n      if (clipPos.x <= minRange) {\n        ratio = clipPos.x * thresholdInvert;\n        return true;\n      }\n      if (clipPos.x >= maxRange) {\n        ratio = 1.0 - (clipPos.x - maxRange) * thresholdInvert;\n        return true;\n      }\n      if (clipPos.y <= minRange) {\n        ratio = clipPos.y  * thresholdInvert;\n        return true;\n      }\n      if (clipPos.y >= maxRange) {\n        ratio = 1.0 - (clipPos.y - maxRange) * thresholdInvert;\n        return true;\n      }\n      return false;\n    }\n    bool CCHasCSMLevel(int level, vec3 worldPos) {\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      bool hasLevel = false;\n      for (int i = 0; i < 4; i++) {\n        if (i == level) {\n          vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n          if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n              clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n              clipPos.z >= 0.0 && clipPos.z <= 1.0) {\n            hasLevel = true;\n          }\n        }\n      }\n      return hasLevel;\n    }\n    void CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos, int level) {\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && i == level) {\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n        }\n      }\n    }\n    int CCGetCSMLevel(out bool isTransitionArea, out highp float transitionRatio, out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos)\n    {\n      int level = -1;\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && level < 0) {\n          #if CC_CASCADED_LAYERS_TRANSITION\n            isTransitionArea = CCGetCSMLevelWithTransition(transitionRatio, clipPos);\n          #endif\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n          level = i;\n        }\n      }\n      return level;\n    }\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos)\n    {\n      bool isTransitionArea = false;\n      highp float transitionRatio = 0.0;\n      return CCGetCSMLevel(isTransitionArea, transitionRatio, csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n    }\n    float CCCSMFactorBase(out vec4 csmPos, out vec4 csmNDCPosWithBias, vec3 worldPos, vec3 N, vec2 shadowBias)\n    {\n      bool isTransitionArea = false;\n      highp float ratio = 0.0;\n      csmPos = vec4(1.0);\n      vec4 shadowProjDepthInfo, shadowProjInfo;\n      vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n      int level = -1;\n      #if CC_CASCADED_LAYERS_TRANSITION\n        level = CCGetCSMLevel(isTransitionArea, ratio, csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      #else\n        level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      #endif\n      if (level < 0) { return 1.0; }\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n      pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n      csmNDCPosWithBias = pos;\n      float realtimeShadow = 1.0;\n      #if CC_DIR_SHADOW_PCF_TYPE == 3\n        realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 2\n        realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 1\n        realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 0\n        realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n      #endif\n      #if CC_CASCADED_LAYERS_TRANSITION\n        vec4 nextCSMPos = vec4(1.0);\n        vec4 nextShadowProjDepthInfo, nextShadowProjInfo;\n        vec3 nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2;\n        float nextRealtimeShadow = 1.0;\n        CCGetCSMLevel(nextCSMPos, nextShadowProjDepthInfo, nextShadowProjInfo, nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2, worldPos, level + 1);\n        bool hasNextLevel = CCHasCSMLevel(level + 1, worldPos);\n        if (hasNextLevel && isTransitionArea) {\n          vec4 nexPos = ApplyShadowDepthBias_FaceNormal(nextCSMPos, N, shadowBias.y, nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2, nextShadowProjInfo.xy);\n          nexPos = ApplyShadowDepthBias_Orthographic(nexPos, shadowBias.x, nextShadowProjDepthInfo.x, nextShadowProjDepthInfo.y);\n          #if CC_DIR_SHADOW_PCF_TYPE == 3\n            nextRealtimeShadow = CCGetDirLightShadowFactorSoft5X(nexPos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 2\n            nextRealtimeShadow = CCGetDirLightShadowFactorSoft3X(nexPos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 1\n            nextRealtimeShadow = CCGetDirLightShadowFactorSoft(nexPos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 0\n            nextRealtimeShadow = CCGetDirLightShadowFactorHard(nexPos);\n          #endif\n          return mix(mix(nextRealtimeShadow, realtimeShadow, ratio), 1.0, cc_shadowNFLSInfo.w);\n        }\n        return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n      #else\n        return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n      #endif\n    }\n  #else\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      return -1;\n    }\n    float CCCSMFactorBase(out vec4 csmPos, out vec4 csmNDCPosWithBias, vec3 worldPos, vec3 N, vec2 shadowBias) {\n      csmPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n      return CCShadowFactorBase(csmNDCPosWithBias, csmPos, N, shadowBias);\n    }\n  #endif\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias) {\n    vec4 shadowNDCPosWithBias;\n    return CCShadowFactorBase(shadowNDCPosWithBias, shadowPos, N, shadowBias);\n  }\n  float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n    vec4 csmPos, csmNDCPosWithBias;\n    return CCCSMFactorBase(csmPos, csmNDCPosWithBias, worldPos, N, shadowBias);\n  }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    vec4 shadowNDCPosWithBias;\n    return CCSpotShadowFactorBase(shadowNDCPosWithBias, shadowPos, worldPos, shadowBias);\n  }\n#endif\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if CC_USE_LIGHT_PROBE\n  #if CC_USE_LIGHT_PROBE\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  uniform sampler2D cc_lightingMap;\n  void SampleAndDecodeLightMapColor(out vec3 lightmapColor, out float dirShadow, out float ao, sampler2D lightingMap, vec2 luv, float lum, vec3 worldNormal)\n  {\n  #if CC_LIGHT_MAP_VERSION > 2\n  #elif CC_LIGHT_MAP_VERSION > 1\n  \tvec4 dataLow = texture2D(lightingMap, luv);\n  \tvec4 dataHigh = texture2D(lightingMap, luv + vec2(0.5, 0.0));\n  \tlightmapColor.xyz = dataLow.xyz + dataHigh.xyz * 0.00392156862745098;\n      lightmapColor.rgb *= lum;\n  \tdirShadow = dataLow.a;\n  \tao = dataHigh.a;\n  #else\n      vec4 lightmap = texture2D(lightingMap, luv);\n      lightmapColor = lightmap.rgb * lum;\n  \tdirShadow = lightmap.a;\n  \tao = 1.0;\n  #endif\n  }\n  void GetLightMapColor(out vec3 lightmapColor, out float dirShadow, out float ao, sampler2D lightingMap, vec2 luv, float lum, vec3 worldNormal)\n  {\n  \tvec4 lightmap;\n  \tvec2 occlusion;\n  \tSampleAndDecodeLightMapColor(lightmapColor, dirShadow, ao, lightingMap, luv, lum, worldNormal);\n  #if CC_USE_HDR\n      lightmapColor.rgb *= cc_exposure.w * cc_exposure.x;\n  #endif\n  }\n#endif\n    uniform vec4 baseColor;\n    uniform vec4 colorScaleAndCutoff;\n    uniform vec4 shadeColor1;\n    uniform vec4 shadeColor2;\n    uniform vec4 specular;\n    uniform vec4 shadeParams;\n    uniform vec4 miscParams;\n    uniform vec4 emissive;\n    uniform vec4 emissiveScaleAndStrenth;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\n#if USE_NORMAL_MAP\n  uniform sampler2D normalMap;\n#endif\n#if USE_1ST_SHADE_MAP\n  uniform sampler2D shadeMap1;\n#endif\n#if USE_2ND_SHADE_MAP\n  uniform sampler2D shadeMap2;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\n#define CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TOONSHADE\nvoid SurfacesFragmentModifyBaseColorAndToonShade(out vec4 baseColorAndTransparency, out vec3 shade1, out vec3 shade2)\n{\n  shade2 = shadeColor2.rgb * colorScaleAndCutoff.rgb;\n  #if USE_2ND_SHADE_MAP\n    shade2 *= SRGBToLinear(texture2D(shadeMap2, FSInput_texcoord).rgb);\n  #endif\n  shade1 = shadeColor1.rgb * colorScaleAndCutoff.rgb;\n  #if USE_1ST_SHADE_MAP\n    shade1 *= SRGBToLinear(texture2D(shadeMap1, FSInput_texcoord).rgb);\n    #if SHADE_MAP_1_AS_SHADE_MAP_2\n      shade2 *= shade1.rgb;\n    #endif\n  #endif\n  vec4 color = baseColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture2D(baseColorMap, FSInput_texcoord);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_1\n      shade1 *= texColor.rgb;\n    #endif\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_2\n      shade2 *= texColor.rgb;\n    #endif\n  #endif\n  baseColorAndTransparency = color;\n  baseColorAndTransparency.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (baseColorAndTransparency.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n}\n#define CC_SURFACES_FRAGMENT_ALPHA_CLIP_ONLY\n#define CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL\nvec3 SurfacesFragmentModifyWorldNormal()\n{\n  vec3 normal = FSInput_worldNormal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, FSInput_texcoord).xyz - vec3(0.5);\n    normal = CalculateNormalFromTangentSpace(nmmp, emissiveScaleAndStrenth.w, normal.xyz, FSInput_worldTangent, FSInput_mirrorNormal);\n  #endif\n  return normalize(normal);\n}\n#define CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE\nvec3 SurfacesFragmentModifyEmissive()\n{\n  vec3 emissive = emissive.rgb * emissiveScaleAndStrenth.xyz;\n  #if USE_EMISSIVE_MAP\n    emissive *= SRGBToLinear(texture2D(emissiveMap, FSInput_texcoord).rgb);\n  #endif\n  return emissive;\n}\n#define CC_SURFACES_FRAGMENT_MODIFY_TOON_STEP_AND_FEATHER\nvec4 SurfacesFragmentModifyToonStepAndFeather()\n{\n  return shadeParams;\n}\n#define CC_SURFACES_FRAGMENT_MODIFY_TOON_SHADOW_COVER\nfloat SurfacesFragmentModifyToonShadowCover()\n{\n    return miscParams.x;\n}\n#define CC_SURFACES_FRAGMENT_MODIFY_TOON_SPECULAR\nvec4 SurfacesFragmentModifyToonSpecular()\n{\n  vec4 specularParam = specular;\n  #if USE_SPECULAR_MAP\n    specularParam.rgb *= SRGBToLinear(texture2D(specularMap, FSInput_texcoord).rgb);\n  #endif\n  return specularParam;\n}\nstruct LightingIntermediateData\n{\n  vec3 N, H, L, V;\n  float distToLight, distToLightSqr;\n  float distToCamera, distToCameraSqr;\n  float NoL, NoV, NoH;\n  float NoLSat, NoVSat, NoHSat;\n  float NoVAbsSat;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 worldPosition, worldPosition_fract_part;\n  #else\n  vec3 worldPosition;\n  #endif\n  vec3 T, B;\n  float specularParam;\n  float ior;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  float anisotropyShape;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec4 shadowPosAndDepth;\n  vec4 transmitDiffuseParams;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec4 transmitParams;\n  vec3 inScatteringLightColor;\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  vec3 baseColorTT;\n  float ttIntensity, ttScatterCoef;\n#endif\n};\nvoid CCSurfacesLightingGetIntermediateData_PerPixel(inout LightingIntermediateData data, vec3 worldNormal, vec3 worldPos, vec3 worldTangent, vec3 worldBinormal\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n    , float anisotropyShape\n#endif\n)\n{\n  data.N = worldNormal;\n  data.V = cc_cameraPos.xyz - worldPos;\n  data.distToCameraSqr = dot(data.V, data.V);\n  data.distToCamera = sqrt(data.distToCameraSqr);\n  data.V /= data.distToCamera;\n  data.NoV = dot(data.N, data.V);\n  data.NoVSat = max(data.NoV, 0.0);\n  data.NoVAbsSat = max(abs(data.NoV), 0.0);\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(data.worldPosition, data.worldPosition_fract_part, worldPos);\n  #else\n  data.worldPosition = worldPos;\n  #endif\n  data.T = worldTangent;\n  data.B = worldBinormal;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  data.anisotropyShape = anisotropyShape;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  data.inScatteringLightColor = vec3(0.0);\n  data.transmitParams = vec4(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  data.shadowPosAndDepth = vec4(0.0, 0.0, 999999.0, 999999.0);\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  data.baseColorTT = vec3(0.0);\n  data.ttIntensity = data.ttScatterCoef = 0.0;\n#endif\n}\nvoid CCSurfacesLightingGetIntermediateData_PerLight(inout LightingIntermediateData data, vec3 lightDirWithDist)\n{\n  data.L = lightDirWithDist;\n  data.distToLightSqr = dot(data.L, data.L);\n  data.distToLight = sqrt(data.distToLightSqr);\n  data.L /= data.distToLight;\n  data.H = normalize(data.L + data.V);\n  data.NoL = dot(data.N, data.L);\n  data.NoH = dot(data.N, data.H);\n  data.NoLSat = max(data.NoL, 0.0);\n  data.NoHSat = max(data.NoH, 0.0);\n}\nstruct LightingResult\n{\n  vec3 diffuseColorWithLighting, specularColorWithLighting;\n  vec3 directDiffuse, directSpecular;\n  vec3 environmentDiffuse, environmentSpecular;\n  float shadow, ao;\n  vec3 lightmapColor;\n  vec3 emissive;\n#if CC_SURFACES_LIGHTING_USE_FRESNEL\n  float fresnel;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  vec3 directTransmitSpecular, environmentTransmitSpecular;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec3 directTransmitDiffuse, environmentTransmitDiffuse;\n#endif\n#if CC_SURFACES_LIGHTING_TRT\n  vec3 directTRT, environmentTRT;\n  vec3 specularColorWithLightingTRT;\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  vec3 directTT;\n  vec3 diffuseColorWithLightingTT;\n#endif\n};\nstruct LightingMiscData\n{\n  float lightType;\n  vec3 lightPos, lightDir;\n  vec4 lightColorAndIntensity;\n  vec4 lightSizeRangeAngle;\n};\n#define DiffuseCoefficient_EnergyConservation INV_PI\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n  float factor = distSqr * invSqrAttRadius;\n  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n  return smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\n  float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n  return attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n  float cd = dot(litDir, L);\n  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n  return (attenuation * attenuation);\n}\nfloat CalculateDistanceAttenuation(float distToLightSqr, float lightRadius, float lightRange)\n{\n  float litRadiusSqr = lightRadius * lightRadius;\n  float attRadiusSqrInv = 1.0 / max(lightRange, 0.01);\n  attRadiusSqrInv *= attRadiusSqrInv;\n  float edgeAttenuation = litRadiusSqr / max(litRadiusSqr, distToLightSqr);\n  return GetDistAtt(distToLightSqr, attRadiusSqrInv) * edgeAttenuation;\n}\nfloat CalculateAngleAttenuation(vec3 spotLightDir, vec3 L, float cosAngleOuter)\n{\n  float cosInner = max(dot(spotLightDir, L), 0.01);\n  float litAngleScale = 1.0 / max(0.001, cosInner - cosAngleOuter);\n  float litAngleOffset = -cosAngleOuter * litAngleScale;\n  return GetAngleAtt(L, spotLightDir, litAngleScale, litAngleOffset);\n}\nbool CCSurfacesLightingEnableShadow(in float NoL)\n{\n  return NoL > 0.0;\n}\nfloat CCSurfacesLightingCalculateDistanceAttenuation(in LightingIntermediateData lightingData, in vec4 lightSizeRangeAngle)\n{\n  return CalculateDistanceAttenuation(lightingData.distToLightSqr, lightSizeRangeAngle.x, lightSizeRangeAngle.y);\n}\nfloat CCSurfacesLightingCalculateAngleAttenuation(in LightingIntermediateData lightingData, in vec4 lightSizeRangeAngle, in vec3 spotLightDir)\n{\n  return CalculateAngleAttenuation(spotLightDir, lightingData.L, lightSizeRangeAngle.z);\n}\nvoid CCSurfacesLightingCalculateDirect(out vec3 lightingDiffuse, out vec3 lightingSpecular, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n{\n    vec3 irradiance = lightSourceColorAndIntensity.rgb * lightSourceColorAndIntensity.w;\n    lightingDiffuse = irradiance;\n#if CC_FORWARD_ADD || CC_ENABLE_CLUSTERED_LIGHT_CULLING\n    float NL = 0.5 * lightingData.NoL + 0.5;\n    lightingDiffuse *= NL;\n#endif\n    float NH = 0.5 * lightingData.NoH + 0.5;\n    float specularWeight = 1.0 - pow(lightingData.specularParam, 5.0);\n    float specularMask = step(specularWeight + EPSILON_LOWP, NH);\n    lightingSpecular = irradiance * specularMask;\n}\nvoid CCSurfacesLightingCalculateEnvironment(out vec3 lightingDiffuse, out vec3 lightingSpecular, in LightingIntermediateData lightingData, float lightIntensity)\n{\n  lightingDiffuse = vec3(0.0);\n  lightingSpecular = vec3(0.0);\n}\nstruct SurfacesMaterialData\n{\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 worldPos, worldPos_fract_part;\n  #else\n  vec3 worldPos;\n  #endif\n  vec4 baseColor;\n  vec4 specular;\n  vec3 worldNormal;\n  vec3 emissive;\n  vec3 shade1;\n  vec3 shade2;\n  float baseStep;\n  float baseFeather;\n  float shadeStep;\n  float shadeFeather;\n  float shadowCover;\n};\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TRANSPARENCY\nvec4 SurfacesFragmentModifyBaseColorAndTransparency()\n{\n    return FSInput_vertexColor;\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_ALPHA_CLIP_ONLY\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL\nvec3 SurfacesFragmentModifyWorldNormal()\n{\n    return normalize(FSInput_worldNormal);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_WORLD_TANGENT_AND_BINORMAL\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_IOR\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_ANISOTROPY_PARAMS\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE\nvec3 SurfacesFragmentModifyEmissive()\n{\n    return vec3(0.0, 0.0, 0.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_PBRPARAMS\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TRANSMIT_PARAMS\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TRANSMIT_DIFFUSE_PARAMS\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TRT_PARAMS\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TRT_COLOR\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TT_PARAMS\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TT_COLOR\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_SHARED_DATA\nvoid SurfacesFragmentModifySharedData(inout SurfacesMaterialData surfaceData)\n{\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TOONSHADE\nvoid SurfacesFragmentModifyBaseColorAndToonShade(out vec4 baseColorAndTransparency, out vec3 shade1, out vec3 shade2, in vec3 baseColor)\n{\n    baseColorAndTransparency = FSInput_vertexColor;\n    shade1 = shade2 = vec3(0.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TOON_STEP_AND_FEATHER\nvec4 SurfacesFragmentModifyToonStepAndFeather()\n{\n    return vec3(0.8, 0.001, 0.5, 0.001);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TOON_SHADOW_COVER\nfloat SurfacesFragmentModifyToonShadowCover()\n{\n    return 0.5;\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TOON_SPECULAR\nvec4 SurfacesFragmentModifyToonSpecular()\n{\n    return vec4(1.0, 1.0, 1.0, 0.3);\n}\n#endif\nvoid CCSurfacesFragmentGetMaterialData(inout SurfacesMaterialData surfaceData)\n{\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(surfaceData.worldPos, surfaceData.worldPos_fract_part, FSInput_worldPos);\n  #else\n  surfaceData.worldPos = FSInput_worldPos;\n  #endif\n  surfaceData.worldNormal = SurfacesFragmentModifyWorldNormal();\n  surfaceData.emissive = SurfacesFragmentModifyEmissive();\n  SurfacesFragmentModifyBaseColorAndToonShade(surfaceData.baseColor, surfaceData.shade1, surfaceData.shade2);\n  surfaceData.specular = SurfacesFragmentModifyToonSpecular();\n  surfaceData.shadowCover = SurfacesFragmentModifyToonShadowCover();\n  vec4 shaderParams = SurfacesFragmentModifyToonStepAndFeather();\n  surfaceData.baseStep = shadeParams.x;\n  surfaceData.baseFeather = shadeParams.y;\n  surfaceData.shadeStep = shadeParams.z;\n  surfaceData.shadeFeather = shadeParams.w;\n  SurfacesFragmentModifySharedData(surfaceData);\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP)\n    surfaceData.worldNormal = FSInput_worldNormal;\n#endif\n#if CC_USE_DEBUG_VIEW\n  if (!IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO) {\n      float brightBase = dot(GRAY_VECTOR, surfaceData.baseColor.rgb);\n      float brightShade1 = dot(GRAY_VECTOR, surfaceData.shade1.rgb);\n      float brightShade2 = dot(GRAY_VECTOR, surfaceData.shade2.rgb);\n      surfaceData.baseColor.rgb = vec3(1.0);\n      surfaceData.shade1.rgb = vec3(brightShade1 / brightBase);\n      surfaceData.shade2.rgb = vec3(brightShade2 / brightBase);\n      surfaceData.specular.rgb = vec3(1.0);\n  }\n#endif\n}\nvec3 CCSurfacesGetDiffuseColor(in SurfacesMaterialData surfaceData)\n{\n  return surfaceData.shade1;\n}\nvec3 CCSurfacesGetSpecularColor(in SurfacesMaterialData surfaceData)\n{\n  return surfaceData.specular.xyz;\n}\nvoid CCSurfacesLightingInitializeColorWithLighting(inout vec3 diffuseColorWithLighting, inout vec3 specularColorWithLighting, in SurfacesMaterialData surfaceData, in LightingIntermediateData lightingData)\n{\n  specularColorWithLighting = surfaceData.specular.xyz * surfaceData.baseStep;\n}\nvoid CCSurfacesLightingCalculateColorWithLighting(inout vec3 diffuseColorWithLighting, inout vec3 specularColorWithLighting, in SurfacesMaterialData surfaceData, in LightingIntermediateData lightingData)\n{\n  float NL = 0.5 * lightingData.NoL + 0.5;\n  vec3 diffuse = mix(surfaceData.shade1, surfaceData.shade2,\n    clamp(1.0 + (surfaceData.shadeStep - surfaceData.shadeFeather - NL) / surfaceData.shadeFeather, 0.0, 1.0));\n  diffuse = mix(surfaceData.baseColor.rgb, diffuse,\n    clamp(1.0 + (surfaceData.baseStep - surfaceData.baseFeather - NL) / surfaceData.baseFeather, 0.0, 1.0));\n  diffuseColorWithLighting = diffuse * surfaceData.baseStep;\n}\nvoid CCSurfacesInitializeLightingIntermediateData(inout LightingIntermediateData lightingData, in SurfacesMaterialData surfaceData)\n{\n  vec3 worldPos;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  worldPos = unpackHighpData(surfaceData.worldPos, surfaceData.worldPos_fract_part);\n  #else\n  worldPos = surfaceData.worldPos;\n  #endif\n  CCSurfacesLightingGetIntermediateData_PerPixel(lightingData, surfaceData.worldNormal, worldPos, vec3(0.0), vec3(0.0));\n  lightingData.specularParam = surfaceData.specular.a;\n  lightingData.ior = 1.0;\n}\nvoid CCSurfacesLightingCalculateIntermediateData_PerLight(inout LightingIntermediateData lightingData, in SurfacesMaterialData surfaceData, vec3 lightDirWithDist)\n{\n  CCSurfacesLightingGetIntermediateData_PerLight(lightingData, lightDirWithDist);\n}\nvoid CCSurfacesInitializeLightingResult(inout LightingResult lightingResult, in SurfacesMaterialData surfaceData)\n{\n  lightingResult.emissive = surfaceData.emissive;\n}\nvoid CCSurfacesInitializeLightingResult(inout LightingResult lightingResult)\n{\n  lightingResult.directDiffuse = lightingResult.directSpecular = vec3(0.0);\n}\nvoid CCSurfacesAccumulateLightingResult(inout LightingResult lightingResultAccumulated, in LightingResult lightingResult)\n{\n  lightingResultAccumulated.directDiffuse += lightingResult.directDiffuse * lightingResult.shadow;\n  lightingResultAccumulated.directSpecular += lightingResult.directSpecular * lightingResult.shadow;\n}\n#if CC_PIPELINE_TYPE == 1\n  vec4 CCSurfacesDeferredOutput0(in SurfacesMaterialData surfaceData)\n  {\n    return surfaceData.baseColor;\n  }\n  vec4 CCSurfacesDeferredOutput1(in SurfacesMaterialData surfaceData)\n  {\n    return vec4(float32x3_to_oct(surfaceData.worldNormal), 0.5, 0.0);\n  }\n  vec4 CCSurfacesDeferredOutput2(in SurfacesMaterialData surfaceData)\n  {\n    return vec4(surfaceData.emissive, 1.0);\n  }\n#endif\nvec4 CCSurfacesShading(in SurfacesMaterialData surfaceData, in LightingResult lightingResult)\n{\n  vec4 color = vec4(0.0, 0.0, 0.0, surfaceData.baseColor.a);\n#if CC_FORWARD_ADD\n  color.xyz += lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting;\n  color.xyz += lightingResult.directSpecular * lightingResult.specularColorWithLighting;\n#else\n  float lightmapCoef = 0.0;\n#if CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  color.xyz += (\n    mix(lightingResult.directDiffuse, lightingResult.lightmapColor, lightmapCoef) * lightingResult.diffuseColorWithLighting\n    + lightingResult.directSpecular * lightingResult.specularColorWithLighting)\n    * lightingResult.shadow\n    ;\n#else\n  LightingIntermediateData lightingData;\n  lightingData.NoL = -1.0;\n  vec3 backLightingDiffuse, backLightingSpecular;\n  CCSurfacesLightingCalculateColorWithLighting(backLightingDiffuse, backLightingSpecular, surfaceData, lightingData);\n  color.xyz +=\n    mix(lightingResult.directDiffuse, lightingResult.lightmapColor, lightmapCoef) * mix(backLightingDiffuse, lightingResult.diffuseColorWithLighting, lightingResult.shadow)\n    + lightingResult.directSpecular * lightingResult.specularColorWithLighting * lightingResult.shadow\n    ;\n#endif\n  color.xyz += lightingResult.emissive;\n#endif\n  return color;\n}\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE\nvoid CCSurfacesDebugViewSurfaceData(inout vec4 color, in SurfacesMaterialData surfaceData)\n{\n    float scalar;\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(surfaceData.worldNormal * 0.5 + vec3(0.5), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(0.0, 0.0, 0.0, 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(0.0, 0.0, 0.0, 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSPARENCY)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        scalar = surfaceData.baseColor.a;\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_BASE_COLOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(LinearToSRGB(surfaceData.baseColor.rgb), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(LinearToSRGB(CCSurfacesGetDiffuseColor(surfaceData)), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(LinearToSRGB(CCSurfacesGetSpecularColor(surfaceData)), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        scalar = surfaceData.specular.a;\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n}\n#endif\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD && !CC_ENABLE_CLUSTERED_LIGHT_CULLING\n    void CCSurfacesLighting(inout LightingResult lightingResultAccumulated, in SurfacesMaterialData surfaceData, in vec2 shadowBias)\n    {\n      vec3 worldPos;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      worldPos = unpackHighpData(surfaceData.worldPos, surfaceData.worldPos_fract_part);\n      #else\n      worldPos = surfaceData.worldPos;\n      #endif\n      CCSurfacesInitializeLightingResult(lightingResultAccumulated);\n      LightingIntermediateData lightingData;\n      CCSurfacesInitializeLightingIntermediateData(lightingData, surfaceData);\n      LightingResult lightingResult;\n      CCSurfacesLightingInitializeColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n      lightingResultAccumulated.diffuseColorWithLighting = lightingResult.diffuseColorWithLighting;\n      lightingResultAccumulated.specularColorWithLighting = lightingResult.specularColorWithLighting;\n      #if CC_SURFACES_LIGHTING_TRT\n        vec3 diff;\n        SurfacesMaterialData surfaceDataTRT;\n        CCSurfacesGetSurfacesMaterialDataTRT(surfaceDataTRT, surfaceData);\n        CCSurfacesLightingInitializeColorWithLighting(diff, lightingResultAccumulated.specularColorWithLightingTRT, surfaceDataTRT, lightingData);\n      #endif\n      int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n      for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n        if (i >= numLights) break;\n        CCSurfacesLightingCalculateIntermediateData_PerLight(lightingData, surfaceData, cc_lightPos[i].xyz - worldPos);\n        CCSurfacesLightingCalculateColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n        vec3 diffuseLighting, specularLighting;\n        CCSurfacesLightingCalculateDirect(diffuseLighting, specularLighting, lightingData, cc_lightColor[i]);\n        float fresnel = 1.0;\n      #if CC_SURFACES_LIGHTING_USE_FRESNEL\n        fresnel = lightingResult.fresnel = CCSurfaceLightingCalculateFresnel(lightingData);\n      #endif\n        float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          vec4 shadowPos = vec4(0.0), shadowNDCPosWithBias = vec4(0.0);\n          if (CCSurfacesLightingEnableShadow(lightingData.NoL)) {\n            shadowPos = cc_matLightViewProj * vec4(surfaceData.worldPos, 1.0);\n            shadow = CCSpotShadowFactorBase(shadowNDCPosWithBias, shadowPos, worldPos, shadowBias);\n          }\n          #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n            #if CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n              lightingData.shadowPosAndDepth.xy = shadowNDCPosWithBias.xy;\n              lightingData.shadowPosAndDepth.z = shadowPos.z;\n              lightingData.shadowPosAndDepth.w = GetViewSpaceDepthFromNDCDepth_Perspective(SampleShadowMap(shadowNDCPosWithBias.xyz, cc_spotShadowMap), shadowNDCPosWithBias.w, cc_shadowInvProjDepthInfo.x, cc_shadowInvProjDepthInfo.y);\n            #else\n              lightingData.transmitDiffuseParams.zw = vec2(0.0);\n            #endif\n          #endif\n        }\n      #endif\n      #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n        if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW) {\n          shadow = 1.0;\n        }\n      #endif\n        lightingResult.shadow = shadow;\n        float distAtt = CCSurfacesLightingCalculateDistanceAttenuation(lightingData, cc_lightSizeRangeAngle[i]);\n        float angleAtt = 1.0;\n        if (cc_lightPos[i].w > 0.0) {\n          angleAtt = CCSurfacesLightingCalculateAngleAttenuation(lightingData, cc_lightSizeRangeAngle[i], -cc_lightDir[i].xyz);\n        }\n        float multiplier = distAtt * angleAtt;\n        lightingResult.directDiffuse = diffuseLighting * multiplier;\n        lightingResult.directSpecular = specularLighting * multiplier * fresnel;\n        #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n          vec3 transmitSpecularLighting;\n          CCSurfacesLightingCalculateDirectTransmitSpecular(transmitSpecularLighting, lightingData, cc_lightColor[i]);\n          lightingResult.directTransmitSpecular = transmitSpecularLighting * multiplier * (1.0 - fresnel);\n        #endif\n        #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n          lightingResult.directTransmitDiffuse = CCSurfacesLightingCalculateDirectTransmitDiffuse(lightingResult, lightingData, cc_lightColor[i]);\n        #endif\n        #if CC_SURFACES_LIGHTING_TRT\n          LightingIntermediateData lightingDataTRT;\n          CCSurfacesGetLightingIntermediateDataTRT(lightingDataTRT, lightingData, surfaceData);\n          CCSurfacesLightingCalculateDirectTRT(lightingResult.directTRT, lightingDataTRT, cc_lightColor[i]);\n          lightingResult.directTRT *= multiplier * fresnel;\n        #endif\n        #if CC_SURFACES_LIGHTING_TT\n          CCSurfacesLightingCalculateDirectTT(lightingResult, lightingData, cc_lightColor[i]);\n        #endif\n        #ifdef CC_SURFACES_LIGHTING_MODIFY_FINAL_RESULT\n          LightingMiscData miscData;\n          miscData.lightType = cc_lightPos[i].w;\n          miscData.lightPos = cc_lightPos[i].xyz;\n          miscData.lightDir = cc_lightDir[i].xyz;\n          miscData.lightColorAndIntensity = cc_lightColor[i];\n          miscData.lightSizeRangeAngle = cc_lightSizeRangeAngle[i];\n          SurfacesLightingModifyFinalResult(lightingResult, lightingData, surfaceData, miscData);\n        #endif\n        CCSurfacesAccumulateLightingResult(lightingResultAccumulated, lightingResult);\n      }\n    }\n  #else\n    void CCSurfacesLighting(inout LightingResult lightingResult, in SurfacesMaterialData surfaceData, in vec2 shadowBias)\n    {\n      LightingIntermediateData lightingData;\n      CCSurfacesInitializeLightingIntermediateData(lightingData, surfaceData);\n      CCSurfacesInitializeLightingResult(lightingResult, surfaceData);\n      CCSurfacesLightingInitializeColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n      CCSurfacesLightingCalculateIntermediateData_PerLight(lightingData, surfaceData, -cc_mainLitDir.xyz);\n      lightingResult.shadow = 1.0;\n      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n        if (cc_mainLitDir.w > 0.0) {\n          vec4 shadowPos = vec4(0.0), shadowNDCPosWithBias = vec4(0.0);\n          if (CCSurfacesLightingEnableShadow(lightingData.NoL)) {\n            #if CC_DIR_LIGHT_SHADOW_TYPE == 2\n              lightingResult.shadow = CCCSMFactorBase(shadowPos, shadowNDCPosWithBias, surfaceData.worldPos, lightingData.N, shadowBias);\n            #endif\n            #if CC_DIR_LIGHT_SHADOW_TYPE == 1\n              shadowPos = cc_matLightViewProj * vec4(surfaceData.worldPos, 1.0);\n              lightingResult.shadow = CCShadowFactorBase(shadowPos, lightingData.N, shadowBias);\n            #endif\n          }\n          #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n            #if CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n              lightingData.shadowPosAndDepth.xy = shadowNDCPosWithBias.xy;\n              lightingData.shadowPosAndDepth.z = shadowPos.z;\n              lightingData.shadowPosAndDepth.w = GetViewSpaceDepthFromNDCDepth_Orthgraphic(SampleShadowMap(shadowNDCPosWithBias.xyz, cc_shadowMap), cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n            #else\n              lightingData.transmitDiffuseParams.zw = vec2(0.0);\n            #endif\n          #endif\n        }\n      #endif\n      lightingResult.lightmapColor = vec3(0.0);\n      #if CC_SURFACES_USE_LIGHT_MAP && !CC_FORWARD_ADD\n\t\t    float lightmapShadow, lightmapAO;\n        GetLightMapColor(lightingResult.lightmapColor, lightmapShadow, lightmapAO, cc_lightingMap, FSInput_lightMapUV.xy, FSInput_lightMapUV.z, surfaceData.worldNormal);\n        #if CC_SURFACES_USE_LIGHT_MAP == LIGHT_MAP_TYPE_INDIRECT_OCCLUSION\n          lightingResult.shadow *= lightmapShadow;\n          lightingResult.ao *= lightmapAO;\n        #endif\n      #endif\n      lightingResult.directDiffuse = lightingResult.directSpecular = vec3(0.0);\n      #if !CC_DISABLE_DIRECTIONAL_LIGHT && !CC_FORWARD_ADD\n        CCSurfacesLightingCalculateColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n        CCSurfacesLightingCalculateDirect(lightingResult.directDiffuse, lightingResult.directSpecular, lightingData, cc_mainLitColor);\n      #endif\n      CCSurfacesLightingCalculateEnvironment(lightingResult.environmentDiffuse, lightingResult.environmentSpecular, lightingData, cc_ambientSky.w);\n      #if CC_SURFACES_LIGHTING_USE_FRESNEL\n        lightingResult.fresnel = CCSurfaceLightingCalculateFresnel(lightingData);\n      #endif\n      #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n        CCSurfacesLightingCalculateDirectTransmitSpecular(lightingResult.directTransmitSpecular, lightingData, cc_mainLitColor);\n        CCSurfacesLightingCalculateEnvironmentTransmitSpecular(lightingResult.environmentTransmitSpecular, lightingData, cc_ambientSky.w);\n      #endif\n      #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n        CCSurfacesLightingCalculateDirectTransmitDiffuse(lightingResult.directTransmitDiffuse, lightingResult, lightingData, cc_mainLitColor);\n        CCSurfacesLightingCalculateEnvironmentTransmitDiffuse(lightingResult.environmentTransmitDiffuse, lightingResult, lightingData, cc_ambientSky.w);\n      #endif\n      #if CC_SURFACES_LIGHTING_TRT\n        LightingIntermediateData lightingDataTRT;\n        CCSurfacesGetLightingIntermediateDataTRT(lightingDataTRT, lightingData, surfaceData);\n        CCSurfacesLightingCalculateDirectTRT(lightingResult.directTRT, lightingDataTRT, cc_mainLitColor);\n        CCSurfacesLightingCalculateEnvironmentTRT(lightingResult.environmentTRT, lightingDataTRT, cc_ambientSky.w);\n        vec3 diff;\n        SurfacesMaterialData surfaceDataTRT;\n        CCSurfacesGetSurfacesMaterialDataTRT(surfaceDataTRT, surfaceData);\n        CCSurfacesLightingInitializeColorWithLighting(diff, lightingResult.specularColorWithLightingTRT, surfaceDataTRT, lightingDataTRT);\n      #endif\n      #if CC_SURFACES_LIGHTING_TT\n        CCSurfacesLightingCalculateDirectTT(lightingResult, lightingData, cc_mainLitColor);\n      #endif\n      #ifdef CC_SURFACES_LIGHTING_MODIFY_FINAL_RESULT\n        LightingMiscData miscData;\n        miscData.lightType = LIGHT_TYPE_DIRECTIONAL;\n        miscData.lightPos = vec3(0.0);\n        miscData.lightDir = cc_mainLitDir.xyz;\n        miscData.lightColorAndIntensity = cc_mainLitColor;\n        miscData.lightSizeRangeAngle = vec4(0.0, 0.0, 0.0, 0.0);\n        SurfacesLightingModifyFinalResult(lightingResult, lightingData, surfaceData, miscData);\n      #endif\n    }\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING\n    #endif\n  #endif\n#endif\nvec4 CCSurfacesDebugDisplayInvalidNumber(vec4 color)\n{\n  float index = mod(cc_time.x * 10.0, 2.0);\n  vec4 error = index < 1.0 ? vec4(1.0, 0.0, 0.2, 1.0) : vec4(0.0, 1.0, 0.2, 1.0);\n  return (isnans(color.rgb) || isinfs(color.rgb)) ? error : color;\n}\nvec4 CCSurfacesDebugDisplayInvalidInputData(vec4 color, vec3 data)\n{\n  float index = mod(cc_time.x * 10.0, 2.0);\n  vec4 error = index < 1.0 ? vec4(1.0, 0.0, 0.2, 1.0) : vec4(0.0, 1.0, 0.2, 1.0);\n  return (isnans(data) || isinfs(data)) ? error : color;\n}\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE && !CC_FORWARD_ADD\n  void CCSurfacesDebugViewMeshData(inout vec4 color)\n  {\n    vec4 white = vec4(1.0, 1.0, 1.0, 1.0);\n    vec4 black = vec4(0.0, 0.0, 0.0, 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_SURFACES_USE_VERTEX_COLOR\n        color = FSInput_vertexColor;\n      #else\n        color = white;\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(FSInput_worldNormal * 0.5 + vec3(0.5), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_SURFACES_USE_TANGENT_SPACE\n        color = vec4(FSInput_worldTangent * 0.5 + vec3(0.5), 1.0);\n      #else\n        color = black;\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_SURFACES_USE_TANGENT_SPACE\n        float sign = FSInput_mirrorNormal * 0.5 + 0.5;\n        color = vec4(sign, sign, sign, 1.0);\n      #else\n        color = black;\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FACE_SIDE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        float scalar = clamp(FSInput_faceSideSign, 0.0, 1.0);\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_UV0)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(FSInput_texcoord.xy, 0.0, 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_UV1)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n      color = vec4(FSInput_texcoord1.xy, 0.0, 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n        color = vec4(FSInput_lightMapUV.xy, 0.0, 1.0);\n      #else\n        color = vec4(0.0, 0.0, 0.0, 1.0);\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      vec4 clipPos = cc_matProj * cc_matView * vec4(FSInput_worldPos.xyz, 1.0);\n      float depth = clipPos.z / clipPos.w;\n      color = vec4(depth, depth, depth, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      vec4 viewPos = cc_matView * vec4(FSInput_worldPos.xyz, 1.0);\n      float depth = (-viewPos.z - cc_nearFar.x) / cc_nearFar.y;\n      color = vec4(depth, depth, depth, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_WORLD_POS)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n      color = vec4(FSInput_worldPos.xyz, 1.0);\n  }\n#endif\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE\n  bool CCSurfacesDebugViewLightingResult(inout vec4 color, in LightingResult lightingResult)\n  {\n    bool isSRGBColor = false;\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.directSpecular * lightingResult.specularColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting + lightingResult.directSpecular * lightingResult.specularColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.environmentDiffuse * lightingResult.diffuseColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.environmentSpecular * lightingResult.specularColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_ENV_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.environmentDiffuse * lightingResult.diffuseColorWithLighting + lightingResult.environmentSpecular * lightingResult.specularColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_LIGHT_MAP)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.lightmapColor;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_EMISSIVE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.emissive;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_AO)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = vec3(lightingResult.ao);\n        isSRGBColor = false;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_SHADOW)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = vec3(lightingResult.shadow);\n        isSRGBColor = false;\n    }\n    float fresnel = 0.0;\n    vec3 directTransmitSpecular = vec3(0.0), environmentTransmitSpecular = vec3(0.0);\n    vec3 directTransmitDiffuse = vec3(0.0), environmentTransmitDiffuse = vec3(0.0);\n    vec3 diffuseColorWithLightingTT = vec3(0.0), specularColorWithLightingTRT = vec3(0.0);\n    vec3 directTRT = vec3(0.0), environmentTRT = vec3(0.0);\n  #if CC_SURFACES_LIGHTING_USE_FRESNEL\n    fresnel = lightingResult.fresnel;\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    directTransmitSpecular = lightingResult.directTransmitSpecular;\n    environmentTransmitSpecular = lightingResult.environmentTransmitSpecular;\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n    directTransmitDiffuse = lightingResult.directTransmitDiffuse;\n    environmentTransmitDiffuse = lightingResult.environmentTransmitDiffuse;\n  #endif\n  #if CC_SURFACES_LIGHTING_TRT\n    directTRT = lightingResult.directTRT;\n    environmentTRT = lightingResult.environmentTRT;\n    specularColorWithLightingTRT = lightingResult.specularColorWithLightingTRT;\n  #endif\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FRESNEL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = vec3(fresnel);\n        isSRGBColor = false;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = directTransmitSpecular;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = environmentTransmitSpecular;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = directTransmitDiffuse;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = environmentTransmitDiffuse;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = directTransmitSpecular + environmentTransmitSpecular + directTransmitDiffuse + environmentTransmitDiffuse;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRT_DIRECT)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = directTRT * specularColorWithLightingTRT;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = environmentTRT * specularColorWithLightingTRT;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRT_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = (directTRT + environmentTRT) * specularColorWithLightingTRT;\n        isSRGBColor = true;\n    }\n    return isSRGBColor;\n  }\n#endif\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  void CCSurfacesDebugViewCompositeLightingResult(inout LightingResult lightingResult)\n  {\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE)\n      lightingResult.directDiffuse = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR)\n      lightingResult.directSpecular = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE)\n      lightingResult.environmentDiffuse = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR)\n      lightingResult.environmentSpecular = vec3(0.0);\n  #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE)\n      lightingResult.directTransmitDiffuse = lightingResult.environmentTransmitDiffuse = vec3(0.0);\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR)\n      lightingResult.directTransmitSpecular = lightingResult.environmentTransmitSpecular = vec3(0.0);\n  #endif\n  #if CC_SURFACES_LIGHTING_TRT\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRT)\n        lightingResult.directTRT = lightingResult.environmentTRT = vec3(0.0);\n  #endif\n  #if CC_SURFACES_LIGHTING_TT\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT)\n        lightingResult.directTT = vec3(0.0);\n  #endif\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE)\n      lightingResult.emissive = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP)\n      lightingResult.lightmapColor = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW)\n      lightingResult.shadow = 1.0;\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO)\n      lightingResult.ao = 1.0;\n  #if CC_SURFACES_LIGHTING_USE_FRESNEL\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL)\n      lightingResult.fresnel = 1.0;\n  #endif\n  }\n#endif\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main()  {\n  #if CC_DISABLE_STRUCTURE_IN_FRAGMENT_SHADER\n    float NoL = dot(-cc_mainLitDir.xyz, FSInput_worldNormal.xyz);\n    vec4 color = SurfacesFragmentModifyBaseColorAndTransparency();\n  #else\n    SurfacesMaterialData surfaceData;\n    CCSurfacesFragmentGetMaterialData(surfaceData);\n    vec2 shadowBias = vec2(0.0);\n    vec3 colDebugCSMLayer = vec3(1.0);\n    #if CC_RECEIVE_SHADOW\n      shadowBias = FSInput_shadowBias;\n      #if !CC_FORWARD_ADD\n        #if CC_USE_DEBUG_VIEW && CC_SURFACES_ENABLE_DEBUG_VIEW\n          if (IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION)\n          {\n              vec4 csmPos;\n              vec4 shadowProjDepthInfo, shadowProjInfo;\n              vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n              int csmLayer = -1;\n              csmLayer = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, surfaceData.worldPos);\n              bool OutOfRange = csmLayer < 0;\n              if (OutOfRange)\n                  colDebugCSMLayer = vec3(1.0);\n              else if (csmLayer == 0)\n                  colDebugCSMLayer = vec3(1.0, 0.0, 0.0);\n              else if (csmLayer == 1)\n                  colDebugCSMLayer = vec3(0.0, 1.0, 0.0);\n              else if (csmLayer == 2)\n                  colDebugCSMLayer = vec3(0.0, 0.0, 1.0);\n              else if (csmLayer == 3)\n                  colDebugCSMLayer = vec3(0.0, 1.0, 1.0);\n          }\n        #endif\n      #endif\n    #endif\n    #if !CC_FORWARD_ADD\n      float fogFactor = 1.0;\n      #if CC_USE_FOG != 4\n        #if !CC_USE_ACCURATE_FOG\n          fogFactor = FSInput_fogFactor;\n        #else\n          CC_TRANSFER_FOG_BASE(vec4(FSInput_worldPos, 1.0), fogFactor);\n        #endif\n      #endif\n      #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n        if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG) {\n            fogFactor = 1.0;\n        }\n      #endif\n    #endif\n    LightingResult lightingResult;\n    CCSurfacesLighting(lightingResult, surfaceData, shadowBias);\n    #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE && CC_SURFACES_ENABLE_DEBUG_VIEW\n      vec4 debugColor = vec4(0.0, 0.0, 0.0, 1.0);\n      float materialTransparency = CCSurfacesShading(surfaceData, lightingResult).a;\n      #if !CC_FORWARD_ADD\n        CCSurfacesDebugViewMeshData(debugColor);\n        CCSurfacesDebugViewSurfaceData(debugColor, surfaceData);\n        if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FOG)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        {\n          debugColor.rgb = vec3(1.0 - fogFactor);\n        }\n      #endif\n      #if CC_FORWARD_ADD\n        if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)) || ((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)) || ((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n      #endif\n        {\n            if (CCSurfacesDebugViewLightingResult(debugColor, lightingResult))\n            {\n              debugColor.a = materialTransparency;\n              #if CC_USE_HDR\n                if (IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING)\n                    debugColor.rgb = ACESToneMap(debugColor.rgb);\n              #endif\n              if (IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION)\n                  debugColor.rgb = LinearToSRGB(debugColor.rgb);\n            }\n        }\n      if (IS_DEBUG_VIEW_ENABLE_WITH_CAMERA) {\n        gl_FragData[0] = debugColor;\n        return;\n      }\n    #elif CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n      CCSurfacesDebugViewCompositeLightingResult(lightingResult);\n    #endif\n    vec4 color = CCSurfacesShading(surfaceData, lightingResult);\n    #if CC_USE_DEBUG_VIEW && CC_SURFACES_ENABLE_DEBUG_VIEW\n      if (IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION) {\n          color.rgb *= colDebugCSMLayer.rgb;\n      }\n      #if CC_SURFACES_USE_TANGENT_SPACE\n        color = CCSurfacesDebugDisplayInvalidInputData(color, FSInput_worldTangent);\n      #endif\n    #endif\n  #endif\n    #if CC_USE_RGBE_OUTPUT\n      gl_FragData[0] = packRGBE(color.rgb);\n      return;\n    #endif\n    #if CC_USE_HDR\n      #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n        if (IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING)\n      #endif\n        color.rgb = ACESToneMap(color.rgb);\n    #endif\n    #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n      if (IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION)\n    #endif\n    color.rgb = LinearToSRGB(color.rgb);\n    #if !CC_FORWARD_ADD && CC_USE_FOG != 4\n      CC_APPLY_FOG_BASE(color, fogFactor);\n    #endif\n    gl_FragData[0] = CCSurfacesDebugDisplayInvalidNumber(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n    void main () {\n      SurfacesMaterialData surfaceData;\n      CCSurfacesFragmentGetMaterialData(surfaceData);\n      gl_FragData[0] = CCSurfacesDeferredOutput0(surfaceData);\n      gl_FragData[1] = CCSurfacesDeferredOutput1(surfaceData);\n      gl_FragData[2] = CCSurfacesDeferredOutput2(surfaceData);\n    #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE && CC_SURFACES_ENABLE_DEBUG_VIEW\n      vec4 debugColor = vec4(0.0, 0.0, 0.0, 1.0);\n      CCSurfacesDebugViewMeshData(debugColor);\n      CCSurfacesDebugViewSurfaceData(debugColor, surfaceData);\n      if (IS_DEBUG_VIEW_ENABLE_WITH_CAMERA) {\n        gl_FragData[0] = debugColor;\n      }\n    #endif\n    }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_environment","defines":[]},{"name":"cc_diffuseMap","defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]},{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["!USE_INSTANCING"]},{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"CCSH","defines":["CC_USE_LIGHT_PROBE","!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_reflectionProbeCubemap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbePlanarMap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbeDataMap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_lightingMap","defines":["CC_USE_LIGHTMAP","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":98,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":128}},"defines":[{"name":"USE_COMPATIBLE_LIGHTING","type":"boolean"},{"name":"USE_NORMAL_MAP","type":"boolean"},{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean","default":0},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_FORWARD_ADD","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_DISABLE_STRUCTURE_IN_FRAGMENT_SHADER","type":"number","range":[0,1]},{"name":"CC_PIPELINE_TYPE","type":"number","range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"CC_USE_IBL","type":"number","range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","range":[0,2]},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_DIR_SHADOW_PCF_TYPE","type":"number","range":[0,3]},{"name":"CC_CASCADED_LAYERS_TRANSITION","type":"boolean"},{"name":"CC_LIGHT_MAP_VERSION","type":"number","range":[0,3]},{"name":"CC_USE_HDR","type":"boolean"},{"name":"USE_BASE_COLOR_MAP","type":"boolean"},{"name":"USE_1ST_SHADE_MAP","type":"boolean"},{"name":"USE_2ND_SHADE_MAP","type":"boolean"},{"name":"USE_SPECULAR_MAP","type":"boolean"},{"name":"USE_EMISSIVE_MAP","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r","g","b"]},{"name":"SHADE_MAP_1_AS_SHADE_MAP_2","type":"boolean"},{"name":"BASE_COLOR_MAP_AS_SHADE_MAP_1","type":"boolean"},{"name":"BASE_COLOR_MAP_AS_SHADE_MAP_2","type":"boolean"},{"name":"CC_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_DIR_LIGHT_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_DISABLE_DIRECTIONAL_LIGHT","type":"boolean"},{"name":"CC_USE_RGBE_OUTPUT","type":"boolean"}]},{"hash":401379729,"name":"builtin-toon|shadow-caster-vs|shadow-caster-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"baseColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"shadeColor1","type":16,"count":1},{"name":"shadeColor2","type":16,"count":1},{"name":"specular","type":16,"count":1},{"name":"shadeParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleAndStrenth","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_BASE_COLOR_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"shadeMap1","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_1ST_SHADE_MAP"]},{"name":"shadeMap2","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_2ND_SHADE_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_SPECULAR_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_color","format":44,"location":6,"defines":[]},{"name":"a_texCoord1","format":21,"location":7,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":15,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":16,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":17,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":17,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["!USE_INSTANCING"]},{"name":"CCMorph","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_displacementWeights","typename":"vec4","type":16,"count":15,"isArray":true},{"name":"cc_displacementTextureInfo","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointTextureInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointAnimInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_joints","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true}],"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCForwardLight","stageFlags":16,"tags":{"builtin":"local"},"members":[{"name":"cc_lightPos","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true},{"name":"cc_lightColor","typename":"vec4","type":16,"count":0,"isArray":true},{"name":"cc_lightSizeRangeAngle","typename":"vec4","type":16,"count":0,"isArray":true},{"name":"cc_lightDir","typename":"vec4","type":16,"count":0,"isArray":true}],"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"CCSH","stageFlags":16,"tags":{"builtin":"local"},"members":[{"name":"cc_sh_linear_const_r","typename":"vec4","type":16,"count":1},{"name":"cc_sh_linear_const_g","typename":"vec4","type":16,"count":1},{"name":"cc_sh_linear_const_b","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_r","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_g","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_b","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_a","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_LIGHT_PROBE","!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_reflectionProbeCubemap","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbePlanarMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbeDataMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_lightingMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_LIGHTMAP","!CC_FORWARD_ADD"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"baseColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"shadeColor1","type":16,"count":1},{"name":"shadeColor2","type":16,"count":1},{"name":"specular","type":16,"count":1},{"name":"shadeParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleAndStrenth","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_BASE_COLOR_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"shadeMap1","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_1ST_SHADE_MAP"]},{"name":"shadeMap2","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_2ND_SHADE_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_SPECULAR_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCShadow","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matLightView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matLightViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_shadowInvProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowNFLSInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowWHPBInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowLPNNInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowColor","typename":"vec4","type":16,"count":1,"precision":"lowp "},{"name":"cc_planarNDInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCSM","stageFlags":16,"tags":{"builtin":"global"},"members":[{"name":"cc_csmViewDir0","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir1","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir2","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmAtlas","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_matCSMViewProj","typename":"mat4","type":25,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjDepthInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmSplitsInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_environment","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"global"},"defines":[]},{"name":"cc_diffuseMap","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]},{"name":"cc_shadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl1":{"vert":"\nprecision highp float;\n#define CC_SURFACES_USE_TANGENT_SPACE 0\n#define CC_SURFACES_USE_VERTEX_COLOR 0\n#define CC_SURFACES_USE_SECOND_UV 0\n#define CC_SURFACES_USE_LIGHT_MAP 0\n#define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_CLIP_POS\n  #define CC_SURFACES_TRANSFER_CLIP_POS 0\n#endif\n#ifndef CC_SURFACES_USE_LIGHT_MAP\n  #ifdef CC_USE_LIGHTMAP\n    #define CC_SURFACES_USE_LIGHT_MAP CC_USE_LIGHTMAP\n  #else\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_FLIP_UV\n  #define CC_SURFACES_FLIP_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_FRESNEL\n  #define CC_SURFACES_LIGHTING_USE_FRESNEL 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  #define CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  #define CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n  #define CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRT\n  #define CC_SURFACES_LIGHTING_TRT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TT\n  #define CC_SURFACES_LIGHTING_TT 0\n#endif\n#ifndef CC_SURFACES_ENABLE_DEBUG_VIEW\n  #define CC_SURFACES_ENABLE_DEBUG_VIEW 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  #define CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  #define CC_SURFACES_LIGHTING_CALCULATE_SPECULAR 1\n#endif\n#define CC_USE_SURFACE_SHADER 1\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  attribute vec4 a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  attribute vec4 a_color;\n#endif\n#if CC_SURFACES_USE_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n    attribute vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n#endif\nvarying highp vec3 v_worldPos;\nvarying mediump vec4 v_normal;\nvarying vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  varying mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  varying mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  varying mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  varying mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  varying highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  varying highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    varying mediump vec4 v_sh_linear_const_r;\n    varying mediump vec4 v_sh_linear_const_g;\n    varying mediump vec4 v_sh_linear_const_b;\n  #endif\n#endif\n#define VSOutput_worldPos v_worldPos\n#define VSOutput_worldNormal v_normal.xyz\n#define VSOutput_faceSideSign v_normal.w\n#define VSOutput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define VSOutput_vertexColor v_color\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define VSOutput_worldTangent v_tangent.xyz\n  #define VSOutput_mirrorNormal v_tangent.w\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define VSOutput_texcoord1 v_uv1\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define VSOutput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define VSOutput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define VSOutput_reflectionProbeId v_shadowBiasAndProbeId.z\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define VSOutput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define VSOutput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define VSOutput_clipPos v_clipPos\n#endif\nstruct SurfacesStandardVertexIntermediate\n{\n  highp vec4 position;\n  vec3 normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  vec4 tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  vec4 color;\n#endif\n  vec2 texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  vec2 texCoord1;\n#endif\n  highp vec4 clipPos;\n  highp vec3 worldPos;\n  vec4 worldNormal;\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 worldTangent, worldBinormal;\n  #endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  vec4 shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  float fogFactor;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  vec3 lightmapUV;\n#endif\n};\n#if CC_USE_MORPH\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nuniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matLightViewProj;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #if CC_USE_FOG != 4\n  #endif\n#endif\n    uniform vec4 tilingOffset;\n#define CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n  In.texCoord = In.texCoord * tilingOffset.xy + tilingOffset.zw;\n}\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_POS\nvec3 SurfacesVertexModifyLocalPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.position.xyz;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_NORMAL\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_TANGENT\n  #if CC_SURFACES_USE_TANGENT_SPACE\n  #endif\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_SHARED_DATA\nvoid SurfacesVertexModifyLocalSharedData(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_POS\nvec3 SurfacesVertexModifyWorldPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.worldPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_CLIP_POS\nvec4 SurfacesVertexModifyClipPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.clipPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_NORMAL\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_SHARED_DATA\nvoid SurfacesVertexModifySharedData(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\nvoid CCSurfacesVertexInput(out SurfacesStandardVertexIntermediate In)\n{\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  In.tangent = a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  In.color = a_color;\n#endif\n  In.texCoord = a_texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  In.texCoord1 = a_texCoord1;\n#endif\n}\nvoid CCSurfacesVertexOutput(in SurfacesStandardVertexIntermediate In)\n{\n  gl_Position = In.clipPos;\n  VSOutput_worldNormal = In.worldNormal.xyz;\n  VSOutput_faceSideSign = In.worldNormal.w;\n  VSOutput_worldPos = In.worldPos;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  VSOutput_worldTangent = In.worldTangent.xyz;\n  VSOutput_mirrorNormal = In.tangent.w > 0.0 ? 1.0 : -1.0;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  VSOutput_vertexColor = In.color;\n#endif\n  VSOutput_texcoord = In.texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  VSOutput_texcoord1 = In.texCoord1;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  VSOutput_fogFactor = In.fogFactor;\n#endif\n#if CC_RECEIVE_SHADOW\n  VSOutput_shadowBias = In.shadowBiasAndProbeId.xy;\n#endif\n#if CC_USE_REFLECTION_PROBE\n  VSOutput_reflectionProbeId = In.shadowBiasAndProbeId.z;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  VSOutput_lightMapUV = In.lightmapUV;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  VSOutput_localPos = In.position;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  VSOutput_clipPos = In.clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    v_sh_linear_const_r = a_sh_linear_const_r;\n    v_sh_linear_const_g = a_sh_linear_const_g;\n    v_sh_linear_const_b = a_sh_linear_const_b;\n  #endif\n#endif\n}\nvoid CCSurfacesVertexAnimation(inout SurfacesStandardVertexIntermediate In)\n{\nvec4 temp = vec4(0.0);\n#if CC_USE_MORPH\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    applyMorph(In.position, In.normal, In.tangent);\n  #else\n    applyMorph(In.position, In.normal, temp);\n  #endif\n#endif\n#if CC_USE_SKINNING\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    CCSkin(In.position, In.normal, In.tangent);\n  #else\n    CCSkin(In.position, In.normal, temp);\n  #endif\n#endif\n}\nvoid CCSurfacesVertexWorldTransform(inout SurfacesStandardVertexIntermediate In)\n{\n    mat4 matWorld, matWorldIT;\n    CCGetWorldMatrixFull(matWorld, matWorldIT);\n    In.worldPos = (matWorld * In.position).xyz;\n    In.worldNormal.xyz = normalize((matWorldIT * vec4(In.normal.xyz, 0.0)).xyz);\n    #if CC_SURFACES_USE_TANGENT_SPACE\n      In.worldTangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n      In.worldBinormal = cross(In.worldNormal.xyz, In.worldTangent) * In.tangent.w;\n    #endif\n}\nvoid CCSurfacesVertexTransformUV(inout SurfacesStandardVertexIntermediate In)\n{\n  #if CC_SURFACES_FLIP_UV\n    In.texCoord = cc_cameraPos.w > 1.0 ? vec2(In.texCoord.x, 1.0 - In.texCoord.y) : In.texCoord;\n    #if CC_SURFACES_USE_SECOND_UV\n      In.texCoord1 = cc_cameraPos.w > 1.0 ? vec2(In.texCoord1.x, 1.0 - In.texCoord1.y) : In.texCoord1;\n    #endif\n  #endif\n}\nvarying highp vec2 v_clip_depth;\nvoid main()\n{\n  SurfacesStandardVertexIntermediate In;\n  CCSurfacesVertexInput(In);\n  CCSurfacesVertexAnimation(In);\n  In.position.xyz = SurfacesVertexModifyLocalPos(In);\n  SurfacesVertexModifyLocalSharedData(In);\n  CCSurfacesVertexWorldTransform(In);\n  In.worldPos = SurfacesVertexModifyWorldPos(In);\n  In.clipPos = cc_matLightViewProj * vec4(In.worldPos, 1.0);\n  In.clipPos = SurfacesVertexModifyClipPos(In);\n  SurfacesVertexModifyUV(In);\n  SurfacesVertexModifySharedData(In);\n  CCSurfacesVertexTransformUV(In);\n  CCSurfacesVertexOutput(In);\n  v_clip_depth = In.clipPos.zw;\n}","frag":"\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\n#define CC_SURFACES_USE_TANGENT_SPACE 0\n#define CC_SURFACES_USE_VERTEX_COLOR 0\n#define CC_SURFACES_USE_SECOND_UV 0\n#define CC_SURFACES_USE_LIGHT_MAP 0\n#define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_CLIP_POS\n  #define CC_SURFACES_TRANSFER_CLIP_POS 0\n#endif\n#ifndef CC_SURFACES_USE_LIGHT_MAP\n  #ifdef CC_USE_LIGHTMAP\n    #define CC_SURFACES_USE_LIGHT_MAP CC_USE_LIGHTMAP\n  #else\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_FLIP_UV\n  #define CC_SURFACES_FLIP_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_FRESNEL\n  #define CC_SURFACES_LIGHTING_USE_FRESNEL 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  #define CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  #define CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n  #define CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRT\n  #define CC_SURFACES_LIGHTING_TRT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TT\n  #define CC_SURFACES_LIGHTING_TT 0\n#endif\n#ifndef CC_SURFACES_ENABLE_DEBUG_VIEW\n  #define CC_SURFACES_ENABLE_DEBUG_VIEW 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  #define CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  #define CC_SURFACES_LIGHTING_CALCULATE_SPECULAR 1\n#endif\n#define CC_USE_SURFACE_SHADER 1\nvarying highp vec3 v_worldPos;\nvarying mediump vec4 v_normal;\nvarying vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  varying mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  varying mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  varying mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  varying mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  varying highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  varying highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    varying mediump vec4 v_sh_linear_const_r;\n    varying mediump vec4 v_sh_linear_const_g;\n    varying mediump vec4 v_sh_linear_const_b;\n  #endif\n#endif\n#define FSInput_worldPos v_worldPos\n#define FSInput_worldNormal v_normal.xyz\n#define FSInput_faceSideSign v_normal.w\n#define FSInput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define FSInput_vertexColor v_color\n#else\n  #define FSInput_vertexColor vec4(1.0)\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define FSInput_worldTangent v_tangent.xyz\n  #define FSInput_mirrorNormal v_tangent.w\n#else\n  #define FSInput_worldTangent vec3(0.0, 0.0, 0.0)\n  #define FSInput_mirrorNormal 1.0\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define FSInput_texcoord1 v_uv1\n#else\n  #define FSInput_texcoord1 vec2(0.0, 0.0)\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define FSInput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define FSInput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define FSInput_reflectionProbeId v_shadowBiasAndProbeId.z\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define FSInput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define FSInput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define FSInput_clipPos v_clipPos\n#endif\nuniform mediump vec4 cc_debug_view_mode;\nuniform mediump vec4 cc_surfaceTransform;\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_DIRECT CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT CC_SURFACES_DEBUG_VIEW_TRT_DIRECT + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ALL CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_TRT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRT (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD\n    #if CC_PIPELINE_TYPE == 0\n      #define LIGHTS_PER_PASS 1\n    #else\n      #define LIGHTS_PER_PASS 10\n    #endif\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n    #endif\n  #endif\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if !USE_INSTANCING\n    #endif\n#endif\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\nuniform samplerCube cc_environment;\n#if CC_USE_IBL\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  uniform samplerCube cc_reflectionProbeCubemap;\n  uniform sampler2D cc_reflectionProbePlanarMap;\n  uniform sampler2D cc_reflectionProbeDataMap;\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n#endif\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_USE_FOG != 4\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if CC_USE_LIGHT_PROBE\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  uniform sampler2D cc_lightingMap;\n#endif\n    uniform vec4 baseColor;\n    uniform vec4 colorScaleAndCutoff;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\n#if USE_NORMAL_MAP\n  uniform sampler2D normalMap;\n#endif\n#if USE_1ST_SHADE_MAP\n  uniform sampler2D shadeMap1;\n#endif\n#if USE_2ND_SHADE_MAP\n  uniform sampler2D shadeMap2;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\n#define CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TOONSHADE\n#define CC_SURFACES_FRAGMENT_ALPHA_CLIP_ONLY\nvoid SurfacesFragmentAlphaClipOnly()\n{\n  #if USE_ALPHA_TEST\n    float alpha = baseColor.ALPHA_TEST_CHANNEL;\n    #if USE_BASE_COLOR_MAP\n      alpha = texture2D(baseColorMap, FSInput_texcoord).ALPHA_TEST_CHANNEL;\n    #endif\n    if (alpha < colorScaleAndCutoff.w) discard;\n  #endif\n}\n#define CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL\n#define CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE\n#define CC_SURFACES_FRAGMENT_MODIFY_TOON_STEP_AND_FEATHER\n#define CC_SURFACES_FRAGMENT_MODIFY_TOON_SHADOW_COVER\n#define CC_SURFACES_FRAGMENT_MODIFY_TOON_SPECULAR\nvarying highp vec2 v_clip_depth;\nvoid main () {\n  SurfacesFragmentAlphaClipOnly();\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > EPSILON && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(FSInput_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    gl_FragColor = packDepthToRGBA(clipDepth);\n  #else\n    gl_FragColor = vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_environment","defines":[]},{"name":"cc_diffuseMap","defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]},{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["!USE_INSTANCING"]},{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"CCSH","defines":["CC_USE_LIGHT_PROBE","!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_reflectionProbeCubemap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbePlanarMap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbeDataMap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_lightingMap","defines":["CC_USE_LIGHTMAP","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":98,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":128}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean","default":0},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_FORWARD_ADD","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_DISABLE_STRUCTURE_IN_FRAGMENT_SHADER","type":"number","range":[0,1]},{"name":"CC_PIPELINE_TYPE","type":"number","range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"CC_USE_IBL","type":"number","range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","range":[0,2]},{"name":"USE_BASE_COLOR_MAP","type":"boolean"},{"name":"USE_NORMAL_MAP","type":"boolean"},{"name":"USE_1ST_SHADE_MAP","type":"boolean"},{"name":"USE_2ND_SHADE_MAP","type":"boolean"},{"name":"USE_SPECULAR_MAP","type":"boolean"},{"name":"USE_EMISSIVE_MAP","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r","g","b"]},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]}]}],[{"passes":[{"program":"builtin-toon|silhouette-edge-vs|silhouette-edge-fs","switch":"USE_OUTLINE_PASS","rasterizerState":{"cullMode":1},"depthStencilState":{"depthFunc":3,"depthTest":true,"depthWrite":true},"properties":{"lineWidth":{"type":13,"value":[10],"handleInfo":["outlineParams",0,13]},"depthBias":{"type":13,"value":[0],"handleInfo":["outlineParams",1,13]},"baseColor":{"type":16},"baseColorMap":{"value":"grey","type":28},"outlineParams":{"type":16,"value":[10,0,0,0]}}},{"program":"builtin-toon|toon-vs|toon-fs","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[0.6,0.6,0.6,1],"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"linear":true,"type":16,"value":[0.4,0.4,0.4,1]},"shadeColor2":{"linear":true,"type":16,"value":[0.2,0.2,0.2,1]},"specular":{"linear":true,"type":16,"value":[1,1,1,0.3]},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"shadowCover":{"type":13,"value":[0.5],"handleInfo":["miscParams",0,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrength":{"slide":true,"step":0.001,"type":13,"value":[1],"range":[0,5],"handleInfo":["emissiveScaleAndStrenth",3,13]},"normalMap":{"value":"normal","type":28},"mainTexture":{"value":"white","type":28,"handleInfo":["baseColorMap",0,28]},"shadeMap1":{"value":"white","type":28},"shadeMap2":{"value":"white","type":28},"specularMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"baseColor":{"type":16,"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"shadeParams":{"type":16,"value":[0.8,0.001,0.5,0.001]},"miscParams":{"type":16,"value":[0.5,0,0,0]},"emissiveScaleAndStrenth":{"type":16,"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white"}}},{"phase":"forward-add","propertyIndex":1,"program":"builtin-toon|toon-vs|toon-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[0.6,0.6,0.6,1],"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"linear":true,"type":16,"value":[0.4,0.4,0.4,1]},"shadeColor2":{"linear":true,"type":16,"value":[0.2,0.2,0.2,1]},"specular":{"linear":true,"type":16,"value":[1,1,1,0.3]},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"shadowCover":{"type":13,"value":[0.5],"handleInfo":["miscParams",0,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrength":{"slide":true,"step":0.001,"type":13,"value":[1],"range":[0,5],"handleInfo":["emissiveScaleAndStrenth",3,13]},"normalMap":{"value":"normal","type":28},"mainTexture":{"value":"white","type":28,"handleInfo":["baseColorMap",0,28]},"shadeMap1":{"value":"white","type":28},"shadeMap2":{"value":"white","type":28},"specularMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"baseColor":{"type":16,"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"shadeParams":{"type":16,"value":[0.8,0.001,0.5,0.001]},"miscParams":{"type":16,"value":[0.5,0,0,0]},"emissiveScaleAndStrenth":{"type":16,"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white"}}},{"phase":"shadow-caster","propertyIndex":1,"program":"builtin-toon|shadow-caster-vs|shadow-caster-fs","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[0.6,0.6,0.6,1],"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"type":16,"value":[0.4,0.4,0.4,1]},"shadeColor2":{"type":16,"value":[0.2,0.2,0.2,1]},"specular":{"type":16,"value":[1,1,1,0.3]},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1]},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrenth":{"type":13,"value":[1],"handleInfo":["emissiveScaleAndStrenth",3,13]},"mainTexture":{"value":"white","type":28,"handleInfo":["baseColorMap",0,28]},"baseColor":{"type":16,"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"shadeParams":{"type":16,"value":[0.8,0.001,0.5,0.001]},"emissiveScaleAndStrenth":{"type":16,"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white"}}}]}]]],0,0,[],[],[]],[[[47,"FX_Gradient_01","0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[8,6],[109,63]],[[[17,".bin",1618517693,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9216,"length":648,"count":324,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":9216,"count":192,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9191892743110657,-0.10751934349536896,0],"maxPosition",8,[1,0.9191892743110657,0.10751932859420776,0.877108097076416]]],-1],0,0,[],[],[]],[[[19,"_aa11猪牛羊\\objzhuM_Pig",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[6],[4]],[[[24],[20,"zhalan_02_a",[-2],[12,"21IRP2nUhYMpRrWKiVCdHa",null,null,null,-1,0]],[23,"zhalan_02_a",1,[[22,-3,[6,"edqsqthixXaZPkhrcRbztd"],[0],[21],1]],[12,"92qfWPTdBWWIyvVQtTlwUa",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[242,243]],[[[19,"Material #9",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[8,6],[244,4]],[[[24],[20,"zhalan_01_b",[-2],[12,"a6N7F52v9VKIDPEqehEty3",null,null,null,-1,0]],[23,"zhalan_01_b",1,[[22,-3,[6,"c7v0XdX41ZRL3QzOKKifEt"],[0],[21],1]],[12,"f0zJn56ktYAIWV1MQNU535",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[245,246]],[[[17,".bin",2435835190,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12912,"length":672,"count":336,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":12912,"count":269,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9815658926963806,-0.12722837924957275,-0.008967017754912376],"maxPosition",8,[1,0.9256702661514282,0.4093046486377716,0.8127769231796265]]],-1],0,0,[],[],[]],[[[15,"Men09_b"],[18,"Men09_b",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-8,[7,"9ekJsc5PtOlY5FFlsdntOk",1,[[2,"zhanlan_06_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],3],[2,0,["_shadowReceivingMode"],3],[5,["_materials","0"],3,1],[5,["_mesh"],3,2]]],0]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-9,[7,"davd4Bt4NB3blVYs0NtRRA",1,[[2,"zhanlan_06_a-001",["_name"],4],[0,["_lpos"],4,[1,0,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],5],[2,0,["_shadowReceivingMode"],5],[5,["_materials","0"],5,4],[5,["_mesh"],5,5]]],3]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-10,[7,"93jUXOLRpHdLf/e5IlkA9S",1,[[2,"zhanlan_06_a-002",["_name"],6],[0,["_lpos"],6,[1,1.86,0,4.13]],[0,["_lrot"],6,[3,0,0,0,1]],[0,["_euler"],6,[1,0,0,0]],[2,1,["_shadowCastingMode"],7],[2,0,["_shadowReceivingMode"],7],[5,["_materials","0"],7,7],[5,["_mesh"],7,8]]],6]]],0,[0,-1,10,0,-2,9,0,-3,8,0,2,1,0,-1,8,0,-2,9,0,-3,10,0,2,8,0,2,9,0,2,10,0,5,1,10],[0,0,0,0,0,0,0,0,0],[3,1,1,3,1,1,3,1,1],[0,20,64,0,20,64,0,20,64]],[[[15,"zhanlas"],[20,"zhanlas",[-8,-9,-10,-11,-12,-13],[16,"15nA224mJAV6BWgbgwboGo",null,null,-7,0,[-1,-2,-3,-4,-5,-6]]],[1,["8a17anT+FClJ+7NgD4Cuav"]],[1,["2528bcjHxGyoaX2sBBSCjb"]],[1,["baY6GC6LtN7Z4o5lu+orYp"]],[1,["e0qMvfUBVE+pt1cUvpCb2x"]],[1,["98hi7nyEpMrbiJwjkMBFtA"]],[1,["f5Crz/W5xCRpcO8MeMlG+z"]],[3,0,{},1,[74,"f5Crz/W5xCRpcO8MeMlG+z",null,[],-14,[7,"9aKQaZXBtD/5a2qShgrm+H",1,[[2,"homezhalan",["_name"],7],[0,["_lpos"],7,[1,0,0,0]],[0,["_lrot"],7,[3,0,0,0,1]],[0,["_euler"],7,[1,0,0,0]],[26,false,["_active"],[1,["0fLHK7jgpKLq2Xk0Zu1lbP"]]]]],0]],[3,0,{},1,[4,"8a17anT+FClJ+7NgD4Cuav",null,null,-15,[7,"e7AT5eM29KOJVIxN8YKD9t",1,[[2,"Men01_a",["_name"],2],[0,["_lpos"],2,[1,0,0,0]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,true,["_active"],2]]],1]],[3,0,{},1,[4,"2528bcjHxGyoaX2sBBSCjb",null,null,-16,[7,"29jds6OUZNCqMi/3rSeFgM",1,[[2,"Men01_b",["_name"],3],[0,["_lpos"],3,[1,0,0,0]],[0,["_lrot"],3,[3,0,0,0,1]],[0,["_euler"],3,[1,0,0,0]],[2,false,["_active"],3]]],2]],[3,0,{},1,[4,"baY6GC6LtN7Z4o5lu+orYp",null,null,-17,[7,"affDzEXgBAFIgsh13W4Tdn",1,[[2,"Men01_c",["_name"],4],[0,["_lpos"],4,[1,0,0,0]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,false,["_active"],4]]],3]],[3,0,{},1,[4,"e0qMvfUBVE+pt1cUvpCb2x",null,null,-18,[7,"aaKRkS9O5E6KuER0wX7LZp",1,[[2,"Men01_d",["_name"],5],[0,["_lpos"],5,[1,0,0,0]],[0,["_lrot"],5,[3,0,0,0,1]],[0,["_euler"],5,[1,0,0,0]],[2,false,["_active"],5]]],4]],[3,0,{},1,[4,"98hi7nyEpMrbiJwjkMBFtA",null,null,-19,[7,"1fycsOT5JBD5s8Ja1JpqpU",1,[[2,"Men01_e",["_name"],6],[0,["_lpos"],6,[1,0,0,0]],[0,["_lrot"],6,[3,0,0,0,1]],[0,["_euler"],6,[1,0,0,0]],[2,false,["_active"],6]]],5]]],0,[0,-1,13,0,-2,12,0,-3,11,0,-4,10,0,-5,9,0,-6,8,0,2,1,0,-1,8,0,-2,9,0,-3,10,0,-4,11,0,-5,12,0,-6,13,0,2,8,0,2,9,0,2,10,0,2,11,0,2,12,0,2,13,0,5,1,19],[0,0,0,0,0,0],[3,3,3,3,3,3],[112,247,248,249,250,251]],[[[15,"Men05_c"],[18,"Men05_c",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["0e665R7r9cWJ1jpLbW/1XB"]],[1,["0e665R7r9cWJ1jpLbW/1XB"]],[1,["0e665R7r9cWJ1jpLbW/1XB"]],[3,0,null,1,[4,"0e665R7r9cWJ1jpLbW/1XB",null,null,-11,[7,"9bXG47LWlD6pp5HpQdKlKG",1,[[2,"zhalan_05_c",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[5,["_materials","0"],-8,1],[2,1,["_shadowCastingMode"],-9],[2,0,["_shadowReceivingMode"],-10]]],0]],[1,["2aUzrLrn5QLY9hBePph5oy"]],[3,0,{},1,[4,"0e665R7r9cWJ1jpLbW/1XB",null,null,-15,[7,"4ftGfidoxKRrIKaxDCBJ6C",1,[[2,"zhalan_05_c-001",["_name"],3],[0,["_lpos"],3,[1,0,0,4.13]],[0,["_lrot"],3,[3,0,0,0,1]],[0,["_euler"],3,[1,0,0,0]],[5,["_materials","0"],-12,3],[2,1,["_shadowCastingMode"],-13],[2,0,["_shadowReceivingMode"],-14]]],2]],[1,["2aUzrLrn5QLY9hBePph5oy"]],[3,0,{},1,[4,"0e665R7r9cWJ1jpLbW/1XB",null,null,-19,[7,"a9h2kBKxhL8KGGfYBoZsEb",1,[[2,"zhalan_05_c-002",["_name"],4],[0,["_lpos"],4,[1,1.86,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[5,["_materials","0"],-16,5],[2,1,["_shadowCastingMode"],-17],[2,0,["_shadowReceivingMode"],-18]]],4]],[1,["2aUzrLrn5QLY9hBePph5oy"]]],0,[0,-1,9,0,-2,7,0,-3,5,0,2,1,0,-1,5,0,-2,7,0,-3,9,0,0,6,0,0,6,0,0,6,0,2,5,0,0,8,0,0,8,0,0,8,0,2,7,0,0,10,0,0,10,0,0,10,0,2,9,0,5,1,19],[0,0,0,0,0,0],[3,1,3,1,3,1],[65,9,65,9,65,9]],[[[15,"Men09_a"],[18,"Men09_a",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-8,[7,"9ekJsc5PtOlY5FFlsdntOk",1,[[2,"zhanlan_06_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],3],[2,0,["_shadowReceivingMode"],3],[5,["_materials","0"],3,1],[5,["_mesh"],3,2]]],0]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-9,[7,"davd4Bt4NB3blVYs0NtRRA",1,[[2,"zhanlan_06_a-001",["_name"],4],[0,["_lpos"],4,[1,0,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],5],[2,0,["_shadowReceivingMode"],5],[5,["_materials","0"],5,4],[5,["_mesh"],5,5]]],3]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-10,[7,"93jUXOLRpHdLf/e5IlkA9S",1,[[2,"zhanlan_06_a-002",["_name"],6],[0,["_lpos"],6,[1,1.86,0,4.13]],[0,["_lrot"],6,[3,0,0,0,1]],[0,["_euler"],6,[1,0,0,0]],[2,1,["_shadowCastingMode"],7],[2,0,["_shadowReceivingMode"],7],[5,["_materials","0"],7,7],[5,["_mesh"],7,8]]],6]]],0,[0,-1,10,0,-2,9,0,-3,8,0,2,1,0,-1,8,0,-2,9,0,-3,10,0,2,8,0,2,9,0,2,10,0,5,1,10],[0,0,0,0,0,0,0,0,0],[3,1,1,3,1,1,3,1,1],[0,20,36,0,20,36,0,20,36]],[[[15,"Men01_e"],[18,"Men01_e",[-5,-6,-7],[16,"98hi7nyEpMrbiJwjkMBFtA",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["47U8MFkHdS2YN1QO0Ar7VF"]],[1,["47U8MFkHdS2YN1QO0Ar7VF"]],[1,["47U8MFkHdS2YN1QO0Ar7VF"]],[3,0,null,1,[4,"47U8MFkHdS2YN1QO0Ar7VF",null,null,-11,[7,"90wXuNsx1FB6vtSCuHJkmk",1,[[2,"zhalan_01_e",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],-8],[2,0,["_shadowReceivingMode"],-9],[5,["_materials","0"],-10,1]]],0]],[1,["fc8g7MtpRSU7QoA2Hxy/h9"]],[3,0,null,1,[4,"47U8MFkHdS2YN1QO0Ar7VF",null,null,-15,[7,"437ld2GFFK3It5zs9IH9t5",1,[[2,"zhalan_01_e-001",["_name"],3],[0,["_lpos"],3,[1,0,0,4.13]],[0,["_lrot"],3,[3,0,0,0,1]],[0,["_euler"],3,[1,0,0,0]],[2,1,["_shadowCastingMode"],-12],[2,0,["_shadowReceivingMode"],-13],[5,["_materials","0"],-14,3]]],2]],[1,["fc8g7MtpRSU7QoA2Hxy/h9"]],[3,0,null,1,[4,"47U8MFkHdS2YN1QO0Ar7VF",null,null,-19,[7,"76ZiWo+gtE1L0HgaYtFec0",1,[[2,"zhalan_01_e-002",["_name"],4],[0,["_lpos"],4,[1,1.86,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],-16],[2,0,["_shadowReceivingMode"],-17],[5,["_materials","0"],-18,5]]],4]],[1,["fc8g7MtpRSU7QoA2Hxy/h9"]]],0,[0,-1,9,0,-2,7,0,-3,5,0,2,1,0,-1,5,0,-2,7,0,-3,9,0,0,6,0,0,6,0,0,6,0,2,5,0,0,8,0,0,8,0,0,8,0,2,7,0,0,10,0,0,10,0,0,10,0,2,9,0,5,1,19],[0,0,0,0,0,0],[3,1,3,1,3,1],[66,1,66,1,66,1]],[[[32,"model_Fangzi_04",[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_1ST_SHADE_MAP":true,"SHADE_MAP_1_AS_SHADE_MAP_2":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{"rasterizerState":{"polygonMode":2,"lineWidth":0},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},[{"rasterizerState":{"depthBias":1.9,"depthBiasClamp":-2.4,"lineWidth":5.2},"depthStencilState":{}},"blendState",11,[{"targets":[{}]},"blendColor",8,[4,4292072403]]],{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],0,0,11,0],[[{},[{"baseStep":1.9,"baseFeather":0.2,"shadeStep":2.6,"shadeFeather":2.101,"shadowCover":0.622},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4294967295],"shadeColor2",8,[4,4283058766],"specular",8,[4,1275068416],"shadeMap1",6,0],{},{}],0,11,0,0]]],0,0,[0,0],[12,6],[100,32]],[[[15,"Men06_c"],[18,"Men06_c",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-8,[7,"9ekJsc5PtOlY5FFlsdntOk",1,[[2,"zhanlan_06_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],3],[2,0,["_shadowReceivingMode"],3],[5,["_materials","0"],3,1],[5,["_mesh"],3,2]]],0]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-9,[7,"davd4Bt4NB3blVYs0NtRRA",1,[[2,"zhanlan_06_a-001",["_name"],4],[0,["_lpos"],4,[1,0,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],5],[2,0,["_shadowReceivingMode"],5],[5,["_materials","0"],5,4],[5,["_mesh"],5,5]]],3]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-10,[7,"93jUXOLRpHdLf/e5IlkA9S",1,[[2,"zhanlan_06_a-002",["_name"],6],[0,["_lpos"],6,[1,1.86,0,4.13]],[0,["_lrot"],6,[3,0,0,0,1]],[0,["_euler"],6,[1,0,0,0]],[2,1,["_shadowCastingMode"],7],[2,0,["_shadowReceivingMode"],7],[5,["_materials","0"],7,7],[5,["_mesh"],7,8]]],6]]],0,[0,-1,10,0,-2,9,0,-3,8,0,2,1,0,-1,8,0,-2,9,0,-3,10,0,2,8,0,2,9,0,2,10,0,5,1,10],[0,0,0,0,0,0,0,0,0],[3,1,1,3,1,1,3,1,1],[0,11,67,0,11,67,0,11,67]],[[[59,"legacy/toon",[{"hash":1013515840,"name":"legacy/toon|legacy/main-functions/outline-vs:vert|legacy/main-functions/outline-fs:frag","blocks":[{"name":"OutlineVert","stageFlags":1,"binding":0,"members":[{"name":"outlineParams","type":16,"count":1}],"defines":[]},{"name":"OutlineFrag","stageFlags":16,"binding":1,"members":[{"name":"baseColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_BASE_COLOR_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":15,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCMorph","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_displacementWeights","typename":"vec4","type":16,"count":15,"isArray":true},{"name":"cc_displacementTextureInfo","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointTextureInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointAnimInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_joints","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true}],"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"OutlineVert","stageFlags":1,"binding":0,"members":[{"name":"outlineParams","type":16,"count":1}],"defines":[]},{"name":"OutlineFrag","stageFlags":16,"binding":1,"members":[{"name":"baseColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_BASE_COLOR_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    attribute vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nvarying vec2 v_uv;\n   uniform vec4 outlineParams;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  float width = outlineParams.x * 0.001;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(In.position.xyz);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    In.position.xyz += flip * dir * width * 2.0;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #else\n    In.position.xyz += normalize(In.normal) * width;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #endif\n  pos.z -= outlineParams.y * 0.002;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform mediump vec4 cc_debug_view_mode;\nuniform mediump vec4 cc_surfaceTransform;\n  uniform mediump vec4 cc_mainLitColor;\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_DIRECT CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT CC_SURFACES_DEBUG_VIEW_TRT_DIRECT + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ALL CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_TRT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRT (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 v_uv;\n   uniform vec4 baseColor;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvec4 frag () {\n  vec4 color = baseColor * cc_mainLitColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture2D(baseColorMap, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return CCFragOutput(vec4(color.rgb, 1.0));\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":73,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":43}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"USE_POSITION_SCALING","type":"boolean"},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"USE_BASE_COLOR_MAP","type":"boolean"}]},{"hash":3204275266,"name":"legacy/toon|toon-vs:vert|toon-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"baseColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"shadeColor1","type":16,"count":1},{"name":"shadeColor2","type":16,"count":1},{"name":"specular","type":16,"count":1},{"name":"shadeParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleAndStrenth","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_BASE_COLOR_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"shadeMap1","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_1ST_SHADE_MAP"]},{"name":"shadeMap2","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_2ND_SHADE_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_SPECULAR_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":15,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCMorph","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_displacementWeights","typename":"vec4","type":16,"count":15,"isArray":true},{"name":"cc_displacementTextureInfo","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointTextureInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointAnimInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_joints","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true}],"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["!USE_INSTANCING"]},{"name":"CCForwardLight","stageFlags":16,"tags":{"builtin":"local"},"members":[{"name":"cc_lightPos","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true},{"name":"cc_lightColor","typename":"vec4","type":16,"count":0,"isArray":true},{"name":"cc_lightSizeRangeAngle","typename":"vec4","type":16,"count":0,"isArray":true},{"name":"cc_lightDir","typename":"vec4","type":16,"count":0,"isArray":true}],"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"baseColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"shadeColor1","type":16,"count":1},{"name":"shadeColor2","type":16,"count":1},{"name":"specular","type":16,"count":1},{"name":"shadeParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleAndStrenth","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_BASE_COLOR_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"shadeMap1","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_1ST_SHADE_MAP"]},{"name":"shadeMap2","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_2ND_SHADE_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_SPECULAR_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCShadow","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matLightView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matLightViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_shadowInvProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowNFLSInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowWHPBInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowLPNNInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowColor","typename":"vec4","type":16,"count":1,"precision":"lowp "},{"name":"cc_planarNDInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCSM","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_csmViewDir0","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir1","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir2","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmAtlas","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_matCSMViewProj","typename":"mat4","type":25,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjDepthInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmSplitsInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_shadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":17,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":17,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    attribute vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_localShadowBias;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n    #define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBiasAndProbeId.x + cc_shadowWHPBInfo.w, a_localShadowBiasAndProbeId.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  varying mediump vec4 v_tangent;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  v_normal = (matWorldIT * vec4(In.normal, 0.0)).xyz;\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform mediump vec4 cc_debug_view_mode;\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_surfaceTransform;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nstruct ToonSurface {\n  vec4 baseColor;\n  vec4 specular;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 shade1;\n  vec3 shade2;\n  vec3 emissive;\n  float baseStep;\n  float baseFeather;\n  float shadeStep;\n  float shadeFeather;\n  float shadowCover;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = 0.5 * dot(N, SL) + 0.5;\n      float SNH = 0.5 * dot(N, SH) + 0.5;\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr , distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 diffuse = mix(s.shade1, s.shade2,\n        clamp(1.0 + (s.shadeStep - s.shadeFeather - SNL) / s.shadeFeather, 0.0, 1.0));\n      diffuse = mix(s.baseColor.rgb, diffuse,\n        clamp(1.0 + (s.baseStep - s.baseFeather - SNL) / s.baseFeather, 0.0, 1.0));\n      float specularMask = step(specularWeight, SNH);\n      vec3 specular = s.specular.rgb * specularMask;\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      finalColor += SNL * cc_lightColor[i].rgb * cc_lightColor[i].a * illum * att * s.baseStep * (diffuse + specular);\n    }\n    return vec4(finalColor, 0.0);\n  }\n#else\n  #if CC_RECEIVE_SHADOW\n    varying highp vec4 v_shadowPos;\n    uniform highp mat4 cc_matLightView;\n  uniform highp mat4 cc_matLightViewProj;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n    #if CC_SUPPORT_CASCADED_SHADOW_MAP\n      uniform highp vec4 cc_csmViewDir0[4];\n  uniform highp vec4 cc_csmViewDir1[4];\n  uniform highp vec4 cc_csmViewDir2[4];\n  uniform highp vec4 cc_csmAtlas[4];\n  uniform highp mat4 cc_matCSMViewProj[4];\n  uniform highp vec4 cc_csmProjDepthInfo[4];\n  uniform highp vec4 cc_csmProjInfo[4];\n  uniform highp vec4 cc_csmSplitsInfo;\n    #endif\n    #if CC_RECEIVE_SHADOW\n      uniform highp sampler2D cc_shadowMap;\n      uniform highp sampler2D cc_spotShadowMap;\n      float NativePCFShadowFactorHard (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n      {\n        #if CC_SHADOWMAP_FORMAT == 1\n          return step(shadowNDCPos.z, dot(texture2D(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        #else\n          return step(shadowNDCPos.z, texture2D(shadowMap, shadowNDCPos.xy).x);\n        #endif\n      }\n      float NativePCFShadowFactorSoft (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n      {\n        vec2 oneTap = 1.0 / shadowMapResolution;\n        vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n        float block0, block1, block2, block3;\n        #if CC_SHADOWMAP_FORMAT == 1\n          block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        #else\n          block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n          block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n          block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n          block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n        #endif\n        float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block2, block3, coefX);\n        float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n        return mix(resultX, resultY, coefY);\n      }\n      float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n      {\n        vec2 oneTap = 1.0 / shadowMapResolution;\n        float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n        float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n        float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n        float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n        float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n        #if CC_SHADOWMAP_FORMAT == 1\n          block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        #else\n          block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n          block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n          block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n          block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n          block4 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n          block5 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n          block6 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n          block7 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n          block8 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n        #endif\n        float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n        float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n        float shadow = 0.0;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block3, block4, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block1, block2, coefX);\n        resultY = mix(block4, block5, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block3, block4, coefX);\n        resultY = mix(block6, block7, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        resultX = mix(block4, block5, coefX);\n        resultY = mix(block7, block8, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        return shadow * 0.25;\n      }\n      float NativePCFShadowFactorSoft5X (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n      {\n        vec2 oneTap = 1.0 / shadowMapResolution;\n        vec2 twoTap = oneTap * 2.0;\n        vec2 offset1 = shadowNDCPos.xy + vec2(-twoTap.x, -twoTap.y);\n        vec2 offset2 = shadowNDCPos.xy + vec2(-oneTap.x, -twoTap.y);\n        vec2 offset3 = shadowNDCPos.xy + vec2(0.0, -twoTap.y);\n        vec2 offset4 = shadowNDCPos.xy + vec2(oneTap.x, -twoTap.y);\n        vec2 offset5 = shadowNDCPos.xy + vec2(twoTap.x, -twoTap.y);\n        vec2 offset6 = shadowNDCPos.xy + vec2(-twoTap.x, -oneTap.y);\n        vec2 offset7 = shadowNDCPos.xy + vec2(-oneTap.x, -oneTap.y);\n        vec2 offset8 = shadowNDCPos.xy + vec2(0.0, -oneTap.y);\n        vec2 offset9 = shadowNDCPos.xy + vec2(oneTap.x, -oneTap.y);\n        vec2 offset10 = shadowNDCPos.xy + vec2(twoTap.x, -oneTap.y);\n        vec2 offset11 = shadowNDCPos.xy + vec2(-twoTap.x, 0.0);\n        vec2 offset12 = shadowNDCPos.xy + vec2(-oneTap.x, 0.0);\n        vec2 offset13 = shadowNDCPos.xy + vec2(0.0, 0.0);\n        vec2 offset14 = shadowNDCPos.xy + vec2(oneTap.x, 0.0);\n        vec2 offset15 = shadowNDCPos.xy + vec2(twoTap.x, 0.0);\n        vec2 offset16 = shadowNDCPos.xy + vec2(-twoTap.x, oneTap.y);\n        vec2 offset17 = shadowNDCPos.xy + vec2(-oneTap.x, oneTap.y);\n        vec2 offset18 = shadowNDCPos.xy + vec2(0.0, oneTap.y);\n        vec2 offset19 = shadowNDCPos.xy + vec2(oneTap.x, oneTap.y);\n        vec2 offset20 = shadowNDCPos.xy + vec2(twoTap.x, oneTap.y);\n        vec2 offset21 = shadowNDCPos.xy + vec2(-twoTap.x, twoTap.y);\n        vec2 offset22 = shadowNDCPos.xy + vec2(-oneTap.x, twoTap.y);\n        vec2 offset23 = shadowNDCPos.xy + vec2(0.0, twoTap.y);\n        vec2 offset24 = shadowNDCPos.xy + vec2(oneTap.x, twoTap.y);\n        vec2 offset25 = shadowNDCPos.xy + vec2(twoTap.x, twoTap.y);\n        float block1, block2, block3, block4, block5, block6, block7, block8, block9, block10, block11, block12, block13, block14, block15, block16, block17, block18, block19, block20, block21, block22, block23, block24, block25;\n        #if CC_SHADOWMAP_FORMAT == 1\n          block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset1), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset2), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset3), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset4), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset5), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset6), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset7), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset8), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block9 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset9), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block10 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset10), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block11 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset11), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block12 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset12), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block13 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset13), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block14 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset14), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block15 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset15), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block16 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset16), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block17 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset17), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block18 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset18), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block19 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset19), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block20 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset20), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block21 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset21), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block22 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset22), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block23 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset23), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block24 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset24), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block25 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset25), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        #else\n          block1 = step(shadowNDCPos.z, texture2D(shadowMap, offset1).x);\n          block2 = step(shadowNDCPos.z, texture2D(shadowMap, offset2).x);\n          block3 = step(shadowNDCPos.z, texture2D(shadowMap, offset3).x);\n          block4 = step(shadowNDCPos.z, texture2D(shadowMap, offset4).x);\n          block5 = step(shadowNDCPos.z, texture2D(shadowMap, offset5).x);\n          block6 = step(shadowNDCPos.z, texture2D(shadowMap, offset6).x);\n          block7 = step(shadowNDCPos.z, texture2D(shadowMap, offset7).x);\n          block8 = step(shadowNDCPos.z, texture2D(shadowMap, offset8).x);\n          block9 = step(shadowNDCPos.z, texture2D(shadowMap, offset9).x);\n          block10 = step(shadowNDCPos.z, texture2D(shadowMap, offset10).x);\n          block11 = step(shadowNDCPos.z, texture2D(shadowMap, offset11).x);\n          block12 = step(shadowNDCPos.z, texture2D(shadowMap, offset12).x);\n          block13 = step(shadowNDCPos.z, texture2D(shadowMap, offset13).x);\n          block14 = step(shadowNDCPos.z, texture2D(shadowMap, offset14).x);\n          block15 = step(shadowNDCPos.z, texture2D(shadowMap, offset15).x);\n          block16 = step(shadowNDCPos.z, texture2D(shadowMap, offset16).x);\n          block17 = step(shadowNDCPos.z, texture2D(shadowMap, offset17).x);\n          block18 = step(shadowNDCPos.z, texture2D(shadowMap, offset18).x);\n          block19 = step(shadowNDCPos.z, texture2D(shadowMap, offset19).x);\n          block20 = step(shadowNDCPos.z, texture2D(shadowMap, offset20).x);\n          block21 = step(shadowNDCPos.z, texture2D(shadowMap, offset21).x);\n          block22 = step(shadowNDCPos.z, texture2D(shadowMap, offset22).x);\n          block23 = step(shadowNDCPos.z, texture2D(shadowMap, offset23).x);\n          block24 = step(shadowNDCPos.z, texture2D(shadowMap, offset24).x);\n          block25 = step(shadowNDCPos.z, texture2D(shadowMap, offset25).x);\n        #endif\n        vec2 coef = fract(shadowNDCPos.xy * shadowMapResolution);\n        vec2 v1X1 = mix(vec2(block1, block6), vec2(block2, block7), coef.xx);\n        vec2 v1X2 = mix(vec2(block2, block7), vec2(block3, block8), coef.xx);\n        vec2 v1X3 = mix(vec2(block3, block8), vec2(block4, block9), coef.xx);\n        vec2 v1X4 = mix(vec2(block4, block9), vec2(block5, block10), coef.xx);\n        float v1 = mix(v1X1.x, v1X1.y, coef.y) + mix(v1X2.x, v1X2.y, coef.y) + mix(v1X3.x, v1X3.y, coef.y) + mix(v1X4.x, v1X4.y, coef.y);\n        vec2 v2X1 = mix(vec2(block6, block11), vec2(block7, block12), coef.xx);\n        vec2 v2X2 = mix(vec2(block7, block12), vec2(block8, block13), coef.xx);\n        vec2 v2X3 = mix(vec2(block8, block13), vec2(block9, block14), coef.xx);\n        vec2 v2X4 = mix(vec2(block9, block14), vec2(block10, block15), coef.xx);\n        float v2 = mix(v2X1.x, v2X1.y, coef.y) + mix(v2X2.x, v2X2.y, coef.y) + mix(v2X3.x, v2X3.y, coef.y) + mix(v2X4.x, v2X4.y, coef.y);\n        vec2 v3X1 = mix(vec2(block11, block16), vec2(block12, block17), coef.xx);\n        vec2 v3X2 = mix(vec2(block12, block17), vec2(block13, block18), coef.xx);\n        vec2 v3X3 = mix(vec2(block13, block18), vec2(block14, block19), coef.xx);\n        vec2 v3X4 = mix(vec2(block14, block19), vec2(block15, block20), coef.xx);\n        float v3 = mix(v3X1.x, v3X1.y, coef.y) + mix(v3X2.x, v3X2.y, coef.y) + mix(v3X3.x, v3X3.y, coef.y) + mix(v3X4.x, v3X4.y, coef.y);\n        vec2 v4X1 = mix(vec2(block16, block21), vec2(block17, block22), coef.xx);\n        vec2 v4X2 = mix(vec2(block17, block22), vec2(block18, block23), coef.xx);\n        vec2 v4X3 = mix(vec2(block18, block23), vec2(block19, block24), coef.xx);\n        vec2 v4X4 = mix(vec2(block19, block24), vec2(block20, block25), coef.xx);\n        float v4 = mix(v4X1.x, v4X1.y, coef.y) + mix(v4X2.x, v4X2.y, coef.y) + mix(v4X3.x, v4X3.y, coef.y) + mix(v4X4.x, v4X4.y, coef.y);\n        float fAvg = (v1 + v2 + v3 + v4) * 0.0625;\n        return fAvg;\n      }\n      bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n      {\n      \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n      \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n      \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n      \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n      \t\treturn false;\n      \t}\n      \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n      \treturn true;\n      }\n      vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n      {\n        vec4 newShadowPos = shadowPos;\n        if (normalBias > EPSILON_LOWP)\n        {\n          vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n          if (viewNormal.z < 0.1)\n            newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n        }\n        return newShadowPos;\n      }\n      vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n      {\n      \tvec4 newShadowPos = shadowPos;\n      \tif (normalBias > EPSILON_LOWP)\n      \t{\n      \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n      \t\tif (viewNormal.z < 0.1)\n      \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n      \t}\n      \treturn newShadowPos;\n      }\n      float GetViewSpaceDepthFromNDCDepth_Orthgraphic(float NDCDepth, float projScaleZ, float projBiasZ)\n      {\n      \treturn (NDCDepth - projBiasZ) / projScaleZ;\n      }\n      vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n      {\n      \tfloat coeffA = projScaleZ;\n      \tfloat coeffB = projBiasZ;\n      \tfloat viewSpacePos_z = GetViewSpaceDepthFromNDCDepth_Orthgraphic(shadowPos.z, projScaleZ, projBiasZ);\n      \tviewSpacePos_z += viewspaceDepthBias;\n      \tvec4 result = shadowPos;\n      \tresult.z = viewSpacePos_z * coeffA + coeffB;\n      \treturn result;\n      }\n      float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n    \t  vec3 shadowNDCPos;\n    \t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n    \t\t  return 1.0;\n    \t  }\n        return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n      }\n      float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n    \t  vec3 shadowNDCPos;\n    \t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n    \t\t  return 1.0;\n    \t  }\n        return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n      }\n      float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n    \t  vec3 shadowNDCPos;\n    \t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n    \t\t  return 1.0;\n    \t  }\n        return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n      }\n      float CCGetDirLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias) {\n    \t  vec3 shadowNDCPos;\n    \t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n    \t\t  return 1.0;\n    \t  }\n        return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n      }\n      float CCShadowFactorBase(out vec4 shadowNDCPosWithBias, vec4 shadowPos, vec3 N, vec2 shadowBias)\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n        pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n        float realtimeShadow = 1.0;\n        #if CC_DIR_SHADOW_PCF_TYPE == 3\n          realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n        #endif\n        #if CC_DIR_SHADOW_PCF_TYPE == 2\n          realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n        #endif\n        #if CC_DIR_SHADOW_PCF_TYPE == 1\n          realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n        #endif\n        #if CC_DIR_SHADOW_PCF_TYPE == 0\n          realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n        #endif\n        shadowNDCPosWithBias = pos;\n        return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n      #if CC_SUPPORT_CASCADED_SHADOW_MAP\n        bool CCGetCSMLevelWithTransition(out highp float ratio, vec3 clipPos) {\n          highp float maxRange = 1.0 - cc_csmSplitsInfo.x;\n          highp float minRange = cc_csmSplitsInfo.x;\n          highp float thresholdInvert = 1.0 / cc_csmSplitsInfo.x;\n          ratio = 0.0;\n          if (clipPos.x <= minRange) {\n            ratio = clipPos.x * thresholdInvert;\n            return true;\n          }\n          if (clipPos.x >= maxRange) {\n            ratio = 1.0 - (clipPos.x - maxRange) * thresholdInvert;\n            return true;\n          }\n          if (clipPos.y <= minRange) {\n            ratio = clipPos.y  * thresholdInvert;\n            return true;\n          }\n          if (clipPos.y >= maxRange) {\n            ratio = 1.0 - (clipPos.y - maxRange) * thresholdInvert;\n            return true;\n          }\n          return false;\n        }\n        bool CCHasCSMLevel(int level, vec3 worldPos) {\n          highp float layerThreshold = cc_csmViewDir0[0].w;\n          bool hasLevel = false;\n          for (int i = 0; i < 4; i++) {\n            if (i == level) {\n              vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n              vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n              if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n                  clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n                  clipPos.z >= 0.0 && clipPos.z <= 1.0) {\n                hasLevel = true;\n              }\n            }\n          }\n          return hasLevel;\n        }\n        void CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos, int level) {\n          highp float layerThreshold = cc_csmViewDir0[0].w;\n          for (int i = 0; i < 4; i++) {\n            vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n            vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n            if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n                clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n                clipPos.z >= 0.0 && clipPos.z <= 1.0 && i == level) {\n              csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n              csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n              shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n              shadowProjInfo = cc_csmProjInfo[i];\n              shadowViewDir0 = cc_csmViewDir0[i].xyz;\n              shadowViewDir1 = cc_csmViewDir1[i].xyz;\n              shadowViewDir2 = cc_csmViewDir2[i].xyz;\n            }\n          }\n        }\n        int CCGetCSMLevel(out bool isTransitionArea, out highp float transitionRatio, out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos)\n        {\n          int level = -1;\n          highp float layerThreshold = cc_csmViewDir0[0].w;\n          for (int i = 0; i < 4; i++) {\n            vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n            vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n            if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n                clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n                clipPos.z >= 0.0 && clipPos.z <= 1.0 && level < 0) {\n              #if CC_CASCADED_LAYERS_TRANSITION\n                isTransitionArea = CCGetCSMLevelWithTransition(transitionRatio, clipPos);\n              #endif\n              csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n              csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n              shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n              shadowProjInfo = cc_csmProjInfo[i];\n              shadowViewDir0 = cc_csmViewDir0[i].xyz;\n              shadowViewDir1 = cc_csmViewDir1[i].xyz;\n              shadowViewDir2 = cc_csmViewDir2[i].xyz;\n              level = i;\n            }\n          }\n          return level;\n        }\n        int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos)\n        {\n          bool isTransitionArea = false;\n          highp float transitionRatio = 0.0;\n          return CCGetCSMLevel(isTransitionArea, transitionRatio, csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n        }\n        float CCCSMFactorBase(out vec4 csmPos, out vec4 csmNDCPosWithBias, vec3 worldPos, vec3 N, vec2 shadowBias)\n        {\n          bool isTransitionArea = false;\n          highp float ratio = 0.0;\n          csmPos = vec4(1.0);\n          vec4 shadowProjDepthInfo, shadowProjInfo;\n          vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n          int level = -1;\n          #if CC_CASCADED_LAYERS_TRANSITION\n            level = CCGetCSMLevel(isTransitionArea, ratio, csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n          #else\n            level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n          #endif\n          if (level < 0) { return 1.0; }\n          vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n          pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n          csmNDCPosWithBias = pos;\n          float realtimeShadow = 1.0;\n          #if CC_DIR_SHADOW_PCF_TYPE == 3\n            realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 2\n            realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 1\n            realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 0\n            realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n          #endif\n          #if CC_CASCADED_LAYERS_TRANSITION\n            vec4 nextCSMPos = vec4(1.0);\n            vec4 nextShadowProjDepthInfo, nextShadowProjInfo;\n            vec3 nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2;\n            float nextRealtimeShadow = 1.0;\n            CCGetCSMLevel(nextCSMPos, nextShadowProjDepthInfo, nextShadowProjInfo, nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2, worldPos, level + 1);\n            bool hasNextLevel = CCHasCSMLevel(level + 1, worldPos);\n            if (hasNextLevel && isTransitionArea) {\n              vec4 nexPos = ApplyShadowDepthBias_FaceNormal(nextCSMPos, N, shadowBias.y, nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2, nextShadowProjInfo.xy);\n              nexPos = ApplyShadowDepthBias_Orthographic(nexPos, shadowBias.x, nextShadowProjDepthInfo.x, nextShadowProjDepthInfo.y);\n              #if CC_DIR_SHADOW_PCF_TYPE == 3\n                nextRealtimeShadow = CCGetDirLightShadowFactorSoft5X(nexPos);\n              #endif\n              #if CC_DIR_SHADOW_PCF_TYPE == 2\n                nextRealtimeShadow = CCGetDirLightShadowFactorSoft3X(nexPos);\n              #endif\n              #if CC_DIR_SHADOW_PCF_TYPE == 1\n                nextRealtimeShadow = CCGetDirLightShadowFactorSoft(nexPos);\n              #endif\n              #if CC_DIR_SHADOW_PCF_TYPE == 0\n                nextRealtimeShadow = CCGetDirLightShadowFactorHard(nexPos);\n              #endif\n              return mix(mix(nextRealtimeShadow, realtimeShadow, ratio), 1.0, cc_shadowNFLSInfo.w);\n            }\n            return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n          #else\n            return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n          #endif\n        }\n      #else\n        int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n          return -1;\n        }\n        float CCCSMFactorBase(out vec4 csmPos, out vec4 csmNDCPosWithBias, vec3 worldPos, vec3 N, vec2 shadowBias) {\n          csmPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n          return CCShadowFactorBase(csmNDCPosWithBias, csmPos, N, shadowBias);\n        }\n      #endif\n      float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias) {\n        vec4 shadowNDCPosWithBias;\n        return CCShadowFactorBase(shadowNDCPosWithBias, shadowPos, N, shadowBias);\n      }\n      float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n        vec4 csmPos, csmNDCPosWithBias;\n        return CCCSMFactorBase(csmPos, csmNDCPosWithBias, worldPos, N, shadowBias);\n      }\n    #endif\n        #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n    #endif\n  #endif\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    float NL = 0.5 * dot(N, L) + 0.5;\n    float NH = 0.5 * dot(normalize(V + L), N) + 0.5;\n    vec3 lightColor = cc_mainLitColor.rgb * cc_mainLitColor.w * s.baseStep;\n    vec3 diffuse = mix(s.shade1, s.shade2,\n      clamp(1.0 + (s.shadeStep - s.shadeFeather - NL) / s.shadeFeather, 0.0, 1.0));\n    diffuse = mix(s.baseColor.rgb, diffuse,\n      clamp(1.0 + (s.baseStep - s.baseFeather - NL) / s.baseFeather, 0.0, 1.0));\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    float specularMask = step(specularWeight + EPSILON_LOWP, NH);\n    vec3 specular = s.specular.rgb * specularMask;\n    vec3 dirlightContrib = diffuse + specular;\n    float shadow = 1.0;\n    #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n    if(s.shadowCover < NL && cc_mainLitDir.w > 0.0) {\n      #if CC_DIR_LIGHT_SHADOW_TYPE == 2\n        shadow = CCCSMFactorBase(position, N, s.shadowBias);\n      #endif\n      #if CC_DIR_LIGHT_SHADOW_TYPE == 1\n        shadow = CCShadowFactorBase(v_shadowPos, N, s.shadowBias);\n      #endif\n    }\n    #endif\n    dirlightContrib *= shadow;\n    vec3 finalColor = lightColor * dirlightContrib;\n    finalColor += s.emissive;\n    return vec4(finalColor, s.baseColor.a);\n  }\n#endif\n    uniform vec4 baseColor;\n    uniform vec4 colorScaleAndCutoff;\n    uniform vec4 shadeColor1;\n    uniform vec4 shadeColor2;\n    uniform vec4 specular;\n    uniform vec4 shadeParams;\n    uniform vec4 miscParams;\n    uniform vec4 emissive;\n    uniform vec4 emissiveScaleAndStrenth;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_DIRECT CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT CC_SURFACES_DEBUG_VIEW_TRT_DIRECT + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ALL CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_TRT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRT (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_RGBE_OUTPUT\n    #if CC_USE_HDR\n      color.rgb = ACESToneMap(color.rgb);\n    #endif\n    color.rgb = LinearToSRGB(color.rgb);\n  #endif\n  return color;\n}\nvarying vec3 v_position;\nvarying vec2 v_uv;\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvarying mediump vec3 v_normal;\n#if USE_NORMAL_MAP\n  varying mediump vec4 v_tangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_1ST_SHADE_MAP\n  uniform sampler2D shadeMap1;\n#endif\n#if USE_2ND_SHADE_MAP\n  uniform sampler2D shadeMap2;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out ToonSurface s) {\n  s.shade2 = shadeColor2.rgb * colorScaleAndCutoff.rgb;\n  #if USE_2ND_SHADE_MAP\n    s.shade2 *= SRGBToLinear(texture2D(shadeMap2, v_uv).rgb);\n  #endif\n  s.shade1 = shadeColor1.rgb * colorScaleAndCutoff.rgb;\n  #if USE_1ST_SHADE_MAP\n    s.shade1 *= SRGBToLinear(texture2D(shadeMap1, v_uv).rgb);\n    #if SHADE_MAP_1_AS_SHADE_MAP_2\n      s.shade2 *= s.shade1.rgb;\n    #endif\n  #endif\n  vec4 localBaseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 baseColorMap = texture2D(baseColorMap, v_uv);\n    baseColorMap.rgb = SRGBToLinear(baseColorMap.rgb);\n    localBaseColor *= baseColorMap;\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_1\n      s.shade1 *= baseColorMap.rgb;\n    #endif\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_2\n      s.shade2 *= baseColorMap.rgb;\n    #endif\n  #endif\n  s.baseColor = localBaseColor;\n  s.baseColor.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, v_uv).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * (v_tangent.w > 0.0 ? 1.0 : -1.0);\n    s.normal =\n      (nmmp.x * emissiveScaleAndStrenth.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleAndStrenth.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  s.specular = specular;\n  #if USE_SPECULAR_MAP\n    s.specular.rgb *= SRGBToLinear(texture2D(specularMap, v_uv).rgb);\n  #endif\n  s.emissive = emissive.rgb * emissiveScaleAndStrenth.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, v_uv).rgb);\n  #endif\n  s.baseStep = shadeParams.x;\n  s.baseFeather = shadeParams.y;\n  s.shadeStep = shadeParams.z;\n  s.shadeFeather = shadeParams.w;\n  s.shadowCover = miscParams.x;\n}\nvec4 frag () {\n  ToonSurface s; surf(s);\n  vec4 color = CCToonShading(s);\n  return CCFragOutput(color);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":139,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":109}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"USE_NORMAL_MAP","type":"boolean"},{"name":"CC_FORWARD_ADD","type":"boolean"},{"name":"CC_PIPELINE_TYPE","type":"number","range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean"},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]},{"name":"CC_DIR_SHADOW_PCF_TYPE","type":"number","range":[0,3]},{"name":"CC_CASCADED_LAYERS_TRANSITION","type":"boolean"},{"name":"CC_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_DIR_LIGHT_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"CC_USE_RGBE_OUTPUT","type":"boolean"},{"name":"CC_USE_HDR","type":"boolean"},{"name":"USE_BASE_COLOR_MAP","type":"boolean"},{"name":"USE_1ST_SHADE_MAP","type":"boolean"},{"name":"USE_2ND_SHADE_MAP","type":"boolean"},{"name":"USE_SPECULAR_MAP","type":"boolean"},{"name":"USE_EMISSIVE_MAP","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r","g","b"]},{"name":"SHADE_MAP_1_AS_SHADE_MAP_2","type":"boolean"},{"name":"BASE_COLOR_MAP_AS_SHADE_MAP_1","type":"boolean"},{"name":"BASE_COLOR_MAP_AS_SHADE_MAP_2","type":"boolean"}]},{"hash":1927304778,"name":"legacy/toon|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"baseColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"shadeColor1","type":16,"count":1},{"name":"shadeColor2","type":16,"count":1},{"name":"specular","type":16,"count":1},{"name":"shadeParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleAndStrenth","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_BASE_COLOR_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":15,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCMorph","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_displacementWeights","typename":"vec4","type":16,"count":15,"isArray":true},{"name":"cc_displacementTextureInfo","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointTextureInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointAnimInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_joints","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true}],"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"baseColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"shadeColor1","type":16,"count":1},{"name":"shadeColor2","type":16,"count":1},{"name":"specular","type":16,"count":1},{"name":"shadeParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleAndStrenth","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_BASE_COLOR_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCShadow","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matLightView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matLightViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_shadowInvProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowNFLSInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowWHPBInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowLPNNInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowColor","typename":"vec4","type":16,"count":1,"precision":"lowp "},{"name":"cc_planarNDInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCSM","stageFlags":16,"tags":{"builtin":"global"},"members":[{"name":"cc_csmViewDir0","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir1","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir2","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmAtlas","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_matCSMViewProj","typename":"mat4","type":25,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjDepthInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmSplitsInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]},{"name":"CCGlobal","stageFlags":16,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":["CC_RECEIVE_SHADOW"]},{"name":"CCCamera","stageFlags":16,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":["CC_RECEIVE_SHADOW"]}],"samplerTextures":[{"name":"cc_shadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    attribute vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\nvarying vec2 v_uv;\nvarying vec4 v_worldPos;\nvarying highp vec2 v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_clip_depth = clipPos.zw;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 baseColor;\n   uniform vec4 colorScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\nvarying vec2 v_uv;\nvarying vec4 v_worldPos;\nvarying highp vec2 v_clip_depth;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = baseColor;\n  #if USE_ALPHA_TEST\n    #if USE_BASE_COLOR_MAP\n      baseColor *= texture2D(baseColorMap, v_uv);\n    #endif\n    if (baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(v_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    return packDepthToRGBA(clipDepth);\n  #else\n    return vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]},{"name":"CCGlobal","defines":["CC_RECEIVE_SHADOW"]},{"name":"CCCamera","defines":["CC_RECEIVE_SHADOW"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":56,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":109}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"USE_BASE_COLOR_MAP","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r","g","b"]},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]}]}],[{"passes":[{"program":"legacy/toon|legacy/main-functions/outline-vs:vert|legacy/main-functions/outline-fs:frag","switch":"USE_OUTLINE_PASS","rasterizerState":{"cullMode":1},"depthStencilState":{"depthFunc":3,"depthTest":true,"depthWrite":true},"properties":{"lineWidth":{"type":13,"value":[10],"handleInfo":["outlineParams",0,13]},"depthBias":{"type":13,"value":[0],"handleInfo":["outlineParams",1,13]},"baseColor":{"type":16},"baseColorMap":{"value":"grey","type":28},"outlineParams":{"type":16,"value":[10,0,0,0]}}},{"program":"legacy/toon|toon-vs:vert|toon-fs:frag","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[0.6,0.6,0.6,1],"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"linear":true,"type":16,"value":[0.4,0.4,0.4,1]},"shadeColor2":{"linear":true,"type":16,"value":[0.2,0.2,0.2,1]},"specular":{"linear":true,"type":16,"value":[1,1,1,0.3]},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"shadowCover":{"type":13,"value":[0.5],"handleInfo":["miscParams",0,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrength":{"slide":true,"step":0.001,"type":13,"value":[1],"range":[0,5],"handleInfo":["emissiveScaleAndStrenth",3,13]},"normalMap":{"value":"normal","type":28},"mainTexture":{"value":"white","type":28,"handleInfo":["baseColorMap",0,28]},"shadeMap1":{"value":"white","type":28},"shadeMap2":{"value":"white","type":28},"specularMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"baseColor":{"type":16,"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"shadeParams":{"type":16,"value":[0.8,0.001,0.5,0.001]},"miscParams":{"type":16,"value":[0.5,0,0,0]},"emissiveScaleAndStrenth":{"type":16,"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white"}}},{"phase":"forward-add","propertyIndex":1,"program":"legacy/toon|toon-vs:vert|toon-fs:frag","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[0.6,0.6,0.6,1],"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"linear":true,"type":16,"value":[0.4,0.4,0.4,1]},"shadeColor2":{"linear":true,"type":16,"value":[0.2,0.2,0.2,1]},"specular":{"linear":true,"type":16,"value":[1,1,1,0.3]},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"shadowCover":{"type":13,"value":[0.5],"handleInfo":["miscParams",0,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrength":{"slide":true,"step":0.001,"type":13,"value":[1],"range":[0,5],"handleInfo":["emissiveScaleAndStrenth",3,13]},"normalMap":{"value":"normal","type":28},"mainTexture":{"value":"white","type":28,"handleInfo":["baseColorMap",0,28]},"shadeMap1":{"value":"white","type":28},"shadeMap2":{"value":"white","type":28},"specularMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"baseColor":{"type":16,"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"shadeParams":{"type":16,"value":[0.8,0.001,0.5,0.001]},"miscParams":{"type":16,"value":[0.5,0,0,0]},"emissiveScaleAndStrenth":{"type":16,"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white"}}},{"phase":"shadow-caster","propertyIndex":1,"program":"legacy/toon|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[0.6,0.6,0.6,1],"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"type":16,"value":[0.4,0.4,0.4,1]},"shadeColor2":{"type":16,"value":[0.2,0.2,0.2,1]},"specular":{"type":16,"value":[1,1,1,0.3]},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1]},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrenth":{"type":13,"value":[1],"handleInfo":["emissiveScaleAndStrenth",3,13]},"mainTexture":{"value":"white","type":28,"handleInfo":["baseColorMap",0,28]},"baseColor":{"type":16,"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"shadeParams":{"type":16,"value":[0.8,0.001,0.5,0.001]},"emissiveScaleAndStrenth":{"type":16,"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white"}}}]}]]],0,0,[],[],[]],[[[15,"homezhalan08"],[20,"homezhalan08",[-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27],[16,"f5Crz/W5xCRpcO8MeMlG+z",null,null,-14,0,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[3,0,null,1,[4,"16oY9Vv+JddK539oGRK/NK",null,null,-37,[13,"e3PSC85PpP1rJ+1/TDgDln",1,[[9,[1,["16oY9Vv+JddK539oGRK/NK"]],[[10,-35,[6,"a30+p+QANC8YOO5Hn5aKwo"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-36,[6,"caj6XohS9DlqPjlVuFcFeA"]]]]],[[2,"zhanlan_09_a",["_name"],-28],[0,["_lpos"],-29,[1,3,0,1.429]],[0,["_lrot"],-30,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-31,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-32],[2,0,["_shadowReceivingMode"],-33],[5,["_materials","0"],-34,1]]],0]],[3,0,null,1,[4,"16oY9Vv+JddK539oGRK/NK",null,null,-47,[13,"fbLDly+uRI06qhOKMh5a7W",1,[[9,[1,["16oY9Vv+JddK539oGRK/NK"]],[[10,-45,[6,"8944V9u3hPkIEwGofaNX8p"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-46,[6,"12T5aeQttLMpVaRoWqcHeA"]]]]],[[2,"zhanlan_09_a-001",["_name"],-38],[0,["_lpos"],-39,[1,3,0,-0.486]],[0,["_lrot"],-40,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-41,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-42],[2,0,["_shadowReceivingMode"],-43],[5,["_materials","0"],-44,3]]],2]],[3,0,null,1,[4,"16oY9Vv+JddK539oGRK/NK",null,null,-57,[13,"7d06gAMEBOaoUiilk8dWXA",1,[[9,[1,["16oY9Vv+JddK539oGRK/NK"]],[[10,-55,[6,"e7RFzc0Y5Eo67jj7rLjeyP"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-56,[6,"17WYjfp+9L1K1RjXJ2E37C"]]]]],[[2,"zhanlan_09_a-002",["_name"],-48],[0,["_lpos"],-49,[1,3,0,-2.388]],[0,["_lrot"],-50,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-51,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-52],[2,0,["_shadowReceivingMode"],-53],[5,["_materials","0"],-54,5]]],4]],[3,0,null,1,[4,"16oY9Vv+JddK539oGRK/NK",null,null,-67,[13,"2fU/4iTqpPUYBtUpoAXhYg",1,[[9,[1,["16oY9Vv+JddK539oGRK/NK"]],[[10,-65,[6,"4bQRfcid1MGpAbka7Drc2K"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-66,[6,"f7lHoaJjJHaoFR9pv0TkDW"]]]]],[[2,"zhanlan_09_a-003",["_name"],-58],[0,["_lpos"],-59,[1,3,0,-4.29]],[0,["_lrot"],-60,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-61,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-62],[2,0,["_shadowReceivingMode"],-63],[5,["_materials","0"],-64,7]]],6]],[3,0,null,1,[4,"16oY9Vv+JddK539oGRK/NK",null,null,-77,[13,"d4nhquAUhCfpySonX2SVKQ",1,[[9,[1,["16oY9Vv+JddK539oGRK/NK"]],[[10,-75,[6,"49vmXeT4RLlZ+UwcNzmDDx"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-76,[6,"04u8xtQMdGCaKnNKBJTXpb"]]]]],[[2,"zhanlan_09_a-004",["_name"],-68],[0,["_lpos"],-69,[1,-3,0,-0.486]],[0,["_lrot"],-70,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-71,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-72],[2,0,["_shadowReceivingMode"],-73],[5,["_materials","0"],-74,9]]],8]],[3,0,null,1,[4,"16oY9Vv+JddK539oGRK/NK",null,null,-87,[13,"d1LlmmGLNAjoXOdid4zNbl",1,[[9,[1,["16oY9Vv+JddK539oGRK/NK"]],[[10,-85,[6,"40PFxGFEpGiKpuIQedPKRb"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-86,[6,"73SQXD75JEkqlY3+wfjta+"]]]]],[[2,"zhanlan_09_a-005",["_name"],-78],[0,["_lpos"],-79,[1,-3,0,-2.388]],[0,["_lrot"],-80,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-81,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-82],[2,0,["_shadowReceivingMode"],-83],[5,["_materials","0"],-84,11]]],10]],[3,0,null,1,[4,"16oY9Vv+JddK539oGRK/NK",null,null,-97,[13,"49DjWC5P1BTI1UWNeYStA6",1,[[9,[1,["16oY9Vv+JddK539oGRK/NK"]],[[10,-95,[6,"41QG+KbQ5Fer0NMJRcN9jd"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-96,[6,"eaHz9owYZKe5xrj2Jl1b94"]]]]],[[2,"zhanlan_09_a-006",["_name"],-88],[0,["_lpos"],-89,[1,-3,0,-4.29]],[0,["_lrot"],-90,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-91,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-92],[2,0,["_shadowReceivingMode"],-93],[5,["_materials","0"],-94,13]]],12]],[3,0,null,1,[4,"16oY9Vv+JddK539oGRK/NK",null,null,-107,[13,"9cwYH0rBpPeL3uVUgytZqY",1,[[9,[1,["16oY9Vv+JddK539oGRK/NK"]],[[10,-105,[6,"ddikjR9jlBWoiIv5a46BUf"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-106,[6,"e6+NslR0RKWKyV5AJeKUx2"]]]]],[[2,"zhanlan_09_a-007",["_name"],-98],[0,["_lpos"],-99,[1,-3,0,1.429]],[0,["_lrot"],-100,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-101,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-102],[2,0,["_shadowReceivingMode"],-103],[5,["_materials","0"],-104,15]]],14]],[3,0,null,1,[4,"16oY9Vv+JddK539oGRK/NK",null,null,-117,[13,"abBdVXLllOMbzjuGtHLDaO",1,[[9,[1,["16oY9Vv+JddK539oGRK/NK"]],[[10,-115,[6,"47YfJtNWFHTbHEmoT25neX"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-116,[6,"170+hMfghDy4GZ5nr2wNcV"]]]]],[[2,"zhanlan_09_a-008",["_name"],-108],[0,["_lpos"],-109,[1,1.86,0,-5.122]],[0,["_lrot"],-110,[3,0,0,0,1]],[0,["_euler"],-111,[1,0,0,0]],[2,1,["_shadowCastingMode"],-112],[2,0,["_shadowReceivingMode"],-113],[5,["_materials","0"],-114,17]]],16]],[3,0,null,1,[4,"16oY9Vv+JddK539oGRK/NK",null,null,-127,[13,"a6GyhzQaxGHoWtlzw3g5yu",1,[[9,[1,["16oY9Vv+JddK539oGRK/NK"]],[[10,-125,[6,"d8tfLbtCFAmo3ZefY6As1O"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-126,[6,"0fNbTRYElK6bZChEjKitzr"]]]]],[[2,"zhanlan_09_a-009",["_name"],-118],[0,["_lpos"],-119,[1,0,0,-5.122]],[0,["_lrot"],-120,[3,0,0,0,1]],[0,["_euler"],-121,[1,0,0,0]],[2,1,["_shadowCastingMode"],-122],[2,0,["_shadowReceivingMode"],-123],[5,["_materials","0"],-124,19]]],18]],[3,0,null,1,[4,"16oY9Vv+JddK539oGRK/NK",null,null,-137,[13,"50zfkGrohM14wLExjTvIj/",1,[[9,[1,["16oY9Vv+JddK539oGRK/NK"]],[[10,-135,[6,"74ZHv7Lb9IZLQd6K2kjiTa"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-136,[6,"59HgAQO7lFgYqiRCwFNdOB"]]]]],[[2,"zhanlan_09_a-010",["_name"],-128],[0,["_lpos"],-129,[1,-1.86,0,-5.122]],[0,["_lrot"],-130,[3,0,0,0,1]],[0,["_euler"],-131,[1,0,0,0]],[2,1,["_shadowCastingMode"],-132],[2,0,["_shadowReceivingMode"],-133],[5,["_materials","0"],-134,21]]],20]],[3,0,null,1,[4,"16oY9Vv+JddK539oGRK/NK",null,null,-147,[13,"0cRswcXgpGHq447sVzdIyi",1,[[9,[1,["16oY9Vv+JddK539oGRK/NK"]],[[10,-145,[6,"a2sZdS4mBGvp/ozDlQbEGg"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-146,[6,"aeS+KQgrBNSbOb1i2SXtzE"]]]]],[[2,"zhanlan_09_a-011",["_name"],-138],[0,["_lpos"],-139,[1,3,0,3.316]],[0,["_lrot"],-140,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-141,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-142],[2,0,["_shadowReceivingMode"],-143],[5,["_materials","0"],-144,23]]],22]],[3,0,null,1,[4,"16oY9Vv+JddK539oGRK/NK",null,null,-157,[13,"fczhctct1Md5mN765EqwD0",1,[[9,[1,["16oY9Vv+JddK539oGRK/NK"]],[[10,-155,[6,"d7c2NPUKFMaYdHfeEPZEnE"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-156,[6,"65rgaM2FlDOLoLpiyvcW8k"]]]]],[[2,"zhanlan_09_a-012",["_name"],-148],[0,["_lpos"],-149,[1,-3,0,3.316]],[0,["_lrot"],-150,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-151,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-152],[2,0,["_shadowReceivingMode"],-153],[5,["_materials","0"],-154,25]]],24]],[1,["16oY9Vv+JddK539oGRK/NK"]],[1,["16oY9Vv+JddK539oGRK/NK"]],[1,["16oY9Vv+JddK539oGRK/NK"]],[1,["16oY9Vv+JddK539oGRK/NK"]],[1,["16oY9Vv+JddK539oGRK/NK"]],[1,["16oY9Vv+JddK539oGRK/NK"]],[1,["16oY9Vv+JddK539oGRK/NK"]],[1,["16oY9Vv+JddK539oGRK/NK"]],[1,["16oY9Vv+JddK539oGRK/NK"]],[1,["16oY9Vv+JddK539oGRK/NK"]],[1,["16oY9Vv+JddK539oGRK/NK"]],[1,["16oY9Vv+JddK539oGRK/NK"]],[1,["16oY9Vv+JddK539oGRK/NK"]],[1,["dfz9JygylfHIjzmZOkzi0p"]],[1,["dfz9JygylfHIjzmZOkzi0p"]],[1,["dfz9JygylfHIjzmZOkzi0p"]],[1,["dfz9JygylfHIjzmZOkzi0p"]],[1,["dfz9JygylfHIjzmZOkzi0p"]],[1,["dfz9JygylfHIjzmZOkzi0p"]],[1,["dfz9JygylfHIjzmZOkzi0p"]],[1,["dfz9JygylfHIjzmZOkzi0p"]],[1,["dfz9JygylfHIjzmZOkzi0p"]],[1,["dfz9JygylfHIjzmZOkzi0p"]],[1,["dfz9JygylfHIjzmZOkzi0p"]],[1,["dfz9JygylfHIjzmZOkzi0p"]],[1,["dfz9JygylfHIjzmZOkzi0p"]]],0,[0,-1,14,0,-2,13,0,-3,12,0,-4,11,0,-5,10,0,-6,9,0,-7,8,0,-8,7,0,-9,6,0,-10,5,0,-11,4,0,-12,3,0,-13,2,0,2,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,-5,6,0,-6,7,0,-7,8,0,-8,9,0,-9,10,0,-10,11,0,-11,12,0,-12,13,0,-13,14,0,0,15,0,0,15,0,0,15,0,0,15,0,0,28,0,0,28,0,0,28,0,4,2,0,4,2,0,2,2,0,0,16,0,0,16,0,0,16,0,0,16,0,0,29,0,0,29,0,0,29,0,4,3,0,4,3,0,2,3,0,0,17,0,0,17,0,0,17,0,0,17,0,0,30,0,0,30,0,0,30,0,4,4,0,4,4,0,2,4,0,0,18,0,0,18,0,0,18,0,0,18,0,0,31,0,0,31,0,0,31,0,4,5,0,4,5,0,2,5,0,0,19,0,0,19,0,0,19,0,0,19,0,0,32,0,0,32,0,0,32,0,4,6,0,4,6,0,2,6,0,0,20,0,0,20,0,0,20,0,0,20,0,0,33,0,0,33,0,0,33,0,4,7,0,4,7,0,2,7,0,0,21,0,0,21,0,0,21,0,0,21,0,0,34,0,0,34,0,0,34,0,4,8,0,4,8,0,2,8,0,0,22,0,0,22,0,0,22,0,0,22,0,0,35,0,0,35,0,0,35,0,4,9,0,4,9,0,2,9,0,0,23,0,0,23,0,0,23,0,0,23,0,0,36,0,0,36,0,0,36,0,4,10,0,4,10,0,2,10,0,0,24,0,0,24,0,0,24,0,0,24,0,0,37,0,0,37,0,0,37,0,4,11,0,4,11,0,2,11,0,0,25,0,0,25,0,0,25,0,0,25,0,0,38,0,0,38,0,0,38,0,4,12,0,4,12,0,2,12,0,0,26,0,0,26,0,0,26,0,0,26,0,0,39,0,0,39,0,0,39,0,4,13,0,4,13,0,2,13,0,0,27,0,0,27,0,0,27,0,0,27,0,0,40,0,0,40,0,0,40,0,4,14,0,4,14,0,2,14,0,5,1,157],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1],[30,20,30,20,30,20,30,20,30,20,30,20,30,20,30,20,30,20,30,20,30,20,30,20,30,20]],[[[15,"Men04_d"],[18,"Men04_d",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["b8takYNC9YoaGJ9OhV7IcA"]],[1,["b8takYNC9YoaGJ9OhV7IcA"]],[1,["b8takYNC9YoaGJ9OhV7IcA"]],[3,0,{},1,[4,"b8takYNC9YoaGJ9OhV7IcA",null,null,-11,[7,"13gM0ic4VOjZB9w19ek3N5",1,[[2,"zhalan_04_d",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[5,["_materials","0"],-8,1],[2,1,["_shadowCastingMode"],-9],[2,0,["_shadowReceivingMode"],-10]]],0]],[1,["1ctjuxOeJdurJTAsVMsgXI"]],[3,0,{},1,[4,"b8takYNC9YoaGJ9OhV7IcA",null,null,-15,[7,"b8phE0lfRMi7jQUkA/Cy5J",1,[[2,"zhalan_04_d-001",["_name"],3],[0,["_lpos"],3,[1,0,0,4.13]],[0,["_lrot"],3,[3,0,0,0,1]],[0,["_euler"],3,[1,0,0,0]],[5,["_materials","0"],-12,3],[2,1,["_shadowCastingMode"],-13],[2,0,["_shadowReceivingMode"],-14]]],2]],[1,["1ctjuxOeJdurJTAsVMsgXI"]],[3,0,{},1,[4,"b8takYNC9YoaGJ9OhV7IcA",null,null,-19,[7,"7ayGbfCZNI8p8U3J+iV07q",1,[[2,"zhalan_04_d-002",["_name"],4],[0,["_lpos"],4,[1,1.86,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[5,["_materials","0"],-16,5],[2,1,["_shadowCastingMode"],-17],[2,0,["_shadowReceivingMode"],-18]]],4]],[1,["1ctjuxOeJdurJTAsVMsgXI"]]],0,[0,-1,9,0,-2,7,0,-3,5,0,2,1,0,-1,5,0,-2,7,0,-3,9,0,0,6,0,0,6,0,0,6,0,2,5,0,0,8,0,0,8,0,0,8,0,2,7,0,0,10,0,0,10,0,0,10,0,2,9,0,5,1,19],[0,0,0,0,0,0],[3,1,3,1,3,1],[68,12,68,12,68,12]],[[[24],[20,"zhalan_03_d",[-2],[12,"5exdgynE1adLaAcgeQMC0s",null,null,null,-1,0]],[23,"zhalan_03_d",1,[[22,-3,[6,"58GGU9Wa5Y1IPE3HdkhHAJ"],[0],[21],1]],[12,"36HYLqTQ1RL5fTFYiuKZwj",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[252,253]],[[[19,"22 - Default",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":1.9999998807907104,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[6],[4]],[[[17,".bin",653472995,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":33984,"length":1788,"count":894,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":33984,"count":708,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.044071078300476,-0.533898651599884,-0.024304646998643875],"maxPosition",8,[1,0.9910078644752502,0.5206038951873779,0.8762184381484985]]],-1],0,0,[],[],[]],[[[47,"FX_Ring_01","0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[8,6],[111,63]],[[[15,"Men02_c"],[18,"Men02_c",[-5,-6,-7],[16,"00Mirw4mNHH5il8BwgdBkJ",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["89abcTDktWI64Iko02iR6G"]],[1,["89abcTDktWI64Iko02iR6G"]],[1,["89abcTDktWI64Iko02iR6G"]],[3,0,null,1,[4,"89abcTDktWI64Iko02iR6G",null,null,-11,[7,"072apmIt9PT5y3zTJrDKUc",1,[[2,"zhalan_02_c",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],-8],[2,0,["_shadowReceivingMode"],-9],[5,["_materials","0"],-10,1]]],0]],[1,["90M2fI5lpdUbAbGFsZPNCt"]],[3,0,null,1,[4,"89abcTDktWI64Iko02iR6G",null,null,-15,[7,"45kgwqfS5KXb+3N1uGMp8+",1,[[2,"zhalan_02_c-001",["_name"],3],[0,["_lpos"],3,[1,0,0,4.13]],[0,["_lrot"],3,[3,0,0,0,1]],[0,["_euler"],3,[1,0,0,0]],[2,1,["_shadowCastingMode"],-12],[2,0,["_shadowReceivingMode"],-13],[5,["_materials","0"],-14,3]]],2]],[1,["90M2fI5lpdUbAbGFsZPNCt"]],[3,0,null,1,[4,"89abcTDktWI64Iko02iR6G",null,null,-19,[7,"f3MxPApvBOl7jrLzKOwX3e",1,[[2,"zhalan_02_c-002",["_name"],4],[0,["_lpos"],4,[1,1.86,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],-16],[2,0,["_shadowReceivingMode"],-17],[5,["_materials","0"],-18,5]]],4]],[1,["90M2fI5lpdUbAbGFsZPNCt"]]],0,[0,-1,9,0,-2,7,0,-3,5,0,2,1,0,-1,5,0,-2,7,0,-3,9,0,0,6,0,0,6,0,0,6,0,2,5,0,0,8,0,0,8,0,0,8,0,2,7,0,0,10,0,0,10,0,0,10,0,2,9,0,5,1,19],[0,0,0,0,0,0],[3,1,3,1,3,1],[69,1,69,1,69,1]],[[[19,"New_model_fangzi_05",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{},[{"baseStep":0.9,"baseFeather":0.3,"shadeStep":0.6,"shadeFeather":-0.3,"shadowCover":0},"mainColor",8,[4,4290822336],"shadeColor1",8,[4,4285624697],"shadeColor2",8,[4,4287006342],"specular",8,[4,4278190080],"mainTexture",6,0,"emissiveMap",6,1],{},{}],0,11,0,0]]],0,0,[0,0,0],[8,9,6],[254,27,24]],[[[15,"Men10_d"],[18,"Men10_d",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-8,[7,"9ekJsc5PtOlY5FFlsdntOk",1,[[2,"zhanlan_06_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],3],[2,0,["_shadowReceivingMode"],3],[5,["_materials","0"],3,1],[5,["_mesh"],3,2]]],0]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-9,[7,"davd4Bt4NB3blVYs0NtRRA",1,[[2,"zhanlan_06_a-001",["_name"],4],[0,["_lpos"],4,[1,0,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],5],[2,0,["_shadowReceivingMode"],5],[5,["_materials","0"],5,4],[5,["_mesh"],5,5]]],3]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-10,[7,"93jUXOLRpHdLf/e5IlkA9S",1,[[2,"zhanlan_06_a-002",["_name"],6],[0,["_lpos"],6,[1,1.86,0,4.13]],[0,["_lrot"],6,[3,0,0,0,1]],[0,["_euler"],6,[1,0,0,0]],[2,1,["_shadowCastingMode"],7],[2,0,["_shadowReceivingMode"],7],[5,["_materials","0"],7,7],[5,["_mesh"],7,8]]],6]]],0,[0,-1,10,0,-2,9,0,-3,8,0,2,1,0,-1,8,0,-2,9,0,-3,10,0,2,8,0,2,9,0,2,10,0,5,1,10],[0,0,0,0,0,0,0,0,0],[3,1,1,3,1,1,3,1,1],[0,10,70,0,10,70,0,10,70]],[[[17,".bin",1672399530,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":38256,"length":2100,"count":1050,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":38256,"count":797,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9394773840904236,-0.5192753076553345,-0.08714824914932251],"maxPosition",8,[1,0.9232850670814514,0.3984696865081787,0.717897891998291]]],-1],0,0,[],[],[]],[[[19,"New_zhalan_04",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{"lineWidth":25},[{"baseStep":0.9,"baseFeather":0.3,"shadeStep":0.6,"shadeFeather":-0.3,"shadowCover":0},"mainColor",8,[4,4290822336],"shadeColor1",8,[4,4285624697],"shadeColor2",8,[4,4287006342],"specular",8,[4,4278190080],"mainTexture",6,0,"emissiveMap",6,1],{},{}],0,11,0,0]]],0,0,[0,0,0],[8,9,6],[113,27,24]],[[[19,"Material #179",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[8,6],[255,4]],[[[24],[20,"zhalan_05_e",[-2],[12,"b7zCekmDxSwL5PpotBehWm",null,null,null,-1,0]],[23,"zhalan_05_e",1,[[22,-3,[6,"c2mcRBzKFXc6SqMvQx6qBx"],[0],[21],1]],[12,"db2s6EoudZVoXxCiwVGjNy",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[256,257]],[[[17,".bin",3165631992,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":59712,"length":2964,"count":1482,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":59712,"count":1244,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9480433464050293,-0.45646917819976807,-0.006296136416494846],"maxPosition",8,[1,1.0698601007461548,0.43724724650382996,0.28627684712409973]]],-1],0,0,[],[],[]],[[[15,"Men03_a"],[18,"Men03_a",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[3,0,null,1,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-11,[7,"04XXBRjlxIpY0RVGJu2dWU",1,[[2,"zhalan_03_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],-8],[2,0,["_shadowReceivingMode"],-9],[5,["_materials","0"],-10,1]]],0]],[1,["14cUAMsiRZQrJAuHxu8aso"]],[3,0,null,1,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-15,[7,"b4BcgkVLhOioWaA885zDof",1,[[2,"zhalan_03_a-001",["_name"],3],[0,["_lpos"],3,[1,0,0,4.13]],[0,["_lrot"],3,[3,0,0,0,1]],[0,["_euler"],3,[1,0,0,0]],[2,1,["_shadowCastingMode"],-12],[2,0,["_shadowReceivingMode"],-13],[5,["_materials","0"],-14,3]]],2]],[1,["14cUAMsiRZQrJAuHxu8aso"]],[3,0,null,1,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-19,[7,"09cCZ8bx5O67k8d6E1ii6e",1,[[2,"zhalan_03_a-002",["_name"],4],[0,["_lpos"],4,[1,1.86,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],-16],[2,0,["_shadowReceivingMode"],-17],[5,["_materials","0"],-18,5]]],4]],[1,["14cUAMsiRZQrJAuHxu8aso"]]],0,[0,-1,9,0,-2,7,0,-3,5,0,2,1,0,-1,5,0,-2,7,0,-3,9,0,0,6,0,0,6,0,0,6,0,2,5,0,0,8,0,0,8,0,0,8,0,2,7,0,0,10,0,0,10,0,0,10,0,2,9,0,5,1,19],[0,0,0,0,0,0],[3,1,3,1,3,1],[6,3,6,3,6,3]],[[[15,"homezhalan03"],[20,"homezhalan03",[-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27],[16,"f5Crz/W5xCRpcO8MeMlG+z",null,null,-14,0,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[3,0,{},1,[4,"09eoA6f7dVI610Y+9edNzX",null,null,-37,[13,"bchJwg02xCs6mjui9olk8c",1,[[9,[1,["09eoA6f7dVI610Y+9edNzX"]],[[10,-35,[6,"fa9xyeXbFCWYS6urcdytbi"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-36,[6,"259LWl8RJHvZ/wkeSXQGa9"]]]]],[[2,"zhalan_04_a",["_name"],-28],[0,["_lpos"],-29,[1,3,0,1.429]],[0,["_lrot"],-30,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-31,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-32],[2,0,["_shadowReceivingMode"],-33],[5,["_materials","0"],-34,1]]],0]],[3,0,{},1,[4,"09eoA6f7dVI610Y+9edNzX",null,null,-47,[13,"38saWD8J1NqbUoq3eg+yVQ",1,[[9,[1,["09eoA6f7dVI610Y+9edNzX"]],[[10,-45,[6,"e6N5JQTwBPKITVz9kp//Dg"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-46,[6,"b1CE1ukbpIZr/CPe19fTC2"]]]]],[[2,"zhalan_04_a-001",["_name"],-38],[0,["_lpos"],-39,[1,3,0,-0.486]],[0,["_lrot"],-40,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-41,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-42],[2,0,["_shadowReceivingMode"],-43],[5,["_materials","0"],-44,3]]],2]],[3,0,{},1,[4,"09eoA6f7dVI610Y+9edNzX",null,null,-57,[13,"89Hh1YcjdFoo4OOxpbX+xR",1,[[9,[1,["09eoA6f7dVI610Y+9edNzX"]],[[10,-55,[6,"93PRJFEvZM46sqVMHznwGx"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-56,[6,"921j6zdchGrrMcSpSz9FeP"]]]]],[[2,"zhalan_04_a-002",["_name"],-48],[0,["_lpos"],-49,[1,3,0,-2.388]],[0,["_lrot"],-50,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-51,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-52],[2,0,["_shadowReceivingMode"],-53],[5,["_materials","0"],-54,5]]],4]],[3,0,{},1,[4,"09eoA6f7dVI610Y+9edNzX",null,null,-67,[13,"caFnw2a01F5KImvx2sUf1D",1,[[9,[1,["09eoA6f7dVI610Y+9edNzX"]],[[10,-65,[6,"2dNL9UFfpBI7Y6JVSQeEg5"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-66,[6,"48Xkqi12xKxLo+ElyA43sQ"]]]]],[[2,"zhalan_04_a-003",["_name"],-58],[0,["_lpos"],-59,[1,3,0,-4.29]],[0,["_lrot"],-60,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-61,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-62],[2,0,["_shadowReceivingMode"],-63],[5,["_materials","0"],-64,7]]],6]],[3,0,{},1,[4,"09eoA6f7dVI610Y+9edNzX",null,null,-77,[13,"ecNLLc7cBO+6AG7Bu7u5mB",1,[[9,[1,["09eoA6f7dVI610Y+9edNzX"]],[[10,-75,[6,"d655Ua5BRMgoRssL88EU2f"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-76,[6,"f2EwodcUJFWL5SifTiKcbA"]]]]],[[2,"zhalan_04_a-004",["_name"],-68],[0,["_lpos"],-69,[1,-3,0,-0.486]],[0,["_lrot"],-70,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-71,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-72],[2,0,["_shadowReceivingMode"],-73],[5,["_materials","0"],-74,9]]],8]],[3,0,{},1,[4,"09eoA6f7dVI610Y+9edNzX",null,null,-87,[13,"eawelGG0NEuaapMW0cU3n8",1,[[9,[1,["09eoA6f7dVI610Y+9edNzX"]],[[10,-85,[6,"fes0K0KhBM75WmWjqq/Xmz"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-86,[6,"b84RutvTVLUJU7oERYxE4h"]]]]],[[2,"zhalan_04_a-005",["_name"],-78],[0,["_lpos"],-79,[1,-3,0,-2.388]],[0,["_lrot"],-80,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-81,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-82],[2,0,["_shadowReceivingMode"],-83],[5,["_materials","0"],-84,11]]],10]],[3,0,{},1,[4,"09eoA6f7dVI610Y+9edNzX",null,null,-97,[13,"473D9CpNtPzql/m3GJ+Yvm",1,[[9,[1,["09eoA6f7dVI610Y+9edNzX"]],[[10,-95,[6,"a5x1rth/RLYYIh8APF4m41"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-96,[6,"b4iHUG0eBEG70ysvAvnE30"]]]]],[[2,"zhalan_04_a-006",["_name"],-88],[0,["_lpos"],-89,[1,-3,0,-4.29]],[0,["_lrot"],-90,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-91,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-92],[2,0,["_shadowReceivingMode"],-93],[5,["_materials","0"],-94,13]]],12]],[3,0,{},1,[4,"09eoA6f7dVI610Y+9edNzX",null,null,-107,[13,"6aE21g4GRGOYIDmGGlEmWc",1,[[9,[1,["09eoA6f7dVI610Y+9edNzX"]],[[10,-105,[6,"e4Ycajs+RALpzLmHFwKjLQ"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-106,[6,"e1oSjMoT5G24FsHTFZCSt3"]]]]],[[2,"zhalan_04_a-007",["_name"],-98],[0,["_lpos"],-99,[1,-3,0,1.429]],[0,["_lrot"],-100,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-101,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-102],[2,0,["_shadowReceivingMode"],-103],[5,["_materials","0"],-104,15]]],14]],[3,0,{},1,[4,"09eoA6f7dVI610Y+9edNzX",null,null,-117,[13,"67Enj0fOhCq61WFlW60+dh",1,[[9,[1,["09eoA6f7dVI610Y+9edNzX"]],[[10,-115,[6,"6ddEOKZuJMBbA20wLdt8+Z"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-116,[6,"eboDHVb/5G+pqFwkbdASAk"]]]]],[[2,"zhalan_04_a-008",["_name"],-108],[0,["_lpos"],-109,[1,1.86,0,-5.122]],[0,["_lrot"],-110,[3,0,0,0,1]],[0,["_euler"],-111,[1,0,0,0]],[2,1,["_shadowCastingMode"],-112],[2,0,["_shadowReceivingMode"],-113],[5,["_materials","0"],-114,17]]],16]],[3,0,{},1,[4,"09eoA6f7dVI610Y+9edNzX",null,null,-127,[13,"48fhd5LRdN/ZlkgAntHgXs",1,[[9,[1,["09eoA6f7dVI610Y+9edNzX"]],[[10,-125,[6,"f1WDH/T69P85dBpsLlp/Wq"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-126,[6,"ebfkWS6wlMcpba7HKgcDaf"]]]]],[[2,"zhalan_04_a-009",["_name"],-118],[0,["_lpos"],-119,[1,0,0,-5.122]],[0,["_lrot"],-120,[3,0,0,0,1]],[0,["_euler"],-121,[1,0,0,0]],[2,1,["_shadowCastingMode"],-122],[2,0,["_shadowReceivingMode"],-123],[5,["_materials","0"],-124,19]]],18]],[3,0,{},1,[4,"09eoA6f7dVI610Y+9edNzX",null,null,-137,[13,"47KvpThvhIgJg7MFTltrEc",1,[[9,[1,["09eoA6f7dVI610Y+9edNzX"]],[[10,-135,[6,"96bizqzklIsJzChLfzmwn9"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-136,[6,"7dEswif1tKBZUorQyvZyvO"]]]]],[[2,"zhalan_04_a-010",["_name"],-128],[0,["_lpos"],-129,[1,-1.86,0,-5.122]],[0,["_lrot"],-130,[3,0,0,0,1]],[0,["_euler"],-131,[1,0,0,0]],[2,1,["_shadowCastingMode"],-132],[2,0,["_shadowReceivingMode"],-133],[5,["_materials","0"],-134,21]]],20]],[3,0,{},1,[4,"09eoA6f7dVI610Y+9edNzX",null,null,-147,[13,"e6+cMVxjNKU6PZ6MVClskb",1,[[9,[1,["09eoA6f7dVI610Y+9edNzX"]],[[10,-145,[6,"e4ij3yVAxB6YEGs/8+aiip"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-146,[6,"b8INCQYmNIKKYe5JBtBrt9"]]]]],[[2,"zhalan_04_a-011",["_name"],-138],[0,["_lpos"],-139,[1,3,0,3.316]],[0,["_lrot"],-140,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-141,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-142],[2,0,["_shadowReceivingMode"],-143],[5,["_materials","0"],-144,23]]],22]],[3,0,{},1,[4,"09eoA6f7dVI610Y+9edNzX",null,null,-157,[13,"fetXVCFjtLHL0ZntJk/Jyr",1,[[9,[1,["09eoA6f7dVI610Y+9edNzX"]],[[10,-155,[6,"ecI1vdKp5Aaa6SdwErehre"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-156,[6,"ee0TLmRClEyJqO96f+cqrF"]]]]],[[2,"zhalan_04_a-012",["_name"],-148],[0,["_lpos"],-149,[1,-3,0,3.316]],[0,["_lrot"],-150,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-151,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-152],[2,0,["_shadowReceivingMode"],-153],[5,["_materials","0"],-154,25]]],24]],[1,["09eoA6f7dVI610Y+9edNzX"]],[1,["09eoA6f7dVI610Y+9edNzX"]],[1,["09eoA6f7dVI610Y+9edNzX"]],[1,["09eoA6f7dVI610Y+9edNzX"]],[1,["09eoA6f7dVI610Y+9edNzX"]],[1,["09eoA6f7dVI610Y+9edNzX"]],[1,["09eoA6f7dVI610Y+9edNzX"]],[1,["09eoA6f7dVI610Y+9edNzX"]],[1,["09eoA6f7dVI610Y+9edNzX"]],[1,["09eoA6f7dVI610Y+9edNzX"]],[1,["09eoA6f7dVI610Y+9edNzX"]],[1,["09eoA6f7dVI610Y+9edNzX"]],[1,["09eoA6f7dVI610Y+9edNzX"]],[1,["2dmx8bZVpf2qLwoCHchrnS"]],[1,["2dmx8bZVpf2qLwoCHchrnS"]],[1,["2dmx8bZVpf2qLwoCHchrnS"]],[1,["2dmx8bZVpf2qLwoCHchrnS"]],[1,["2dmx8bZVpf2qLwoCHchrnS"]],[1,["2dmx8bZVpf2qLwoCHchrnS"]],[1,["2dmx8bZVpf2qLwoCHchrnS"]],[1,["2dmx8bZVpf2qLwoCHchrnS"]],[1,["2dmx8bZVpf2qLwoCHchrnS"]],[1,["2dmx8bZVpf2qLwoCHchrnS"]],[1,["2dmx8bZVpf2qLwoCHchrnS"]],[1,["2dmx8bZVpf2qLwoCHchrnS"]],[1,["2dmx8bZVpf2qLwoCHchrnS"]]],0,[0,-1,14,0,-2,13,0,-3,12,0,-4,11,0,-5,10,0,-6,9,0,-7,8,0,-8,7,0,-9,6,0,-10,5,0,-11,4,0,-12,3,0,-13,2,0,2,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,-5,6,0,-6,7,0,-7,8,0,-8,9,0,-9,10,0,-10,11,0,-11,12,0,-12,13,0,-13,14,0,0,15,0,0,15,0,0,15,0,0,15,0,0,28,0,0,28,0,0,28,0,4,2,0,4,2,0,2,2,0,0,16,0,0,16,0,0,16,0,0,16,0,0,29,0,0,29,0,0,29,0,4,3,0,4,3,0,2,3,0,0,17,0,0,17,0,0,17,0,0,17,0,0,30,0,0,30,0,0,30,0,4,4,0,4,4,0,2,4,0,0,18,0,0,18,0,0,18,0,0,18,0,0,31,0,0,31,0,0,31,0,4,5,0,4,5,0,2,5,0,0,19,0,0,19,0,0,19,0,0,19,0,0,32,0,0,32,0,0,32,0,4,6,0,4,6,0,2,6,0,0,20,0,0,20,0,0,20,0,0,20,0,0,33,0,0,33,0,0,33,0,4,7,0,4,7,0,2,7,0,0,21,0,0,21,0,0,21,0,0,21,0,0,34,0,0,34,0,0,34,0,4,8,0,4,8,0,2,8,0,0,22,0,0,22,0,0,22,0,0,22,0,0,35,0,0,35,0,0,35,0,4,9,0,4,9,0,2,9,0,0,23,0,0,23,0,0,23,0,0,23,0,0,36,0,0,36,0,0,36,0,4,10,0,4,10,0,2,10,0,0,24,0,0,24,0,0,24,0,0,24,0,0,37,0,0,37,0,0,37,0,4,11,0,4,11,0,2,11,0,0,25,0,0,25,0,0,25,0,0,25,0,0,38,0,0,38,0,0,38,0,4,12,0,4,12,0,2,12,0,0,26,0,0,26,0,0,26,0,0,26,0,0,39,0,0,39,0,0,39,0,4,13,0,4,13,0,2,13,0,0,27,0,0,27,0,0,27,0,0,27,0,0,40,0,0,40,0,0,40,0,4,14,0,4,14,0,2,14,0,5,1,157],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1],[26,12,26,12,26,12,26,12,26,12,26,12,26,12,26,12,26,12,26,12,26,12,26,12,26,12]],[[[15,"Men04_c"],[18,"Men04_c",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["8a0/zKUVVWtq7cJDzFxdH9"]],[1,["8a0/zKUVVWtq7cJDzFxdH9"]],[1,["8a0/zKUVVWtq7cJDzFxdH9"]],[3,0,{},1,[4,"8a0/zKUVVWtq7cJDzFxdH9",null,null,-11,[7,"72Vg/ctnlNDrmebtq1UtVq",1,[[2,"zhalan_04_c",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[5,["_materials","0"],-8,1],[2,1,["_shadowCastingMode"],-9],[2,0,["_shadowReceivingMode"],-10]]],0]],[1,["56EON+NUBaqa92wWGAM9f8"]],[3,0,{},1,[4,"8a0/zKUVVWtq7cJDzFxdH9",null,null,-15,[7,"3ebY5lIKBHtZUdmCwXe+vw",1,[[2,"zhalan_04_c-001",["_name"],3],[0,["_lpos"],3,[1,0,0,4.13]],[0,["_lrot"],3,[3,0,0,0,1]],[0,["_euler"],3,[1,0,0,0]],[5,["_materials","0"],-12,3],[2,1,["_shadowCastingMode"],-13],[2,0,["_shadowReceivingMode"],-14]]],2]],[1,["56EON+NUBaqa92wWGAM9f8"]],[3,0,{},1,[4,"8a0/zKUVVWtq7cJDzFxdH9",null,null,-19,[7,"a9MKQbxpdBs5Ro1KW1wc+4",1,[[2,"zhalan_04_c-002",["_name"],4],[0,["_lpos"],4,[1,1.86,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[5,["_materials","0"],-16,5],[2,1,["_shadowCastingMode"],-17],[2,0,["_shadowReceivingMode"],-18]]],4]],[1,["56EON+NUBaqa92wWGAM9f8"]]],0,[0,-1,9,0,-2,7,0,-3,5,0,2,1,0,-1,5,0,-2,7,0,-3,9,0,0,6,0,0,6,0,0,6,0,2,5,0,0,8,0,0,8,0,0,8,0,2,7,0,0,10,0,0,10,0,0,10,0,2,9,0,5,1,19],[0,0,0,0,0,0],[3,1,3,1,3,1],[71,12,71,12,71,12]],[[[32,"zhalan_05",[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_1ST_SHADE_MAP":true,"SHADE_MAP_1_AS_SHADE_MAP_2":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{"rasterizerState":{"polygonMode":2,"lineWidth":0},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},[{"rasterizerState":{"depthBias":1.9,"depthBiasClamp":-2.4,"lineWidth":5.2},"depthStencilState":{}},"blendState",11,[{"targets":[{}]},"blendColor",8,[4,4292072403]]],{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],0,0,11,0],[[[{"lineWidth":25},"baseColor",8,[4,4279637526]],[{"baseStep":1.9,"baseFeather":0.2,"shadeStep":2.6,"shadeFeather":2.101,"shadowCover":0.622},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4294967295],"shadeColor2",8,[4,4283058766],"specular",8,[4,1275068416],"shadeMap1",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[12,6],[103,32]],[[[17,".bin",2065509550,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":38832,"length":2868,"count":1434,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":38832,"count":809,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.8902320861816406,-0.2876381576061249,-0.026798095554113388],"maxPosition",8,[1,0.9871801733970642,0.4093046486377716,0.9329296350479126]]],-1],0,0,[],[],[]],[[[15,"Men04_a"],[18,"Men04_a",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["09eoA6f7dVI610Y+9edNzX"]],[1,["09eoA6f7dVI610Y+9edNzX"]],[1,["09eoA6f7dVI610Y+9edNzX"]],[3,0,{},1,[4,"09eoA6f7dVI610Y+9edNzX",null,null,-11,[7,"b3RGkIVDZPKIpX5LP93M4k",1,[[2,"zhalan_04_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],-8],[2,0,["_shadowReceivingMode"],-9],[5,["_materials","0"],-10,1]]],0]],[1,["2dmx8bZVpf2qLwoCHchrnS"]],[3,0,{},1,[4,"09eoA6f7dVI610Y+9edNzX",null,null,-15,[7,"715snqShhFzrjf+NF1+3sh",1,[[2,"zhalan_04_a-001",["_name"],3],[0,["_lpos"],3,[1,0,0,4.13]],[0,["_lrot"],3,[3,0,0,0,1]],[0,["_euler"],3,[1,0,0,0]],[2,1,["_shadowCastingMode"],-12],[2,0,["_shadowReceivingMode"],-13],[5,["_materials","0"],-14,3]]],2]],[1,["2dmx8bZVpf2qLwoCHchrnS"]],[3,0,{},1,[4,"09eoA6f7dVI610Y+9edNzX",null,null,-19,[7,"0ccxhXPdpHd4dEQHopokDz",1,[[2,"zhalan_04_a-002",["_name"],4],[0,["_lpos"],4,[1,1.86,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],-16],[2,0,["_shadowReceivingMode"],-17],[5,["_materials","0"],-18,5]]],4]],[1,["2dmx8bZVpf2qLwoCHchrnS"]]],0,[0,-1,9,0,-2,7,0,-3,5,0,2,1,0,-1,5,0,-2,7,0,-3,9,0,0,6,0,0,6,0,0,6,0,2,5,0,0,8,0,0,8,0,0,8,0,2,7,0,0,10,0,0,10,0,0,10,0,2,9,0,5,1,19],[0,0,0,0,0,0],[3,1,3,1,3,1],[26,12,26,12,26,12]],[[[15,"AssetsMapItem"],[71,"AssetsMapItem",[[97,-2,[6,"d0ot8AqdJOmYl8SSnTw+SY"],0,1,2]],[12,"95MWdutkRCgLKpZyBWY55b",null,null,null,-1,0]]],0,[0,2,1,0,4,1,0,5,1,2],[0,0,0],[20,21,22],[258,259,260]],[[[15,"Men08_c"],[18,"Men08_c",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-8,[7,"9ekJsc5PtOlY5FFlsdntOk",1,[[2,"zhanlan_06_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],3],[2,0,["_shadowReceivingMode"],3],[5,["_materials","0"],3,1],[5,["_mesh"],3,2]]],0]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-9,[7,"davd4Bt4NB3blVYs0NtRRA",1,[[2,"zhanlan_06_a-001",["_name"],4],[0,["_lpos"],4,[1,0,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],5],[2,0,["_shadowReceivingMode"],5],[5,["_materials","0"],5,4],[5,["_mesh"],5,5]]],3]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-10,[7,"93jUXOLRpHdLf/e5IlkA9S",1,[[2,"zhanlan_06_a-002",["_name"],6],[0,["_lpos"],6,[1,1.86,0,4.13]],[0,["_lrot"],6,[3,0,0,0,1]],[0,["_euler"],6,[1,0,0,0]],[2,1,["_shadowCastingMode"],7],[2,0,["_shadowReceivingMode"],7],[5,["_materials","0"],7,7],[5,["_mesh"],7,8]]],6]]],0,[0,-1,10,0,-2,9,0,-3,8,0,2,1,0,-1,8,0,-2,9,0,-3,10,0,2,8,0,2,9,0,2,10,0,5,1,10],[0,0,0,0,0,0,0,0,0],[3,1,1,3,1,1,3,1,1],[0,7,72,0,7,72,0,7,72]],[[[19,"Material #9",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[8,6],[261,4]],[[[24],[20,"zhalan_01_d",[-2],[12,"fb+gvy9WpXO7oqeswSlhWE",null,null,null,-1,0]],[23,"zhalan_01_d",1,[[22,-3,[6,"60GV/aqoxS95YInC+CaR7t"],[0],[21],1]],[12,"49XFRSin1cVKBDAy0Fw7L/",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[262,263]],[[[17,".bin",970097524,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":25344,"length":1068,"count":534,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":25344,"count":528,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9815658330917358,-0.3333160877227783,-0.008967017754912376],"maxPosition",8,[1,0.925670325756073,0.4093046486377716,0.6157986521720886]]],-1],0,0,[],[],[]],[[[19,"Material #208",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[8,6],[264,4]],[[[24],[20,"zhanlan_06_a",[-2],[12,"55+gboV2dXaoT/e1RIJ5LE",null,null,null,-1,0]],[23,"zhalan_06_a",1,[[22,-3,[6,"afYWuJCeVfJofWrNDAty6k"],[0],[21],1]],[12,"f5h+37kmRWI5doyE2Cza/1",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[265,266]],[[[17,".bin",2798540458,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7488,"length":672,"count":336,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":7488,"count":156,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9157957434654236,-0.1827956587076187,-3.3881317132865545e-23],"maxPosition",8,[1,0.9157957434654236,0.1827956587076187,0.9103342294692993]]],-1],0,0,[],[],[]],[[[17,".bin",2498045241,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":68592,"length":3228,"count":1614,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":68592,"count":1429,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.044071078300476,-0.5305119752883911,-0.024665413424372673],"maxPosition",8,[1,1.033291220664978,0.4093046486377716,0.3589133024215698]]],-1],0,0,[],[],[]],[[[24],[20,"zhanlan_10_a",[-2],[12,"f8QAze9KhZLoecsUXld02S",null,null,null,-1,0]],[23,"zhalan_10_a",1,[[22,-3,[6,"27+zJTmtRT2YEFA8eM/OvY"],[0],[21],1]],[12,"9fjgzGD4lc/YffQjZrFTEq",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[267,38]],[[[17,".bin",1423036277,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14016,"length":1056,"count":528,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":14016,"count":292,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9442005157470703,-0.23832754790782928,0],"maxPosition",8,[1,0.9442005157470703,0.23832754790782928,1.0135037899017334]]],-1],0,0,[],[],[]],[[[19,"Material #214",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[8,6],[268,4]],[[[15,"Men01_a"],[18,"Men01_a",[-5,-6,-7],[16,"8a17anT+FClJ+7NgD4Cuav",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["d9OaTkBx1QTrjuVSbuMCXd"]],[1,["d9OaTkBx1QTrjuVSbuMCXd"]],[1,["d9OaTkBx1QTrjuVSbuMCXd"]],[3,0,null,1,[4,"d9OaTkBx1QTrjuVSbuMCXd",null,null,-11,[7,"65PBg5AkRD45iAjR8nmqhK",1,[[2,"zhalan_01_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],-8],[2,0,["_shadowReceivingMode"],-9],[5,["_materials","0"],-10,1],[0,["_lscale"],2,[1,1,1,1]]]],0]],[1,["c5qgfp+7hUy71DslW1Gvp8"]],[3,0,null,1,[4,"d9OaTkBx1QTrjuVSbuMCXd",null,null,-15,[7,"e38u5BPxFFQ4W+f8yX7cWp",1,[[2,"zhalan_01_a-001",["_name"],3],[0,["_lpos"],3,[1,0,0,4.13]],[0,["_lrot"],3,[3,0,0,0,1]],[0,["_euler"],3,[1,0,0,0]],[2,1,["_shadowCastingMode"],-12],[2,0,["_shadowReceivingMode"],-13],[5,["_materials","0"],-14,3],[0,["_lscale"],3,[1,1,1,1]]]],2]],[1,["c5qgfp+7hUy71DslW1Gvp8"]],[3,0,null,1,[4,"d9OaTkBx1QTrjuVSbuMCXd",null,null,-19,[7,"848KKM0KBFLZzm0iHj5xJv",1,[[2,"zhalan_01_a-002",["_name"],4],[0,["_lpos"],4,[1,1.86,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],-16],[2,0,["_shadowReceivingMode"],-17],[5,["_materials","0"],-18,5],[0,["_lscale"],4,[1,1,1,1]]]],4]],[1,["c5qgfp+7hUy71DslW1Gvp8"]]],0,[0,-1,9,0,-2,7,0,-3,5,0,2,1,0,-1,5,0,-2,7,0,-3,9,0,0,6,0,0,6,0,0,6,0,2,5,0,0,8,0,0,8,0,0,8,0,2,7,0,0,10,0,0,10,0,0,10,0,2,9,0,5,1,19],[0,0,0,0,0,0],[3,1,3,1,3,1],[23,1,23,1,23,1]],[[[15,"Men06_d"],[18,"Men06_d",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-8,[7,"9ekJsc5PtOlY5FFlsdntOk",1,[[2,"zhanlan_06_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],3],[2,0,["_shadowReceivingMode"],3],[5,["_materials","0"],3,1],[5,["_mesh"],3,2]]],0]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-9,[7,"davd4Bt4NB3blVYs0NtRRA",1,[[2,"zhanlan_06_a-001",["_name"],4],[0,["_lpos"],4,[1,0,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],5],[2,0,["_shadowReceivingMode"],5],[5,["_materials","0"],5,4],[5,["_mesh"],5,5]]],3]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-10,[7,"93jUXOLRpHdLf/e5IlkA9S",1,[[2,"zhanlan_06_a-002",["_name"],6],[0,["_lpos"],6,[1,1.86,0,4.13]],[0,["_lrot"],6,[3,0,0,0,1]],[0,["_euler"],6,[1,0,0,0]],[2,1,["_shadowCastingMode"],7],[2,0,["_shadowReceivingMode"],7],[5,["_materials","0"],7,7],[5,["_mesh"],7,8]]],6]]],0,[0,-1,10,0,-2,9,0,-3,8,0,2,1,0,-1,8,0,-2,9,0,-3,10,0,2,8,0,2,9,0,2,10,0,5,1,10],[0,0,0,0,0,0,0,0,0],[3,1,1,3,1,1,3,1,1],[0,11,73,0,11,73,0,11,73]],[[[15,"Men08_b"],[18,"Men08_b",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-8,[7,"9ekJsc5PtOlY5FFlsdntOk",1,[[2,"zhanlan_06_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],3],[2,0,["_shadowReceivingMode"],3],[5,["_materials","0"],3,1],[5,["_mesh"],3,2]]],0]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-9,[7,"davd4Bt4NB3blVYs0NtRRA",1,[[2,"zhanlan_06_a-001",["_name"],4],[0,["_lpos"],4,[1,0,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],5],[2,0,["_shadowReceivingMode"],5],[5,["_materials","0"],5,4],[5,["_mesh"],5,5]]],3]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-10,[7,"93jUXOLRpHdLf/e5IlkA9S",1,[[2,"zhanlan_06_a-002",["_name"],6],[0,["_lpos"],6,[1,1.86,0,4.13]],[0,["_lrot"],6,[3,0,0,0,1]],[0,["_euler"],6,[1,0,0,0]],[2,1,["_shadowCastingMode"],7],[2,0,["_shadowReceivingMode"],7],[5,["_materials","0"],7,7],[5,["_mesh"],7,8]]],6]]],0,[0,-1,10,0,-2,9,0,-3,8,0,2,1,0,-1,8,0,-2,9,0,-3,10,0,2,8,0,2,9,0,2,10,0,5,1,10],[0,0,0,0,0,0,0,0,0],[3,1,1,3,1,1,3,1,1],[0,7,74,0,7,74,0,7,74]],[[[17,".bin",3165631992,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":59712,"length":2964,"count":1482,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":59712,"count":1244,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9480433464050293,-0.45646917819976807,-0.006296136416494846],"maxPosition",8,[1,1.0698601007461548,0.43724724650382996,0.28627684712409973]]],-1],0,0,[],[],[]],[[[32,"zhalan_02",[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_1ST_SHADE_MAP":true,"SHADE_MAP_1_AS_SHADE_MAP_2":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{"rasterizerState":{"polygonMode":2,"lineWidth":0},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},[{"rasterizerState":{"depthBias":1.9,"depthBiasClamp":-2.4,"lineWidth":5.2},"depthStencilState":{}},"blendState",11,[{"targets":[{}]},"blendColor",8,[4,4292072403]]],{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],0,0,11,0],[[[{"lineWidth":25},"baseColor",8,[4,4279637526]],[{"baseStep":1.9,"baseFeather":0.2,"shadeStep":2.6,"shadeFeather":2.101,"shadowCover":0.622},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4294967295],"shadeColor2",8,[4,4283058766],"specular",8,[4,1275068416],"shadeMap1",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[12,6],[101,32]],[[[15,"Men06_e"],[18,"Men06_e",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-8,[7,"9ekJsc5PtOlY5FFlsdntOk",1,[[2,"zhanlan_06_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],3],[2,0,["_shadowReceivingMode"],3],[5,["_materials","0"],3,1],[5,["_mesh"],3,2]]],0]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-9,[7,"davd4Bt4NB3blVYs0NtRRA",1,[[2,"zhanlan_06_a-001",["_name"],4],[0,["_lpos"],4,[1,0,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],5],[2,0,["_shadowReceivingMode"],5],[5,["_materials","0"],5,4],[5,["_mesh"],5,5]]],3]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-10,[7,"93jUXOLRpHdLf/e5IlkA9S",1,[[2,"zhanlan_06_a-002",["_name"],6],[0,["_lpos"],6,[1,1.86,0,4.13]],[0,["_lrot"],6,[3,0,0,0,1]],[0,["_euler"],6,[1,0,0,0]],[2,1,["_shadowCastingMode"],7],[2,0,["_shadowReceivingMode"],7],[5,["_materials","0"],7,7],[5,["_mesh"],7,8]]],6]]],0,[0,-1,10,0,-2,9,0,-3,8,0,2,1,0,-1,8,0,-2,9,0,-3,10,0,2,8,0,2,9,0,2,10,0,5,1,10],[0,0,0,0,0,0,0,0,0],[3,1,1,3,1,1,3,1,1],[0,11,75,0,11,75,0,11,75]],[[[19,"New_zhalan_06",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{"lineWidth":25},[{"baseStep":0.9,"baseFeather":0.3,"shadeStep":0.6,"shadeFeather":-0.3,"shadowCover":0},"mainColor",8,[4,4290822336],"shadeColor1",8,[4,4285624697],"shadeColor2",8,[4,4287006342],"specular",8,[4,4278190080],"mainTexture",6,0,"emissiveMap",6,1],{},{}],0,11,0,0]]],0,0,[0,0,0],[8,9,6],[105,27,24]],[[[15,"homezhalan05"],[20,"homezhalan05",[-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27],[16,"f5Crz/W5xCRpcO8MeMlG+z",null,null,-14,0,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[3,0,null,1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-37,[13,"9dfMDsu7dLdLSgTrp0K9Bc",1,[[9,[1,["55+gboV2dXaoT/e1RIJ5LE"]],[[10,-35,[6,"f5RgtCQpNH7bTcJl3ikWuT"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-36,[6,"0fsj+w6IRKOLODV3l9YNbP"]]]]],[[2,"zhanlan_06_a",["_name"],-28],[0,["_lpos"],-29,[1,3,0,1.429]],[0,["_lrot"],-30,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-31,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-32],[2,0,["_shadowReceivingMode"],-33],[5,["_materials","0"],-34,1]]],0]],[3,0,null,1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-47,[13,"3ax74ttC1BTYvLQ6l1LinP",1,[[9,[1,["55+gboV2dXaoT/e1RIJ5LE"]],[[10,-45,[6,"76t8iegKBJ+6XEY8VhXFaY"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-46,[6,"039kDHRZFO97tNtHLh+nxK"]]]]],[[2,"zhanlan_06_a-001",["_name"],-38],[0,["_lpos"],-39,[1,3,0,-0.486]],[0,["_lrot"],-40,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-41,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-42],[2,0,["_shadowReceivingMode"],-43],[5,["_materials","0"],-44,3]]],2]],[3,0,null,1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-57,[13,"45iPEprcZG/I+068RhxYv0",1,[[9,[1,["55+gboV2dXaoT/e1RIJ5LE"]],[[10,-55,[6,"56Xb1jrDRJnYNmz6Ub/0zJ"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-56,[6,"0daK2oa1FEgaxNC4T753tE"]]]]],[[2,"zhanlan_06_a-002",["_name"],-48],[0,["_lpos"],-49,[1,3,0,-2.388]],[0,["_lrot"],-50,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-51,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-52],[2,0,["_shadowReceivingMode"],-53],[5,["_materials","0"],-54,5]]],4]],[3,0,null,1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-67,[13,"a9mOX1MUtLi5riOrORF/5m",1,[[9,[1,["55+gboV2dXaoT/e1RIJ5LE"]],[[10,-65,[6,"db5PDn61lJbokVxK6cabim"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-66,[6,"b2bYMIBG9KSLfXmmB6Gb17"]]]]],[[2,"zhanlan_06_a-003",["_name"],-58],[0,["_lpos"],-59,[1,3,0,-4.29]],[0,["_lrot"],-60,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-61,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-62],[2,0,["_shadowReceivingMode"],-63],[5,["_materials","0"],-64,7]]],6]],[3,0,null,1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-77,[13,"a2wqe9ivlFl6V3uZzGb54i",1,[[9,[1,["55+gboV2dXaoT/e1RIJ5LE"]],[[10,-75,[6,"78TDrnZhNGHYWLUW43en0y"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-76,[6,"c1nf9r061PW68+CY5GBTGO"]]]]],[[2,"zhanlan_06_a-004",["_name"],-68],[0,["_lpos"],-69,[1,-3,0,-0.486]],[0,["_lrot"],-70,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-71,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-72],[2,0,["_shadowReceivingMode"],-73],[5,["_materials","0"],-74,9]]],8]],[3,0,null,1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-87,[13,"a0P0BQ1DlHfKiMB8x6E7wl",1,[[9,[1,["55+gboV2dXaoT/e1RIJ5LE"]],[[10,-85,[6,"5020+angdCLZTxloYbZeKg"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-86,[6,"7c+KJaAhBP15+8DsVckuro"]]]]],[[2,"zhanlan_06_a-005",["_name"],-78],[0,["_lpos"],-79,[1,-3,0,-2.388]],[0,["_lrot"],-80,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-81,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-82],[2,0,["_shadowReceivingMode"],-83],[5,["_materials","0"],-84,11]]],10]],[3,0,null,1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-97,[13,"2bj2jAI2VK7I+3NK19EQ7j",1,[[9,[1,["55+gboV2dXaoT/e1RIJ5LE"]],[[10,-95,[6,"75MZX42KZNF5Ioyx6iDVTW"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-96,[6,"0e5ONvBiVGY7FmFqN8ZqrC"]]]]],[[2,"zhanlan_06_a-006",["_name"],-88],[0,["_lpos"],-89,[1,-3,0,-4.29]],[0,["_lrot"],-90,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-91,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-92],[2,0,["_shadowReceivingMode"],-93],[5,["_materials","0"],-94,13]]],12]],[3,0,null,1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-107,[13,"4fQrdwDNdJRovjMqJFDLgW",1,[[9,[1,["55+gboV2dXaoT/e1RIJ5LE"]],[[10,-105,[6,"76PeQspiNIB7L2042uWf/y"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-106,[6,"9fbWSMWvxLn5oZuKtW4Hyz"]]]]],[[2,"zhanlan_06_a-007",["_name"],-98],[0,["_lpos"],-99,[1,-3,0,1.429]],[0,["_lrot"],-100,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-101,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-102],[2,0,["_shadowReceivingMode"],-103],[5,["_materials","0"],-104,15]]],14]],[3,0,null,1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-117,[13,"9dJ6hfrCJK45hH2Svg5Bku",1,[[9,[1,["55+gboV2dXaoT/e1RIJ5LE"]],[[10,-115,[6,"30D9faqsNE4asKCyBEG9ko"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-116,[6,"4fKr3FGXFIApoj9BZwNYWM"]]]]],[[2,"zhanlan_06_a-008",["_name"],-108],[0,["_lpos"],-109,[1,1.86,0,-5.122]],[0,["_lrot"],-110,[3,0,0,0,1]],[0,["_euler"],-111,[1,0,0,0]],[2,1,["_shadowCastingMode"],-112],[2,0,["_shadowReceivingMode"],-113],[5,["_materials","0"],-114,17]]],16]],[3,0,null,1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-127,[13,"2391j++TZEG6CkEq8sFu73",1,[[9,[1,["55+gboV2dXaoT/e1RIJ5LE"]],[[10,-125,[6,"2dsWqzK5BNB6FoMhGinYx9"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-126,[6,"b0/PPw/K5GLaXVQ8GZXoWD"]]]]],[[2,"zhanlan_06_a-009",["_name"],-118],[0,["_lpos"],-119,[1,0,0,-5.122]],[0,["_lrot"],-120,[3,0,0,0,1]],[0,["_euler"],-121,[1,0,0,0]],[2,1,["_shadowCastingMode"],-122],[2,0,["_shadowReceivingMode"],-123],[5,["_materials","0"],-124,19]]],18]],[3,0,null,1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-137,[13,"a5XSaYPQxMRquRBbaTXMou",1,[[9,[1,["55+gboV2dXaoT/e1RIJ5LE"]],[[10,-135,[6,"6eBC1VE/tFn4OucO2XLSSF"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-136,[6,"31BLTCh9RCzb7LSVMCvXRv"]]]]],[[2,"zhanlan_06_a-010",["_name"],-128],[0,["_lpos"],-129,[1,-1.86,0,-5.122]],[0,["_lrot"],-130,[3,0,0,0,1]],[0,["_euler"],-131,[1,0,0,0]],[2,1,["_shadowCastingMode"],-132],[2,0,["_shadowReceivingMode"],-133],[5,["_materials","0"],-134,21]]],20]],[3,0,null,1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-147,[13,"b81q7VY05ELYpMit9iNxhW",1,[[9,[1,["55+gboV2dXaoT/e1RIJ5LE"]],[[10,-145,[6,"16pqEmjuJJCrYI7bfbRqOe"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-146,[6,"30ND35yY5KSpoxXd0Q+lpT"]]]]],[[2,"zhanlan_06_a-011",["_name"],-138],[0,["_lpos"],-139,[1,3,0,3.316]],[0,["_lrot"],-140,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-141,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-142],[2,0,["_shadowReceivingMode"],-143],[5,["_materials","0"],-144,23]]],22]],[3,0,null,1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-157,[13,"633bM3fepOP4PsFOOT18Zm",1,[[9,[1,["55+gboV2dXaoT/e1RIJ5LE"]],[[10,-155,[6,"9ev1Rw5GdNsrszGU/OxLnK"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-156,[6,"c40oD7jpFAPLgVjzQ33vSw"]]]]],[[2,"zhanlan_06_a-012",["_name"],-148],[0,["_lpos"],-149,[1,-3,0,3.316]],[0,["_lrot"],-150,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-151,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-152],[2,0,["_shadowReceivingMode"],-153],[5,["_materials","0"],-154,25]]],24]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["afYWuJCeVfJofWrNDAty6k"]]],0,[0,-1,14,0,-2,13,0,-3,12,0,-4,11,0,-5,10,0,-6,9,0,-7,8,0,-8,7,0,-9,6,0,-10,5,0,-11,4,0,-12,3,0,-13,2,0,2,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,-5,6,0,-6,7,0,-7,8,0,-8,9,0,-9,10,0,-10,11,0,-11,12,0,-12,13,0,-13,14,0,0,15,0,0,15,0,0,15,0,0,15,0,0,28,0,0,28,0,0,28,0,4,2,0,4,2,0,2,2,0,0,16,0,0,16,0,0,16,0,0,16,0,0,29,0,0,29,0,0,29,0,4,3,0,4,3,0,2,3,0,0,17,0,0,17,0,0,17,0,0,17,0,0,30,0,0,30,0,0,30,0,4,4,0,4,4,0,2,4,0,0,18,0,0,18,0,0,18,0,0,18,0,0,31,0,0,31,0,0,31,0,4,5,0,4,5,0,2,5,0,0,19,0,0,19,0,0,19,0,0,19,0,0,32,0,0,32,0,0,32,0,4,6,0,4,6,0,2,6,0,0,20,0,0,20,0,0,20,0,0,20,0,0,33,0,0,33,0,0,33,0,4,7,0,4,7,0,2,7,0,0,21,0,0,21,0,0,21,0,0,21,0,0,34,0,0,34,0,0,34,0,4,8,0,4,8,0,2,8,0,0,22,0,0,22,0,0,22,0,0,22,0,0,35,0,0,35,0,0,35,0,4,9,0,4,9,0,2,9,0,0,23,0,0,23,0,0,23,0,0,23,0,0,36,0,0,36,0,0,36,0,4,10,0,4,10,0,2,10,0,0,24,0,0,24,0,0,24,0,0,24,0,0,37,0,0,37,0,0,37,0,4,11,0,4,11,0,2,11,0,0,25,0,0,25,0,0,25,0,0,25,0,0,38,0,0,38,0,0,38,0,4,12,0,4,12,0,2,12,0,0,26,0,0,26,0,0,26,0,0,26,0,0,39,0,0,39,0,0,39,0,4,13,0,4,13,0,2,13,0,0,27,0,0,27,0,0,27,0,0,27,0,0,40,0,0,40,0,0,40,0,4,14,0,4,14,0,2,14,0,5,1,157],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1],[0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,11]],[[[17,".bin",3168832940,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19776,"length":1116,"count":558,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":19776,"count":412,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9256495833396912,-0.33562493324279785,0],"maxPosition",8,[1,0.9297769069671631,0.22456498444080353,0.9180463552474976]]],-1],0,0,[],[],[]],[[[24],[20,"zhalan_03_b",[-2],[12,"48bkQEunpQQa6Yc62O21+M",null,null,null,-1,0]],[23,"zhalan_03_b",1,[[22,-3,[6,"a0Z33SV9hZf4umhR0sEIOw"],[0],[21],1]],[12,"f5TMa3gltSUZicjjhu7krT",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[269,270]],[[[19,"22 - Default",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":1.9999998807907104,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[6],[4]],[[[15,"Men05_d"],[18,"Men05_d",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["316nCbP+xcD4NGNKzqmvdu"]],[1,["316nCbP+xcD4NGNKzqmvdu"]],[1,["316nCbP+xcD4NGNKzqmvdu"]],[3,0,{},1,[4,"316nCbP+xcD4NGNKzqmvdu",null,null,-11,[7,"4ad0tamfZOjIPmu/JKMteK",1,[[2,"zhalan_05_d",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],-8],[2,0,["_shadowReceivingMode"],-9],[5,["_materials","0"],-10,1]]],0]],[1,["78ugr2twhS8KA3HFPmrZkr"]],[3,0,{},1,[4,"316nCbP+xcD4NGNKzqmvdu",null,null,-15,[7,"5axQ4c/ttNfIbIweZMkr6j",1,[[2,"zhalan_05_d-001",["_name"],3],[0,["_lpos"],3,[1,0,0,4.13]],[0,["_lrot"],3,[3,0,0,0,1]],[0,["_euler"],3,[1,0,0,0]],[2,1,["_shadowCastingMode"],-12],[2,0,["_shadowReceivingMode"],-13],[5,["_materials","0"],-14,3]]],2]],[1,["78ugr2twhS8KA3HFPmrZkr"]],[3,0,{},1,[4,"316nCbP+xcD4NGNKzqmvdu",null,null,-19,[7,"1bYQX9T65HY7kAvrNxgaQD",1,[[2,"zhalan_05_d-002",["_name"],4],[0,["_lpos"],4,[1,1.86,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],-16],[2,0,["_shadowReceivingMode"],-17],[5,["_materials","0"],-18,5]]],4]],[1,["78ugr2twhS8KA3HFPmrZkr"]]],0,[0,-1,9,0,-2,7,0,-3,5,0,2,1,0,-1,5,0,-2,7,0,-3,9,0,0,6,0,0,6,0,0,6,0,2,5,0,0,8,0,0,8,0,0,8,0,2,7,0,0,10,0,0,10,0,0,10,0,2,9,0,5,1,19],[0,0,0,0,0,0],[3,1,3,1,3,1],[76,9,76,9,76,9]],[[[24],[20,"zhalan_04_b",[-2],[12,"f9+UWHyvlen7L1mpphFtbv",null,null,null,-1,0]],[23,"zhalan_04_b",1,[[22,-3,[6,"a1wZSQjC5VQbS9ai+P4oFM"],[0],[21],1]],[12,"b8qdNIE61c4ZhORNdZvZtZ",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[271,272]],[[[19,"Material #1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[8,6],[273,4]],[[[17,".bin",1645504767,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":31248,"length":1908,"count":954,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":31248,"count":651,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9514735341072083,-0.12903113663196564,0.009475059807300568],"maxPosition",8,[1,0.9508530497550964,0.28192129731178284,0.8863823413848877]]],-1],0,0,[],[],[]],[[[15,"homezhalan02"],[20,"homezhalan02",[-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27],[16,"f5Crz/W5xCRpcO8MeMlG+z",null,null,-14,0,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[1,["f7f/SnzaFeKKwX9YRIdClj"]],[3,0,{},1,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-31,[7,"27p+PnyXJPg43LHtf2BSzf",1,[[2,"zhalan_03_a",["_name"],2],[0,["_lpos"],2,[1,3,0,1.429]],[0,["_lrot"],2,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],2,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-28],[2,0,["_shadowReceivingMode"],-29],[5,["_materials","0"],-30,1]]],0]],[1,["14cUAMsiRZQrJAuHxu8aso"]],[3,0,{},1,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-35,[7,"3byPkltYpHU73IWYztu/RB",1,[[2,"zhalan_03_a-001",["_name"],3],[0,["_lpos"],3,[1,3,0,-0.486]],[0,["_lrot"],3,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],3,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-32],[2,0,["_shadowReceivingMode"],-33],[5,["_materials","0"],-34,3]]],2]],[1,["14cUAMsiRZQrJAuHxu8aso"]],[3,0,{},1,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-39,[7,"b3kV1JK/RBmYl0ybNWaMJo",1,[[2,"zhalan_03_a-002",["_name"],4],[0,["_lpos"],4,[1,3,0,-2.388]],[0,["_lrot"],4,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],4,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-36],[2,0,["_shadowReceivingMode"],-37],[5,["_materials","0"],-38,5]]],4]],[1,["14cUAMsiRZQrJAuHxu8aso"]],[3,0,{},1,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-43,[7,"3cjEuwCrFKv4Ao100Cics7",1,[[2,"zhalan_03_a-003",["_name"],5],[0,["_lpos"],5,[1,3,0,-4.29]],[0,["_lrot"],5,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],5,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-40],[2,0,["_shadowReceivingMode"],-41],[5,["_materials","0"],-42,7]]],6]],[1,["14cUAMsiRZQrJAuHxu8aso"]],[3,0,{},1,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-47,[7,"64uhCzcNxLtJ3L0u1tKM7L",1,[[2,"zhalan_03_a-004",["_name"],6],[0,["_lpos"],6,[1,-3,0,-0.486]],[0,["_lrot"],6,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],6,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-44],[2,0,["_shadowReceivingMode"],-45],[5,["_materials","0"],-46,9]]],8]],[1,["14cUAMsiRZQrJAuHxu8aso"]],[3,0,{},1,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-51,[7,"b472U6RPxHjJI8bZ2PNjFh",1,[[2,"zhalan_03_a-005",["_name"],7],[0,["_lpos"],7,[1,-3,0,-2.388]],[0,["_lrot"],7,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],7,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-48],[2,0,["_shadowReceivingMode"],-49],[5,["_materials","0"],-50,11]]],10]],[1,["14cUAMsiRZQrJAuHxu8aso"]],[3,0,{},1,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-55,[7,"27s92O0QhPhrfJx8Gks+hs",1,[[2,"zhalan_03_a-006",["_name"],8],[0,["_lpos"],8,[1,-3,0,-4.29]],[0,["_lrot"],8,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],8,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-52],[2,0,["_shadowReceivingMode"],-53],[5,["_materials","0"],-54,13]]],12]],[1,["14cUAMsiRZQrJAuHxu8aso"]],[3,0,{},1,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-59,[7,"89FJTzcLJCcKUG8aRKWQSD",1,[[2,"zhalan_03_a-007",["_name"],9],[0,["_lpos"],9,[1,-3,0,1.429]],[0,["_lrot"],9,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],9,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-56],[2,0,["_shadowReceivingMode"],-57],[5,["_materials","0"],-58,15]]],14]],[1,["14cUAMsiRZQrJAuHxu8aso"]],[3,0,{},1,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-63,[7,"23Pn+WQe9Phpja1i3pggd/",1,[[2,"zhalan_03_a-008",["_name"],10],[0,["_lpos"],10,[1,1.86,0,-5.122]],[0,["_lrot"],10,[3,0,0,0,1]],[0,["_euler"],10,[1,0,0,0]],[2,1,["_shadowCastingMode"],-60],[2,0,["_shadowReceivingMode"],-61],[5,["_materials","0"],-62,17]]],16]],[1,["14cUAMsiRZQrJAuHxu8aso"]],[3,0,{},1,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-67,[7,"3cRm1/6axIXrQDAhq7GzJc",1,[[2,"zhalan_03_a-009",["_name"],11],[0,["_lpos"],11,[1,0,0,-5.122]],[0,["_lrot"],11,[3,0,0,0,1]],[0,["_euler"],11,[1,0,0,0]],[2,1,["_shadowCastingMode"],-64],[2,0,["_shadowReceivingMode"],-65],[5,["_materials","0"],-66,19]]],18]],[1,["14cUAMsiRZQrJAuHxu8aso"]],[3,0,{},1,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-71,[7,"44Ey4gmqFHy52qJDZCLFdk",1,[[2,"zhalan_03_a-010",["_name"],12],[0,["_lpos"],12,[1,-1.86,0,-5.122]],[0,["_lrot"],12,[3,0,0,0,1]],[0,["_euler"],12,[1,0,0,0]],[2,1,["_shadowCastingMode"],-68],[2,0,["_shadowReceivingMode"],-69],[5,["_materials","0"],-70,21]]],20]],[1,["14cUAMsiRZQrJAuHxu8aso"]],[3,0,{},1,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-75,[7,"85H6s7wPhAd7XlGcQt4ShI",1,[[2,"zhalan_03_a-011",["_name"],13],[0,["_lpos"],13,[1,3,0,3.316]],[0,["_lrot"],13,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],13,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-72],[2,0,["_shadowReceivingMode"],-73],[5,["_materials","0"],-74,23]]],22]],[1,["14cUAMsiRZQrJAuHxu8aso"]],[3,0,{},1,[4,"f7f/SnzaFeKKwX9YRIdClj",null,null,-79,[7,"e3AAbz0o1OqbM85bh6TAiE",1,[[2,"zhalan_03_a-012",["_name"],14],[0,["_lpos"],14,[1,-3,0,3.316]],[0,["_lrot"],14,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],14,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-76],[2,0,["_shadowReceivingMode"],-77],[5,["_materials","0"],-78,25]]],24]],[1,["14cUAMsiRZQrJAuHxu8aso"]]],0,[0,-1,39,0,-2,37,0,-3,35,0,-4,33,0,-5,31,0,-6,29,0,-7,27,0,-8,25,0,-9,23,0,-10,21,0,-11,19,0,-12,17,0,-13,15,0,2,1,0,-1,15,0,-2,17,0,-3,19,0,-4,21,0,-5,23,0,-6,25,0,-7,27,0,-8,29,0,-9,31,0,-10,33,0,-11,35,0,-12,37,0,-13,39,0,0,16,0,0,16,0,0,16,0,2,15,0,0,18,0,0,18,0,0,18,0,2,17,0,0,20,0,0,20,0,0,20,0,2,19,0,0,22,0,0,22,0,0,22,0,2,21,0,0,24,0,0,24,0,0,24,0,2,23,0,0,26,0,0,26,0,0,26,0,2,25,0,0,28,0,0,28,0,0,28,0,2,27,0,0,30,0,0,30,0,0,30,0,2,29,0,0,32,0,0,32,0,0,32,0,2,31,0,0,34,0,0,34,0,0,34,0,2,33,0,0,36,0,0,36,0,0,36,0,2,35,0,0,38,0,0,38,0,0,38,0,2,37,0,0,40,0,0,40,0,0,40,0,2,39,0,5,1,79],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1],[6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3]],[[[19,"model_chuizi",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[[{"lineWidth":15},"baseColor",8,[4,4280620827]],[{"baseStep":1.9,"baseFeather":0.2,"shadeStep":2.6,"shadeFeather":2.101,"shadowCover":0.622},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4294967295],"shadeColor2",8,[4,4283058766],"specular",8,[4,1275068416],"mainTexture",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[8,6],[114,24]],[[[17,".bin",527339135,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27696,"length":1728,"count":864,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":27696,"count":577,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9226663112640381,-0.1003633514046669,0.009475059807300568],"maxPosition",8,[1,0.9267624020576477,0.08645978569984436,0.8863823413848877]]],-1],0,0,[],[],[]],[[[24],[20,"zhalan_04_a",[-2],[12,"09eoA6f7dVI610Y+9edNzX",null,null,null,-1,0]],[23,"zhalan_04_a",1,[[22,-3,[6,"2dmx8bZVpf2qLwoCHchrnS"],[0],[21],1]],[12,"4bgNPfDq9VCqHU+UEH0Cc/",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[274,275]],[[[19,"Material #1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[8,6],[276,4]],[[[15,"Men02_a"],[18,"Men02_a",[-5,-6,-7],[16,"66JYNjkVZI3pdh7qeqg2K1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[1,["21IRP2nUhYMpRrWKiVCdHa"]],[3,0,null,1,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-11,[7,"46awh1OChHHZ2GudadJrnL",1,[[2,"zhalan_02_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],-8],[2,0,["_shadowReceivingMode"],-9],[5,["_materials","0"],-10,1]]],0]],[1,["edqsqthixXaZPkhrcRbztd"]],[3,0,null,1,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-15,[7,"74vYX3NARH456pbdFkAFu0",1,[[2,"zhalan_02_a-001",["_name"],3],[0,["_lpos"],3,[1,0,0,4.13]],[0,["_lrot"],3,[3,0,0,0,1]],[0,["_euler"],3,[1,0,0,0]],[2,1,["_shadowCastingMode"],-12],[2,0,["_shadowReceivingMode"],-13],[5,["_materials","0"],-14,3]]],2]],[1,["edqsqthixXaZPkhrcRbztd"]],[3,0,null,1,[4,"21IRP2nUhYMpRrWKiVCdHa",null,null,-19,[7,"dcrPq4wX1CdJu9PWR7FVWp",1,[[2,"zhalan_02_a-002",["_name"],4],[0,["_lpos"],4,[1,1.86,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],-16],[2,0,["_shadowReceivingMode"],-17],[5,["_materials","0"],-18,5]]],4]],[1,["edqsqthixXaZPkhrcRbztd"]]],0,[0,-1,9,0,-2,7,0,-3,5,0,2,1,0,-1,5,0,-2,7,0,-3,9,0,0,6,0,0,6,0,0,6,0,2,5,0,0,8,0,0,8,0,0,8,0,2,7,0,0,10,0,0,10,0,0,10,0,2,9,0,5,1,19],[0,0,0,0,0,0],[3,1,3,1,3,1],[5,1,5,1,5,1]],[[[15,"Men04_e"],[18,"Men04_e",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["a5PuLsQJlQaYt+8CB5+42o"]],[1,["a5PuLsQJlQaYt+8CB5+42o"]],[1,["a5PuLsQJlQaYt+8CB5+42o"]],[3,0,{},1,[4,"a5PuLsQJlQaYt+8CB5+42o",null,null,-11,[7,"41uZdcT7hAtoGaQUlLHPKh",1,[[2,"zhalan_04_e",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[5,["_materials","0"],-8,1],[2,1,["_shadowCastingMode"],-9],[2,0,["_shadowReceivingMode"],-10]]],0]],[1,["9d4TQ4OghWAJIiv0HwiTFI"]],[3,0,{},1,[4,"a5PuLsQJlQaYt+8CB5+42o",null,null,-15,[7,"e648Cnnu9BmbZwVo8uAa+T",1,[[2,"zhalan_04_e-001",["_name"],3],[0,["_lpos"],3,[1,0,0,4.13]],[0,["_lrot"],3,[3,0,0,0,1]],[0,["_euler"],3,[1,0,0,0]],[5,["_materials","0"],-12,3],[2,1,["_shadowCastingMode"],-13],[2,0,["_shadowReceivingMode"],-14]]],2]],[1,["9d4TQ4OghWAJIiv0HwiTFI"]],[3,0,{},1,[4,"a5PuLsQJlQaYt+8CB5+42o",null,null,-19,[7,"a9OAwOY7NEt5yHjjbUYPgF",1,[[2,"zhalan_04_e-002",["_name"],4],[0,["_lpos"],4,[1,1.86,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[5,["_materials","0"],-16,5],[2,1,["_shadowCastingMode"],-17],[2,0,["_shadowReceivingMode"],-18]]],4]],[1,["9d4TQ4OghWAJIiv0HwiTFI"]]],0,[0,-1,9,0,-2,7,0,-3,5,0,2,1,0,-1,5,0,-2,7,0,-3,9,0,0,6,0,0,6,0,0,6,0,2,5,0,0,8,0,0,8,0,0,8,0,2,7,0,0,10,0,0,10,0,0,10,0,2,9,0,5,1,19],[0,0,0,0,0,0],[3,1,3,1,3,1],[77,12,77,12,77,12]],[[[19,"Material #179",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[8,6],[277,4]],[[[17,".bin",2697681535,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":54816,"length":3204,"count":1602,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":54816,"count":1142,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9537605047225952,-0.45646917819976807,-0.011725694872438908],"maxPosition",8,[1,0.9616842865943909,0.4726918339729309,0.73125821352005]]],-1],0,0,[],[],[]],[[[24],[20,"zhalan_05_d",[-2],[12,"316nCbP+xcD4NGNKzqmvdu",null,null,null,-1,0]],[23,"zhalan_05_d",1,[[22,-3,[6,"78ugr2twhS8KA3HFPmrZkr"],[0],[21],1]],[12,"90tTOqf5VaA5YSFQVXWXM0",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[278,279]],[[[32,"zhalan_04",[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_1ST_SHADE_MAP":true,"SHADE_MAP_1_AS_SHADE_MAP_2":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{"rasterizerState":{"polygonMode":2,"lineWidth":0},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},[{"rasterizerState":{"depthBias":1.9,"depthBiasClamp":-2.4,"lineWidth":5.2},"depthStencilState":{}},"blendState",11,[{"targets":[{}]},"blendColor",8,[4,4292072403]]],{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],0,0,11,0],[[[{"lineWidth":25},"baseColor",8,[4,4279637526]],[{"baseStep":1.9,"baseFeather":0.2,"shadeStep":2.6,"shadeFeather":2.101,"shadowCover":0.622},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4294967295],"shadeColor2",8,[4,4283058766],"specular",8,[4,1275068416],"shadeMap1",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[12,6],[113,32]],[[[15,"Men05_e"],[18,"Men05_e",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["b7zCekmDxSwL5PpotBehWm"]],[1,["b7zCekmDxSwL5PpotBehWm"]],[1,["b7zCekmDxSwL5PpotBehWm"]],[3,0,{},1,[4,"b7zCekmDxSwL5PpotBehWm",null,null,-11,[7,"bdo3k9UD9DRJGs58hkr8Jy",1,[[2,"zhalan_05_e",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],-8],[2,0,["_shadowReceivingMode"],-9],[5,["_materials","0"],-10,1]]],0]],[1,["c2mcRBzKFXc6SqMvQx6qBx"]],[3,0,{},1,[4,"b7zCekmDxSwL5PpotBehWm",null,null,-15,[7,"84S4v/eE9Noo14N3epXB30",1,[[2,"zhalan_05_e-001",["_name"],3],[0,["_lpos"],3,[1,0,0,4.13]],[0,["_lrot"],3,[3,0,0,0,1]],[0,["_euler"],3,[1,0,0,0]],[2,1,["_shadowCastingMode"],-12],[2,0,["_shadowReceivingMode"],-13],[5,["_materials","0"],-14,3]]],2]],[1,["c2mcRBzKFXc6SqMvQx6qBx"]],[3,0,{},1,[4,"b7zCekmDxSwL5PpotBehWm",null,null,-19,[7,"c2MTGOZ7xIdJRSSsrpb5or",1,[[2,"zhalan_05_e-002",["_name"],4],[0,["_lpos"],4,[1,1.86,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],-16],[2,0,["_shadowReceivingMode"],-17],[5,["_materials","0"],-18,5]]],4]],[1,["c2mcRBzKFXc6SqMvQx6qBx"]]],0,[0,-1,9,0,-2,7,0,-3,5,0,2,1,0,-1,5,0,-2,7,0,-3,9,0,0,6,0,0,6,0,0,6,0,2,5,0,0,8,0,0,8,0,0,8,0,2,7,0,0,10,0,0,10,0,0,10,0,2,9,0,5,1,19],[0,0,0,0,0,0],[3,1,3,1,3,1],[78,9,78,9,78,9]],[[[15,"Deco_zhalan_01"],[20,"Deco_zhalan_01",[-3],[16,"9fT+84QgpFN4gCa6OjIgxF",null,null,-2,0,[-1]]],[1,["d9OaTkBx1QTrjuVSbuMCXd"]],[3,0,null,1,[4,"d9OaTkBx1QTrjuVSbuMCXd",null,null,-7,[7,"9dvh7Pw6RA27Uq2L/F9ZzN",1,[[2,"zhalan_01_a",["_name"],2],[0,["_lpos"],2,[1,0,0,0]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],-4],[2,0,["_shadowReceivingMode"],-5],[5,["_materials","0"],-6,1]]],0]],[1,["c5qgfp+7hUy71DslW1Gvp8"]]],0,[0,-1,3,0,2,1,0,-1,3,0,0,4,0,0,4,0,0,4,0,2,3,0,5,1,7],[0,0],[3,1],[23,1]],[[[15,"Men09_c"],[18,"Men09_c",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-8,[7,"9ekJsc5PtOlY5FFlsdntOk",1,[[2,"zhanlan_06_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],3],[2,0,["_shadowReceivingMode"],3],[5,["_materials","0"],3,1],[5,["_mesh"],3,2]]],0]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-9,[7,"davd4Bt4NB3blVYs0NtRRA",1,[[2,"zhanlan_06_a-001",["_name"],4],[0,["_lpos"],4,[1,0,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],5],[2,0,["_shadowReceivingMode"],5],[5,["_materials","0"],5,4],[5,["_mesh"],5,5]]],3]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-10,[7,"93jUXOLRpHdLf/e5IlkA9S",1,[[2,"zhanlan_06_a-002",["_name"],6],[0,["_lpos"],6,[1,1.86,0,4.13]],[0,["_lrot"],6,[3,0,0,0,1]],[0,["_euler"],6,[1,0,0,0]],[2,1,["_shadowCastingMode"],7],[2,0,["_shadowReceivingMode"],7],[5,["_materials","0"],7,7],[5,["_mesh"],7,8]]],6]]],0,[0,-1,10,0,-2,9,0,-3,8,0,2,1,0,-1,8,0,-2,9,0,-3,10,0,2,8,0,2,9,0,2,10,0,5,1,10],[0,0,0,0,0,0,0,0,0],[3,1,1,3,1,1,3,1,1],[0,20,79,0,20,79,0,20,79]],[[[15,"homezhalan09"],[20,"homezhalan09",[-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27],[16,"f5Crz/W5xCRpcO8MeMlG+z",null,null,-14,0,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[3,0,null,1,[4,"f8QAze9KhZLoecsUXld02S",null,null,-37,[13,"8bjDhNjVlIg7A1c/fepo1s",1,[[9,[1,["f8QAze9KhZLoecsUXld02S"]],[[10,-35,[6,"91RYRtQVZMCZbNYjOHHbf5"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-36,[6,"26QrGqdTVKVJNCSfNTDO+e"]]]]],[[2,"zhanlan_10_a",["_name"],-28],[0,["_lpos"],-29,[1,3,0,1.429]],[0,["_lrot"],-30,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-31,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-32],[2,0,["_shadowReceivingMode"],-33],[5,["_materials","0"],-34,1]]],0]],[3,0,null,1,[4,"f8QAze9KhZLoecsUXld02S",null,null,-47,[13,"66H/v1mItCL6OPsvmQxsJa",1,[[9,[1,["f8QAze9KhZLoecsUXld02S"]],[[10,-45,[6,"cf9aZTv9dPNJ6hyjD7+Zes"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-46,[6,"e3R9MvwLdOKbS5YuU4Rn7d"]]]]],[[2,"zhanlan_10_a-001",["_name"],-38],[0,["_lpos"],-39,[1,3,0,-0.486]],[0,["_lrot"],-40,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-41,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-42],[2,0,["_shadowReceivingMode"],-43],[5,["_materials","0"],-44,3]]],2]],[3,0,null,1,[4,"f8QAze9KhZLoecsUXld02S",null,null,-57,[13,"06Qg9ywmJCU59TJA1B2F0g",1,[[9,[1,["f8QAze9KhZLoecsUXld02S"]],[[10,-55,[6,"092pSUFEFARqYFbnPpgn69"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-56,[6,"93Xp2FatVEqoYDqq4EBo9k"]]]]],[[2,"zhanlan_10_a-002",["_name"],-48],[0,["_lpos"],-49,[1,3,0,-2.388]],[0,["_lrot"],-50,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-51,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-52],[2,0,["_shadowReceivingMode"],-53],[5,["_materials","0"],-54,5]]],4]],[3,0,null,1,[4,"f8QAze9KhZLoecsUXld02S",null,null,-67,[13,"9b50OV4wtLi7T5B7nzkswJ",1,[[9,[1,["f8QAze9KhZLoecsUXld02S"]],[[10,-65,[6,"eebJJQbYxLa4l+IISLF7OA"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-66,[6,"71gpQXT8FHyrPfO294CJIe"]]]]],[[2,"zhanlan_10_a-003",["_name"],-58],[0,["_lpos"],-59,[1,3,0,-4.29]],[0,["_lrot"],-60,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-61,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-62],[2,0,["_shadowReceivingMode"],-63],[5,["_materials","0"],-64,7]]],6]],[3,0,null,1,[4,"f8QAze9KhZLoecsUXld02S",null,null,-77,[13,"c79UNxoTBJNK/1LI/3co8R",1,[[9,[1,["f8QAze9KhZLoecsUXld02S"]],[[10,-75,[6,"61Nn2/QHNMNqZOfAahhB+L"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-76,[6,"673aCdxkdPjb88OpY6Xexe"]]]]],[[2,"zhanlan_10_a-004",["_name"],-68],[0,["_lpos"],-69,[1,-3,0,-0.486]],[0,["_lrot"],-70,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-71,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-72],[2,0,["_shadowReceivingMode"],-73],[5,["_materials","0"],-74,9]]],8]],[3,0,null,1,[4,"f8QAze9KhZLoecsUXld02S",null,null,-87,[13,"7f0qkqNDZCoIgm1tK9ztj3",1,[[9,[1,["f8QAze9KhZLoecsUXld02S"]],[[10,-85,[6,"67IHrEbUxEpKn0SF5RAlLz"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-86,[6,"ebI1qq9ahPxqf5czb6Fofb"]]]]],[[2,"zhanlan_10_a-005",["_name"],-78],[0,["_lpos"],-79,[1,-3,0,-2.388]],[0,["_lrot"],-80,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-81,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-82],[2,0,["_shadowReceivingMode"],-83],[5,["_materials","0"],-84,11]]],10]],[3,0,null,1,[4,"f8QAze9KhZLoecsUXld02S",null,null,-97,[13,"80qz3sp7BN+4CFHNuwfWz5",1,[[9,[1,["f8QAze9KhZLoecsUXld02S"]],[[10,-95,[6,"5fqIPqKHtF75OAkDy12rRG"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-96,[6,"0aRlewBVRFCIJBvn4URq8f"]]]]],[[2,"zhanlan_10_a-006",["_name"],-88],[0,["_lpos"],-89,[1,-3,0,-4.29]],[0,["_lrot"],-90,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-91,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-92],[2,0,["_shadowReceivingMode"],-93],[5,["_materials","0"],-94,13]]],12]],[3,0,null,1,[4,"f8QAze9KhZLoecsUXld02S",null,null,-107,[13,"163ijckSFC5o1SzdR3vGxR",1,[[9,[1,["f8QAze9KhZLoecsUXld02S"]],[[10,-105,[6,"fdyR6R2N9BZasaNuTi7BLt"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-106,[6,"74oUjpHEdLw6dmpjNBN1ol"]]]]],[[2,"zhanlan_10_a-007",["_name"],-98],[0,["_lpos"],-99,[1,-3,0,1.429]],[0,["_lrot"],-100,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-101,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-102],[2,0,["_shadowReceivingMode"],-103],[5,["_materials","0"],-104,15]]],14]],[3,0,null,1,[4,"f8QAze9KhZLoecsUXld02S",null,null,-117,[13,"168BKUIv1OV7GZl4QtQSEW",1,[[9,[1,["f8QAze9KhZLoecsUXld02S"]],[[10,-115,[6,"017Ww2s8ZELrUMNnQ+hybc"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-116,[6,"beeyPtY1ZMpL1Va5ML03Hu"]]]]],[[2,"zhanlan_10_a-008",["_name"],-108],[0,["_lpos"],-109,[1,1.86,0,-5.122]],[0,["_lrot"],-110,[3,0,0,0,1]],[0,["_euler"],-111,[1,0,0,0]],[2,1,["_shadowCastingMode"],-112],[2,0,["_shadowReceivingMode"],-113],[5,["_materials","0"],-114,17]]],16]],[3,0,null,1,[4,"f8QAze9KhZLoecsUXld02S",null,null,-127,[13,"d7La/t5BxDGLZnsEMGS4c3",1,[[9,[1,["f8QAze9KhZLoecsUXld02S"]],[[10,-125,[6,"e5wsELz69BcpPX1pgC/z84"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-126,[6,"08T6c5fqJEf4VaAexdbAvt"]]]]],[[2,"zhanlan_10_a-009",["_name"],-118],[0,["_lpos"],-119,[1,0,0,-5.122]],[0,["_lrot"],-120,[3,0,0,0,1]],[0,["_euler"],-121,[1,0,0,0]],[2,1,["_shadowCastingMode"],-122],[2,0,["_shadowReceivingMode"],-123],[5,["_materials","0"],-124,19]]],18]],[3,0,null,1,[4,"f8QAze9KhZLoecsUXld02S",null,null,-137,[13,"c454jMtm1F9byTTae8+Lub",1,[[9,[1,["f8QAze9KhZLoecsUXld02S"]],[[10,-135,[6,"b6GlaxcGFKL7IMe8FWdRnH"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-136,[6,"2742g0jNJJ4pPxvBjjSFLR"]]]]],[[2,"zhanlan_10_a-010",["_name"],-128],[0,["_lpos"],-129,[1,-1.86,0,-5.122]],[0,["_lrot"],-130,[3,0,0,0,1]],[0,["_euler"],-131,[1,0,0,0]],[2,1,["_shadowCastingMode"],-132],[2,0,["_shadowReceivingMode"],-133],[5,["_materials","0"],-134,21]]],20]],[3,0,null,1,[4,"f8QAze9KhZLoecsUXld02S",null,null,-147,[13,"79l5VqcI9KuIlRW5872Hvn",1,[[9,[1,["f8QAze9KhZLoecsUXld02S"]],[[10,-145,[6,"79YRZHDN1HnJZWOrKiz8XS"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-146,[6,"a6WbcJvpJG1qPANp8ZWhBZ"]]]]],[[2,"zhanlan_10_a-011",["_name"],-138],[0,["_lpos"],-139,[1,3,0,3.316]],[0,["_lrot"],-140,[3,0,0.7071067811865475,0,0.7071067811865477]],[0,["_euler"],-141,[1,0,89.99999999999999,0]],[2,1,["_shadowCastingMode"],-142],[2,0,["_shadowReceivingMode"],-143],[5,["_materials","0"],-144,23]]],22]],[3,0,null,1,[4,"f8QAze9KhZLoecsUXld02S",null,null,-157,[13,"9bGlSvGvVFp7LVv7bng88V",1,[[9,[1,["f8QAze9KhZLoecsUXld02S"]],[[10,-155,[6,"56At1VCXFEWo8JWsdPrhYs"],[1,0,0.5,0],[1,1.9,1,0.3]],[11,16,2,-156,[6,"ce2RrQrztG2K+rp+CCdd0m"]]]]],[[2,"zhanlan_10_a-012",["_name"],-148],[0,["_lpos"],-149,[1,-3,0,3.316]],[0,["_lrot"],-150,[3,0,-0.7071067811865475,0,0.7071067811865476]],[0,["_euler"],-151,[1,0,-90,0]],[2,1,["_shadowCastingMode"],-152],[2,0,["_shadowReceivingMode"],-153],[5,["_materials","0"],-154,25]]],24]],[1,["f8QAze9KhZLoecsUXld02S"]],[1,["f8QAze9KhZLoecsUXld02S"]],[1,["f8QAze9KhZLoecsUXld02S"]],[1,["f8QAze9KhZLoecsUXld02S"]],[1,["f8QAze9KhZLoecsUXld02S"]],[1,["f8QAze9KhZLoecsUXld02S"]],[1,["f8QAze9KhZLoecsUXld02S"]],[1,["f8QAze9KhZLoecsUXld02S"]],[1,["f8QAze9KhZLoecsUXld02S"]],[1,["f8QAze9KhZLoecsUXld02S"]],[1,["f8QAze9KhZLoecsUXld02S"]],[1,["f8QAze9KhZLoecsUXld02S"]],[1,["f8QAze9KhZLoecsUXld02S"]],[1,["27+zJTmtRT2YEFA8eM/OvY"]],[1,["27+zJTmtRT2YEFA8eM/OvY"]],[1,["27+zJTmtRT2YEFA8eM/OvY"]],[1,["27+zJTmtRT2YEFA8eM/OvY"]],[1,["27+zJTmtRT2YEFA8eM/OvY"]],[1,["27+zJTmtRT2YEFA8eM/OvY"]],[1,["27+zJTmtRT2YEFA8eM/OvY"]],[1,["27+zJTmtRT2YEFA8eM/OvY"]],[1,["27+zJTmtRT2YEFA8eM/OvY"]],[1,["27+zJTmtRT2YEFA8eM/OvY"]],[1,["27+zJTmtRT2YEFA8eM/OvY"]],[1,["27+zJTmtRT2YEFA8eM/OvY"]],[1,["27+zJTmtRT2YEFA8eM/OvY"]]],0,[0,-1,14,0,-2,13,0,-3,12,0,-4,11,0,-5,10,0,-6,9,0,-7,8,0,-8,7,0,-9,6,0,-10,5,0,-11,4,0,-12,3,0,-13,2,0,2,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,-5,6,0,-6,7,0,-7,8,0,-8,9,0,-9,10,0,-10,11,0,-11,12,0,-12,13,0,-13,14,0,0,15,0,0,15,0,0,15,0,0,15,0,0,28,0,0,28,0,0,28,0,4,2,0,4,2,0,2,2,0,0,16,0,0,16,0,0,16,0,0,16,0,0,29,0,0,29,0,0,29,0,4,3,0,4,3,0,2,3,0,0,17,0,0,17,0,0,17,0,0,17,0,0,30,0,0,30,0,0,30,0,4,4,0,4,4,0,2,4,0,0,18,0,0,18,0,0,18,0,0,18,0,0,31,0,0,31,0,0,31,0,4,5,0,4,5,0,2,5,0,0,19,0,0,19,0,0,19,0,0,19,0,0,32,0,0,32,0,0,32,0,4,6,0,4,6,0,2,6,0,0,20,0,0,20,0,0,20,0,0,20,0,0,33,0,0,33,0,0,33,0,4,7,0,4,7,0,2,7,0,0,21,0,0,21,0,0,21,0,0,21,0,0,34,0,0,34,0,0,34,0,4,8,0,4,8,0,2,8,0,0,22,0,0,22,0,0,22,0,0,22,0,0,35,0,0,35,0,0,35,0,4,9,0,4,9,0,2,9,0,0,23,0,0,23,0,0,23,0,0,23,0,0,36,0,0,36,0,0,36,0,4,10,0,4,10,0,2,10,0,0,24,0,0,24,0,0,24,0,0,24,0,0,37,0,0,37,0,0,37,0,4,11,0,4,11,0,2,11,0,0,25,0,0,25,0,0,25,0,0,25,0,0,38,0,0,38,0,0,38,0,4,12,0,4,12,0,2,12,0,0,26,0,0,26,0,0,26,0,0,26,0,0,39,0,0,39,0,0,39,0,4,13,0,4,13,0,2,13,0,0,27,0,0,27,0,0,27,0,0,27,0,0,40,0,0,40,0,0,40,0,4,14,0,4,14,0,2,14,0,5,1,157],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1],[31,10,31,10,31,10,31,10,31,10,31,10,31,10,31,10,31,10,31,10,31,10,31,10,31,10]],[[[15,"Men01_d"],[18,"Men01_d",[-5,-6,-7],[16,"e0qMvfUBVE+pt1cUvpCb2x",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["fb+gvy9WpXO7oqeswSlhWE"]],[1,["fb+gvy9WpXO7oqeswSlhWE"]],[1,["fb+gvy9WpXO7oqeswSlhWE"]],[3,0,null,1,[4,"fb+gvy9WpXO7oqeswSlhWE",null,null,-11,[7,"6aZJUvVJRCzIu5u3H+L5io",1,[[2,"zhalan_01_d",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],-8],[2,0,["_shadowReceivingMode"],-9],[5,["_materials","0"],-10,1]]],0]],[1,["60GV/aqoxS95YInC+CaR7t"]],[3,0,null,1,[4,"fb+gvy9WpXO7oqeswSlhWE",null,null,-15,[7,"e3FK8apxtBb7AAfy78zmnP",1,[[2,"zhalan_01_d-001",["_name"],3],[0,["_lpos"],3,[1,0,0,4.13]],[0,["_lrot"],3,[3,0,0,0,1]],[0,["_euler"],3,[1,0,0,0]],[2,1,["_shadowCastingMode"],-12],[2,0,["_shadowReceivingMode"],-13],[5,["_materials","0"],-14,3]]],2]],[1,["60GV/aqoxS95YInC+CaR7t"]],[3,0,null,1,[4,"fb+gvy9WpXO7oqeswSlhWE",null,null,-19,[7,"70DBcJ7yZEyK/ppRA58DRt",1,[[2,"zhalan_01_d-002",["_name"],4],[0,["_lpos"],4,[1,1.86,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],-16],[2,0,["_shadowReceivingMode"],-17],[5,["_materials","0"],-18,5]]],4]],[1,["60GV/aqoxS95YInC+CaR7t"]]],0,[0,-1,9,0,-2,7,0,-3,5,0,2,1,0,-1,5,0,-2,7,0,-3,9,0,0,6,0,0,6,0,0,6,0,2,5,0,0,8,0,0,8,0,0,8,0,2,7,0,0,10,0,0,10,0,0,10,0,2,9,0,5,1,19],[0,0,0,0,0,0],[3,1,3,1,3,1],[80,1,80,1,80,1]],[[[59,"util/dcc/imported-specular-glossiness",[{"hash":1971853362,"name":"util/dcc/imported-specular-glossiness|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScale","type":13,"count":1},{"name":"alphaThreshold","type":13,"count":1},{"name":"shininessExponent","type":13,"count":1},{"name":"glossiness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalScale","type":13,"count":1},{"name":"transparencyFactor","type":13,"count":1},{"name":"diffuseFactor","type":13,"count":1},{"name":"specularFactor","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"shininessExponentMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_SHININESS_MAP"]},{"name":"specularGlossinessMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_SPECULAR_GLOSSINESS_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_SPECULAR_MAP"]},{"name":"metallicMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_MAP"]},{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_ALBEDO_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_TRANSPARENCY_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":7,"defines":["USE_EMISSIVE_MAP"]},{"name":"emissiveScaleMap","type":28,"count":1,"stageFlags":16,"binding":8,"defines":["USE_EMISSIVESCALE_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":9,"defines":["USE_NORMAL_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":10,"defines":["USE_OCCLUSION_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_color","format":44,"location":6,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":7,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":15,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":16,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":17,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"tags":[],"defines":[]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"tags":["CC_PIPELINE_TYPE"],"defines":["CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["CC_PIPELINE_TYPE"]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":17,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["!USE_INSTANCING"]},{"name":"CCMorph","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_displacementWeights","typename":"vec4","type":16,"count":15,"isArray":true},{"name":"cc_displacementTextureInfo","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointTextureInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointAnimInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_joints","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true}],"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCForwardLight","stageFlags":16,"tags":{"builtin":"local"},"members":[{"name":"cc_lightPos","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true},{"name":"cc_lightColor","typename":"vec4","type":16,"count":0,"isArray":true},{"name":"cc_lightSizeRangeAngle","typename":"vec4","type":16,"count":0,"isArray":true},{"name":"cc_lightDir","typename":"vec4","type":16,"count":0,"isArray":true}],"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"CCSH","stageFlags":16,"tags":{"builtin":"local"},"members":[{"name":"cc_sh_linear_const_r","typename":"vec4","type":16,"count":1},{"name":"cc_sh_linear_const_g","typename":"vec4","type":16,"count":1},{"name":"cc_sh_linear_const_b","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_r","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_g","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_b","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_a","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_LIGHT_PROBE","!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_reflectionProbeCubemap","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbePlanarMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbeDataMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_lightingMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_LIGHTMAP","!CC_FORWARD_ADD"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScale","type":13,"count":1},{"name":"alphaThreshold","type":13,"count":1},{"name":"shininessExponent","type":13,"count":1},{"name":"glossiness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalScale","type":13,"count":1},{"name":"transparencyFactor","type":13,"count":1},{"name":"diffuseFactor","type":13,"count":1},{"name":"specularFactor","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"shininessExponentMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_SHININESS_MAP"]},{"name":"specularGlossinessMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_SPECULAR_GLOSSINESS_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_SPECULAR_MAP"]},{"name":"metallicMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_MAP"]},{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_ALBEDO_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_TRANSPARENCY_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":7,"defines":["USE_EMISSIVE_MAP"]},{"name":"emissiveScaleMap","type":28,"count":1,"stageFlags":16,"binding":8,"defines":["USE_EMISSIVESCALE_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":9,"defines":["USE_NORMAL_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":10,"defines":["USE_OCCLUSION_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCShadow","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matLightView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matLightViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_shadowInvProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowNFLSInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowWHPBInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowLPNNInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowColor","typename":"vec4","type":16,"count":1,"precision":"lowp "},{"name":"cc_planarNDInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCSM","stageFlags":16,"tags":{"builtin":"global"},"members":[{"name":"cc_csmViewDir0","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir1","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir2","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmAtlas","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_matCSMViewProj","typename":"mat4","type":25,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjDepthInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmSplitsInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_environment","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"global"},"defines":[]},{"name":"cc_diffuseMap","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]},{"name":"cc_shadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl1":{"vert":"\nprecision highp float;\n  #define CC_SURFACES_USE_SECOND_UV HAS_SECOND_UV\n  #define CC_SURFACES_USE_TWO_SIDED USE_TWOSIDE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE USE_REFLECTION_DENOISE\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC IS_ANISOTROPY\n  #define CC_SURFACES_USE_VERTEX_COLOR USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING USE_COMPATIBLE_LIGHTING\n#if IS_ANISOTROPY || USE_NORMAL_MAP\n  #define CC_SURFACES_USE_TANGENT_SPACE 1\n#endif\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 31\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_CLIP_POS\n  #define CC_SURFACES_TRANSFER_CLIP_POS 0\n#endif\n#ifndef CC_SURFACES_USE_LIGHT_MAP\n  #ifdef CC_USE_LIGHTMAP\n    #define CC_SURFACES_USE_LIGHT_MAP CC_USE_LIGHTMAP\n  #else\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_FLIP_UV\n  #define CC_SURFACES_FLIP_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_FRESNEL\n  #define CC_SURFACES_LIGHTING_USE_FRESNEL 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  #define CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  #define CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n  #define CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRT\n  #define CC_SURFACES_LIGHTING_TRT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TT\n  #define CC_SURFACES_LIGHTING_TT 0\n#endif\n#ifndef CC_SURFACES_ENABLE_DEBUG_VIEW\n  #define CC_SURFACES_ENABLE_DEBUG_VIEW 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  #define CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  #define CC_SURFACES_LIGHTING_CALCULATE_SPECULAR 1\n#endif\n#define CC_USE_SURFACE_SHADER 1\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  attribute vec4 a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  attribute vec4 a_color;\n#endif\n#if CC_SURFACES_USE_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n    attribute vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n#endif\nvarying highp vec3 v_worldPos;\nvarying mediump vec4 v_normal;\nvarying vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  varying mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  varying mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  varying mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  varying mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  varying highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  varying highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    varying mediump vec4 v_sh_linear_const_r;\n    varying mediump vec4 v_sh_linear_const_g;\n    varying mediump vec4 v_sh_linear_const_b;\n  #endif\n#endif\n#define VSOutput_worldPos v_worldPos\n#define VSOutput_worldNormal v_normal.xyz\n#define VSOutput_faceSideSign v_normal.w\n#define VSOutput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define VSOutput_vertexColor v_color\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define VSOutput_worldTangent v_tangent.xyz\n  #define VSOutput_mirrorNormal v_tangent.w\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define VSOutput_texcoord1 v_uv1\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define VSOutput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define VSOutput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define VSOutput_reflectionProbeId v_shadowBiasAndProbeId.z\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define VSOutput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define VSOutput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define VSOutput_clipPos v_clipPos\n#endif\nstruct SurfacesStandardVertexIntermediate\n{\n  highp vec4 position;\n  vec3 normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  vec4 tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  vec4 color;\n#endif\n  vec2 texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  vec2 texCoord1;\n#endif\n  highp vec4 clipPos;\n  highp vec3 worldPos;\n  vec4 worldNormal;\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 worldTangent, worldBinormal;\n  #endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  vec4 shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  float fogFactor;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  vec3 lightmapUV;\n#endif\n};\n#if CC_USE_MORPH\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\nuniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n  uniform highp vec4 cc_localShadowBias;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #if CC_USE_FOG != 4\n    float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n        vec4 wPos = pos;\n        float cam_dis = distance(cameraPos, wPos.xyz);\n        return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n    }\n    float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n        vec4 wPos = pos;\n        float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n        float f = exp(-cam_dis * fogDensity);\n        return f;\n    }\n    float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n        vec4 wPos = pos;\n        float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n        float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n        return f;\n    }\n    float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n        vec4 wPos = pos;\n        vec3 camWorldProj = cameraPos.xyz;\n        camWorldProj.y = 0.;\n        vec3 worldPosProj = wPos.xyz;\n        worldPosProj.y = 0.;\n        float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n        float fDeltaY, fDensityIntegral;\n        if (cameraPos.y > fogTop) {\n            if (wPos.y < fogTop) {\n                fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n                fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n            }\n            else {\n                fDeltaY = 0.;\n                fDensityIntegral = 0.;\n            }\n        }\n        else {\n            if (wPos.y < fogTop) {\n                float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n                float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n                fDeltaY = abs(fDeltaA - fDeltaB);\n                fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n            }\n            else {\n                fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n                fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n            }\n        }\n        float fDensity;\n        if (fDeltaY != 0.) {\n            fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n        }\n        else {\n            fDensity = 0.;\n        }\n        float f = exp(-fDensity);\n        return f;\n    }\n  #endif\n  void CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n  {\n  #if CC_USE_FOG == 0\n  \tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n  #elif CC_USE_FOG == 1\n  \tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n  #elif CC_USE_FOG == 2\n  \tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n  #elif CC_USE_FOG == 3\n  \tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n  #else\n  \tfactor = 1.0;\n  #endif\n  }\n#endif\n    uniform vec4 tilingOffset;\n#define CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n  In.texCoord = In.texCoord * tilingOffset.xy + tilingOffset.zw;\n#if CC_SURFACES_USE_SECOND_UV\n  In.texCoord1 = In.texCoord1 * tilingOffset.xy + tilingOffset.zw;\n#endif\n}\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_POS\nvec3 SurfacesVertexModifyLocalPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.position.xyz;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_NORMAL\nvec3 SurfacesVertexModifyLocalNormal(in SurfacesStandardVertexIntermediate In)\n{\n  return In.normal.xyz;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_TANGENT\n  #if CC_SURFACES_USE_TANGENT_SPACE\n  vec4 SurfacesVertexModifyLocalTangent(in SurfacesStandardVertexIntermediate In)\n    {\n      return In.tangent;\n    }\n  #endif\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_SHARED_DATA\nvoid SurfacesVertexModifyLocalSharedData(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_POS\nvec3 SurfacesVertexModifyWorldPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.worldPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_CLIP_POS\nvec4 SurfacesVertexModifyClipPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.clipPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_NORMAL\nvec3 SurfacesVertexModifyWorldNormal(in SurfacesStandardVertexIntermediate In)\n{\n    vec3 worldNormal = In.worldNormal.xyz;\n  #if CC_SURFACES_USE_TWO_SIDED\n      worldNormal.xyz *= In.worldNormal.w;\n  #endif\n  return worldNormal;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_SHARED_DATA\nvoid SurfacesVertexModifySharedData(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\nvoid CCSurfacesVertexInput(out SurfacesStandardVertexIntermediate In)\n{\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  In.tangent = a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  In.color = a_color;\n#endif\n  In.texCoord = a_texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  In.texCoord1 = a_texCoord1;\n#endif\n}\nvoid CCSurfacesVertexOutput(in SurfacesStandardVertexIntermediate In)\n{\n  gl_Position = In.clipPos;\n  VSOutput_worldNormal = In.worldNormal.xyz;\n  VSOutput_faceSideSign = In.worldNormal.w;\n  VSOutput_worldPos = In.worldPos;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  VSOutput_worldTangent = In.worldTangent.xyz;\n  VSOutput_mirrorNormal = In.tangent.w > 0.0 ? 1.0 : -1.0;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  VSOutput_vertexColor = In.color;\n#endif\n  VSOutput_texcoord = In.texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  VSOutput_texcoord1 = In.texCoord1;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  VSOutput_fogFactor = In.fogFactor;\n#endif\n#if CC_RECEIVE_SHADOW\n  VSOutput_shadowBias = In.shadowBiasAndProbeId.xy;\n#endif\n#if CC_USE_REFLECTION_PROBE\n  VSOutput_reflectionProbeId = In.shadowBiasAndProbeId.z;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  VSOutput_lightMapUV = In.lightmapUV;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  VSOutput_localPos = In.position;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  VSOutput_clipPos = In.clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    v_sh_linear_const_r = a_sh_linear_const_r;\n    v_sh_linear_const_g = a_sh_linear_const_g;\n    v_sh_linear_const_b = a_sh_linear_const_b;\n  #endif\n#endif\n}\nvoid CCSurfacesVertexAnimation(inout SurfacesStandardVertexIntermediate In)\n{\nvec4 temp = vec4(0.0);\n#if CC_USE_MORPH\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    applyMorph(In.position, In.normal, In.tangent);\n  #else\n    applyMorph(In.position, In.normal, temp);\n  #endif\n#endif\n#if CC_USE_SKINNING\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    CCSkin(In.position, In.normal, In.tangent);\n  #else\n    CCSkin(In.position, In.normal, temp);\n  #endif\n#endif\n}\nvoid CCSurfacesVertexWorldTransform(inout SurfacesStandardVertexIntermediate In)\n{\n    mat4 matWorld, matWorldIT;\n    CCGetWorldMatrixFull(matWorld, matWorldIT);\n    In.worldPos = (matWorld * In.position).xyz;\n    In.worldNormal.xyz = normalize((matWorldIT * vec4(In.normal.xyz, 0.0)).xyz);\n    #if CC_SURFACES_USE_TANGENT_SPACE\n      In.worldTangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n      In.worldBinormal = cross(In.worldNormal.xyz, In.worldTangent) * In.tangent.w;\n    #endif\n}\nvoid CCSurfacesVertexTransformUV(inout SurfacesStandardVertexIntermediate In)\n{\n  #if CC_SURFACES_FLIP_UV\n    In.texCoord = cc_cameraPos.w > 1.0 ? vec2(In.texCoord.x, 1.0 - In.texCoord.y) : In.texCoord;\n    #if CC_SURFACES_USE_SECOND_UV\n      In.texCoord1 = cc_cameraPos.w > 1.0 ? vec2(In.texCoord1.x, 1.0 - In.texCoord1.y) : In.texCoord1;\n    #endif\n  #endif\n}\nvoid CCSurfacesVertexTransferFog(inout SurfacesStandardVertexIntermediate In)\n{\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(vec4(In.worldPos, 1.0), In.fogFactor);\n#endif\n}\nvoid CCSurfacesVertexTransferShadow(inout SurfacesStandardVertexIntermediate In)\n{\n  #if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n    In.shadowBiasAndProbeId = vec4(0.0);\n  #endif\n  #if CC_RECEIVE_SHADOW\n    In.shadowBiasAndProbeId.xy = vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n    #if USE_INSTANCING\n      In.shadowBiasAndProbeId.xy += a_localShadowBiasAndProbeId.xy;\n    #else\n      In.shadowBiasAndProbeId.xy += cc_localShadowBias.xy;\n    #endif\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    #if USE_INSTANCING\n      In.shadowBiasAndProbeId.zw = a_localShadowBiasAndProbeId.zw;\n    #else\n      In.shadowBiasAndProbeId.zw = cc_localShadowBias.zw;\n    #endif\n  #endif\n}\nvoid CCSurfacesVertexTransferLightMapUV(inout SurfacesStandardVertexIntermediate In)\n{\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #if USE_INSTANCING\n    In.lightmapUV.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    In.lightmapUV.z = a_lightingMapUVParam.w;\n  #else\n    In.lightmapUV.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    In.lightmapUV.z = cc_lightingMapUVParam.w;\n  #endif\n#endif\n}\nvoid main()\n{\n  SurfacesStandardVertexIntermediate In;\n  CCSurfacesVertexInput(In);\n  CCSurfacesVertexAnimation(In);\n  In.position.xyz = SurfacesVertexModifyLocalPos(In);\n  In.normal.xyz = SurfacesVertexModifyLocalNormal(In);\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    In.tangent = SurfacesVertexModifyLocalTangent(In);\n  #endif\n  SurfacesVertexModifyLocalSharedData(In);\n  CCSurfacesVertexWorldTransform(In);\n  In.worldPos = SurfacesVertexModifyWorldPos(In);\n  In.clipPos = cc_matProj * cc_matView * vec4(In.worldPos, 1.0);\n  In.clipPos = SurfacesVertexModifyClipPos(In);\n  vec3 viewDirect = normalize(cc_cameraPos.xyz - In.worldPos);\n  In.worldNormal.w = dot(In.worldNormal.xyz, viewDirect) < 0.0 ? -1.0 : 1.0;\n  In.worldNormal.xyz = SurfacesVertexModifyWorldNormal(In);\n  SurfacesVertexModifyUV(In);\n  SurfacesVertexModifySharedData(In);\n  CCSurfacesVertexTransformUV(In);\n  CCSurfacesVertexTransferFog(In);\n  CCSurfacesVertexTransferShadow(In);\n  CCSurfacesVertexTransferLightMapUV(In);\n  CCSurfacesVertexOutput(In);\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\n  #define CC_SURFACES_USE_SECOND_UV HAS_SECOND_UV\n  #define CC_SURFACES_USE_TWO_SIDED USE_TWOSIDE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE USE_REFLECTION_DENOISE\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC IS_ANISOTROPY\n  #define CC_SURFACES_USE_VERTEX_COLOR USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING USE_COMPATIBLE_LIGHTING\n#if IS_ANISOTROPY || USE_NORMAL_MAP\n  #define CC_SURFACES_USE_TANGENT_SPACE 1\n#endif\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 31\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_CLIP_POS\n  #define CC_SURFACES_TRANSFER_CLIP_POS 0\n#endif\n#ifndef CC_SURFACES_USE_LIGHT_MAP\n  #ifdef CC_USE_LIGHTMAP\n    #define CC_SURFACES_USE_LIGHT_MAP CC_USE_LIGHTMAP\n  #else\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_FLIP_UV\n  #define CC_SURFACES_FLIP_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_FRESNEL\n  #define CC_SURFACES_LIGHTING_USE_FRESNEL 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  #define CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  #define CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n  #define CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRT\n  #define CC_SURFACES_LIGHTING_TRT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TT\n  #define CC_SURFACES_LIGHTING_TT 0\n#endif\n#ifndef CC_SURFACES_ENABLE_DEBUG_VIEW\n  #define CC_SURFACES_ENABLE_DEBUG_VIEW 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  #define CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  #define CC_SURFACES_LIGHTING_CALCULATE_SPECULAR 1\n#endif\n#define CC_USE_SURFACE_SHADER 1\nvarying highp vec3 v_worldPos;\nvarying mediump vec4 v_normal;\nvarying vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  varying mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  varying mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  varying mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  varying mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  varying highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  varying highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    varying mediump vec4 v_sh_linear_const_r;\n    varying mediump vec4 v_sh_linear_const_g;\n    varying mediump vec4 v_sh_linear_const_b;\n  #endif\n#endif\n#define FSInput_worldPos v_worldPos\n#define FSInput_worldNormal v_normal.xyz\n#define FSInput_faceSideSign v_normal.w\n#define FSInput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define FSInput_vertexColor v_color\n#else\n  #define FSInput_vertexColor vec4(1.0)\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define FSInput_worldTangent v_tangent.xyz\n  #define FSInput_mirrorNormal v_tangent.w\n#else\n  #define FSInput_worldTangent vec3(0.0, 0.0, 0.0)\n  #define FSInput_mirrorNormal 1.0\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define FSInput_texcoord1 v_uv1\n#else\n  #define FSInput_texcoord1 vec2(0.0, 0.0)\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define FSInput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define FSInput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define FSInput_reflectionProbeId v_shadowBiasAndProbeId.z\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define FSInput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define FSInput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define FSInput_clipPos v_clipPos\n#endif\nuniform highp vec4 cc_time;\n  uniform mediump vec4 cc_probeInfo;\n  uniform mediump vec4 cc_debug_view_mode;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_surfaceTransform;\n  uniform mediump vec4 cc_exposure;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_DIRECT CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT CC_SURFACES_DEBUG_VIEW_TRT_DIRECT + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ALL CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_TRT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRT (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD\n    #if CC_PIPELINE_TYPE == 0\n      #define LIGHTS_PER_PASS 1\n    #else\n      #define LIGHTS_PER_PASS 10\n    #endif\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n    uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n    #endif\n  #endif\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if !USE_INSTANCING\n    uniform vec4 cc_sh_linear_const_r;\n  uniform vec4 cc_sh_linear_const_g;\n  uniform vec4 cc_sh_linear_const_b;\n  uniform vec4 cc_sh_quadratic_r;\n  uniform vec4 cc_sh_quadratic_g;\n  uniform vec4 cc_sh_quadratic_b;\n  uniform vec4 cc_sh_quadratic_a;\n  #endif\n#endif\nuniform highp mat4 cc_matLightView;\n  uniform highp mat4 cc_matLightViewProj;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  uniform highp vec4 cc_csmViewDir0[4];\n  uniform highp vec4 cc_csmViewDir1[4];\n  uniform highp vec4 cc_csmViewDir2[4];\n  uniform highp vec4 cc_csmAtlas[4];\n  uniform highp mat4 cc_matCSMViewProj[4];\n  uniform highp vec4 cc_csmProjDepthInfo[4];\n  uniform highp vec4 cc_csmProjInfo[4];\n  uniform highp vec4 cc_csmSplitsInfo;\n#endif\nuniform samplerCube cc_environment;\n#if CC_USE_IBL\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  uniform samplerCube cc_reflectionProbeCubemap;\n  uniform sampler2D cc_reflectionProbePlanarMap;\n  uniform sampler2D cc_reflectionProbeDataMap;\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    #ifdef GL_EXT_shader_texture_lod\n      return texture2DLodEXT(tex, coord, lod);\n    #else\n      return texture2D(tex, coord, lod);\n    #endif\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    #ifdef GL_EXT_shader_texture_lod\n      return textureCubeLodEXT(tex, coord, lod);\n    #else\n      return textureCube(tex, coord, lod);\n    #endif\n}\n#define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nvec4 packRGBE (vec3 rgb) {\n  highp float maxComp = max(max(rgb.r, rgb.g), rgb.b);\n  highp float e = 128.0;\n  if (maxComp > 0.0001) {\n    e = log(maxComp) / log(1.1);\n    e = ceil(e);\n    e = clamp(e + 128.0, 0.0, 255.0);\n  }\n  highp float sc = 1.0 / pow(1.1, e - 128.0);\n  vec3 encode = clamp(rgb * sc, vec3(0.0), vec3(1.0)) * 255.0;\n  vec3 encode_rounded = floor(encode) + step(encode - floor(encode), vec3(0.5));\n  return vec4(encode_rounded, e) / 255.0;\n}\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nbool isnan(float val) {\n  return (val < 0.0 || 0.0 < val || val == 0.0) ? false : true;\n}\nbool isinf(float x) {\n  return x == x * 2.0 && x != 0.0;\n}\nbool isnans(vec2 val) {\n    return isnan(val.x) || isnan(val.y);\n}\nbool isnans(vec3 val) {\n    return isnan(val.x) || isnan(val.y) || isnan(val.z);\n}\nbool isnans(vec4 val) {\n    return isnan(val.x) || isnan(val.y) || isnan(val.z) || isnan(val.w);\n}\nbool isinfs(vec2 val) {\n    return isinf(val.x) || isinf(val.y);\n}\nbool isinfs(vec3 val) {\n    return isinf(val.x) || isinf(val.y) || isinf(val.z);\n}\nbool isinfs(vec4 val) {\n    return isinf(val.x) || isinf(val.y) || isinf(val.z) || isinf(val.w);\n}\nfloat saturate(float value) {\n    return min(max(value, 0.0), 1.0);\n}\nvec2 saturate(vec2 value) { return vec2(saturate(value.x), saturate(value.y)); }\nvec3 saturate(vec3 value) { return vec3(saturate(value.x), saturate(value.y), saturate(value.z)); }\nvec4 saturate(vec4 value) { return vec4(saturate(value.x), saturate(value.y), saturate(value.z), saturate(value.w)); }\nvec2 GetPlanarReflectScreenUV(vec3 worldPos, mat4 matVirtualCameraViewProj, float flipNDCSign, vec3 viewDir, vec3 reflectDir)\n{\n  vec4 clipPos = matVirtualCameraViewProj * vec4(worldPos, 1.0);\n  vec2 screenUV = clipPos.xy / clipPos.w * 0.5 + 0.5;\n  screenUV = vec2(1.0 - screenUV.x, screenUV.y);\n  screenUV = flipNDCSign == 1.0 ? vec2(screenUV.x, 1.0 - screenUV.y) : screenUV;\n  return screenUV;\n}\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nvec3 CalculateBinormal(vec3 normal, vec3 tangent, float mirrorNormal)\n{\n    return cross(normal.xyz, tangent) * mirrorNormal;\n}\nvec3 CalculateNormalFromTangentSpace(vec3 normalFromTangentSpace, float normalStrength, vec3 normal, vec3 tangent, float mirrorNormal)\n{\n    vec3 binormal = CalculateBinormal(normal, tangent, mirrorNormal);\n    return (normalFromTangentSpace.x * normalStrength) * normalize(tangent) +\n           (normalFromTangentSpace.y * normalStrength) * normalize(binormal) +\n            normalFromTangentSpace.z * normalize(normal);\n}\nvec3 RotationVecFromAxisY(vec3 v, float cosTheta, float sinTheta)\n{\n    vec3 result;\n    result.x = dot(v, vec3(cosTheta, 0.0, -sinTheta));\n    result.y = v.y;\n    result.z = dot(v, vec3(sinTheta, 0.0,  cosTheta));\n    return result;\n}\nvoid RotateTangentAndBinormal(inout vec3 tangent, inout vec3 binormal, vec3 normal, float rotationAngle)\n{\n    float cosTheta = cos(rotationAngle), sinTheta = sin(rotationAngle);\n    vec3 B = RotationVecFromAxisY(vec3(1.0, 0.0, 0.0), cosTheta, sinTheta);\n    vec3 T = RotationVecFromAxisY(vec3(0.0, 0.0, 1.0), cosTheta, sinTheta);\n    vec3 tangentNew, binormalNew;\n    binormalNew = B.x * binormal + B.y * normal + B.z * tangent;\n    binormal = normalize(binormalNew);\n    tangentNew = T.x * binormal + T.y * normal + T.z * tangent;\n    tangent = normalize(tangentNew);\n}\nvec2 signNotZero(vec2 v) {\n  return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n}\nvec2 float32x3_to_oct(in vec3 v) {\n  vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n  return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n}\nbool GetMetallicAlbedoFromDiffuseSpecularWithoutColor(out float metallic, out vec3 albedo, vec3 diffuse, vec3 specular, float f0 )\n{\n\tfloat d = max(max(diffuse.x, diffuse.y), diffuse.z);\n\tvec3 normalizedColor = diffuse / (d + (d < EPSILON_LOWP ? EPSILON_LOWP : 0.0));\n\tnormalizedColor = d < EPSILON_LOWP ? specular : normalizedColor;\n\tfloat s = max(max(specular.x, specular.y), specular.z);\n\tfloat delta = (d + s) * (d + s)  - 4.0 * f0 * d;\n\tfloat deltaSqrt = sqrt(max(0.0, delta));\n\tfloat solverMetallic = (-d - s + 2.0 * f0 + deltaSqrt) / (2.0 * f0);\n\tvec3 solverAlbedo = (d + s) * normalizedColor - vec3(f0 * (1.0 - solverMetallic));\n\tbool isValidSolver = delta >= 0.0;\n\tmetallic = isValidSolver ? clamp(solverMetallic, 0.0, 1.0) : 0.0;\n\talbedo = isValidSolver ? vec3(max(0.0, solverAlbedo.x), max(0.0, solverAlbedo.y), max(0.0, solverAlbedo.z)) : diffuse;\n\treturn isValidSolver;\n}\n  vec3 EnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n      #if !CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING && !CC_IBL_CONVOLUTED\n        roughness = pow(roughness, 0.5);\n      #endif\n    \tfloat mip = roughness * (mipCount - 1.0);\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n      vec3 rotationDir = RotationVecFromAxisY(R.xyz, cc_surfaceTransform.z, cc_surfaceTransform.w);\n    \tvec4 biased = fragTextureLod(cc_environment, rotationDir, mip + mipBias);\n     \tvec4 filtered = textureCube(cc_environment, rotationDir);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n  vec3 EnvReflection(samplerCube tex, vec3 R, float roughness, float mipCount) {\n    #if !CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING && !CC_IBL_CONVOLUTED\n      roughness = pow(roughness, 0.5);\n    #endif\n    vec3 rotationDir = RotationVecFromAxisY(R.xyz, cc_surfaceTransform.z, cc_surfaceTransform.w);\n    vec4 envmap = fragTextureLod(tex, rotationDir, roughness * (mipCount - 1.0));\n    #if CC_USE_IBL == 2 || CC_USE_REFLECTION_PROBE != REFLECTION_PROBE_TYPE_NONE\n      return unpackRGBE(envmap);\n    #else\n      return SRGBToLinear(envmap.rgb);\n    #endif\n  }\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n#endif\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  float SampleShadowMap (vec3 shadowNDCPos, highp sampler2D shadowMap)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return dot(texture2D(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    #else\n      return texture2D(shadowMap, shadowNDCPos.xy).x;\n    #endif\n  }\n  float NativePCFShadowFactorHard (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return step(shadowNDCPos.z, dot(texture2D(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      return step(shadowNDCPos.z, texture2D(shadowMap, shadowNDCPos.xy).x);\n    #endif\n  }\n  float NativePCFShadowFactorSoft (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n    #endif\n    float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n    float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n    float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n    float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n      block4 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block5 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n      block6 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n      block7 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n      block8 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n    #endif\n    float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float NativePCFShadowFactorSoft5X (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 twoTap = oneTap * 2.0;\n    vec2 offset1 = shadowNDCPos.xy + vec2(-twoTap.x, -twoTap.y);\n    vec2 offset2 = shadowNDCPos.xy + vec2(-oneTap.x, -twoTap.y);\n    vec2 offset3 = shadowNDCPos.xy + vec2(0.0, -twoTap.y);\n    vec2 offset4 = shadowNDCPos.xy + vec2(oneTap.x, -twoTap.y);\n    vec2 offset5 = shadowNDCPos.xy + vec2(twoTap.x, -twoTap.y);\n    vec2 offset6 = shadowNDCPos.xy + vec2(-twoTap.x, -oneTap.y);\n    vec2 offset7 = shadowNDCPos.xy + vec2(-oneTap.x, -oneTap.y);\n    vec2 offset8 = shadowNDCPos.xy + vec2(0.0, -oneTap.y);\n    vec2 offset9 = shadowNDCPos.xy + vec2(oneTap.x, -oneTap.y);\n    vec2 offset10 = shadowNDCPos.xy + vec2(twoTap.x, -oneTap.y);\n    vec2 offset11 = shadowNDCPos.xy + vec2(-twoTap.x, 0.0);\n    vec2 offset12 = shadowNDCPos.xy + vec2(-oneTap.x, 0.0);\n    vec2 offset13 = shadowNDCPos.xy + vec2(0.0, 0.0);\n    vec2 offset14 = shadowNDCPos.xy + vec2(oneTap.x, 0.0);\n    vec2 offset15 = shadowNDCPos.xy + vec2(twoTap.x, 0.0);\n    vec2 offset16 = shadowNDCPos.xy + vec2(-twoTap.x, oneTap.y);\n    vec2 offset17 = shadowNDCPos.xy + vec2(-oneTap.x, oneTap.y);\n    vec2 offset18 = shadowNDCPos.xy + vec2(0.0, oneTap.y);\n    vec2 offset19 = shadowNDCPos.xy + vec2(oneTap.x, oneTap.y);\n    vec2 offset20 = shadowNDCPos.xy + vec2(twoTap.x, oneTap.y);\n    vec2 offset21 = shadowNDCPos.xy + vec2(-twoTap.x, twoTap.y);\n    vec2 offset22 = shadowNDCPos.xy + vec2(-oneTap.x, twoTap.y);\n    vec2 offset23 = shadowNDCPos.xy + vec2(0.0, twoTap.y);\n    vec2 offset24 = shadowNDCPos.xy + vec2(oneTap.x, twoTap.y);\n    vec2 offset25 = shadowNDCPos.xy + vec2(twoTap.x, twoTap.y);\n    float block1, block2, block3, block4, block5, block6, block7, block8, block9, block10, block11, block12, block13, block14, block15, block16, block17, block18, block19, block20, block21, block22, block23, block24, block25;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset1), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset2), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset3), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset4), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset5), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset6), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset7), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset8), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block9 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset9), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block10 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset10), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block11 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset11), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block12 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset12), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block13 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset13), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block14 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset14), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block15 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset15), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block16 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset16), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block17 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset17), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block18 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset18), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block19 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset19), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block20 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset20), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block21 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset21), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block22 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset22), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block23 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset23), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block24 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset24), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block25 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset25), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, offset1).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, offset2).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, offset3).x);\n      block4 = step(shadowNDCPos.z, texture2D(shadowMap, offset4).x);\n      block5 = step(shadowNDCPos.z, texture2D(shadowMap, offset5).x);\n      block6 = step(shadowNDCPos.z, texture2D(shadowMap, offset6).x);\n      block7 = step(shadowNDCPos.z, texture2D(shadowMap, offset7).x);\n      block8 = step(shadowNDCPos.z, texture2D(shadowMap, offset8).x);\n      block9 = step(shadowNDCPos.z, texture2D(shadowMap, offset9).x);\n      block10 = step(shadowNDCPos.z, texture2D(shadowMap, offset10).x);\n      block11 = step(shadowNDCPos.z, texture2D(shadowMap, offset11).x);\n      block12 = step(shadowNDCPos.z, texture2D(shadowMap, offset12).x);\n      block13 = step(shadowNDCPos.z, texture2D(shadowMap, offset13).x);\n      block14 = step(shadowNDCPos.z, texture2D(shadowMap, offset14).x);\n      block15 = step(shadowNDCPos.z, texture2D(shadowMap, offset15).x);\n      block16 = step(shadowNDCPos.z, texture2D(shadowMap, offset16).x);\n      block17 = step(shadowNDCPos.z, texture2D(shadowMap, offset17).x);\n      block18 = step(shadowNDCPos.z, texture2D(shadowMap, offset18).x);\n      block19 = step(shadowNDCPos.z, texture2D(shadowMap, offset19).x);\n      block20 = step(shadowNDCPos.z, texture2D(shadowMap, offset20).x);\n      block21 = step(shadowNDCPos.z, texture2D(shadowMap, offset21).x);\n      block22 = step(shadowNDCPos.z, texture2D(shadowMap, offset22).x);\n      block23 = step(shadowNDCPos.z, texture2D(shadowMap, offset23).x);\n      block24 = step(shadowNDCPos.z, texture2D(shadowMap, offset24).x);\n      block25 = step(shadowNDCPos.z, texture2D(shadowMap, offset25).x);\n    #endif\n    vec2 coef = fract(shadowNDCPos.xy * shadowMapResolution);\n    vec2 v1X1 = mix(vec2(block1, block6), vec2(block2, block7), coef.xx);\n    vec2 v1X2 = mix(vec2(block2, block7), vec2(block3, block8), coef.xx);\n    vec2 v1X3 = mix(vec2(block3, block8), vec2(block4, block9), coef.xx);\n    vec2 v1X4 = mix(vec2(block4, block9), vec2(block5, block10), coef.xx);\n    float v1 = mix(v1X1.x, v1X1.y, coef.y) + mix(v1X2.x, v1X2.y, coef.y) + mix(v1X3.x, v1X3.y, coef.y) + mix(v1X4.x, v1X4.y, coef.y);\n    vec2 v2X1 = mix(vec2(block6, block11), vec2(block7, block12), coef.xx);\n    vec2 v2X2 = mix(vec2(block7, block12), vec2(block8, block13), coef.xx);\n    vec2 v2X3 = mix(vec2(block8, block13), vec2(block9, block14), coef.xx);\n    vec2 v2X4 = mix(vec2(block9, block14), vec2(block10, block15), coef.xx);\n    float v2 = mix(v2X1.x, v2X1.y, coef.y) + mix(v2X2.x, v2X2.y, coef.y) + mix(v2X3.x, v2X3.y, coef.y) + mix(v2X4.x, v2X4.y, coef.y);\n    vec2 v3X1 = mix(vec2(block11, block16), vec2(block12, block17), coef.xx);\n    vec2 v3X2 = mix(vec2(block12, block17), vec2(block13, block18), coef.xx);\n    vec2 v3X3 = mix(vec2(block13, block18), vec2(block14, block19), coef.xx);\n    vec2 v3X4 = mix(vec2(block14, block19), vec2(block15, block20), coef.xx);\n    float v3 = mix(v3X1.x, v3X1.y, coef.y) + mix(v3X2.x, v3X2.y, coef.y) + mix(v3X3.x, v3X3.y, coef.y) + mix(v3X4.x, v3X4.y, coef.y);\n    vec2 v4X1 = mix(vec2(block16, block21), vec2(block17, block22), coef.xx);\n    vec2 v4X2 = mix(vec2(block17, block22), vec2(block18, block23), coef.xx);\n    vec2 v4X3 = mix(vec2(block18, block23), vec2(block19, block24), coef.xx);\n    vec2 v4X4 = mix(vec2(block19, block24), vec2(block20, block25), coef.xx);\n    float v4 = mix(v4X1.x, v4X1.y, coef.y) + mix(v4X2.x, v4X2.y, coef.y) + mix(v4X3.x, v4X3.y, coef.y) + mix(v4X4.x, v4X4.y, coef.y);\n    float fAvg = (v1 + v2 + v3 + v4) * 0.0625;\n    return fAvg;\n  }\n  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n  {\n  \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n  \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n  \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n  \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n  \t\treturn false;\n  \t}\n  \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n  \treturn true;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n  {\n    vec4 newShadowPos = shadowPos;\n    if (normalBias > EPSILON_LOWP)\n    {\n      vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n      if (viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n  {\n  \tvec4 newShadowPos = shadowPos;\n  \tif (normalBias > EPSILON_LOWP)\n  \t{\n  \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n  \t\tif (viewNormal.z < 0.1)\n  \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n  \t}\n  \treturn newShadowPos;\n  }\n  float GetViewSpaceDepthFromNDCDepth_Orthgraphic(float NDCDepth, float projScaleZ, float projBiasZ)\n  {\n  \treturn (NDCDepth - projBiasZ) / projScaleZ;\n  }\n  float GetViewSpaceDepthFromNDCDepth_Perspective(float NDCDepth, float homogenousDividW, float invProjScaleZ, float invProjBiasZ)\n  {\n  \treturn NDCDepth * invProjScaleZ + homogenousDividW * invProjBiasZ;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n  \tvec3 viewSpacePos;\n  \tviewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n  \tviewSpacePos.z = GetViewSpaceDepthFromNDCDepth_Perspective(shadowPos.z, shadowPos.w, cc_shadowInvProjDepthInfo.x, cc_shadowInvProjDepthInfo.y);\n  \tviewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n  \tvec4 clipSpacePos;\n  \tclipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n  \tclipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n  \t#if CC_SHADOWMAP_USE_LINEAR_DEPTH\n  \t\tclipSpacePos.z = GetLinearDepthFromViewSpace(viewSpacePos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n  \t\tclipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n  \t#endif\n  \treturn clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n  {\n  \tfloat coeffA = projScaleZ;\n  \tfloat coeffB = projBiasZ;\n  \tfloat viewSpacePos_z = GetViewSpaceDepthFromNDCDepth_Orthgraphic(shadowPos.z, projScaleZ, projBiasZ);\n  \tviewSpacePos_z += viewspaceDepthBias;\n  \tvec4 result = shadowPos;\n  \tresult.z = viewSpacePos_z * coeffA + coeffB;\n  \treturn result;\n  }\n  vec4 ApplyShadowDepthBias_PerspectiveLinearDepth(vec4 shadowPos, float viewspaceDepthBias, vec3 worldPos)\n  {\n    shadowPos.z = CCGetLinearDepth(worldPos, viewspaceDepthBias) * 2.0 - 1.0;\n    shadowPos.z *= shadowPos.w;\n    return shadowPos;\n  }\n  float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCSpotShadowFactorBase(out vec4 shadowNDCPosWithBias, vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    vec4 pos = vec4(1.0);\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      pos = ApplyShadowDepthBias_PerspectiveLinearDepth(shadowPos, shadowBias.x, worldPos);\n    #else\n      pos = ApplyShadowDepthBias_Perspective(shadowPos, shadowBias.x);\n    #endif\n    float realtimeShadow = 1.0;\n    if (pcf > 2.9) {\n      realtimeShadow = CCGetSpotLightShadowFactorSoft5X(pos, worldPos);\n    }else if (pcf > 1.9) {\n      realtimeShadow = CCGetSpotLightShadowFactorSoft3X(pos, worldPos);\n    }else if (pcf > 0.9) {\n      realtimeShadow = CCGetSpotLightShadowFactorSoft(pos, worldPos);\n    }else {\n      realtimeShadow = CCGetSpotLightShadowFactorHard(pos, worldPos);\n    }\n    shadowNDCPosWithBias = pos;\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  float CCShadowFactorBase(out vec4 shadowNDCPosWithBias, vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n    float realtimeShadow = 1.0;\n    #if CC_DIR_SHADOW_PCF_TYPE == 3\n      realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 2\n      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 1\n      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 0\n      realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n    #endif\n    shadowNDCPosWithBias = pos;\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n    bool CCGetCSMLevelWithTransition(out highp float ratio, vec3 clipPos) {\n      highp float maxRange = 1.0 - cc_csmSplitsInfo.x;\n      highp float minRange = cc_csmSplitsInfo.x;\n      highp float thresholdInvert = 1.0 / cc_csmSplitsInfo.x;\n      ratio = 0.0;\n      if (clipPos.x <= minRange) {\n        ratio = clipPos.x * thresholdInvert;\n        return true;\n      }\n      if (clipPos.x >= maxRange) {\n        ratio = 1.0 - (clipPos.x - maxRange) * thresholdInvert;\n        return true;\n      }\n      if (clipPos.y <= minRange) {\n        ratio = clipPos.y  * thresholdInvert;\n        return true;\n      }\n      if (clipPos.y >= maxRange) {\n        ratio = 1.0 - (clipPos.y - maxRange) * thresholdInvert;\n        return true;\n      }\n      return false;\n    }\n    bool CCHasCSMLevel(int level, vec3 worldPos) {\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      bool hasLevel = false;\n      for (int i = 0; i < 4; i++) {\n        if (i == level) {\n          vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n          if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n              clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n              clipPos.z >= 0.0 && clipPos.z <= 1.0) {\n            hasLevel = true;\n          }\n        }\n      }\n      return hasLevel;\n    }\n    void CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos, int level) {\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && i == level) {\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n        }\n      }\n    }\n    int CCGetCSMLevel(out bool isTransitionArea, out highp float transitionRatio, out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos)\n    {\n      int level = -1;\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && level < 0) {\n          #if CC_CASCADED_LAYERS_TRANSITION\n            isTransitionArea = CCGetCSMLevelWithTransition(transitionRatio, clipPos);\n          #endif\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n          level = i;\n        }\n      }\n      return level;\n    }\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos)\n    {\n      bool isTransitionArea = false;\n      highp float transitionRatio = 0.0;\n      return CCGetCSMLevel(isTransitionArea, transitionRatio, csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n    }\n    float CCCSMFactorBase(out vec4 csmPos, out vec4 csmNDCPosWithBias, vec3 worldPos, vec3 N, vec2 shadowBias)\n    {\n      bool isTransitionArea = false;\n      highp float ratio = 0.0;\n      csmPos = vec4(1.0);\n      vec4 shadowProjDepthInfo, shadowProjInfo;\n      vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n      int level = -1;\n      #if CC_CASCADED_LAYERS_TRANSITION\n        level = CCGetCSMLevel(isTransitionArea, ratio, csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      #else\n        level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      #endif\n      if (level < 0) { return 1.0; }\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n      pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n      csmNDCPosWithBias = pos;\n      float realtimeShadow = 1.0;\n      #if CC_DIR_SHADOW_PCF_TYPE == 3\n        realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 2\n        realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 1\n        realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 0\n        realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n      #endif\n      #if CC_CASCADED_LAYERS_TRANSITION\n        vec4 nextCSMPos = vec4(1.0);\n        vec4 nextShadowProjDepthInfo, nextShadowProjInfo;\n        vec3 nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2;\n        float nextRealtimeShadow = 1.0;\n        CCGetCSMLevel(nextCSMPos, nextShadowProjDepthInfo, nextShadowProjInfo, nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2, worldPos, level + 1);\n        bool hasNextLevel = CCHasCSMLevel(level + 1, worldPos);\n        if (hasNextLevel && isTransitionArea) {\n          vec4 nexPos = ApplyShadowDepthBias_FaceNormal(nextCSMPos, N, shadowBias.y, nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2, nextShadowProjInfo.xy);\n          nexPos = ApplyShadowDepthBias_Orthographic(nexPos, shadowBias.x, nextShadowProjDepthInfo.x, nextShadowProjDepthInfo.y);\n          #if CC_DIR_SHADOW_PCF_TYPE == 3\n            nextRealtimeShadow = CCGetDirLightShadowFactorSoft5X(nexPos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 2\n            nextRealtimeShadow = CCGetDirLightShadowFactorSoft3X(nexPos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 1\n            nextRealtimeShadow = CCGetDirLightShadowFactorSoft(nexPos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 0\n            nextRealtimeShadow = CCGetDirLightShadowFactorHard(nexPos);\n          #endif\n          return mix(mix(nextRealtimeShadow, realtimeShadow, ratio), 1.0, cc_shadowNFLSInfo.w);\n        }\n        return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n      #else\n        return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n      #endif\n    }\n  #else\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      return -1;\n    }\n    float CCCSMFactorBase(out vec4 csmPos, out vec4 csmNDCPosWithBias, vec3 worldPos, vec3 N, vec2 shadowBias) {\n      csmPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n      return CCShadowFactorBase(csmNDCPosWithBias, csmPos, N, shadowBias);\n    }\n  #endif\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias) {\n    vec4 shadowNDCPosWithBias;\n    return CCShadowFactorBase(shadowNDCPosWithBias, shadowPos, N, shadowBias);\n  }\n  float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n    vec4 csmPos, csmNDCPosWithBias;\n    return CCCSMFactorBase(csmPos, csmNDCPosWithBias, worldPos, N, shadowBias);\n  }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    vec4 shadowNDCPosWithBias;\n    return CCSpotShadowFactorBase(shadowNDCPosWithBias, shadowPos, worldPos, shadowBias);\n  }\n#endif\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if CC_USE_LIGHT_PROBE\n  #if CC_USE_LIGHT_PROBE\n  vec3 SHEvaluate(vec3 normal)\n  {\n      vec3 result;\n  #if USE_INSTANCING\n      vec4 normal4 = vec4(normal, 1.0);\n      result.r = dot(v_sh_linear_const_r, normal4);\n      result.g = dot(v_sh_linear_const_g, normal4);\n      result.b = dot(v_sh_linear_const_b, normal4);\n  #else\n      vec4 normal4 = vec4(normal, 1.0);\n      result.r = dot(cc_sh_linear_const_r, normal4);\n      result.g = dot(cc_sh_linear_const_g, normal4);\n      result.b = dot(cc_sh_linear_const_b, normal4);\n      vec4 n14 = normal.xyzz * normal.yzzx;\n      float n5 = normal.x * normal.x - normal.y * normal.y;\n      result.r += dot(cc_sh_quadratic_r, n14);\n      result.g += dot(cc_sh_quadratic_g, n14);\n      result.b += dot(cc_sh_quadratic_b, n14);\n      result += (cc_sh_quadratic_a.rgb * n5);\n  #endif\n    #if CC_USE_HDR\n      result *= cc_exposure.w * cc_exposure.x;\n    #endif\n    return result;\n  }\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  uniform highp vec4 cc_reflectionProbeData1;\n  uniform highp vec4 cc_reflectionProbeData2;\n  vec4 GetTexData(sampler2D dataMap, float dataMapWidth, float x, float uv_y)\n  {\n    return vec4(\n        decode32(texture2D(dataMap, vec2(((x + 0.5)/dataMapWidth), uv_y))),\n        decode32(texture2D(dataMap, vec2(((x + 1.5)/dataMapWidth), uv_y))),\n        decode32(texture2D(dataMap, vec2(((x + 2.5)/dataMapWidth), uv_y))),\n        decode32(texture2D(dataMap, vec2(((x + 3.5)/dataMapWidth), uv_y)))\n      );\n  }\n  void GetPlanarReflectionProbeData(out vec4 plane, out float planarReflectionDepthScale, out float mipCount, float probeId)\n  {\n      #if USE_INSTANCING\n        float uv_y = (probeId + 0.5) / cc_probeInfo.x;\n        float dataMapWidth = 12.0;\n        vec4 texData1 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 0.0, uv_y);\n        vec4 texData2 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 4.0, uv_y);\n        plane.xyz = texData1.xyz;\n        plane.w = texData2.x;\n        planarReflectionDepthScale = texData2.y;\n        mipCount = texData2.z;\n      #else\n        plane = cc_reflectionProbeData1;\n        planarReflectionDepthScale = cc_reflectionProbeData2.x;\n        mipCount = cc_reflectionProbeData2.w;\n      #endif\n  }\n  void GetCubeReflectionProbeData(out vec3 centerPos, out vec3 boxHalfSize, out float mipCount, float probeId)\n  {\n      #if USE_INSTANCING\n        float uv_y = (probeId + 0.5) / cc_probeInfo.x;\n        float dataMapWidth = 12.0;\n        vec4 texData1 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 0.0, uv_y);\n        vec4 texData2 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 4.0, uv_y);\n        vec4 texData3 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 8.0, uv_y);\n        centerPos = texData1.xyz;\n        boxHalfSize = texData2.xyz;\n        mipCount = texData3.x;\n      #else\n        centerPos = cc_reflectionProbeData1.xyz;\n        boxHalfSize = cc_reflectionProbeData2.xyz;\n        mipCount = cc_reflectionProbeData2.w;\n      #endif\n  }\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  uniform sampler2D cc_lightingMap;\n  void SampleAndDecodeLightMapColor(out vec3 lightmapColor, out float dirShadow, out float ao, sampler2D lightingMap, vec2 luv, float lum, vec3 worldNormal)\n  {\n  #if CC_LIGHT_MAP_VERSION > 2\n  #elif CC_LIGHT_MAP_VERSION > 1\n  \tvec4 dataLow = texture2D(lightingMap, luv);\n  \tvec4 dataHigh = texture2D(lightingMap, luv + vec2(0.5, 0.0));\n  \tlightmapColor.xyz = dataLow.xyz + dataHigh.xyz * 0.00392156862745098;\n      lightmapColor.rgb *= lum;\n  \tdirShadow = dataLow.a;\n  \tao = dataHigh.a;\n  #else\n      vec4 lightmap = texture2D(lightingMap, luv);\n      lightmapColor = lightmap.rgb * lum;\n  \tdirShadow = lightmap.a;\n  \tao = 1.0;\n  #endif\n  }\n  void GetLightMapColor(out vec3 lightmapColor, out float dirShadow, out float ao, sampler2D lightingMap, vec2 luv, float lum, vec3 worldNormal)\n  {\n  \tvec4 lightmap;\n  \tvec2 occlusion;\n  \tSampleAndDecodeLightMapColor(lightmapColor, dirShadow, ao, lightingMap, luv, lum, worldNormal);\n  #if CC_USE_HDR\n      lightmapColor.rgb *= cc_exposure.w * cc_exposure.x;\n  #endif\n  }\n#endif\n    uniform vec4 diffuseColor;\n    uniform vec4 specularColor;\n    uniform vec4 emissive;\n    uniform float emissiveScale;\n    uniform float alphaThreshold;\n    uniform float shininessExponent;\n    uniform float glossiness;\n    uniform float metallic;\n    uniform float normalScale;\n    uniform float transparencyFactor;\n    uniform float diffuseFactor;\n    uniform float specularFactor;\n#define DCC_APP_OTHERS 0\n#define DCC_APP_MAX 1\n#define DCC_APP_BLENDER 2\n#define DCC_APP_CINEMA4D 3\n#define DCC_APP_GLTF 4\n#define DCC_APP_MAYA 5\n#if USE_SHININESS_MAP\n  uniform sampler2D shininessExponentMap;\n#endif\n#if USE_SPECULAR_GLOSSINESS_MAP\n  uniform sampler2D specularGlossinessMap;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n #if USE_METALLIC_MAP\n  uniform sampler2D metallicMap;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_EMISSIVESCALE_MAP\n  uniform sampler2D emissiveScaleMap;\n#endif\n#if USE_NORMAL_MAP\n  uniform sampler2D normalMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\nfloat discolor(vec3 srcColor)\n{\n  return dot(GRAY_VECTOR, srcColor);\n}\nfloat convertShininessExponent(float shininessExp)\n{\n  #if DCC_APP_NAME == DCC_APP_BLENDER\n    float glossiness = clamp(sqrt(shininessExp) * 0.1, 0.0, 0.95);\n  #elif DCC_APP_NAME == DCC_APP_MAX || DCC_APP_NAME == DCC_APP_MAYA\n    float l2 = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n    float glossiness = pow(l2, 0.5);\n  #else\n    float glossiness = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n  #endif\n    return glossiness;\n}\nfloat getSpecularIntensityFromRoughness(float roughness)\n{\n  #if DCC_APP_NAME == DCC_APP_BLENDER\n    float specularIntensityMultiplier = mix(1.0, 5.0, roughness);\n  #elif DCC_APP_NAME == DCC_APP_CINEMA4D\n    float specularIntensityMultiplier = mix(1.0, 50.0, roughness);\n  #elif DCC_APP_NAME == DCC_APP_MAX || DCC_APP_NAME == DCC_APP_MAYA\n    float specularIntensityMultiplier = mix(1.0, 20.0, roughness);\n  #else\n    float specularIntensityMultiplier = 1.0;\n  #endif\n    return specularIntensityMultiplier;\n}\nvec4 getSpecularColorAndFactor()\n{\n  vec3 inSpecular = specularColor.rgb * specularFactor;\n  float inFactor = 1.0;\n  #if USE_SPECULAR_GLOSSINESS_MAP\n    inSpecular = SRGBToLinear(texture2D(specularGlossinessMap, TEXTURE_UV).rgb);\n  #endif\n  #if USE_SPECULAR_MAP\n      vec4 specularTex = texture2D(specularMap, TEXTURE_UV);\n      specularTex.rgb = SRGBToLinear(specularTex.rgb);\n      inSpecular = specularTex.rgb;\n  #endif\n  return vec4(inSpecular, inFactor);\n}\n#define CC_SURFACES_FRAGMENT_ALPHA_CLIP_ONLY\n#define CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL\nvec3 SurfacesFragmentModifyWorldNormal()\n{\n  vec3 normal = FSInput_worldNormal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    normal = CalculateNormalFromTangentSpace(nmmp, normalScale, normal.xyz, FSInput_worldTangent, FSInput_mirrorNormal);\n  #endif\n  return normalize(normal);\n}\n#define CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE\nvec3 SurfacesFragmentModifyEmissive()\n{\n  vec3 emissiveColor = emissive.rgb;\n  #if USE_EMISSIVE_MAP\n      emissiveColor.rgb = SRGBToLinear(texture2D(emissiveMap, TEXTURE_UV).rgb);\n  #endif\n  #if USE_EMISSIVESCALE_MAP\n      vec4 emissiveScaleColor = texture2D(emissiveScaleMap, TEXTURE_UV);\n      emissiveScaleColor.rgb = SRGBToLinear(emissiveScaleColor.rgb);\n      emissiveColor.rgb *= emissiveScaleColor.rgb;\n  #else\n      emissiveColor.rgb *= emissiveScale;\n  #endif\n  return emissiveColor;\n}\n#define CC_SURFACES_FRAGMENT_MODIFY_SHARED_DATA\nstruct SurfacesMaterialData\n{\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 worldPos, worldPos_fract_part;\n  #else\n  vec3 worldPos;\n  #endif\n  vec4 baseColor;\n  vec3 worldNormal;\n  vec3 emissive;\n  float specularIntensity;\n  float roughness;\n  float metallic;\n  float ao;\n  vec3 worldTangent, worldBinormal;\n  float ior;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  float anisotropyShape;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec3 inScatteringLightColor;\n  vec4 transmitParams;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec4 transmitDiffuseParams;\n#endif\n#if CC_SURFACES_LIGHTING_TRT\n  vec3 baseColorTRT;\n  float trtIntensity, roughnessTRT;\n  vec3 worldTangentTRT, worldBinormalTRT;\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  vec3 baseColorTT;\n  float ttIntensity, ttScatterCoef;\n#endif\n};\nvoid SurfacesFragmentModifySharedData(inout SurfacesMaterialData surfaceData)\n{\n    vec4 baseColor = vec4(1.0);\n    #if USE_VERTEX_COLOR\n      baseColor.rgb *= SRGBToLinear(FSInput_vertexColor.rgb);\n      baseColor.a *= FSInput_vertexColor.a;\n    #endif\n    #if USE_ALBEDO_MAP\n      vec4 texColor = texture2D(albedoMap, TEXTURE_UV);\n      texColor.rgb = SRGBToLinear(texColor.rgb);\n      texColor.a *= transparencyFactor;\n      baseColor *= texColor;\n    #else\n      baseColor *= diffuseColor;\n    #endif\n    baseColor.rgb *= diffuseFactor;\n    #if USE_TRANSPARENCY_MAP\n      baseColor.a = texture2D(transparencyMap, TEXTURE_UV).TRANSPARENCY_MAP_CHANNEL;\n      #if DCC_APP_NAME == DCC_APP_MAYA\n        baseColor.a = 1.0 - baseColor.a;\n      #endif\n    #endif\n    #if USE_ALPHA_TEST\n      if (baseColor.a < alphaThreshold) discard;\n    #endif\n    vec4 specularColorAndFactor = getSpecularColorAndFactor();\n    float inGlossiness = 0.0, inSpecularIntensity = 1.0;\n    #if HAS_EXPORTED_GLOSSINESS\n      #if USE_SPECULAR_GLOSSINESS_MAP\n        inGlossiness = 1.0 - texture2D(specularGlossinessMap, TEXTURE_UV).a;\n      #else\n        inGlossiness = glossiness;\n      #endif\n    #else\n      #if USE_SHININESS_MAP\n        #if GLOSSINESS_MAP_USE_SINGLE_CHANNEL\n          inGlossiness = 1.0 - texture2D(shininessExponentMap, TEXTURE_UV).GLOSSINESS_MAP_CHANNEL;\n        #else\n          inGlossiness = 1.0 - discolor(texture2D(shininessExponentMap, TEXTURE_UV).rgb);\n        #endif\n      #else\n        inGlossiness = convertShininessExponent(shininessExponent);\n      #endif\n      inSpecularIntensity *= getSpecularIntensityFromRoughness(1.0 - inGlossiness);\n    #endif\n    float inMetallic = 0.0;\n    vec3 albedo = baseColor.rgb;\n    #if HAS_EXPORTED_METALLIC\n      inMetallic = metallic;\n      float spec = specularFactor;\n      #if USE_SPECULAR_MAP\n        spec = dot(GRAY_VECTOR, texture2D(specularMap, TEXTURE_UV).rgb);\n      #endif\n      inSpecularIntensity *= spec * 0.5;\n    #else\n      GetMetallicAlbedoFromDiffuseSpecularWithoutColor(inMetallic, albedo.rgb, baseColor.rgb, specularColorAndFactor.rgb, 0.04);\n      inSpecularIntensity *= inMetallic;\n    #endif\n    baseColor.rgb = albedo;\n    surfaceData.baseColor = baseColor;\n    surfaceData.specularIntensity = inSpecularIntensity * 0.5;\n    surfaceData.roughness = 1.0 - inGlossiness;\n    surfaceData.metallic = inMetallic;\n    surfaceData.ao = 1.0;\n    #if USE_OCCLUSION_MAP\n      surfaceData.ao = texture2D(occlusionMap, OCCLUSION_UV).OCCLUSION_CHANNEL;\n    #endif\n}\nstruct LightingIntermediateData\n{\n  vec3 N, H, L, V;\n  float distToLight, distToLightSqr;\n  float distToCamera, distToCameraSqr;\n  float NoL, NoV, NoH;\n  float NoLSat, NoVSat, NoHSat;\n  float NoVAbsSat;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 worldPosition, worldPosition_fract_part;\n  #else\n  vec3 worldPosition;\n  #endif\n  vec3 T, B;\n  float specularParam;\n  float ior;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  float anisotropyShape;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec4 shadowPosAndDepth;\n  vec4 transmitDiffuseParams;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec4 transmitParams;\n  vec3 inScatteringLightColor;\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  vec3 baseColorTT;\n  float ttIntensity, ttScatterCoef;\n#endif\n};\nvoid CCSurfacesLightingGetIntermediateData_PerPixel(inout LightingIntermediateData data, vec3 worldNormal, vec3 worldPos, vec3 worldTangent, vec3 worldBinormal\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n    , float anisotropyShape\n#endif\n)\n{\n  data.N = worldNormal;\n  data.V = cc_cameraPos.xyz - worldPos;\n  data.distToCameraSqr = dot(data.V, data.V);\n  data.distToCamera = sqrt(data.distToCameraSqr);\n  data.V /= data.distToCamera;\n  data.NoV = dot(data.N, data.V);\n  data.NoVSat = max(data.NoV, 0.0);\n  data.NoVAbsSat = max(abs(data.NoV), 0.0);\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(data.worldPosition, data.worldPosition_fract_part, worldPos);\n  #else\n  data.worldPosition = worldPos;\n  #endif\n  data.T = worldTangent;\n  data.B = worldBinormal;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  data.anisotropyShape = anisotropyShape;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  data.inScatteringLightColor = vec3(0.0);\n  data.transmitParams = vec4(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  data.shadowPosAndDepth = vec4(0.0, 0.0, 999999.0, 999999.0);\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  data.baseColorTT = vec3(0.0);\n  data.ttIntensity = data.ttScatterCoef = 0.0;\n#endif\n}\nvoid CCSurfacesLightingGetIntermediateData_PerLight(inout LightingIntermediateData data, vec3 lightDirWithDist)\n{\n  data.L = lightDirWithDist;\n  data.distToLightSqr = dot(data.L, data.L);\n  data.distToLight = sqrt(data.distToLightSqr);\n  data.L /= data.distToLight;\n  data.H = normalize(data.L + data.V);\n  data.NoL = dot(data.N, data.L);\n  data.NoH = dot(data.N, data.H);\n  data.NoLSat = max(data.NoL, 0.0);\n  data.NoHSat = max(data.NoH, 0.0);\n}\nstruct LightingResult\n{\n  vec3 diffuseColorWithLighting, specularColorWithLighting;\n  vec3 directDiffuse, directSpecular;\n  vec3 environmentDiffuse, environmentSpecular;\n  float shadow, ao;\n  vec3 lightmapColor;\n  vec3 emissive;\n#if CC_SURFACES_LIGHTING_USE_FRESNEL\n  float fresnel;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  vec3 directTransmitSpecular, environmentTransmitSpecular;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec3 directTransmitDiffuse, environmentTransmitDiffuse;\n#endif\n#if CC_SURFACES_LIGHTING_TRT\n  vec3 directTRT, environmentTRT;\n  vec3 specularColorWithLightingTRT;\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  vec3 directTT;\n  vec3 diffuseColorWithLightingTT;\n#endif\n};\nstruct LightingMiscData\n{\n  float lightType;\n  vec3 lightPos, lightDir;\n  vec4 lightColorAndIntensity;\n  vec4 lightSizeRangeAngle;\n};\nfloat D_GGX(float roughness, float NoH)\n{\n    float m = roughness * roughness;\n    float m2 = m * m;\n    float d = (NoH * m2 - NoH) * NoH + 1.0;\n    return m2 / max(EPSILON, d * d);\n}\nfloat D_GGXMobile(float roughness, float NoH) {\n  float OneMinusNoHSqr = 1.0 - NoH * NoH;\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / max(EPSILON, OneMinusNoHSqr + n * n);\n  return p * p;\n}\nvoid GetAnisotropicRoughness(float roughness, float anisotropyShape, out float roughnessX, out float roughnessY)\n{\n    float shapeSign = sign(anisotropyShape);\n    anisotropyShape *= anisotropyShape;\n    float r1 = roughness, r2 = roughness;\n    float lerpedRoughness = mix(1.0, 10.0, anisotropyShape);\n    r2 *= shapeSign < 0.0 ? lerpedRoughness : 1.0;\n    r1 *= shapeSign > 0.0 ? lerpedRoughness : 1.0;\n    roughnessX = saturate(r1);\n    roughnessY = saturate(r2);\n}\nfloat D_GGXAniso(float RoughnessX, float RoughnessY, float NoH, vec3 H, vec3 X, vec3 Y)\n{\n    float mx = max(EPSILON_LOWP, RoughnessX * RoughnessX);\n    float my = max(EPSILON_LOWP, RoughnessY * RoughnessY);\n    float XoH = dot(X, H);\n    float YoH = dot(Y, H);\n    float d = XoH * XoH / (mx * mx) + YoH * YoH / (my * my) + NoH * NoH;\n    return 1.0 / max(EPSILON_LOWP, mx * my * d * d);\n}\nvec3 GetAnisotropicReflect(float roughness, float anisotropyShape, vec3 V, vec3 N, vec3 X, vec3 Y)\n{\n    float shapeSign = sign(anisotropyShape);\n    anisotropyShape *= anisotropyShape;\n    anisotropyShape = min(anisotropyShape, 0.4);\n    anisotropyShape *= smoothstep(0.0, 0.03, roughness);\n    vec3 reflectTarget = shapeSign < 0.0 ? mix(N, -Y, anisotropyShape) :\n                         shapeSign > 0.0 ? mix(N, -X, anisotropyShape) : N;\n    return reflect(-V, reflectTarget);\n}\nvec3 IntegratedGFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return max(vec3(0.0), specular * AB.x + AB.y);\n}\n#define DiffuseCoefficient_EnergyConservation INV_PI\nfloat CalculateFresnelCoefficient(float ior, float NoVSat)\n{\n\tfloat g, c, n, prev, next;\n\tn = ior;\n\tc = ior * NoVSat;\n\tg = sqrt(1.0 + c * c - c);\n\tprev = (g - c) / (g + c);\n\tnext = (c * (g+c) - n*n) / (c * (g-c) + n*n);\n\tprev *= prev;\n\tnext *= next;\n\treturn 0.5 * prev * (1.0 + next);\n}\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n  float factor = distSqr * invSqrAttRadius;\n  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n  return smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\n  float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n  return attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n  float cd = dot(litDir, L);\n  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n  return (attenuation * attenuation);\n}\nfloat CalculateDistanceAttenuation(float distToLightSqr, float lightRadius, float lightRange)\n{\n  float litRadiusSqr = lightRadius * lightRadius;\n  float attRadiusSqrInv = 1.0 / max(lightRange, 0.01);\n  attRadiusSqrInv *= attRadiusSqrInv;\n  float edgeAttenuation = litRadiusSqr / max(litRadiusSqr, distToLightSqr);\n  return GetDistAtt(distToLightSqr, attRadiusSqrInv) * edgeAttenuation;\n}\nfloat CalculateAngleAttenuation(vec3 spotLightDir, vec3 L, float cosAngleOuter)\n{\n  float cosInner = max(dot(spotLightDir, L), 0.01);\n  float litAngleScale = 1.0 / max(0.001, cosInner - cosAngleOuter);\n  float litAngleOffset = -cosAngleOuter * litAngleScale;\n  return GetAngleAtt(L, spotLightDir, litAngleScale, litAngleOffset);\n}\nvec3 CalculateRefractDirection(vec3 N, vec3 V, float NoV, float ior)\n{\n  float NoVAbs = abs(NoV);\n  float sideSign = NoV < 0.0 ? -1.0 : 1.0;\n  N *= sideSign;\n  NoV *= sideSign;\n  float sinB = sqrt(1.0 - NoVAbs*NoVAbs) / ior;\n  vec3 X = normalize(-V + N * NoVAbs);\n  vec3 R = -N + X * sinB;\n  return R;\n}\nvec3 CalculateReflectDirection(vec3 N, vec3 V, float NoV)\n{\n  float sideSign = NoV < 0.0 ? -1.0 : 1.0;\n  N *= sideSign;\n  return reflect(-V, N);\n}\nvec3 CalculatePlanarReflectPositionOnPlane(vec3 N, vec3 V, vec3 worldPos, vec4 plane, vec3 cameraPos, float probeReflectedDepth)\n{\n  float distPixelToPlane = -dot(plane, vec4(worldPos, 1.0));\n  plane.w += distPixelToPlane;\n  float distCameraToPlane = abs(-dot(plane, vec4(cameraPos, 1.0)));\n  vec3 planeN = plane.xyz;\n  vec3 virtualCameraPos = cameraPos - 2.0 * distCameraToPlane * planeN;\n  vec3 bumpedR = normalize(reflect(-V, N));\n  vec3 reflectedPointPos = worldPos + probeReflectedDepth * bumpedR;\n  vec3 virtualCameraToReflectedPoint = normalize(reflectedPointPos - virtualCameraPos);\n  float y = distCameraToPlane / max(EPSILON_LOWP, dot(planeN, virtualCameraToReflectedPoint));\n  return virtualCameraPos + y * virtualCameraToReflectedPoint;\n}\nvec4 CalculateBoxProjectedDirection(vec3 R, vec3 worldPos, vec3 cubeCenterPos, vec3 cubeBoxHalfSize)\n{\n  vec3 W = worldPos - cubeCenterPos;\n  vec3 projectedLength = (sign(R) * cubeBoxHalfSize - W) / (R + vec3(EPSILON));\n  float len = min(min(projectedLength.x, projectedLength.y), projectedLength.z);\n  vec3 P = W + len * R;\n  float weight = len < 0.0 ? 0.0 : 1.0;\n  return vec4(P, weight);\n}\nvec3 CalculateDirectDiffuse(in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n{\n    vec3 irradiance = vec3(lightingData.NoLSat) * lightSourceColorAndIntensity.rgb * lightSourceColorAndIntensity.w;\n    return irradiance * DiffuseCoefficient_EnergyConservation;\n}\nvec3 CalculateDirectSpecular(in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n{\n    vec3 irradiance = vec3(lightingData.NoLSat) * lightSourceColorAndIntensity.rgb * lightSourceColorAndIntensity.w;\n    float roughness = lightingData.specularParam;\n  #if CC_SURFACES_LIGHTING_ANISOTROPIC\n      float rT, rB;\n      GetAnisotropicRoughness(roughness, lightingData.anisotropyShape, rT, rB);\n      float calcSpec = D_GGXAniso(rT, rB, lightingData.NoHSat, lightingData.H, lightingData.T, lightingData.B);\n  #else\n    #if CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n      float calcSpec = (roughness * 0.25 + 0.25) * D_GGXMobile(roughness, lightingData.NoHSat);\n    #else\n      float calcSpec = D_GGX(roughness, lightingData.NoHSat);\n    #endif\n  #endif\n    return irradiance * calcSpec;\n}\n#if CC_SURFACES_LIGHTING_ANISOTROPIC && CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  vec3 EnvAnisotropicReflection(samplerCube tex, vec3 R, float roughness, float mipCount, float anisotropyShape, vec3 V, vec3 N, vec3 T, vec3 B) {\n      R = normalize(R);\n      float integratedBRDF = 0.0;\n      vec3 envSpec = vec3(0.0);\n      const int SAMPLE_STEP_COUNT = CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT;\n      float sampleAngleRange = PI * abs(anisotropyShape);\n      vec3 anisoDirection = anisotropyShape < 0.0 ? T : B;\n      vec3 ROnNormalPlane = normalize(R - anisoDirection * dot(R, anisoDirection));\n      vec3 stepOffset = normalize(ROnNormalPlane - N) * (sampleAngleRange / float(SAMPLE_STEP_COUNT * 2));\n      for (int i = -SAMPLE_STEP_COUNT; i <= SAMPLE_STEP_COUNT; ++i)\n      {\n          float rT, rB;\n          GetAnisotropicRoughness(roughness, anisotropyShape, rT, rB);\n          #if CC_IBL_CONVOLUTED\n            float coef = abs(float(i)) / float(SAMPLE_STEP_COUNT) * float(SAMPLE_STEP_COUNT);\n          #else\n            float coef = pow(abs(float(i)) / float(SAMPLE_STEP_COUNT), 1.3) * float(SAMPLE_STEP_COUNT);\n          #endif\n          vec3 H = normalize(N + stepOffset * sign(float(i)) * coef);\n          vec3 L = reflect(-V, H);\n          float NoHSat = saturate(dot(N, H));\n          float calcSpec = D_GGXAniso(rT, rB, NoHSat, H, T, B);\n          envSpec += calcSpec * EnvReflection(tex, L, roughness, mipCount);\n          integratedBRDF += calcSpec;\n      }\n      envSpec /= integratedBRDF;\n      return envSpec;\n  }\n#endif\nvec3 SampleEnvironmentSpecular(samplerCube tex, in LightingIntermediateData lightingData, float mipCount)\n{\n    vec3 envSpec = vec3(0.0);\n    float roughness = lightingData.specularParam;\n    #if CC_SURFACES_LIGHTING_ANISOTROPIC && !CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n      vec3 R = GetAnisotropicReflect(roughness, lightingData.anisotropyShape, lightingData.V, lightingData.N, lightingData.T, lightingData.B);\n    #else\n      vec3 R = CalculateReflectDirection(lightingData.N, lightingData.V, lightingData.NoV);\n    #endif\n    #if CC_SURFACES_LIGHTING_ANISOTROPIC && CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n      envSpec = EnvAnisotropicReflection(tex, R, roughness, mipCount, lightingData.anisotropyShape, lightingData.V, lightingData.N, lightingData.T, lightingData.B);\n    #else\n      #if CC_SURFACES_USE_REFLECTION_DENOISE && !CC_IBL_CONVOLUTED\n        envSpec = EnvReflectionWithMipFiltering(normalize(R), roughness, mipCount, 0.6);\n      #else\n        envSpec = EnvReflection(tex, R, roughness, mipCount);\n      #endif\n    #endif\n    return envSpec;\n}\nvec3 SampleEnvironmentSpecular(samplerCube tex, in LightingIntermediateData lightingData, float mipCount, vec3 worldPos, vec3 cubeCenterPos, vec3 boxHalfSize)\n{\n    vec3 envSpec = vec3(0.0);\n    float roughness = lightingData.specularParam;\n    #if CC_SURFACES_LIGHTING_ANISOTROPIC && !CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n      vec3 R = GetAnisotropicReflect(roughness, lightingData.anisotropyShape, lightingData.V, lightingData.N, lightingData.T, lightingData.B);\n    #else\n      vec3 R = CalculateReflectDirection(lightingData.N, lightingData.V, lightingData.NoV);\n    #endif\n    vec4 fixedR = CalculateBoxProjectedDirection(R, worldPos, cubeCenterPos, boxHalfSize);\n    R = fixedR.xyz;\n    vec3 envmap = SampleEnvironmentSpecular(cc_environment, lightingData, cc_ambientGround.w).xyz;\n    #if CC_SURFACES_LIGHTING_ANISOTROPIC && CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n      envSpec = EnvAnisotropicReflection(tex, fixedR.xyz, roughness, mipCount, lightingData.anisotropyShape, lightingData.V, lightingData.N, lightingData.T, lightingData.B);\n      envSpec = mix(envmap, envSpec, fixedR.w);\n    #else\n      #if CC_SURFACES_USE_REFLECTION_DENOISE && !CC_IBL_CONVOLUTED\n        envSpec = EnvReflectionWithMipFiltering(normalize(R), roughness, mipCount, 0.6);\n      #else\n        envSpec = mix(envmap, EnvReflection(tex, R, roughness, mipCount), fixedR.w);\n      #endif\n    #endif\n    return envSpec;\n}\nvec3 CalculateEnvironmentDiffuse(in LightingIntermediateData lightingData, float lightIntensity)\n{\n  float fAmb = max(EPSILON, 0.5 - lightingData.N.y * 0.5);\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP && !CC_USE_LIGHT_PROBE\n      vec3 rotationDir = RotationVecFromAxisY(lightingData.N, cc_surfaceTransform.z, cc_surfaceTransform.w);\n      vec4 diffuseMap = textureCube(cc_diffuseMap, rotationDir);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n  #endif\n  ambDiff.rgb *= lightIntensity;\n  #if CC_USE_LIGHT_PROBE\n    ambDiff.rgb += SHEvaluate(lightingData.N);\n  #endif\n  return ambDiff.rgb;\n}\nvec3 CalculateEnvironmentSpecular(in LightingIntermediateData lightingData, float lightIntensity)\n{\n  vec3 envSpec = vec3(0.0);\n#if CC_USE_REFLECTION_PROBE\n    vec3 worldPos;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    worldPos = unpackHighpData(lightingData.worldPosition, lightingData.worldPosition_fract_part);\n    #else\n    worldPos = lightingData.worldPosition;\n    #endif\n  #if CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_CUBE\n    if(FSInput_reflectionProbeId < 0.0){\n        envSpec = SampleEnvironmentSpecular(cc_reflectionProbeCubemap, lightingData, cc_ambientGround.w);\n    }else{\n      vec3 centerPos, boxHalfSize;\n      float mipCount;\n      GetCubeReflectionProbeData(centerPos, boxHalfSize, mipCount, FSInput_reflectionProbeId);\n      envSpec = SampleEnvironmentSpecular(cc_reflectionProbeCubemap, lightingData, mipCount, worldPos, centerPos, boxHalfSize);\n    }\n  #elif CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_PLANAR\n    vec3 R = normalize(CalculateReflectDirection(lightingData.N, lightingData.V, lightingData.NoV));\n    if(FSInput_reflectionProbeId < 0.0){\n        vec2 screenUV = GetPlanarReflectScreenUV(worldPos, cc_matViewProj, cc_cameraPos.w, lightingData.V, R);\n        envSpec = unpackRGBE(fragTextureLod(cc_reflectionProbePlanarMap, screenUV, 1.0)).xyz;\n    }else{\n        vec4 plane;\n        float planarReflectionDepthScale, mipCount;\n        GetPlanarReflectionProbeData(plane, planarReflectionDepthScale, mipCount, FSInput_reflectionProbeId);\n        vec3 worldPosOffset = CalculatePlanarReflectPositionOnPlane(lightingData.N, lightingData.V, worldPos, plane, cc_cameraPos.xyz, planarReflectionDepthScale);\n        vec2 screenUV = GetPlanarReflectScreenUV(worldPosOffset, cc_matViewProj, cc_cameraPos.w, lightingData.V, R);\n        envSpec = unpackRGBE(fragTextureLod(cc_reflectionProbePlanarMap, screenUV, mipCount)).xyz;\n    }\n  #endif\n#elif CC_USE_IBL\n    envSpec = SampleEnvironmentSpecular(cc_environment, lightingData, cc_ambientGround.w);\n#endif\n  return envSpec * lightIntensity;\n}\nbool CCSurfacesLightingEnableShadow(in float NoL)\n{\n  return NoL > 0.0;\n}\nfloat CCSurfacesLightingCalculateDistanceAttenuation(in LightingIntermediateData lightingData, in vec4 lightSizeRangeAngle)\n{\n  return CalculateDistanceAttenuation(lightingData.distToLightSqr, lightSizeRangeAngle.x, lightSizeRangeAngle.y);\n}\nfloat CCSurfacesLightingCalculateAngleAttenuation(in LightingIntermediateData lightingData, in vec4 lightSizeRangeAngle, in vec3 spotLightDir)\n{\n  return CalculateAngleAttenuation(spotLightDir, lightingData.L, lightSizeRangeAngle.z);\n}\nvoid CCSurfacesLightingCalculateDirect(out vec3 lightingDiffuse, out vec3 lightingSpecular, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n{\n#if CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  lightingDiffuse = CalculateDirectDiffuse(lightingData, lightSourceColorAndIntensity);\n#else\n  lightingDiffuse = vec3(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  lightingSpecular = CalculateDirectSpecular(lightingData, lightSourceColorAndIntensity);\n#else\n  lightingSpecular = vec3(0.0);\n#endif\n}\nvoid CCSurfacesLightingCalculateEnvironment(out vec3 lightingDiffuse, out vec3 lightingSpecular, in LightingIntermediateData lightingData, float lightIntensity)\n{\n#if CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  lightingDiffuse = CalculateEnvironmentDiffuse(lightingData, lightIntensity);\n#else\n  lightingDiffuse = vec3(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  lightingSpecular = CalculateEnvironmentSpecular(lightingData, lightIntensity);\n#else\n  lightingSpecular = vec3(0.0);\n#endif\n}\n#if CC_SURFACES_LIGHTING_USE_FRESNEL\n  float CCSurfaceLightingCalculateFresnel(in LightingIntermediateData lightingData)\n  {\n    return CalculateFresnelCoefficient(lightingData.ior, abs(lightingData.NoV));\n  }\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  void CCSurfacesLightingCalculateDirectTransmitSpecular(out vec3 lightingSpecular, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n  {\n    float roughness = lightingData.specularParam;\n    float NoLSat = saturate(dot(lightingData.N, -lightingData.L));\n    vec3 irradiance = NoLSat * lightSourceColorAndIntensity.rgb * lightSourceColorAndIntensity.w;\n    vec3 R = CalculateRefractDirection(lightingData.N, lightingData.V, lightingData.NoV, lightingData.ior);\n    float RoL = dot(lightingData.L, normalize(R));\n    float calcSpec = D_GGX(roughness, saturate(RoL));\n    lightingSpecular = irradiance * calcSpec;\n  }\n  void CCSurfacesLightingCalculateEnvironmentTransmitSpecular(out vec3 lightingSpecular, in LightingIntermediateData lightingData, float lightIntensity)\n  {\n    vec3 envSpec = vec3(0.0);\n    vec3 R = CalculateRefractDirection(lightingData.N, lightingData.V, lightingData.NoV, lightingData.ior);\n    float roughness = lightingData.specularParam;\n  #if CC_USE_REFLECTION_PROBE\n    #if CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_CUBE\n      envSpec = EnvReflection(cc_reflectionProbeCubemap, R, roughness, cc_ambientGround.w);\n    #endif\n  #endif\n  #if CC_USE_IBL && CC_USE_REFLECTION_PROBE != REFLECTION_PROBE_TYPE_CUBE\n    envSpec = EnvReflection(cc_environment, R, roughness, cc_ambientGround.w);\n  #endif\n    lightingSpecular = envSpec * lightIntensity;\n    float distance = lightingData.transmitParams.w, inScatterCoef = lightingData.transmitParams.z;\n    vec2 e = lightingData.transmitParams.xy;\n    vec2 extinction = exp(-e * distance * vec2(1.0, inScatterCoef));\n    vec3 inScattered = (1.0 - extinction.y) * lightingData.inScatteringLightColor.rgb;\n    lightingSpecular = lightingSpecular * extinction.x + inScattered;\n  }\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  void CCSurfacesLightingCalculateDirectTransmitDiffuse(out vec3 transmitDiffuse, in LightingResult lightingResult, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n  {\n    vec3 backIrradiance = vec3(saturate(-lightingData.NoL)) * lightSourceColorAndIntensity.rgb * lightSourceColorAndIntensity.w;\n    vec3 transmitDiffuse = backIrradiance * DiffuseCoefficient_EnergyConservation;\n    lightingData.transmitParams;\n    lightingData.transmitDiffuseParams;\n    transmitDiffuse = vec3(0.0);\n  }\n  void CCSurfacesLightingCalculateEnvironmentTransmitDiffuse(out vec3 transmitDiffuse, in LightingResult lightingResult, in LightingIntermediateData lightingData, float lightIntensity)\n  {\n    lightingData.N *= -1.0;\n    vec3 backIrradiance = CalculateEnvironmentDiffuse(lightingData, lightIntensity);\n    lightingData.transmitParams;\n    lightingData.transmitDiffuseParams;\n    transmitDiffuse = vec3(0.0);\n  }\n#endif\n#if CC_SURFACES_LIGHTING_TRT\n  #ifndef CC_SURFACES_FRAGMENT_MODIFY_TRT_SPECULAR_COLOR\n    vec3 SurfacesLightingGetTRTSpecularColor(float specBRDF, bool isSaturated)\n    {\n      return vec3(specBRDF);\n    }\n  #endif\n  void CCSurfacesLightingCalculateDirectTRT(out vec3 TRTLighting, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n  {\n    vec3 unused;\n    CCSurfacesLightingCalculateDirect(unused, TRTLighting, lightingData, vec4(1.0));\n    float brdf = TRTLighting.x;\n    vec3 Color = SurfacesLightingGetTRTSpecularColor(brdf, true);\n    TRTLighting *= Color * lightSourceColorAndIntensity.w;\n  }\n  void CCSurfacesLightingCalculateEnvironmentTRT(out vec3 TRTLighting, in LightingIntermediateData lightingData, float lightIntensity)\n  {\n    vec3 unused;\n    TRTLighting = CalculateEnvironmentSpecular(lightingData, 1.0);\n    float brdf = length(TRTLighting);\n    vec3 Color = SurfacesLightingGetTRTSpecularColor(brdf, false);\n    TRTLighting *= Color * lightIntensity;\n  }\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  void CCSurfacesLightingCalculateDirectTT(inout LightingResult lightingResult, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n  {\n    lightingResult.diffuseColorWithLightingTT = lightingResult.diffuseColorWithLighting;\n    float w = lightingData.ttIntensity;\n    vec3 scatteredLighting = pow(saturate(lightingData.baseColorTT * w + lightingData.NoLSat) * lightingData.NoLSat, vec3(mix(0.5, 0.5 + lightingData.ttScatterCoef, w)));\n    vec3 ttLighting = scatteredLighting - lightingData.NoLSat;\n    lightingResult.directTT = ttLighting * DiffuseCoefficient_EnergyConservation * lightSourceColorAndIntensity.xyz* lightSourceColorAndIntensity.w;\n  }\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TRANSPARENCY\nvec4 SurfacesFragmentModifyBaseColorAndTransparency()\n{\n    return FSInput_vertexColor;\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_ALPHA_CLIP_ONLY\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL\nvec3 SurfacesFragmentModifyWorldNormal()\n{\n    return normalize(FSInput_worldNormal);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_WORLD_TANGENT_AND_BINORMAL\nvoid SurfacesFragmentModifyWorldTangentAndBinormal(inout vec3 worldTangent, inout vec3 worldBinormal, vec3 worldNormal)\n{\n    vec3 tangent = FSInput_worldTangent;\n#if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 binormal = normalize(CalculateBinormal(worldNormal.xyz, tangent, FSInput_mirrorNormal));\n    tangent = normalize(cross(binormal, worldNormal));\n#else\n    vec3 binormal = vec3(0.0, 0.0, 0.0);\n#endif\n    worldTangent = tangent;\n    worldBinormal = binormal;\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_IOR\nfloat SurfacesFragmentModifyIOR()\n{\n    return 1.0;\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_ANISOTROPY_PARAMS\nvec4 SurfacesFragmentModifyAnisotropyParams(out float isRotation)\n{\n    isRotation = 1.0;\n    return vec4(1.0, 0.0, 0.0, 0.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE\nvec3 SurfacesFragmentModifyEmissive()\n{\n    return vec3(0.0, 0.0, 0.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_PBRPARAMS\nvec4 SurfacesFragmentModifyPBRParams()\n{\n    return vec4(1.0, 0.5, 0.0, 0.5);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TRANSMIT_PARAMS\nvoid SurfacesFragmentModifyTransmitParams(out vec4 transmitParams, out vec3 inScatteringLightColor)\n{\n    transmitParams = vec4(0.0, 0.0, 0.0, 0.0);\n    inScatteringLightColor = vec3(0.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TRANSMIT_DIFFUSE_PARAMS\nvec4 SurfacesFragmentModifyTransmitDiffuseParams()\n{\n    return vec4(1.0, 0.0, 0.0, 0.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TRT_PARAMS\nvec4 SurfacesFragmentModifyTRTParams()\n{\n    return vec4(0.2, 0.0, 0.0, 1.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TRT_COLOR\nvec3 SurfacesFragmentModifyTRTColor()\n{\n    return vec3(1.0, 1.0, 1.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TT_PARAMS\nvec4 SurfacesFragmentModifyTTParams()\n{\n    return vec4(0.0, 0.0, 0.0, 1.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TT_COLOR\nvec3 SurfacesFragmentModifyTTColor(in vec3 baseColor, in vec3 trtColor)\n{\n    return vec3(1.0, 1.0, 1.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_SHARED_DATA\nvoid SurfacesFragmentModifySharedData(inout SurfacesMaterialData surfaceData)\n{\n}\n#endif\nvoid CCSurfacesFragmentGetMaterialData(inout SurfacesMaterialData surfaceData)\n{\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(surfaceData.worldPos, surfaceData.worldPos_fract_part, FSInput_worldPos);\n  #else\n  surfaceData.worldPos = FSInput_worldPos;\n  #endif\n  surfaceData.baseColor = SurfacesFragmentModifyBaseColorAndTransparency();\n  surfaceData.worldNormal = SurfacesFragmentModifyWorldNormal();\n  SurfacesFragmentModifyWorldTangentAndBinormal(surfaceData.worldTangent, surfaceData.worldBinormal, surfaceData.worldNormal);\n  surfaceData.ior = SurfacesFragmentModifyIOR();\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  float isRotation;\n  vec4 anisotropyParams = SurfacesFragmentModifyAnisotropyParams(isRotation);\n  surfaceData.anisotropyShape = anisotropyParams.x;\n  if (isRotation > 0.0) {\n    RotateTangentAndBinormal(surfaceData.worldTangent, surfaceData.worldBinormal, surfaceData.worldNormal, anisotropyParams.y);\n  } else {\n    vec3 anisoDirTS = anisotropyParams.yzw;\n    vec3 tangentWS = anisoDirTS.x * surfaceData.worldTangent + anisoDirTS.y * surfaceData.worldBinormal + anisoDirTS.z * surfaceData.worldNormal;\n    surfaceData.worldTangent = normalize(tangentWS);\n    surfaceData.worldBinormal = cross(surfaceData.worldNormal, tangentWS);\n  }\n#endif\n  surfaceData.emissive = SurfacesFragmentModifyEmissive();\n  vec4 pbr = SurfacesFragmentModifyPBRParams();\n  surfaceData.ao = pbr.x;\n  surfaceData.roughness = pbr.y;\n  surfaceData.metallic = pbr.z;\n  surfaceData.specularIntensity = pbr.w;\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  SurfacesFragmentModifyTransmitParams(surfaceData.transmitParams, surfaceData.inScatteringLightColor);\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  surfaceData.transmitDiffuseParams = SurfacesFragmentModifyTransmitDiffuseParams();\n#endif\n  vec3 baseColorTRT = vec3(0.0);\n#if CC_SURFACES_LIGHTING_TRT\n  vec4 trtParams = SurfacesFragmentModifyTRTParams();\n  surfaceData.roughnessTRT = saturate(surfaceData.roughness + trtParams.x);\n  surfaceData.trtIntensity = trtParams.w;\n  surfaceData.baseColorTRT = baseColorTRT = SurfacesFragmentModifyTRTColor();\n  surfaceData.worldTangentTRT = surfaceData.worldTangent;\n  surfaceData.worldBinormalTRT = surfaceData.worldBinormal;\n  RotateTangentAndBinormal(surfaceData.worldTangentTRT, surfaceData.worldBinormalTRT, surfaceData.worldNormal, trtParams.y * PI);\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  vec4 ttParams = SurfacesFragmentModifyTTParams();\n  surfaceData.ttScatterCoef = ttParams.x;\n  surfaceData.ttIntensity = ttParams.w;\n  surfaceData.baseColorTT = SurfacesFragmentModifyTTColor(surfaceData.baseColor.rgb, baseColorTRT);\n#endif\n  SurfacesFragmentModifySharedData(surfaceData);\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP) {\n      surfaceData.worldNormal = FSInput_worldNormal;\n      surfaceData.worldTangent = FSInput_worldTangent;\n  }\n#endif\n#if CC_USE_DEBUG_VIEW\n  if (!IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO)\n  {\n      surfaceData.baseColor.rgb = vec3(1.0);\n      #if CC_SURFACES_LIGHTING_TRT\n        surfaceData.baseColorTRT.rgb = vec3(1.0);\n      #endif\n      #if CC_SURFACES_LIGHTING_TT\n        surfaceData.baseColorTT.rgb = vec3(1.0);\n      #endif\n  }\n#endif\n}\nvec3 CCSurfacesGetDiffuseColor(in SurfacesMaterialData surfaceData)\n{\n  return surfaceData.baseColor.rgb * (1.0 - surfaceData.metallic);\n}\nvec3 CCSurfacesGetSpecularColor(in SurfacesMaterialData surfaceData)\n{\n  float F0 = surfaceData.specularIntensity * 0.08;\n  return mix(vec3(F0), surfaceData.baseColor.rgb, surfaceData.metallic);\n}\nvoid CCSurfacesLightingInitializeColorWithLighting(inout vec3 diffuseColorWithLighting, inout vec3 specularColorWithLighting, in SurfacesMaterialData surfaceData, in LightingIntermediateData lightingData)\n{\n  diffuseColorWithLighting = CCSurfacesGetDiffuseColor(surfaceData);\n  specularColorWithLighting = IntegratedGFApprox(CCSurfacesGetSpecularColor(surfaceData).xyz, surfaceData.roughness, lightingData.NoVAbsSat);\n}\nvoid CCSurfacesLightingCalculateColorWithLighting(inout vec3 diffuseColorWithLighting, inout vec3 specularColorWithLighting, in SurfacesMaterialData surfaceData, in LightingIntermediateData lightingData)\n{\n}\nvoid CCSurfacesInitializeLightingIntermediateData(inout LightingIntermediateData lightingData, in SurfacesMaterialData surfaceData)\n{\n  vec3 worldPos;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  worldPos = unpackHighpData(surfaceData.worldPos, surfaceData.worldPos_fract_part);\n  #else\n  worldPos = surfaceData.worldPos;\n  #endif\n  CCSurfacesLightingGetIntermediateData_PerPixel(lightingData, surfaceData.worldNormal, worldPos, surfaceData.worldTangent, surfaceData.worldBinormal\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n      , surfaceData.anisotropyShape\n#endif\n  );\n  lightingData.specularParam = surfaceData.roughness;\n  lightingData.ior = surfaceData.ior;\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  lightingData.transmitParams = surfaceData.transmitParams;\n  lightingData.inScatteringLightColor = surfaceData.inScatteringLightColor;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  lightingData.transmitDiffuseParams = surfaceData.transmitDiffuseParams;\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  lightingData.baseColorTT = surfaceData.baseColorTT;\n  lightingData.ttIntensity = surfaceData.ttIntensity;\n  lightingData.ttScatterCoef = surfaceData.ttScatterCoef;\n#endif\n}\nvoid CCSurfacesLightingCalculateIntermediateData_PerLight(inout LightingIntermediateData lightingData, in SurfacesMaterialData surfaceData, vec3 lightDirWithDist)\n{\n  CCSurfacesLightingGetIntermediateData_PerLight(lightingData, lightDirWithDist);\n}\n#if CC_SURFACES_LIGHTING_TRT\nvoid CCSurfacesGetLightingIntermediateDataTRT(inout LightingIntermediateData lightingDataTRT, in LightingIntermediateData lightingData, in SurfacesMaterialData surfaceData)\n{\n  lightingDataTRT = lightingData;\n  lightingDataTRT.specularParam = surfaceData.roughnessTRT;\n  lightingDataTRT.T = surfaceData.worldTangentTRT;\n  lightingDataTRT.B = surfaceData.worldBinormalTRT;\n}\nvoid CCSurfacesGetSurfacesMaterialDataTRT(inout SurfacesMaterialData surfaceDataTRT, in SurfacesMaterialData surfaceData)\n{\n  surfaceDataTRT = surfaceData;\n  surfaceDataTRT.baseColor = vec4(surfaceData.baseColorTRT, 1.0);\n}\n#endif\nvoid CCSurfacesInitializeLightingResult(inout LightingResult lightingResult, in SurfacesMaterialData surfaceData)\n{\n  lightingResult.ao = surfaceData.ao;\n  lightingResult.emissive = surfaceData.emissive;\n}\nvoid CCSurfacesInitializeLightingResult(inout LightingResult lightingResult)\n{\n  lightingResult.directDiffuse = lightingResult.directSpecular = vec3(0.0);\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  lightingResult.directTransmitSpecular = vec3(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  lightingResult.directTransmitDiffuse = vec3(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_TRT\n  lightingResult.directTRT = vec3(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  lightingResult.directTT = vec3(0.0);\n#endif\n}\nvoid CCSurfacesAccumulateLightingResult(inout LightingResult lightingResultAccumulated, in LightingResult lightingResult)\n{\n  lightingResultAccumulated.directDiffuse += lightingResult.directDiffuse * lightingResult.shadow;\n  lightingResultAccumulated.directSpecular += lightingResult.directSpecular * lightingResult.shadow;\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    lightingResultAccumulated.directTransmitSpecular += lightingResult.directTransmitSpecular;\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n    lightingResultAccumulated.directTransmitDiffuse += lightingResult.directTransmitDiffuse;\n  #endif\n  #if CC_SURFACES_LIGHTING_TRT\n    lightingResultAccumulated.directTRT += lightingResult.directTRT * lightingResult.shadow;\n  #endif\n  #if CC_SURFACES_LIGHTING_TT\n    lightingResultAccumulated.directTT += lightingResult.directTT * lightingResult.shadow;\n    lightingResultAccumulated.diffuseColorWithLightingTT = lightingResult.diffuseColorWithLightingTT;\n  #endif\n}\n#if CC_PIPELINE_TYPE == 1\n  vec4 CCSurfacesDeferredOutput0(in SurfacesMaterialData surfaceData)\n  {\n    return surfaceData.baseColor;\n  }\n  vec4 CCSurfacesDeferredOutput1(in SurfacesMaterialData surfaceData)\n  {\n    return vec4(float32x3_to_oct(surfaceData.worldNormal), surfaceData.roughness, surfaceData.metallic);\n  }\n  vec4 CCSurfacesDeferredOutput2(in SurfacesMaterialData surfaceData)\n  {\n    return vec4(surfaceData.emissive, surfaceData.ao);\n  }\n#endif\nvec4 CCSurfacesShading(in SurfacesMaterialData surfaceData, in LightingResult lightingResult)\n{\n  vec4 color = vec4(0.0, 0.0, 0.0, surfaceData.baseColor.a);\n#if CC_FORWARD_ADD\n  color.xyz += lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting\n    + lightingResult.directSpecular * lightingResult.specularColorWithLighting;\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    + lightingResult.directTransmitSpecular * lightingResult.specularColorWithLighting\n  #endif\n  ;\n#else\n  float fresnel = 1.0;\n  #if CC_SURFACES_LIGHTING_USE_FRESNEL\n    fresnel = lightingResult.fresnel;\n  #endif\n  float invFresnel = 1.0 - fresnel;\n  color.xyz +=\n    ( lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting\n    + lightingResult.directSpecular * lightingResult.specularColorWithLighting * fresnel\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    + lightingResult.directTransmitSpecular * lightingResult.specularColorWithLighting * invFresnel\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n    + lightingResult.directTransmitDiffuse\n  #endif\n  #if CC_SURFACES_LIGHTING_TRT\n    + lightingResult.directTRT * lightingResult.specularColorWithLightingTRT * surfaceData.trtIntensity * surfaceData.baseColorTRT\n  #endif\n  #if CC_SURFACES_LIGHTING_TT\n    + lightingResult.directTT * lightingResult.diffuseColorWithLightingTT\n  #endif\n    )\n    * lightingResult.shadow;\n  #if CC_SURFACES_USE_LIGHT_MAP == LIGHT_MAP_TYPE_ALL_IN_ONE\n    color.xyz += lightingResult.lightmapColor * lightingResult.diffuseColorWithLighting * lightingResult.shadow;\n  #elif CC_SURFACES_USE_LIGHT_MAP == LIGHT_MAP_TYPE_INDIRECT_OCCLUSION\n    color.xyz += lightingResult.lightmapColor * lightingResult.diffuseColorWithLighting;\n  #endif\n  color.xyz +=\n    ( lightingResult.environmentDiffuse * lightingResult.diffuseColorWithLighting\n    + lightingResult.environmentSpecular * lightingResult.specularColorWithLighting * fresnel\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    + lightingResult.environmentTransmitSpecular * lightingResult.specularColorWithLighting * invFresnel\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n    + lightingResult.environmentTransmitDiffuse\n  #endif\n  #if CC_SURFACES_LIGHTING_TRT\n    + lightingResult.environmentTRT * lightingResult.specularColorWithLightingTRT * surfaceData.trtIntensity * surfaceData.baseColorTRT\n  #endif\n    )\n    * lightingResult.ao;\n  color.xyz += lightingResult.emissive;\n#endif\n  return color;\n}\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE\nvoid CCSurfacesDebugViewSurfaceData(inout vec4 color, in SurfacesMaterialData surfaceData)\n{\n    vec4 black = vec4(0.0, 0.0, 0.0, 1.0);\n    float scalar;\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(surfaceData.worldNormal * 0.5 + vec3(0.5), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_SURFACES_USE_TANGENT_SPACE\n        color = vec4(surfaceData.worldTangent * 0.5 + vec3(0.5), 1.0);\n      #else\n        color = black;\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_SURFACES_USE_TANGENT_SPACE\n        color = vec4(surfaceData.worldBinormal * 0.5 + vec3(0.5), 1.0);\n      #else\n        color = black;\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSPARENCY)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0))) {\n        scalar = surfaceData.baseColor.a;\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_BASE_COLOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(LinearToSRGB(surfaceData.baseColor.rgb), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(LinearToSRGB(CCSurfacesGetDiffuseColor(surfaceData)), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(LinearToSRGB(CCSurfacesGetSpecularColor(surfaceData)), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_ROUGHNESS)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0))) {\n        scalar = surfaceData.roughness;\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_METALLIC)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0))) {\n        scalar = surfaceData.metallic;\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0))) {\n        scalar = surfaceData.specularIntensity;\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_IOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0))) {\n        scalar = surfaceData.ior - 1.0;\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n}\n#endif\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD && !CC_ENABLE_CLUSTERED_LIGHT_CULLING\n    void CCSurfacesLighting(inout LightingResult lightingResultAccumulated, in SurfacesMaterialData surfaceData, in vec2 shadowBias)\n    {\n      vec3 worldPos;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      worldPos = unpackHighpData(surfaceData.worldPos, surfaceData.worldPos_fract_part);\n      #else\n      worldPos = surfaceData.worldPos;\n      #endif\n      CCSurfacesInitializeLightingResult(lightingResultAccumulated);\n      LightingIntermediateData lightingData;\n      CCSurfacesInitializeLightingIntermediateData(lightingData, surfaceData);\n      LightingResult lightingResult;\n      CCSurfacesLightingInitializeColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n      lightingResultAccumulated.diffuseColorWithLighting = lightingResult.diffuseColorWithLighting;\n      lightingResultAccumulated.specularColorWithLighting = lightingResult.specularColorWithLighting;\n      #if CC_SURFACES_LIGHTING_TRT\n        vec3 diff;\n        SurfacesMaterialData surfaceDataTRT;\n        CCSurfacesGetSurfacesMaterialDataTRT(surfaceDataTRT, surfaceData);\n        CCSurfacesLightingInitializeColorWithLighting(diff, lightingResultAccumulated.specularColorWithLightingTRT, surfaceDataTRT, lightingData);\n      #endif\n      int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n      for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n        if (i >= numLights) break;\n        CCSurfacesLightingCalculateIntermediateData_PerLight(lightingData, surfaceData, cc_lightPos[i].xyz - worldPos);\n        CCSurfacesLightingCalculateColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n        vec3 diffuseLighting, specularLighting;\n        CCSurfacesLightingCalculateDirect(diffuseLighting, specularLighting, lightingData, cc_lightColor[i]);\n        float fresnel = 1.0;\n      #if CC_SURFACES_LIGHTING_USE_FRESNEL\n        fresnel = lightingResult.fresnel = CCSurfaceLightingCalculateFresnel(lightingData);\n      #endif\n        float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          vec4 shadowPos = vec4(0.0), shadowNDCPosWithBias = vec4(0.0);\n          if (CCSurfacesLightingEnableShadow(lightingData.NoL)) {\n            shadowPos = cc_matLightViewProj * vec4(surfaceData.worldPos, 1.0);\n            shadow = CCSpotShadowFactorBase(shadowNDCPosWithBias, shadowPos, worldPos, shadowBias);\n          }\n          #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n            #if CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n              lightingData.shadowPosAndDepth.xy = shadowNDCPosWithBias.xy;\n              lightingData.shadowPosAndDepth.z = shadowPos.z;\n              lightingData.shadowPosAndDepth.w = GetViewSpaceDepthFromNDCDepth_Perspective(SampleShadowMap(shadowNDCPosWithBias.xyz, cc_spotShadowMap), shadowNDCPosWithBias.w, cc_shadowInvProjDepthInfo.x, cc_shadowInvProjDepthInfo.y);\n            #else\n              lightingData.transmitDiffuseParams.zw = vec2(0.0);\n            #endif\n          #endif\n        }\n      #endif\n      #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n        if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW) {\n          shadow = 1.0;\n        }\n      #endif\n        lightingResult.shadow = shadow;\n        float distAtt = CCSurfacesLightingCalculateDistanceAttenuation(lightingData, cc_lightSizeRangeAngle[i]);\n        float angleAtt = 1.0;\n        if (cc_lightPos[i].w > 0.0) {\n          angleAtt = CCSurfacesLightingCalculateAngleAttenuation(lightingData, cc_lightSizeRangeAngle[i], -cc_lightDir[i].xyz);\n        }\n        float multiplier = distAtt * angleAtt;\n        lightingResult.directDiffuse = diffuseLighting * multiplier;\n        lightingResult.directSpecular = specularLighting * multiplier * fresnel;\n        #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n          vec3 transmitSpecularLighting;\n          CCSurfacesLightingCalculateDirectTransmitSpecular(transmitSpecularLighting, lightingData, cc_lightColor[i]);\n          lightingResult.directTransmitSpecular = transmitSpecularLighting * multiplier * (1.0 - fresnel);\n        #endif\n        #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n          lightingResult.directTransmitDiffuse = CCSurfacesLightingCalculateDirectTransmitDiffuse(lightingResult, lightingData, cc_lightColor[i]);\n        #endif\n        #if CC_SURFACES_LIGHTING_TRT\n          LightingIntermediateData lightingDataTRT;\n          CCSurfacesGetLightingIntermediateDataTRT(lightingDataTRT, lightingData, surfaceData);\n          CCSurfacesLightingCalculateDirectTRT(lightingResult.directTRT, lightingDataTRT, cc_lightColor[i]);\n          lightingResult.directTRT *= multiplier * fresnel;\n        #endif\n        #if CC_SURFACES_LIGHTING_TT\n          CCSurfacesLightingCalculateDirectTT(lightingResult, lightingData, cc_lightColor[i]);\n        #endif\n        #ifdef CC_SURFACES_LIGHTING_MODIFY_FINAL_RESULT\n          LightingMiscData miscData;\n          miscData.lightType = cc_lightPos[i].w;\n          miscData.lightPos = cc_lightPos[i].xyz;\n          miscData.lightDir = cc_lightDir[i].xyz;\n          miscData.lightColorAndIntensity = cc_lightColor[i];\n          miscData.lightSizeRangeAngle = cc_lightSizeRangeAngle[i];\n          SurfacesLightingModifyFinalResult(lightingResult, lightingData, surfaceData, miscData);\n        #endif\n        CCSurfacesAccumulateLightingResult(lightingResultAccumulated, lightingResult);\n      }\n    }\n  #else\n    void CCSurfacesLighting(inout LightingResult lightingResult, in SurfacesMaterialData surfaceData, in vec2 shadowBias)\n    {\n      LightingIntermediateData lightingData;\n      CCSurfacesInitializeLightingIntermediateData(lightingData, surfaceData);\n      CCSurfacesInitializeLightingResult(lightingResult, surfaceData);\n      CCSurfacesLightingInitializeColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n      CCSurfacesLightingCalculateIntermediateData_PerLight(lightingData, surfaceData, -cc_mainLitDir.xyz);\n      lightingResult.shadow = 1.0;\n      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n        if (cc_mainLitDir.w > 0.0) {\n          vec4 shadowPos = vec4(0.0), shadowNDCPosWithBias = vec4(0.0);\n          if (CCSurfacesLightingEnableShadow(lightingData.NoL)) {\n            #if CC_DIR_LIGHT_SHADOW_TYPE == 2\n              lightingResult.shadow = CCCSMFactorBase(shadowPos, shadowNDCPosWithBias, surfaceData.worldPos, lightingData.N, shadowBias);\n            #endif\n            #if CC_DIR_LIGHT_SHADOW_TYPE == 1\n              shadowPos = cc_matLightViewProj * vec4(surfaceData.worldPos, 1.0);\n              lightingResult.shadow = CCShadowFactorBase(shadowPos, lightingData.N, shadowBias);\n            #endif\n          }\n          #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n            #if CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n              lightingData.shadowPosAndDepth.xy = shadowNDCPosWithBias.xy;\n              lightingData.shadowPosAndDepth.z = shadowPos.z;\n              lightingData.shadowPosAndDepth.w = GetViewSpaceDepthFromNDCDepth_Orthgraphic(SampleShadowMap(shadowNDCPosWithBias.xyz, cc_shadowMap), cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n            #else\n              lightingData.transmitDiffuseParams.zw = vec2(0.0);\n            #endif\n          #endif\n        }\n      #endif\n      lightingResult.lightmapColor = vec3(0.0);\n      #if CC_SURFACES_USE_LIGHT_MAP && !CC_FORWARD_ADD\n\t\t    float lightmapShadow, lightmapAO;\n        GetLightMapColor(lightingResult.lightmapColor, lightmapShadow, lightmapAO, cc_lightingMap, FSInput_lightMapUV.xy, FSInput_lightMapUV.z, surfaceData.worldNormal);\n        #if CC_SURFACES_USE_LIGHT_MAP == LIGHT_MAP_TYPE_INDIRECT_OCCLUSION\n          lightingResult.shadow *= lightmapShadow;\n          lightingResult.ao *= lightmapAO;\n        #endif\n      #endif\n      lightingResult.directDiffuse = lightingResult.directSpecular = vec3(0.0);\n      #if !CC_DISABLE_DIRECTIONAL_LIGHT && !CC_FORWARD_ADD\n        CCSurfacesLightingCalculateColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n        CCSurfacesLightingCalculateDirect(lightingResult.directDiffuse, lightingResult.directSpecular, lightingData, cc_mainLitColor);\n      #endif\n      CCSurfacesLightingCalculateEnvironment(lightingResult.environmentDiffuse, lightingResult.environmentSpecular, lightingData, cc_ambientSky.w);\n      #if CC_SURFACES_LIGHTING_USE_FRESNEL\n        lightingResult.fresnel = CCSurfaceLightingCalculateFresnel(lightingData);\n      #endif\n      #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n        CCSurfacesLightingCalculateDirectTransmitSpecular(lightingResult.directTransmitSpecular, lightingData, cc_mainLitColor);\n        CCSurfacesLightingCalculateEnvironmentTransmitSpecular(lightingResult.environmentTransmitSpecular, lightingData, cc_ambientSky.w);\n      #endif\n      #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n        CCSurfacesLightingCalculateDirectTransmitDiffuse(lightingResult.directTransmitDiffuse, lightingResult, lightingData, cc_mainLitColor);\n        CCSurfacesLightingCalculateEnvironmentTransmitDiffuse(lightingResult.environmentTransmitDiffuse, lightingResult, lightingData, cc_ambientSky.w);\n      #endif\n      #if CC_SURFACES_LIGHTING_TRT\n        LightingIntermediateData lightingDataTRT;\n        CCSurfacesGetLightingIntermediateDataTRT(lightingDataTRT, lightingData, surfaceData);\n        CCSurfacesLightingCalculateDirectTRT(lightingResult.directTRT, lightingDataTRT, cc_mainLitColor);\n        CCSurfacesLightingCalculateEnvironmentTRT(lightingResult.environmentTRT, lightingDataTRT, cc_ambientSky.w);\n        vec3 diff;\n        SurfacesMaterialData surfaceDataTRT;\n        CCSurfacesGetSurfacesMaterialDataTRT(surfaceDataTRT, surfaceData);\n        CCSurfacesLightingInitializeColorWithLighting(diff, lightingResult.specularColorWithLightingTRT, surfaceDataTRT, lightingDataTRT);\n      #endif\n      #if CC_SURFACES_LIGHTING_TT\n        CCSurfacesLightingCalculateDirectTT(lightingResult, lightingData, cc_mainLitColor);\n      #endif\n      #ifdef CC_SURFACES_LIGHTING_MODIFY_FINAL_RESULT\n        LightingMiscData miscData;\n        miscData.lightType = LIGHT_TYPE_DIRECTIONAL;\n        miscData.lightPos = vec3(0.0);\n        miscData.lightDir = cc_mainLitDir.xyz;\n        miscData.lightColorAndIntensity = cc_mainLitColor;\n        miscData.lightSizeRangeAngle = vec4(0.0, 0.0, 0.0, 0.0);\n        SurfacesLightingModifyFinalResult(lightingResult, lightingData, surfaceData, miscData);\n      #endif\n    }\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING\n    #endif\n  #endif\n#endif\nvec4 CCSurfacesDebugDisplayInvalidNumber(vec4 color)\n{\n  float index = mod(cc_time.x * 10.0, 2.0);\n  vec4 error = index < 1.0 ? vec4(1.0, 0.0, 0.2, 1.0) : vec4(0.0, 1.0, 0.2, 1.0);\n  return (isnans(color.rgb) || isinfs(color.rgb)) ? error : color;\n}\nvec4 CCSurfacesDebugDisplayInvalidInputData(vec4 color, vec3 data)\n{\n  float index = mod(cc_time.x * 10.0, 2.0);\n  vec4 error = index < 1.0 ? vec4(1.0, 0.0, 0.2, 1.0) : vec4(0.0, 1.0, 0.2, 1.0);\n  return (isnans(data) || isinfs(data)) ? error : color;\n}\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE && !CC_FORWARD_ADD\n  void CCSurfacesDebugViewMeshData(inout vec4 color)\n  {\n    vec4 white = vec4(1.0, 1.0, 1.0, 1.0);\n    vec4 black = vec4(0.0, 0.0, 0.0, 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_SURFACES_USE_VERTEX_COLOR\n        color = FSInput_vertexColor;\n      #else\n        color = white;\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(FSInput_worldNormal * 0.5 + vec3(0.5), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_SURFACES_USE_TANGENT_SPACE\n        color = vec4(FSInput_worldTangent * 0.5 + vec3(0.5), 1.0);\n      #else\n        color = black;\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_SURFACES_USE_TANGENT_SPACE\n        float sign = FSInput_mirrorNormal * 0.5 + 0.5;\n        color = vec4(sign, sign, sign, 1.0);\n      #else\n        color = black;\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FACE_SIDE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        float scalar = clamp(FSInput_faceSideSign, 0.0, 1.0);\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_UV0)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(FSInput_texcoord.xy, 0.0, 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_UV1)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n      color = vec4(FSInput_texcoord1.xy, 0.0, 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n        color = vec4(FSInput_lightMapUV.xy, 0.0, 1.0);\n      #else\n        color = vec4(0.0, 0.0, 0.0, 1.0);\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      vec4 clipPos = cc_matProj * cc_matView * vec4(FSInput_worldPos.xyz, 1.0);\n      float depth = clipPos.z / clipPos.w;\n      color = vec4(depth, depth, depth, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      vec4 viewPos = cc_matView * vec4(FSInput_worldPos.xyz, 1.0);\n      float depth = (-viewPos.z - cc_nearFar.x) / cc_nearFar.y;\n      color = vec4(depth, depth, depth, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_WORLD_POS)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n      color = vec4(FSInput_worldPos.xyz, 1.0);\n  }\n#endif\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE\n  bool CCSurfacesDebugViewLightingResult(inout vec4 color, in LightingResult lightingResult)\n  {\n    bool isSRGBColor = false;\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.directSpecular * lightingResult.specularColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting + lightingResult.directSpecular * lightingResult.specularColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.environmentDiffuse * lightingResult.diffuseColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.environmentSpecular * lightingResult.specularColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_ENV_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.environmentDiffuse * lightingResult.diffuseColorWithLighting + lightingResult.environmentSpecular * lightingResult.specularColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_LIGHT_MAP)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.lightmapColor;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_EMISSIVE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.emissive;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_AO)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = vec3(lightingResult.ao);\n        isSRGBColor = false;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_SHADOW)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = vec3(lightingResult.shadow);\n        isSRGBColor = false;\n    }\n    float fresnel = 0.0;\n    vec3 directTransmitSpecular = vec3(0.0), environmentTransmitSpecular = vec3(0.0);\n    vec3 directTransmitDiffuse = vec3(0.0), environmentTransmitDiffuse = vec3(0.0);\n    vec3 diffuseColorWithLightingTT = vec3(0.0), specularColorWithLightingTRT = vec3(0.0);\n    vec3 directTRT = vec3(0.0), environmentTRT = vec3(0.0);\n  #if CC_SURFACES_LIGHTING_USE_FRESNEL\n    fresnel = lightingResult.fresnel;\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    directTransmitSpecular = lightingResult.directTransmitSpecular;\n    environmentTransmitSpecular = lightingResult.environmentTransmitSpecular;\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n    directTransmitDiffuse = lightingResult.directTransmitDiffuse;\n    environmentTransmitDiffuse = lightingResult.environmentTransmitDiffuse;\n  #endif\n  #if CC_SURFACES_LIGHTING_TRT\n    directTRT = lightingResult.directTRT;\n    environmentTRT = lightingResult.environmentTRT;\n    specularColorWithLightingTRT = lightingResult.specularColorWithLightingTRT;\n  #endif\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FRESNEL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = vec3(fresnel);\n        isSRGBColor = false;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = directTransmitSpecular;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = environmentTransmitSpecular;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = directTransmitDiffuse;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = environmentTransmitDiffuse;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = directTransmitSpecular + environmentTransmitSpecular + directTransmitDiffuse + environmentTransmitDiffuse;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRT_DIRECT)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = directTRT * specularColorWithLightingTRT;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = environmentTRT * specularColorWithLightingTRT;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRT_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = (directTRT + environmentTRT) * specularColorWithLightingTRT;\n        isSRGBColor = true;\n    }\n    return isSRGBColor;\n  }\n#endif\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  void CCSurfacesDebugViewCompositeLightingResult(inout LightingResult lightingResult)\n  {\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE)\n      lightingResult.directDiffuse = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR)\n      lightingResult.directSpecular = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE)\n      lightingResult.environmentDiffuse = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR)\n      lightingResult.environmentSpecular = vec3(0.0);\n  #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE)\n      lightingResult.directTransmitDiffuse = lightingResult.environmentTransmitDiffuse = vec3(0.0);\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR)\n      lightingResult.directTransmitSpecular = lightingResult.environmentTransmitSpecular = vec3(0.0);\n  #endif\n  #if CC_SURFACES_LIGHTING_TRT\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRT)\n        lightingResult.directTRT = lightingResult.environmentTRT = vec3(0.0);\n  #endif\n  #if CC_SURFACES_LIGHTING_TT\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT)\n        lightingResult.directTT = vec3(0.0);\n  #endif\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE)\n      lightingResult.emissive = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP)\n      lightingResult.lightmapColor = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW)\n      lightingResult.shadow = 1.0;\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO)\n      lightingResult.ao = 1.0;\n  #if CC_SURFACES_LIGHTING_USE_FRESNEL\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL)\n      lightingResult.fresnel = 1.0;\n  #endif\n  }\n#endif\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main()  {\n  #if CC_DISABLE_STRUCTURE_IN_FRAGMENT_SHADER\n    float NoL = dot(-cc_mainLitDir.xyz, FSInput_worldNormal.xyz);\n    vec4 color = SurfacesFragmentModifyBaseColorAndTransparency();\n  #else\n    SurfacesMaterialData surfaceData;\n    CCSurfacesFragmentGetMaterialData(surfaceData);\n    vec2 shadowBias = vec2(0.0);\n    vec3 colDebugCSMLayer = vec3(1.0);\n    #if CC_RECEIVE_SHADOW\n      shadowBias = FSInput_shadowBias;\n      #if !CC_FORWARD_ADD\n        #if CC_USE_DEBUG_VIEW && CC_SURFACES_ENABLE_DEBUG_VIEW\n          if (IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION)\n          {\n              vec4 csmPos;\n              vec4 shadowProjDepthInfo, shadowProjInfo;\n              vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n              int csmLayer = -1;\n              csmLayer = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, surfaceData.worldPos);\n              bool OutOfRange = csmLayer < 0;\n              if (OutOfRange)\n                  colDebugCSMLayer = vec3(1.0);\n              else if (csmLayer == 0)\n                  colDebugCSMLayer = vec3(1.0, 0.0, 0.0);\n              else if (csmLayer == 1)\n                  colDebugCSMLayer = vec3(0.0, 1.0, 0.0);\n              else if (csmLayer == 2)\n                  colDebugCSMLayer = vec3(0.0, 0.0, 1.0);\n              else if (csmLayer == 3)\n                  colDebugCSMLayer = vec3(0.0, 1.0, 1.0);\n          }\n        #endif\n      #endif\n    #endif\n    #if !CC_FORWARD_ADD\n      float fogFactor = 1.0;\n      #if CC_USE_FOG != 4\n        #if !CC_USE_ACCURATE_FOG\n          fogFactor = FSInput_fogFactor;\n        #else\n          CC_TRANSFER_FOG_BASE(vec4(FSInput_worldPos, 1.0), fogFactor);\n        #endif\n      #endif\n      #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n        if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG) {\n            fogFactor = 1.0;\n        }\n      #endif\n    #endif\n    LightingResult lightingResult;\n    CCSurfacesLighting(lightingResult, surfaceData, shadowBias);\n    #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE && CC_SURFACES_ENABLE_DEBUG_VIEW\n      vec4 debugColor = vec4(0.0, 0.0, 0.0, 1.0);\n      float materialTransparency = CCSurfacesShading(surfaceData, lightingResult).a;\n      #if !CC_FORWARD_ADD\n        CCSurfacesDebugViewMeshData(debugColor);\n        CCSurfacesDebugViewSurfaceData(debugColor, surfaceData);\n        if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FOG)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        {\n          debugColor.rgb = vec3(1.0 - fogFactor);\n        }\n      #endif\n      #if CC_FORWARD_ADD\n        if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)) || ((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)) || ((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n      #endif\n        {\n            if (CCSurfacesDebugViewLightingResult(debugColor, lightingResult))\n            {\n              debugColor.a = materialTransparency;\n              #if CC_USE_HDR\n                if (IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING)\n                    debugColor.rgb = ACESToneMap(debugColor.rgb);\n              #endif\n              if (IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION)\n                  debugColor.rgb = LinearToSRGB(debugColor.rgb);\n            }\n        }\n      if (IS_DEBUG_VIEW_ENABLE_WITH_CAMERA) {\n        gl_FragData[0] = debugColor;\n        return;\n      }\n    #elif CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n      CCSurfacesDebugViewCompositeLightingResult(lightingResult);\n    #endif\n    vec4 color = CCSurfacesShading(surfaceData, lightingResult);\n    #if CC_USE_DEBUG_VIEW && CC_SURFACES_ENABLE_DEBUG_VIEW\n      if (IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION) {\n          color.rgb *= colDebugCSMLayer.rgb;\n      }\n      #if CC_SURFACES_USE_TANGENT_SPACE\n        color = CCSurfacesDebugDisplayInvalidInputData(color, FSInput_worldTangent);\n      #endif\n    #endif\n  #endif\n    #if CC_USE_RGBE_OUTPUT\n      gl_FragData[0] = packRGBE(color.rgb);\n      return;\n    #endif\n    #if CC_USE_HDR\n      #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n        if (IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING)\n      #endif\n        color.rgb = ACESToneMap(color.rgb);\n    #endif\n    #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n      if (IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION)\n    #endif\n    color.rgb = LinearToSRGB(color.rgb);\n    #if !CC_FORWARD_ADD && CC_USE_FOG != 4\n      CC_APPLY_FOG_BASE(color, fogFactor);\n    #endif\n    gl_FragData[0] = CCSurfacesDebugDisplayInvalidNumber(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n    void main () {\n      SurfacesMaterialData surfaceData;\n      CCSurfacesFragmentGetMaterialData(surfaceData);\n      gl_FragData[0] = CCSurfacesDeferredOutput0(surfaceData);\n      gl_FragData[1] = CCSurfacesDeferredOutput1(surfaceData);\n      gl_FragData[2] = CCSurfacesDeferredOutput2(surfaceData);\n    #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE && CC_SURFACES_ENABLE_DEBUG_VIEW\n      vec4 debugColor = vec4(0.0, 0.0, 0.0, 1.0);\n      CCSurfacesDebugViewMeshData(debugColor);\n      CCSurfacesDebugViewSurfaceData(debugColor, surfaceData);\n      if (IS_DEBUG_VIEW_ENABLE_WITH_CAMERA) {\n        gl_FragData[0] = debugColor;\n      }\n    #endif\n    }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_environment","defines":[]},{"name":"cc_diffuseMap","defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]},{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["!USE_INSTANCING"]},{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"CCSH","defines":["CC_USE_LIGHT_PROBE","!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_reflectionProbeCubemap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbePlanarMap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbeDataMap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_lightingMap","defines":["CC_USE_LIGHTMAP","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":101,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":131}},"defines":[{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"USE_TWOSIDE","type":"boolean"},{"name":"USE_REFLECTION_DENOISE","type":"boolean"},{"name":"IS_ANISOTROPY","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"USE_COMPATIBLE_LIGHTING","type":"boolean"},{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean","default":0},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_FORWARD_ADD","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"number","range":[0,3]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_DISABLE_STRUCTURE_IN_FRAGMENT_SHADER","type":"number","range":[0,1]},{"name":"CC_PIPELINE_TYPE","type":"number","range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"CC_USE_IBL","type":"number","range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","range":[0,2]},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"CC_IBL_CONVOLUTED","type":"boolean"},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_DIR_SHADOW_PCF_TYPE","type":"number","range":[0,3]},{"name":"CC_CASCADED_LAYERS_TRANSITION","type":"boolean"},{"name":"CC_USE_HDR","type":"boolean"},{"name":"CC_LIGHT_MAP_VERSION","type":"number","range":[0,3]},{"name":"TEXTURE_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"DCC_APP_NAME","type":"number","range":[0,5]},{"name":"USE_SHININESS_MAP","type":"boolean"},{"name":"GLOSSINESS_MAP_CHANNEL","type":"string","options":["r","g","b","a"]},{"name":"USE_SPECULAR_GLOSSINESS_MAP","type":"boolean"},{"name":"USE_SPECULAR_MAP","type":"boolean"},{"name":"USE_METALLIC_MAP","type":"boolean"},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"USE_TRANSPARENCY_MAP","type":"boolean"},{"name":"TRANSPARENCY_MAP_CHANNEL","type":"string","options":["a","r","g","b"]},{"name":"USE_EMISSIVE_MAP","type":"boolean"},{"name":"USE_EMISSIVESCALE_MAP","type":"boolean"},{"name":"USE_NORMAL_MAP","type":"boolean"},{"name":"NORMAL_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_OCCLUSION_MAP","type":"boolean"},{"name":"OCCLUSION_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"OCCLUSION_CHANNEL","type":"string","options":["r","g","b","a"]},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"HAS_EXPORTED_GLOSSINESS","type":"boolean"},{"name":"GLOSSINESS_MAP_USE_SINGLE_CHANNEL","type":"boolean"},{"name":"HAS_EXPORTED_METALLIC","type":"boolean"},{"name":"CC_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_DIR_LIGHT_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_DISABLE_DIRECTIONAL_LIGHT","type":"boolean"},{"name":"CC_USE_RGBE_OUTPUT","type":"boolean"}]},{"hash":3860472471,"name":"util/dcc/imported-specular-glossiness|shadow-caster-vs|shadow-caster-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScale","type":13,"count":1},{"name":"alphaThreshold","type":13,"count":1},{"name":"shininessExponent","type":13,"count":1},{"name":"glossiness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalScale","type":13,"count":1},{"name":"transparencyFactor","type":13,"count":1},{"name":"diffuseFactor","type":13,"count":1},{"name":"specularFactor","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"shininessExponentMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_SHININESS_MAP"]},{"name":"specularGlossinessMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_SPECULAR_GLOSSINESS_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_SPECULAR_MAP"]},{"name":"metallicMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_MAP"]},{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_ALBEDO_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_TRANSPARENCY_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":7,"defines":["USE_EMISSIVE_MAP"]},{"name":"emissiveScaleMap","type":28,"count":1,"stageFlags":16,"binding":8,"defines":["USE_EMISSIVESCALE_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":9,"defines":["USE_NORMAL_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":10,"defines":["USE_OCCLUSION_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_color","format":44,"location":6,"defines":["CC_SURFACES_USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":7,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":15,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":16,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":17,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":17,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["!USE_INSTANCING"]},{"name":"CCMorph","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_displacementWeights","typename":"vec4","type":16,"count":15,"isArray":true},{"name":"cc_displacementTextureInfo","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointTextureInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointAnimInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_joints","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true}],"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCForwardLight","stageFlags":16,"tags":{"builtin":"local"},"members":[{"name":"cc_lightPos","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true},{"name":"cc_lightColor","typename":"vec4","type":16,"count":0,"isArray":true},{"name":"cc_lightSizeRangeAngle","typename":"vec4","type":16,"count":0,"isArray":true},{"name":"cc_lightDir","typename":"vec4","type":16,"count":0,"isArray":true}],"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"CCSH","stageFlags":16,"tags":{"builtin":"local"},"members":[{"name":"cc_sh_linear_const_r","typename":"vec4","type":16,"count":1},{"name":"cc_sh_linear_const_g","typename":"vec4","type":16,"count":1},{"name":"cc_sh_linear_const_b","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_r","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_g","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_b","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_a","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_LIGHT_PROBE","!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_reflectionProbeCubemap","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbePlanarMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbeDataMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_lightingMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_LIGHTMAP","!CC_FORWARD_ADD"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScale","type":13,"count":1},{"name":"alphaThreshold","type":13,"count":1},{"name":"shininessExponent","type":13,"count":1},{"name":"glossiness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalScale","type":13,"count":1},{"name":"transparencyFactor","type":13,"count":1},{"name":"diffuseFactor","type":13,"count":1},{"name":"specularFactor","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"shininessExponentMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_SHININESS_MAP"]},{"name":"specularGlossinessMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_SPECULAR_GLOSSINESS_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_SPECULAR_MAP"]},{"name":"metallicMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_MAP"]},{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_ALBEDO_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_TRANSPARENCY_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":7,"defines":["USE_EMISSIVE_MAP"]},{"name":"emissiveScaleMap","type":28,"count":1,"stageFlags":16,"binding":8,"defines":["USE_EMISSIVESCALE_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":9,"defines":["USE_NORMAL_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":10,"defines":["USE_OCCLUSION_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCShadow","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matLightView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matLightViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_shadowInvProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowNFLSInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowWHPBInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowLPNNInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowColor","typename":"vec4","type":16,"count":1,"precision":"lowp "},{"name":"cc_planarNDInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCSM","stageFlags":16,"tags":{"builtin":"global"},"members":[{"name":"cc_csmViewDir0","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir1","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir2","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmAtlas","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_matCSMViewProj","typename":"mat4","type":25,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjDepthInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmSplitsInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_environment","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"global"},"defines":[]},{"name":"cc_diffuseMap","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]},{"name":"cc_shadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl1":{"vert":"\nprecision highp float;\n#define CC_SURFACES_USE_TANGENT_SPACE 0\n#define CC_SURFACES_USE_VERTEX_COLOR 0\n#define CC_SURFACES_USE_SECOND_UV 0\n#define CC_SURFACES_USE_LIGHT_MAP 0\n#define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_CLIP_POS\n  #define CC_SURFACES_TRANSFER_CLIP_POS 0\n#endif\n#ifndef CC_SURFACES_USE_LIGHT_MAP\n  #ifdef CC_USE_LIGHTMAP\n    #define CC_SURFACES_USE_LIGHT_MAP CC_USE_LIGHTMAP\n  #else\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_FLIP_UV\n  #define CC_SURFACES_FLIP_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_FRESNEL\n  #define CC_SURFACES_LIGHTING_USE_FRESNEL 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  #define CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  #define CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n  #define CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRT\n  #define CC_SURFACES_LIGHTING_TRT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TT\n  #define CC_SURFACES_LIGHTING_TT 0\n#endif\n#ifndef CC_SURFACES_ENABLE_DEBUG_VIEW\n  #define CC_SURFACES_ENABLE_DEBUG_VIEW 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  #define CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  #define CC_SURFACES_LIGHTING_CALCULATE_SPECULAR 1\n#endif\n#define CC_USE_SURFACE_SHADER 1\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  attribute vec4 a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  attribute vec4 a_color;\n#endif\n#if CC_SURFACES_USE_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n    attribute vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n#endif\nvarying highp vec3 v_worldPos;\nvarying mediump vec4 v_normal;\nvarying vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  varying mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  varying mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  varying mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  varying mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  varying highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  varying highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    varying mediump vec4 v_sh_linear_const_r;\n    varying mediump vec4 v_sh_linear_const_g;\n    varying mediump vec4 v_sh_linear_const_b;\n  #endif\n#endif\n#define VSOutput_worldPos v_worldPos\n#define VSOutput_worldNormal v_normal.xyz\n#define VSOutput_faceSideSign v_normal.w\n#define VSOutput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define VSOutput_vertexColor v_color\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define VSOutput_worldTangent v_tangent.xyz\n  #define VSOutput_mirrorNormal v_tangent.w\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define VSOutput_texcoord1 v_uv1\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define VSOutput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define VSOutput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define VSOutput_reflectionProbeId v_shadowBiasAndProbeId.z\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define VSOutput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define VSOutput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define VSOutput_clipPos v_clipPos\n#endif\nstruct SurfacesStandardVertexIntermediate\n{\n  highp vec4 position;\n  vec3 normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  vec4 tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  vec4 color;\n#endif\n  vec2 texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  vec2 texCoord1;\n#endif\n  highp vec4 clipPos;\n  highp vec3 worldPos;\n  vec4 worldNormal;\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 worldTangent, worldBinormal;\n  #endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  vec4 shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  float fogFactor;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  vec3 lightmapUV;\n#endif\n};\n#if CC_USE_MORPH\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nuniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matLightViewProj;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #if CC_USE_FOG != 4\n  #endif\n#endif\n    uniform vec4 tilingOffset;\n#define CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n  In.texCoord = In.texCoord * tilingOffset.xy + tilingOffset.zw;\n#if CC_SURFACES_USE_SECOND_UV\n  In.texCoord1 = In.texCoord1 * tilingOffset.xy + tilingOffset.zw;\n#endif\n}\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_POS\nvec3 SurfacesVertexModifyLocalPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.position.xyz;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_NORMAL\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_TANGENT\n  #if CC_SURFACES_USE_TANGENT_SPACE\n  #endif\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_SHARED_DATA\nvoid SurfacesVertexModifyLocalSharedData(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_POS\nvec3 SurfacesVertexModifyWorldPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.worldPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_CLIP_POS\nvec4 SurfacesVertexModifyClipPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.clipPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_NORMAL\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_SHARED_DATA\nvoid SurfacesVertexModifySharedData(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\nvoid CCSurfacesVertexInput(out SurfacesStandardVertexIntermediate In)\n{\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  In.tangent = a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  In.color = a_color;\n#endif\n  In.texCoord = a_texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  In.texCoord1 = a_texCoord1;\n#endif\n}\nvoid CCSurfacesVertexOutput(in SurfacesStandardVertexIntermediate In)\n{\n  gl_Position = In.clipPos;\n  VSOutput_worldNormal = In.worldNormal.xyz;\n  VSOutput_faceSideSign = In.worldNormal.w;\n  VSOutput_worldPos = In.worldPos;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  VSOutput_worldTangent = In.worldTangent.xyz;\n  VSOutput_mirrorNormal = In.tangent.w > 0.0 ? 1.0 : -1.0;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  VSOutput_vertexColor = In.color;\n#endif\n  VSOutput_texcoord = In.texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  VSOutput_texcoord1 = In.texCoord1;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  VSOutput_fogFactor = In.fogFactor;\n#endif\n#if CC_RECEIVE_SHADOW\n  VSOutput_shadowBias = In.shadowBiasAndProbeId.xy;\n#endif\n#if CC_USE_REFLECTION_PROBE\n  VSOutput_reflectionProbeId = In.shadowBiasAndProbeId.z;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  VSOutput_lightMapUV = In.lightmapUV;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  VSOutput_localPos = In.position;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  VSOutput_clipPos = In.clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    v_sh_linear_const_r = a_sh_linear_const_r;\n    v_sh_linear_const_g = a_sh_linear_const_g;\n    v_sh_linear_const_b = a_sh_linear_const_b;\n  #endif\n#endif\n}\nvoid CCSurfacesVertexAnimation(inout SurfacesStandardVertexIntermediate In)\n{\nvec4 temp = vec4(0.0);\n#if CC_USE_MORPH\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    applyMorph(In.position, In.normal, In.tangent);\n  #else\n    applyMorph(In.position, In.normal, temp);\n  #endif\n#endif\n#if CC_USE_SKINNING\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    CCSkin(In.position, In.normal, In.tangent);\n  #else\n    CCSkin(In.position, In.normal, temp);\n  #endif\n#endif\n}\nvoid CCSurfacesVertexWorldTransform(inout SurfacesStandardVertexIntermediate In)\n{\n    mat4 matWorld, matWorldIT;\n    CCGetWorldMatrixFull(matWorld, matWorldIT);\n    In.worldPos = (matWorld * In.position).xyz;\n    In.worldNormal.xyz = normalize((matWorldIT * vec4(In.normal.xyz, 0.0)).xyz);\n    #if CC_SURFACES_USE_TANGENT_SPACE\n      In.worldTangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n      In.worldBinormal = cross(In.worldNormal.xyz, In.worldTangent) * In.tangent.w;\n    #endif\n}\nvoid CCSurfacesVertexTransformUV(inout SurfacesStandardVertexIntermediate In)\n{\n  #if CC_SURFACES_FLIP_UV\n    In.texCoord = cc_cameraPos.w > 1.0 ? vec2(In.texCoord.x, 1.0 - In.texCoord.y) : In.texCoord;\n    #if CC_SURFACES_USE_SECOND_UV\n      In.texCoord1 = cc_cameraPos.w > 1.0 ? vec2(In.texCoord1.x, 1.0 - In.texCoord1.y) : In.texCoord1;\n    #endif\n  #endif\n}\nvarying highp vec2 v_clip_depth;\nvoid main()\n{\n  SurfacesStandardVertexIntermediate In;\n  CCSurfacesVertexInput(In);\n  CCSurfacesVertexAnimation(In);\n  In.position.xyz = SurfacesVertexModifyLocalPos(In);\n  SurfacesVertexModifyLocalSharedData(In);\n  CCSurfacesVertexWorldTransform(In);\n  In.worldPos = SurfacesVertexModifyWorldPos(In);\n  In.clipPos = cc_matLightViewProj * vec4(In.worldPos, 1.0);\n  In.clipPos = SurfacesVertexModifyClipPos(In);\n  SurfacesVertexModifyUV(In);\n  SurfacesVertexModifySharedData(In);\n  CCSurfacesVertexTransformUV(In);\n  CCSurfacesVertexOutput(In);\n  v_clip_depth = In.clipPos.zw;\n}","frag":"\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\n#define CC_SURFACES_USE_TANGENT_SPACE 0\n#define CC_SURFACES_USE_VERTEX_COLOR 0\n#define CC_SURFACES_USE_SECOND_UV 0\n#define CC_SURFACES_USE_LIGHT_MAP 0\n#define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_CLIP_POS\n  #define CC_SURFACES_TRANSFER_CLIP_POS 0\n#endif\n#ifndef CC_SURFACES_USE_LIGHT_MAP\n  #ifdef CC_USE_LIGHTMAP\n    #define CC_SURFACES_USE_LIGHT_MAP CC_USE_LIGHTMAP\n  #else\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_FLIP_UV\n  #define CC_SURFACES_FLIP_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_FRESNEL\n  #define CC_SURFACES_LIGHTING_USE_FRESNEL 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  #define CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  #define CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n  #define CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRT\n  #define CC_SURFACES_LIGHTING_TRT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TT\n  #define CC_SURFACES_LIGHTING_TT 0\n#endif\n#ifndef CC_SURFACES_ENABLE_DEBUG_VIEW\n  #define CC_SURFACES_ENABLE_DEBUG_VIEW 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  #define CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  #define CC_SURFACES_LIGHTING_CALCULATE_SPECULAR 1\n#endif\n#define CC_USE_SURFACE_SHADER 1\nvarying highp vec3 v_worldPos;\nvarying mediump vec4 v_normal;\nvarying vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  varying mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  varying mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  varying mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  varying mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  varying highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  varying highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    varying mediump vec4 v_sh_linear_const_r;\n    varying mediump vec4 v_sh_linear_const_g;\n    varying mediump vec4 v_sh_linear_const_b;\n  #endif\n#endif\n#define FSInput_worldPos v_worldPos\n#define FSInput_worldNormal v_normal.xyz\n#define FSInput_faceSideSign v_normal.w\n#define FSInput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define FSInput_vertexColor v_color\n#else\n  #define FSInput_vertexColor vec4(1.0)\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define FSInput_worldTangent v_tangent.xyz\n  #define FSInput_mirrorNormal v_tangent.w\n#else\n  #define FSInput_worldTangent vec3(0.0, 0.0, 0.0)\n  #define FSInput_mirrorNormal 1.0\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define FSInput_texcoord1 v_uv1\n#else\n  #define FSInput_texcoord1 vec2(0.0, 0.0)\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define FSInput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define FSInput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define FSInput_reflectionProbeId v_shadowBiasAndProbeId.z\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define FSInput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define FSInput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define FSInput_clipPos v_clipPos\n#endif\nuniform mediump vec4 cc_debug_view_mode;\nuniform mediump vec4 cc_surfaceTransform;\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_DIRECT CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT CC_SURFACES_DEBUG_VIEW_TRT_DIRECT + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ALL CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_TRT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRT (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD\n    #if CC_PIPELINE_TYPE == 0\n      #define LIGHTS_PER_PASS 1\n    #else\n      #define LIGHTS_PER_PASS 10\n    #endif\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n    #endif\n  #endif\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if !USE_INSTANCING\n    #endif\n#endif\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\nuniform samplerCube cc_environment;\n#if CC_USE_IBL\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  uniform samplerCube cc_reflectionProbeCubemap;\n  uniform sampler2D cc_reflectionProbePlanarMap;\n  uniform sampler2D cc_reflectionProbeDataMap;\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n#endif\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_USE_FOG != 4\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if CC_USE_LIGHT_PROBE\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  uniform sampler2D cc_lightingMap;\n#endif\n    uniform vec4 diffuseColor;\n    uniform vec4 emissive;\n    uniform float alphaThreshold;\n    uniform float metallic;\n    uniform float transparencyFactor;\n#define DCC_APP_OTHERS 0\n#define DCC_APP_MAX 1\n#define DCC_APP_BLENDER 2\n#define DCC_APP_CINEMA4D 3\n#define DCC_APP_GLTF 4\n#define DCC_APP_MAYA 5\n#if USE_SHININESS_MAP\n  uniform sampler2D shininessExponentMap;\n#endif\n#if USE_SPECULAR_GLOSSINESS_MAP\n  uniform sampler2D specularGlossinessMap;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n #if USE_METALLIC_MAP\n  uniform sampler2D metallicMap;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_EMISSIVESCALE_MAP\n  uniform sampler2D emissiveScaleMap;\n#endif\n#if USE_NORMAL_MAP\n  uniform sampler2D normalMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#define CC_SURFACES_FRAGMENT_ALPHA_CLIP_ONLY\nvoid SurfacesFragmentAlphaClipOnly()\n{\n    #if USE_ALPHA_TEST\n      float alpha = diffuseColor.a;\n      #if USE_VERTEX_COLOR\n        alpha *= FSInput_vertexColor.a;\n      #endif\n      #if USE_ALBEDO_MAP\n        alpha *= texture2D(albedoMap, TEXTURE_UV).a * transparencyFactor;\n      #endif\n      #if USE_TRANSPARENCY_MAP\n        alpha = texture2D(transparencyMap, TEXTURE_UV).TRANSPARENCY_MAP_CHANNEL;\n        #if DCC_APP_NAME == DCC_APP_MAYA\n          alpha = 1.0 - alpha;\n        #endif\n      #endif\n      if (alpha < alphaThreshold) discard;\n    #endif\n}\n#define CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL\n#define CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE\n#define CC_SURFACES_FRAGMENT_MODIFY_SHARED_DATA\nstruct SurfacesMaterialData\n{\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 worldPos, worldPos_fract_part;\n  #else\n  vec3 worldPos;\n  #endif\n  vec4 baseColor;\n  vec3 worldNormal;\n  vec3 emissive;\n  float specularIntensity;\n  float roughness;\n  float metallic;\n  float ao;\n  vec3 worldTangent, worldBinormal;\n  float ior;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  float anisotropyShape;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec3 inScatteringLightColor;\n  vec4 transmitParams;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec4 transmitDiffuseParams;\n#endif\n#if CC_SURFACES_LIGHTING_TRT\n  vec3 baseColorTRT;\n  float trtIntensity, roughnessTRT;\n  vec3 worldTangentTRT, worldBinormalTRT;\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  vec3 baseColorTT;\n  float ttIntensity, ttScatterCoef;\n#endif\n};\nvarying highp vec2 v_clip_depth;\nvoid main () {\n  SurfacesFragmentAlphaClipOnly();\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > EPSILON && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(FSInput_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    gl_FragColor = packDepthToRGBA(clipDepth);\n  #else\n    gl_FragColor = vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_environment","defines":[]},{"name":"cc_diffuseMap","defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]},{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["!USE_INSTANCING"]},{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"CCSH","defines":["CC_USE_LIGHT_PROBE","!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_reflectionProbeCubemap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbePlanarMap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbeDataMap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_lightingMap","defines":["CC_USE_LIGHTMAP","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":101,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":131}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean","default":0},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_FORWARD_ADD","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_DISABLE_STRUCTURE_IN_FRAGMENT_SHADER","type":"number","range":[0,1]},{"name":"CC_PIPELINE_TYPE","type":"number","range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"CC_USE_IBL","type":"number","range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","range":[0,2]},{"name":"TEXTURE_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"DCC_APP_NAME","type":"number","range":[0,5]},{"name":"USE_SHININESS_MAP","type":"boolean"},{"name":"GLOSSINESS_MAP_CHANNEL","type":"string","options":["r","g","b","a"]},{"name":"USE_SPECULAR_GLOSSINESS_MAP","type":"boolean"},{"name":"USE_SPECULAR_MAP","type":"boolean"},{"name":"USE_METALLIC_MAP","type":"boolean"},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"USE_TRANSPARENCY_MAP","type":"boolean"},{"name":"TRANSPARENCY_MAP_CHANNEL","type":"string","options":["a","r","g","b"]},{"name":"USE_EMISSIVE_MAP","type":"boolean"},{"name":"USE_EMISSIVESCALE_MAP","type":"boolean"},{"name":"USE_NORMAL_MAP","type":"boolean"},{"name":"NORMAL_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_OCCLUSION_MAP","type":"boolean"},{"name":"OCCLUSION_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"OCCLUSION_CHANNEL","type":"string","options":["r","g","b","a"]},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]}]}],[{"name":"opaque","passes":[{"program":"util/dcc/imported-specular-glossiness|standard-vs|standard-fs","properties":{"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveMap":{"value":"grey","type":28},"emissiveScale":{"type":13,"value":[1]},"emissiveScaleMap":{"value":"grey","type":28},"shininessExponentMap":{"value":"grey","type":28},"shininessExponent":{"type":13,"value":[100]},"specularGlossinessMap":{"value":"grey","type":28},"specularColor":{"linear":true,"type":16,"value":[0,0,0,0]},"specularMap":{"value":"grey","type":28},"specularFactor":{"type":13,"value":[1]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"tilingOffset":{"type":16,"value":[1,1,0,0]},"normalStrength":{"type":13,"value":[1],"handleInfo":["normalScale",0,13]},"normalMap":{"value":"normal","type":28},"glossiness":{"type":13,"value":[0]},"metallic":{"type":13,"value":[0]},"metallicMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"albedoMap":{"type":28,"value":"grey"},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"normalScale":{"type":13,"value":[1]}}},{"phase":"forward-add","propertyIndex":0,"program":"util/dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"util/dcc/imported-specular-glossiness|shadow-caster-vs|shadow-caster-fs","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"albedoMap":{"type":28,"value":"grey"}}}]},{"name":"transparent","passes":[{"program":"util/dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveMap":{"value":"grey","type":28},"emissiveScale":{"type":13,"value":[1]},"emissiveScaleMap":{"value":"grey","type":28},"shininessExponentMap":{"value":"grey","type":28},"shininessExponent":{"type":13,"value":[100]},"specularGlossinessMap":{"value":"grey","type":28},"specularColor":{"linear":true,"type":16,"value":[0,0,0,0]},"specularMap":{"value":"grey","type":28},"specularFactor":{"type":13,"value":[1]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"tilingOffset":{"type":16,"value":[1,1,0,0]},"normalStrength":{"type":13,"value":[1],"handleInfo":["normalScale",0,13]},"normalMap":{"value":"normal","type":28},"glossiness":{"type":13,"value":[0]},"metallic":{"type":13,"value":[0]},"metallicMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"albedoMap":{"type":28,"value":"grey"},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"normalScale":{"type":13,"value":[1]}}},{"phase":"forward-add","propertyIndex":0,"program":"util/dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"util/dcc/imported-specular-glossiness|shadow-caster-vs|shadow-caster-fs","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"albedoMap":{"type":28,"value":"grey"}}}]}]]],0,0,[],[],[]],[[[47,"FX_Star_2",3,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[8,6],[107,63]],[[[19,"New_model_chuizi",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[[{"lineWidth":15},"baseColor",8,[4,4280620827]],[{"baseStep":0.9,"baseFeather":0.3,"shadeStep":0.6,"shadeFeather":-0.3,"shadowCover":0},"mainColor",8,[4,4290822336],"shadeColor1",8,[4,4285624697],"shadeColor2",8,[4,4287006342],"specular",8,[4,4278190080],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,11,0,0]]],0,0,[0,0,0],[8,9,6],[114,27,24]],[[[19,"_aa11猪牛羊\\objzhuM_Pig",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[6],[4]],[[[17,".bin",65787562,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":17760,"length":888,"count":444,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":17760,"count":370,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9815658330917358,-0.12722837924957275,-0.009774049744009972],"maxPosition",8,[1,0.925670325756073,0.440275639295578,0.8859269022941589]]],-1],0,0,[],[],[]],[[[24],[20,"zhalan_02_b",[-2],[12,"f6JaaY2oRcPYbaFzdlYz+9",null,null,null,-1,0]],[23,"zhalan_02_b",1,[[22,-3,[6,"5aYFgI82pSLL8wV8GdmS7H"],[0],[21],1]],[12,"36zZAlem1Y36UN2IqraHHv",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,4,2,0,5,1,3],[0,0],[-1,7],[280,281]],[[[15,"Men10_a"],[18,"Men10_a",[-5,-6,-7],[16,"1e9ratialCZLquo15/R7/1",null,null,-4,0,[-1,-2,-3]],[1,1.03,1,1]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[1,["55+gboV2dXaoT/e1RIJ5LE"]],[1,["afYWuJCeVfJofWrNDAty6k"]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-8,[7,"9ekJsc5PtOlY5FFlsdntOk",1,[[2,"zhanlan_06_a",["_name"],2],[0,["_lpos"],2,[1,-1.86,0,4.13]],[0,["_lrot"],2,[3,0,0,0,1]],[0,["_euler"],2,[1,0,0,0]],[2,1,["_shadowCastingMode"],3],[2,0,["_shadowReceivingMode"],3],[5,["_materials","0"],3,1],[5,["_mesh"],3,2]]],0]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-9,[7,"davd4Bt4NB3blVYs0NtRRA",1,[[2,"zhanlan_06_a-001",["_name"],4],[0,["_lpos"],4,[1,0,0,4.13]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]],[2,1,["_shadowCastingMode"],5],[2,0,["_shadowReceivingMode"],5],[5,["_materials","0"],5,4],[5,["_mesh"],5,5]]],3]],[3,0,{},1,[4,"55+gboV2dXaoT/e1RIJ5LE",null,null,-10,[7,"93jUXOLRpHdLf/e5IlkA9S",1,[[2,"zhanlan_06_a-002",["_name"],6],[0,["_lpos"],6,[1,1.86,0,4.13]],[0,["_lrot"],6,[3,0,0,0,1]],[0,["_euler"],6,[1,0,0,0]],[2,1,["_shadowCastingMode"],7],[2,0,["_shadowReceivingMode"],7],[5,["_materials","0"],7,7],[5,["_mesh"],7,8]]],6]]],0,[0,-1,10,0,-2,9,0,-3,8,0,2,1,0,-1,8,0,-2,9,0,-3,10,0,2,8,0,2,9,0,2,10,0,5,1,10],[0,0,0,0,0,0,0,0,0],[3,1,1,3,1,1,3,1,1],[0,10,38,0,10,38,0,10,38]],[[[17,".bin",2260642337,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":58368,"length":3012,"count":1506,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":58368,"count":1216,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.052916407585144,-0.5305119752883911,-0.08714824914932251],"maxPosition",8,[1,1.033291220664978,0.5094037652015686,0.5402671694755554]]],-1],0,0,[],[],[]]]]
